     0 mov ESP,12800
     3 cpuset 9,12800
     7 mov SS,77503
    10 jmp 90436
derpslot:
    13 db 7012
programslot:
    14 org 128
user_kernel_interface:
thread_entry:
// thread_entry(jmpPos)
   128 enter -0
__1:
   131 rstack EAX,EBP:2
   135 call EAX
   137 mov R0,4
   140 int 40
__0:
   143 leave 
   144 ret 
thread_entry_end:
   145 db 0
   146 org 256
current_thread:
   256 db 0
lastProcess:
   257 db 0
switchToLastProcess:
// switchToLastProcess()
   258 enter -0
__3:
__5:
// if (lastProcess)
   261 cmp 0,#257
   265 jge 280
   268 push #257
   271 mov ECX,1
// switchToProcess(...)
   274 call 282
   277 add ESP,1
__6:
__4:
__2:
   280 leave 
   281 ret 
switchToProcess:
// switchToProcess(proc_h)
   282 enter 3
__8:
lbl_debug1:
   285 rstack EAX,EBP:2
   289 add EAX,6
   292 mov EBX,EAX
   294 sstack EBP:-1,EBX
lbl_debug2:
   298 rstack EAX,EBP:-1
   302 add EAX,1
   305 mov EBX,EAX
   307 sstack EBP:-2,#EBX
lbl_debug3:
   311 rstack EAX,EBP:-2
   315 div EAX,2
   318 mov EBX,EAX
   320 sstack EBP:-3,EBX
lbl_debug4:
// current_thread=1
   324 mov #256,1
lbl_debug5:
   328 rstack EAX,EBP:2
// lastProcess=proc_h
   332 mov #257,EAX
lbl_debug6:
   335 clm 
lbl_debug7:
   336 rstack EAX,EBP:-3
   340 push EAX
   342 rstack EAX,EBP:-2
   346 push EAX
   348 mov ECX,2
// setPageTable(...)
   351 call 37416
   354 add ESP,2
lbl_debug8:
lbl_debug9:
   357 stm 
lbl_debug10:
__7:
   358 leave 
   359 ret 
switchToProcessAndRun:
// switchToProcessAndRun(proc_h)
   360 enter 1
__10:
   363 rstack EAX,EBP:2
   367 push EAX
   369 mov ECX,1
// process_h_get_thread(...)
   372 call 25303
   375 add ESP,1
   378 sstack EBP:-1,EAX
   382 rstack EAX,EBP:2
// switchToProcess arg #1 (float proc_h)
   386 push EAX
   388 mov ECX,1
// switchToProcess(...)
   391 call 282
   394 add ESP,1
   397 rstack EAX,EBP:-1
// thread_entry arg #1 (float jmpPos)
   401 push EAX
   403 mov ECX,1
// thread_entry(...)
   406 call 128
   409 add ESP,1
__9:
   412 leave 
   413 ret 
switchToKernel:
// switchToKernel()
   414 enter -0
__12:
   417 clm 
// current_thread=0
   418 mov #256,0
__11:
   422 leave 
   423 ret 
user_ki_middle:
   424 db 0
   425 org 1280
interruptTable:
  1280 alloc 200
  1480 alloc 128
user_kernel_interface_end:
  1608 db 0
  1609 org 10000
programslot_end:
 10000 db 0
libmarker1:
 10001 db 0
va_start:
 10002 rstack EAX,ESP:2
 10006 sub EAX,DS
 10008 sub EAX,SS
 10010 ret 
va_start_0:
 10011 mov EAX,EBP:1
 10015 ret 
va_next:
 10016 rstack EBX,ESP:2
 10020 inc #EBX
 10022 rstack EAX,#EBX
 10024 ret 
va_get:
 10025 rstack EAX,ESP:2
 10029 rstack EBX,ESP:3
 10033 add EAX,EBX
 10035 inc EAX
 10037 mov EAX,#EAX
 10039 ret 
va_get_0:
 10040 rstack EAX,ESP:2
 10044 add EAX,EBP:2
 10048 rstack EAX,EAX
 10050 ret 
libmarker2:
 10051 db 0
assert:
// assert(n,str)
 10052 enter -0
__14:
__16:
 10055 rstack EAX,EBP:2
 10059 mov EBX,0
 10062 sub EBX,EAX
 10064 fabs EBX,EBX
 10066 fsgn EBX,EBX
 10068 lneg EBX
// if (n==0)
 10070 cmp 0,EBX
 10073 jge 10097
 10076 push 900
 10079 push 10099
 10082 mov ECX,2
// printf(...)
 10085 call 21851
 10088 add ESP,2
 10091 mov ECX,0
// panic(...)
 10094 call 96246
__17:
__15:
__13:
 10097 leave 
 10098 ret 
__18:
 10099 db "%massertion failed: %s
",0
assert_type:
// assert_type(self,t)
 10123 enter -0
__20:
__22:
 10126 rstack EAX,EBP:2
 10130 add EAX,0
 10133 mov EBX,EAX
 10135 rstack EAX,EBP:3
 10139 sub EAX,#EBX
 10141 mov EBX,EAX
 10143 fabs EBX,EBX
 10145 fsgn EBX,EBX
// if (self[0]!=t)
 10147 cmp 0,EBX
 10150 jge 10186
 10153 rstack EAX,EBP:3
 10157 push EAX
 10159 rstack EAX,EBP:2
 10163 push EAX
 10165 push 900
 10168 push 10188
 10171 mov ECX,4
// printf(...)
 10174 call 21851
 10177 add ESP,4
 10180 mov ECX,0
// panic(...)
 10183 call 96246
__23:
__21:
__19:
 10186 leave 
 10187 ret 
__24:
 10188 db "%mtype error: %d is not a %s
",0
curticks:
// curticks()
 10218 enter 1
__26:
 10221 cpuget EAX,29
// T=EAX
 10224 sstack EBP:-1,EAX
 10228 rstack EAX,EBP:-1
 10232 leave 
 10233 ret 
__25:
 10234 leave 
 10235 ret 
curtime:
// curtime()
 10236 enter -0
__28:
 10239 timer EAX
 10241 leave 
 10242 ret 
__27:
 10243 leave 
 10244 ret 
assert_arity:
// assert_arity(ecx_here,num_args)
 10245 enter -0
__30:
__32:
 10248 rstack EAX,EBP:2
 10252 rstack EBX,EBP:3
 10256 sub EBX,EAX
 10258 mov EAX,EBX
 10260 fabs EAX,EAX
 10262 fsgn EAX,EAX
// if (ecx_here!=num_args)
 10264 cmp 0,EAX
 10267 jge 10303
 10270 rstack EAX,EBP:2
 10274 push EAX
 10276 rstack EAX,EBP:3
 10280 push EAX
 10282 push 900
 10285 push 10305
 10288 mov ECX,4
// printf(...)
 10291 call 21851
 10294 add ESP,4
 10297 mov ECX,0
// panic(...)
 10300 call 96246
__33:
__31:
__29:
 10303 leave 
 10304 ret 
__34:
 10305 db "%mArity error: func expects %d args, but got %d
",0
libmarker3:
 10354 db 0
LIBSTRING_CODE:
memcpy:
// memcpy(dest,src,n)
 10355 enter -0
__36:
 10358 rstack ECX,EBP:3
// ESI=src
 10362 mov ESI,ECX
 10364 rstack ECX,EBP:2
// EDI=dest
 10368 mov EDI,ECX
 10370 rstack ECX,EBP:4
// rem=n
 10374 mov EAX,ECX
__38:
// if (rem
 10376 cmp 0,EAX
 10379 jz 10402
 10382 mov EBX,EAX
 10384 min EBX,8192
 10387 mcopy EBX
 10389 mov ECX,EBX
 10391 neg ECX
 10393 mov EDX,EAX
 10395 add EDX,ECX
// rem=rem-count
 10397 mov EAX,EDX
 10399 jmp 10376
__37:
 10402 rstack ECX,EBP:2
 10406 mov EAX,ECX
 10408 leave 
 10409 ret 
__35:
 10410 leave 
 10411 ret 
memchr:
// memchr(s,c,n)
 10412 enter -0
__40:
 10415 rstack ECX,EBP:2
 10419 mov EAX,ECX
 10421 rstack ECX,EBP:4
 10425 mov EBX,ECX
__42:
// if (rem
 10427 cmp 0,EBX
 10430 jz 10462
__44:
 10433 rstack ECX,EBP:3
 10437 sub ECX,#EAX
 10439 mov EDX,ECX
 10441 fabs EDX,EDX
 10443 fsgn EDX,EDX
 10445 lneg EDX
// if (*r==c)
 10447 cmp 0,EDX
 10450 jge 10455
 10453 leave 
 10454 ret 
__45:
__43:
// ++r
 10455 inc EAX
// --rem
 10457 dec EBX
 10459 jmp 10427
__41:
 10462 mov EAX,0
 10465 leave 
 10466 ret 
__39:
 10467 leave 
 10468 ret 
memset:
// memset(ptr,c,n)
 10469 enter -0
__47:
 10472 rstack EDX,EBP:2
 10476 mov EAX,EDX
 10478 rstack EDX,EBP:4
 10482 mov EBX,EDX
 10484 rstack EDX,EBP:3
 10488 mov ECX,EDX
__49:
// if (rem
 10490 cmp 0,EBX
 10493 jz 10507
 10496 mov EDX,EAX
 10498 inc EAX
// *p++=ch
 10500 mov #EDX,ECX
// --rem
 10502 dec EBX
 10504 jmp 10490
__48:
 10507 rstack EDX,EBP:2
 10511 mov EAX,EDX
 10513 leave 
 10514 ret 
__46:
 10515 leave 
 10516 ret 
strcat:
// strcat(src,dest)
 10517 enter -0
__51:
 10520 rstack ECX,EBP:2
// srcptr=src
 10524 mov EAX,ECX
__52:
 10526 inc EAX
 10528 mov ECX,EAX
// if (*++srcptr
 10530 cmp 0,#ECX
 10533 jz 10539
 10536 jmp 10526
__53:
 10539 rstack ECX,EBP:3
// destptr=dest
 10543 mov EBX,ECX
__54:
 10545 mov ECX,EBX
 10547 inc EBX
 10549 mov EDX,EAX
 10551 inc EAX
 10553 mov #EDX,#ECX
 10555 mov ESI,#EDX
// if (*srcptr++=*destptr++
 10557 cmp 0,ESI
 10560 jz 10566
 10563 jmp 10545
__55:
 10566 rstack ECX,EBP:2
 10570 mov EAX,ECX
 10572 leave 
 10573 ret 
__50:
 10574 leave 
 10575 ret 
strncat:
// strncat(src,dest,n)
 10576 enter -0
__57:
 10579 rstack EDX,EBP:2
// srcptr=src
 10583 mov EAX,EDX
// srcptr--
 10585 dec EAX
__58:
 10587 inc EAX
 10589 mov EDX,EAX
// if (*++srcptr
 10591 cmp 0,#EDX
 10594 jz 10600
 10597 jmp 10587
__59:
 10600 rstack EDX,EBP:3
// destptr=dest
 10604 mov EBX,EDX
 10606 rstack EDX,EBP:4
// i=n
 10610 mov ECX,EDX
__61:
 10612 mov EDX,ECX
 10614 dec ECX
// if (i--
 10616 cmp 0,EDX
 10619 jz 10646
__63:
 10622 mov EDX,EBX
 10624 inc EBX
 10626 mov ESI,EAX
 10628 inc EAX
 10630 mov #ESI,#EDX
 10632 mov EDI,#ESI
// if (*srcptr++=*destptr++)
 10634 cmp 0,EDI
 10637 jge 10643
 10640 jmp 10612
__62:
__64:
 10643 jmp 10612
__60:
// *srcptr=0
 10646 mov #EAX,0
 10649 rstack EDX,EBP:2
 10653 mov EAX,EDX
 10655 leave 
 10656 ret 
__56:
 10657 leave 
 10658 ret 
strchr:
// strchr(str,c)
 10659 enter -0
__66:
 10662 rstack ECX,EBP:2
// strptr=str
 10666 mov EAX,ECX
 10668 rstack ECX,EBP:3
// ch=c
 10672 mov EBX,ECX
__68:
// if (*strptr
 10674 cmp 0,#EAX
 10677 jz 10703
__70:
 10680 mov ECX,EBX
 10682 sub ECX,#EAX
 10684 fabs ECX,ECX
 10686 fsgn ECX,ECX
 10688 lneg ECX
// if (*strptr==ch)
 10690 cmp 0,ECX
 10693 jge 10698
 10696 leave 
 10697 ret 
__69:
__71:
// ++strptr
 10698 inc EAX
 10700 jmp 10674
__67:
 10703 mov EAX,0
 10706 leave 
 10707 ret 
__65:
 10708 leave 
 10709 ret 
strrchr:
// strrchr(str,c)
 10710 enter -0
__73:
// findptr=0
 10713 mov ECX,0
 10716 rstack EDX,EBP:2
// strptr=str
 10720 mov EAX,EDX
 10722 rstack EDX,EBP:3
// ch=c
 10726 mov EBX,EDX
__75:
// if (*strptr
 10728 cmp 0,#EAX
 10731 jz 10757
__77:
 10734 mov EDX,EBX
 10736 sub EDX,#EAX
 10738 fabs EDX,EDX
 10740 fsgn EDX,EDX
 10742 lneg EDX
// if (*strptr==ch)
 10744 cmp 0,EDX
 10747 jge 10752
// findptr=strptr
 10750 mov ECX,EAX
__76:
__78:
// ++strptr
 10752 inc EAX
 10754 jmp 10728
__74:
 10757 mov EAX,ECX
 10759 leave 
 10760 ret 
__72:
 10761 leave 
 10762 ret 
strcmp:
// strcmp(src,dest)
 10763 enter -0
__80:
__82:
 10766 rstack ECX,EBP:2
 10770 rstack EDX,EBP:3
 10774 sub EDX,ECX
 10776 mov ECX,EDX
 10778 fabs ECX,ECX
 10780 fsgn ECX,ECX
 10782 lneg ECX
// if (src==dest)
 10784 cmp 0,ECX
 10787 jge 10795
 10790 mov EAX,0
 10793 leave 
 10794 ret 
__83:
__81:
 10795 rstack ECX,EBP:2
// srcptr=src
 10799 mov EAX,ECX
 10801 rstack ECX,EBP:3
// destptr=dest
 10805 mov EBX,ECX
__85:
 10807 mov ECX,#EBX
 10809 sub ECX,#EAX
 10811 fabs ECX,ECX
 10813 fsgn ECX,ECX
 10815 lneg ECX
// if (*srcptr==*destptr
 10817 cmp 0,ECX
 10820 jz 10852
__87:
 10823 mov ECX,0
 10826 sub ECX,#EAX
 10828 fabs ECX,ECX
 10830 fsgn ECX,ECX
 10832 lneg ECX
// if (*srcptr==0)
 10834 cmp 0,ECX
 10837 jge 10845
 10840 mov EAX,0
 10843 leave 
 10844 ret 
__86:
__88:
// ++srcptr
 10845 inc EAX
// ++destptr
 10847 inc EBX
 10849 jmp 10807
__84:
 10852 mov ECX,#EBX
 10854 neg ECX
 10856 mov EDX,#EAX
 10858 add EDX,ECX
 10860 mov EAX,EDX
 10862 leave 
 10863 ret 
__79:
 10864 leave 
 10865 ret 
strncmp:
// strncmp(src,dest,n)
 10866 enter -0
__90:
 10869 rstack EDX,EBP:2
// srcptr=src
 10873 mov EAX,EDX
 10875 rstack EDX,EBP:3
// destptr=dest
 10879 mov EBX,EDX
 10881 rstack EDX,EBP:4
// i=n
 10885 mov ECX,EDX
__92:
 10887 mov EDX,#EBX
 10889 sub EDX,#EAX
 10891 fabs EDX,EDX
 10893 fsgn EDX,EDX
 10895 lneg EDX
 10897 mov ESI,ECX
 10899 and ESI,EDX
// if (i&&(*srcptr==*destptr)
 10901 cmp 0,ESI
 10904 jz 10938
__94:
 10907 mov EDX,0
 10910 sub EDX,#EAX
 10912 fabs EDX,EDX
 10914 fsgn EDX,EDX
 10916 lneg EDX
// if (*srcptr==0)
 10918 cmp 0,EDX
 10921 jge 10929
 10924 mov EAX,0
 10927 leave 
 10928 ret 
__93:
__95:
// ++srcptr
 10929 inc EAX
// ++destptr
 10931 inc EBX
// --i
 10933 dec ECX
 10935 jmp 10887
__91:
__97:
// if (i)
 10938 cmp 0,ECX
 10941 jge 10956
 10944 mov EDX,#EBX
 10946 neg EDX
 10948 mov ESI,#EAX
 10950 add ESI,EDX
 10952 mov EAX,ESI
 10954 leave 
 10955 ret 
__96:
__98:
 10956 mov EAX,0
 10959 leave 
 10960 ret 
__89:
 10961 leave 
 10962 ret 
strcpy:
// strcpy(dest,src)
 10963 enter -0
__100:
 10966 rstack ECX,EBP:2
// destptr=dest
 10970 mov EBX,ECX
 10972 rstack ECX,EBP:3
// srcptr=src
 10976 mov EAX,ECX
__101:
 10978 mov ECX,EAX
 10980 inc EAX
 10982 mov EDX,EBX
 10984 inc EBX
 10986 mov #EDX,#ECX
 10988 mov ESI,#EDX
// if (*destptr++=*srcptr++
 10990 cmp 0,ESI
 10993 jz 10999
 10996 jmp 10978
__102:
 10999 rstack ECX,EBP:2
 11003 mov EAX,ECX
 11005 leave 
 11006 ret 
__99:
 11007 leave 
 11008 ret 
strncpy:
// strncpy(dest,src,n)
 11009 enter -0
__104:
 11012 rstack EDX,EBP:2
// destptr=dest
 11016 mov EBX,EDX
 11018 rstack EDX,EBP:3
// srcptr=src
 11022 mov EAX,EDX
 11024 rstack EDX,EBP:4
// i=n
 11028 mov ECX,EDX
__106:
 11030 mov EDX,ECX
 11032 dec ECX
 11034 mov ESI,0
 11037 sub ESI,EDX
 11039 neg ESI
 11041 fsgn ESI,ESI
 11043 max ESI,0
// if (i-->0
 11046 cmp 0,ESI
 11049 jz 11108
__108:
 11052 mov EDX,EAX
 11054 inc EAX
 11056 mov ESI,EBX
 11058 inc EBX
 11060 mov #ESI,#EDX
 11062 mov EDI,#ESI
// if (*destptr++=*srcptr++)
 11064 cmp 0,EDI
 11067 jge 11073
 11070 jmp 11030
__107:
__109:
__110:
 11073 mov EDX,ECX
 11075 dec ECX
 11077 mov ESI,0
 11080 sub ESI,EDX
 11082 neg ESI
 11084 fsgn ESI,ESI
 11086 max ESI,0
// if (i-->0
 11089 cmp 0,ESI
 11092 jz 11105
 11095 mov EDX,EBX
 11097 inc EBX
// *destptr++=0
 11099 mov #EDX,0
 11102 jmp 11073
__111:
 11105 jmp 11030
__105:
// *destptr=0
 11108 mov #EBX,0
 11111 rstack EDX,EBP:2
 11115 mov EAX,EDX
 11117 leave 
 11118 ret 
__103:
 11119 leave 
 11120 ret 
strlen:
// strlen(str)
 11121 enter -0
__113:
 11124 rstack ECX,EBP:2
// strptr=str
 11128 mov EAX,ECX
// n=0
 11130 mov EBX,0
__114:
 11133 mov ECX,EAX
 11135 inc EAX
// if (*strptr++
 11137 cmp 0,#ECX
 11140 jz 11148
// n++
 11143 inc EBX
 11145 jmp 11133
__115:
 11148 mov EAX,EBX
 11150 leave 
 11151 ret 
__112:
 11152 leave 
 11153 ret 
strspn:
// strspn(str,accept)
 11154 enter -0
__117:
 11157 rstack ECX,EBP:2
 11161 mov EAX,ECX
 11163 rstack ECX,EBP:3
 11167 mov EBX,ECX
__119:
// if (*p
 11169 cmp 0,#EBX
 11172 jz 11206
__121:
 11175 mov ECX,EBX
 11177 inc EBX
 11179 mov EDX,#EAX
 11181 sub EDX,#ECX
 11183 fabs EDX,EDX
 11185 fsgn EDX,EDX
 11187 lneg EDX
// if (*p++==*s)
 11189 cmp 0,EDX
 11192 jge 11203
// ++s
 11195 inc EAX
 11197 rstack ECX,EBP:3
// p=accept
 11201 mov EBX,ECX
__122:
__120:
 11203 jmp 11169
__118:
 11206 rstack ECX,EBP:2
 11210 neg ECX
 11212 mov EDX,ECX
 11214 mov ECX,EAX
 11216 add ECX,EDX
 11218 mov EAX,ECX
 11220 leave 
 11221 ret 
__116:
 11222 leave 
 11223 ret 
strcspn:
// strcspn(str,reject)
 11224 enter -0
__124:
 11227 rstack ECX,EBP:2
// init loop
 11231 mov EAX,ECX
__126:
 11233 cmp 0,#EAX
 11236 jz 11280
 11239 rstack ECX,EBP:3
// init loop
 11243 mov EBX,ECX
__128:
 11245 cmp 0,#EBX
 11248 jz 11275
__130:
 11251 mov ECX,#EAX
 11253 sub ECX,#EBX
 11255 fabs ECX,ECX
 11257 fsgn ECX,ECX
 11259 lneg ECX
// if (*p==*s)
 11261 cmp 0,ECX
 11264 jge 11270
 11267 jmp 11280
__129:
__131:
// loop step
 11270 inc EBX
 11272 jmp 11245
__127:
// loop step
 11275 inc EAX
 11277 jmp 11233
__125:
done:
 11280 rstack ECX,EBP:2
 11284 neg ECX
 11286 mov EDX,ECX
 11288 mov ECX,EAX
 11290 add ECX,EDX
 11292 mov EAX,ECX
 11294 leave 
 11295 ret 
__123:
 11296 leave 
 11297 ret 
strpbrk:
// strpbrk(str,accept)
 11298 enter -0
__133:
 11301 rstack ECX,EBP:2
// init loop
 11305 mov EAX,ECX
__135:
 11307 cmp 0,#EAX
 11310 jz 11353
 11313 rstack ECX,EBP:3
// init loop
 11317 mov EBX,ECX
__137:
 11319 cmp 0,#EBX
 11322 jz 11348
__139:
 11325 mov ECX,#EAX
 11327 sub ECX,#EBX
 11329 fabs ECX,ECX
 11331 fsgn ECX,ECX
 11333 lneg ECX
// if (*p==*s)
 11335 cmp 0,ECX
 11338 jge 11343
 11341 leave 
 11342 ret 
__138:
__140:
// loop step
 11343 inc EBX
 11345 jmp 11319
__136:
// loop step
 11348 inc EAX
 11350 jmp 11307
__134:
 11353 mov EAX,0
 11356 leave 
 11357 ret 
__132:
 11358 leave 
 11359 ret 
strstr:
// strstr(haystack,needle)
 11360 enter -0
__142:
 11363 rstack ECX,EBP:2
 11367 mov EAX,ECX
 11369 rstack ECX,EBP:3
 11373 mov EBX,ECX
__144:
// if (1
 11375 cmp 0,1
 11379 jz 11461
__146:
 11382 mov ECX,#EBX
 11384 lneg ECX
// if (!*p)
 11386 cmp 0,ECX
 11389 jge 11400
 11392 rstack ECX,EBP:2
 11396 mov EAX,ECX
 11398 leave 
 11399 ret 
__147:
__145:
__149:
 11400 mov ECX,#EAX
 11402 sub ECX,#EBX
 11404 fabs ECX,ECX
 11406 fsgn ECX,ECX
 11408 lneg ECX
// if (*p==*s)
 11410 cmp 0,ECX
 11413 jge 11423
// ++p
 11416 inc EBX
// ++s
 11418 inc EAX
 11420 jmp 11458
__151:
__150:
__153:
 11423 rstack ECX,EBP:3
// p=needle
 11427 mov EBX,ECX
__155:
 11429 mov ECX,#EAX
 11431 lneg ECX
// if (!*s)
 11433 cmp 0,ECX
 11436 jge 11444
 11439 mov EAX,0
 11442 leave 
 11443 ret 
__156:
__154:
 11444 rstack ECX,EBP:2
 11448 inc ECX
 11450 mov EDX,ECX
 11452 sstack EBP:2,ECX
// s=++haystack
 11456 mov EAX,EDX
__152:
__148:
 11458 jmp 11375
__143:
__141:
 11461 leave 
 11462 ret 
STACKALLOC_CODE:
memcpy2:
// memcpy2(dest,src,n)
 11463 enter 1
__158:
__160:
 11466 rstack EAX,EBP:2
 11470 rstack EBX,EBP:3
 11474 sub EBX,EAX
 11476 mov EAX,EBX
 11478 fsgn EAX,EAX
 11480 max EAX,0
// if (dest<src)
 11483 cmp 0,EAX
 11486 jge 11559
// init loop
 11489 sstack EBP:-1,0
__163:
 11494 rstack EAX,EBP:-1
 11498 rstack EBX,EBP:4
 11502 sub EBX,EAX
 11504 mov EAX,EBX
 11506 fsgn EAX,EAX
// condition
 11508 max EAX,0
 11511 cmp 0,EAX
 11514 jz 11556
 11517 rstack EAX,EBP:-1
 11521 rstack EBX,EBP:3
 11525 add EBX,EAX
 11527 mov EAX,EBX
 11529 rstack EBX,EBP:-1
 11533 rstack ECX,EBP:2
 11537 add ECX,EBX
 11539 mov EBX,ECX
// dest[I]=src[I]
 11541 mov #EBX,#EAX
 11543 rstack EAX,EBP:-1
// loop step
 11547 inc EAX
 11549 sstack EBP:-1,EAX
 11553 jmp 11494
__162:
 11556 jmp 11633
__164:
__161:
__166:
 11559 rstack EAX,EBP:4
 11563 add EAX,-1
 11566 mov EBX,EAX
// init loop
 11568 sstack EBP:-1,EBX
__168:
 11572 rstack EAX,EBP:-1
 11576 mov EBX,-1
 11579 sub EBX,EAX
 11581 neg EBX
 11583 fsgn EBX,EBX
// condition
 11585 max EBX,0
 11588 cmp 0,EBX
 11591 jz 11633
 11594 rstack EAX,EBP:-1
 11598 rstack EBX,EBP:3
 11602 add EBX,EAX
 11604 mov EAX,EBX
 11606 rstack EBX,EBP:-1
 11610 rstack ECX,EBP:2
 11614 add ECX,EBX
 11616 mov EBX,ECX
// dest[I]=src[I]
 11618 mov #EBX,#EAX
 11620 rstack EAX,EBP:-1
// loop step
 11624 dec EAX
 11626 sstack EBP:-1,EAX
 11630 jmp 11572
__167:
__165:
__159:
__157:
 11633 leave 
 11634 ret 
stack_alloc:
 11635 mov EAX,ESP
 11637 add EAX,2
 11640 rstack EBX,ESP:2
 11644 rstack ECX,ESP:1
 11648 mov EDX,EAX
 11650 add EDX,SS
 11652 sub EDX,EBX
 11654 inc EDX
 11656 sub ESP,EBX
 11658 push ECX
 11660 push EDX
 11662 push EBX
 11664 push 8008135
 11667 push EDX
 11669 call 10469
 11672 add ESP,3
 11675 pop EAX
 11677 ret 
curFrame:
// curFrame()
 11678 enter -0
__170:
 11681 mov ECX,0
// backFrame(...)
 11684 call 11691
 11687 leave 
 11688 ret 
__169:
 11689 leave 
 11690 ret 
backFrame:
// backFrame(curEBP,num_times)
 11691 enter 4
__172:
 11694 sstack EBP:-1,ECX
 11698 sstack EBP:-2,0
 11703 sstack EBP:-3,0
__174:
 11708 rstack EAX,EBP:-1
 11712 mov EBX,0
 11715 sub EBX,EAX
 11717 fabs EBX,EBX
 11719 fsgn EBX,EBX
 11721 lneg EBX
// if (nargs==0)
 11723 cmp 0,EBX
 11726 jge 11738
// cEBP=EBP
 11729 sstack EBP:-2,EBP
// n=2
 11733 sstack EBP:-3,2
__175:
__173:
__177:
 11738 rstack EAX,EBP:-1
 11742 mov EBX,1
 11745 sub EBX,EAX
 11747 fabs EBX,EBX
 11749 fsgn EBX,EBX
 11751 lneg EBX
// if (nargs==1)
 11753 cmp 0,EBX
 11756 jge 11772
 11759 rstack EAX,EBP:2
// cEBP=curEBP
 11763 sstack EBP:-2,EAX
// n=1
 11767 sstack EBP:-3,1
__178:
__176:
__180:
 11772 rstack EAX,EBP:-1
 11776 mov EBX,2
 11779 sub EBX,EAX
 11781 fabs EBX,EBX
 11783 fsgn EBX,EBX
 11785 lneg EBX
// if (nargs==2)
 11787 cmp 0,EBX
 11790 jge 11809
 11793 rstack EAX,EBP:2
// cEBP=curEBP
 11797 sstack EBP:-2,EAX
 11801 rstack EAX,EBP:3
// n=num_times
 11805 sstack EBP:-3,EAX
__181:
__179:
// init loop
 11809 sstack EBP:-4,0
__183:
 11814 rstack EAX,EBP:-4
 11818 rstack EBX,EBP:-3
 11822 sub EBX,EAX
 11824 mov EAX,EBX
 11826 fsgn EAX,EAX
// condition
 11828 max EAX,0
 11831 cmp 0,EAX
 11834 jz 11862
 11837 rstack EAX,EBP:-2
 11841 mov EBX,SS
 11843 add EBX,EAX
// cEBP=*(SS+cEBP)
 11845 sstack EBP:-2,#EBX
 11849 rstack EAX,EBP:-4
// loop step
 11853 inc EAX
 11855 sstack EBP:-4,EAX
 11859 jmp 11814
__182:
 11862 rstack EAX,EBP:-2
 11866 leave 
 11867 ret 
__171:
 11868 leave 
 11869 ret 
stack_jump:
// stack_jump(new_ip,new_ebp,retval)
 11870 enter -0
__185:
 11873 rstack EDX,EBP:4
// EAX=retval
 11877 mov EAX,EDX
 11879 rstack EDX,EBP:2
// ECX=new_ip
 11883 mov ECX,EDX
 11885 rstack EDX,EBP:3
// EBX=new_ebp
 11889 mov EBX,EDX
 11891 mov EBP,EBX
 11893 jmp ECX
__184:
 11895 leave 
 11896 ret 
stack_return:
// stack_return(ptr,size,num_args)
 11897 enter 3
__187:
// backFrame arg #2 (float num_times)
 11900 push 1
// backFrame arg #1 (float curEBP)
 11903 push EBP
 11905 mov ECX,2
// backFrame(...)
 11908 call 11691
 11911 add ESP,2
 11914 sstack EBP:-2,EAX
 11918 rstack EAX,EBP:-2
 11922 add EAX,1
 11925 mov EBX,EAX
 11927 mov EAX,SS
 11929 add EAX,EBX
// prevIP=*(SS+x1+1)
 11931 sstack EBP:-1,#EAX
// backFrame arg #2 (float num_times)
 11935 push 2
// backFrame arg #1 (float curEBP)
 11938 push EBP
 11940 mov ECX,2
// backFrame(...)
 11943 call 11691
 11946 add ESP,2
 11949 sstack EBP:-3,EAX
 11953 rstack EAX,EBP:2
// stack_jump arg #3 (float retval)
 11957 push EAX
 11959 rstack EAX,EBP:-3
// stack_jump arg #2 (float new_ebp)
 11963 push EAX
 11965 rstack EAX,EBP:-1
// stack_jump arg #1 (float new_ip)
 11969 push EAX
 11971 mov ECX,3
// stack_jump(...)
 11974 call 11870
 11977 add ESP,3
__186:
 11980 leave 
 11981 ret 
STACKALLOC_CONSTANTS:
STACKALLOC_VARS:
STACKALLOC_END:
explode:
// explode(str,del)
 11982 enter 7
__189:
 11985 rstack EAX,EBP:2
 11989 sstack EBP:-1,EAX
 11993 rstack EAX,EBP:2
 11997 sstack EBP:-2,EAX
 12001 sstack EBP:-3,0
 12006 sstack EBP:-4,0
 12011 rstack EAX,EBP:3
// strlen arg #1 (char* str)
 12015 push EAX
 12017 mov ECX,1
// strlen(...)
 12020 call 11121
 12023 add ESP,1
 12026 sstack EBP:-5,EAX
 12030 rstack EAX,EBP:2
// strlen arg #1 (char* str)
 12034 push EAX
 12036 mov ECX,1
// strlen(...)
 12039 call 11121
 12042 add ESP,1
 12045 sstack EBP:-6,EAX
 12049 sstack EBP:-7,0
__191:
 12054 rstack EAX,EBP:-7
 12058 lneg EAX
 12060 mov EBX,EAX
// if (!Finish
 12062 cmp 0,EBX
 12065 jz 12226
 12068 rstack EAX,EBP:-4
// Count++
 12072 inc EAX
 12074 sstack EBP:-4,EAX
 12078 rstack EAX,EBP:3
// strstr arg #2 (char* needle)
 12082 push EAX
 12084 rstack EAX,EBP:-1
// strstr arg #1 (char* haystack)
 12088 push EAX
 12090 mov ECX,2
// strstr(...)
 12093 call 11360
 12096 add ESP,2
// End=strstr(Start,del)
 12099 sstack EBP:-2,EAX
__193:
 12103 rstack EAX,EBP:-2
// if (End)
 12107 cmp 0,EAX
 12110 jge 12218
 12113 rstack EAX,EBP:-2
// *End=0
 12117 mov #EAX,0
 12120 rstack EAX,EBP:-1
 12124 rstack EBX,EBP:-3
 12128 mov ECX,77185
 12131 add ECX,EBX
// *(Array+I)=Start
 12133 mov #ECX,EAX
 12135 rstack EAX,EBP:-3
// I++
 12139 inc EAX
 12141 sstack EBP:-3,EAX
 12145 rstack EAX,EBP:-5
 12149 rstack EBX,EBP:-2
 12153 add EBX,EAX
 12155 mov EAX,EBX
// Start=End+lenD
 12157 sstack EBP:-1,EAX
__196:
 12161 rstack EAX,EBP:-1
 12165 rstack EBX,EBP:-6
 12169 rstack ECX,EBP:2
 12173 add ECX,EBX
 12175 mov EBX,ECX
 12177 sub EBX,EAX
 12179 neg EBX
 12181 fsgn EBX,EBX
 12183 max EBX,0
 12186 rstack EAX,EBP:-3
 12190 mov ECX,13
 12193 sub ECX,EAX
 12195 neg ECX
 12197 fsgn ECX,ECX
 12199 max ECX,0
 12202 bor ECX,EBX
// if ((I>13)|(Start>(str+lenS)))
 12204 cmp 0,ECX
 12207 jge 12215
// Finish=1
 12210 sstack EBP:-7,1
__197:
__195:
 12215 jmp 12223
__198:
__194:
__200:
// Finish=1
 12218 sstack EBP:-7,1
__199:
__192:
 12223 jmp 12054
__190:
 12226 rstack EAX,EBP:-1
 12230 rstack EBX,EBP:-3
 12234 add EBX,77185
 12237 mov ECX,EBX
// Array[I]=Start
 12239 mov #ECX,EAX
 12241 rstack EAX,EBP:-3
// I++
 12245 inc EAX
 12247 sstack EBP:-3,EAX
 12251 rstack EAX,EBP:-3
 12255 add EAX,77185
 12258 mov EBX,EAX
// Array[I]=0
 12260 mov #EBX,0
 12263 mov EAX,77185
 12266 leave 
 12267 ret 
__188:
 12268 leave 
 12269 ret 
str2num:
// str2num(str)
 12270 enter 8
__202:
 12273 sstack EBP:-1,0
 12278 sstack EBP:-2,0
 12283 sstack EBP:-3,0
 12288 sstack EBP:-4,0
 12293 sstack EBP:-5,0
 12298 sstack EBP:-6,0
 12303 sstack EBP:-7,10
 12308 rstack EAX,EBP:-2
 12312 rstack EBX,EBP:2
 12316 add EBX,EAX
 12318 mov EAX,EBX
 12320 sstack EBP:-8,#EAX
__204:
 12324 rstack EAX,EBP:-8
 12328 mov EBX,0
 12331 sub EBX,EAX
 12333 fabs EBX,EBX
 12335 fsgn EBX,EBX
 12337 lneg EBX
// if (C==0)
 12339 cmp 0,EBX
 12342 jge 12353
 12345 mov EAX,0
 12348 leave 
 12349 ret 
 12350 jmp 12550
__206:
__205:
__208:
__210:
 12353 rstack EAX,EBP:-8
 12357 mov EBX,45
 12360 sub EBX,EAX
 12362 fabs EBX,EBX
 12364 fsgn EBX,EBX
 12366 lneg EBX
// if (C=='-')
 12368 cmp 0,EBX
 12371 jge 12379
// Minus=1
 12374 sstack EBP:-4,1
__211:
__209:
__213:
 12379 rstack EAX,EBP:-8
 12383 mov EBX,48
 12386 sub EBX,EAX
 12388 fabs EBX,EBX
 12390 fsgn EBX,EBX
 12392 lneg EBX
// if (C=='0')
 12394 cmp 0,EBX
 12397 jge 12550
__216:
 12400 rstack EAX,EBP:-2
 12404 add EAX,1
 12407 mov EBX,EAX
 12409 rstack EAX,EBP:2
 12413 add EAX,EBX
 12415 mov EBX,EAX
 12417 mov EAX,98
 12420 sub EAX,#EBX
 12422 fabs EAX,EAX
 12424 fsgn EAX,EAX
 12426 lneg EAX
// if (str[I+1]=='b')
 12428 cmp 0,EAX
 12431 jge 12450
// Base=2
 12434 sstack EBP:-7,2
 12439 rstack EAX,EBP:-2
// I+=2
 12443 add EAX,2
 12446 sstack EBP:-2,EAX
__217:
__215:
__219:
 12450 rstack EAX,EBP:-2
 12454 add EAX,1
 12457 mov EBX,EAX
 12459 rstack EAX,EBP:2
 12463 add EAX,EBX
 12465 mov EBX,EAX
 12467 mov EAX,111
 12470 sub EAX,#EBX
 12472 fabs EAX,EAX
 12474 fsgn EAX,EAX
 12476 lneg EAX
// if (str[I+1]=='o')
 12478 cmp 0,EAX
 12481 jge 12500
// Base=8
 12484 sstack EBP:-7,8
 12489 rstack EAX,EBP:-2
// I+=2
 12493 add EAX,2
 12496 sstack EBP:-2,EAX
__220:
__218:
__222:
 12500 rstack EAX,EBP:-2
 12504 add EAX,1
 12507 mov EBX,EAX
 12509 rstack EAX,EBP:2
 12513 add EAX,EBX
 12515 mov EBX,EAX
 12517 mov EAX,120
 12520 sub EAX,#EBX
 12522 fabs EAX,EAX
 12524 fsgn EAX,EAX
 12526 lneg EAX
// if (str[I+1]=='x')
 12528 cmp 0,EAX
 12531 jge 12550
// Base=16
 12534 sstack EBP:-7,16
 12539 rstack EAX,EBP:-2
// I+=2
 12543 add EAX,2
 12546 sstack EBP:-2,EAX
__223:
__221:
__214:
__212:
__207:
__203:
__225:
 12550 rstack EAX,EBP:-1
 12554 lneg EAX
 12556 mov EBX,EAX
// if (!End
 12558 cmp 0,EBX
 12561 jz 13097
 12564 rstack EAX,EBP:-2
 12568 mov EBX,EAX
 12570 inc EAX
 12572 sstack EBP:-2,EAX
 12576 rstack EAX,EBP:2
 12580 add EAX,EBX
 12582 mov EBX,EAX
// C=str[I++]
 12584 sstack EBP:-8,#EBX
__227:
 12588 rstack EAX,EBP:-8
 12592 mov EBX,0
 12595 sub EBX,EAX
 12597 fabs EBX,EBX
 12599 fsgn EBX,EBX
 12601 lneg EBX
// if (C==0)
 12603 cmp 0,EBX
 12606 jge 12617
// End=1
 12609 sstack EBP:-1,1
 12614 jmp 13094
__229:
__228:
__231:
__233:
 12617 rstack EAX,EBP:-8
 12621 mov EBX,46
 12624 sub EBX,EAX
 12626 fabs EBX,EBX
 12628 fsgn EBX,EBX
 12630 lneg EBX
// if (C=='.')
 12632 cmp 0,EBX
 12635 jge 12651
// End=1
 12638 sstack EBP:-1,1
// Frac=1
 12643 sstack EBP:-5,1
 12648 jmp 13094
__235:
__234:
__237:
// N=0
 12651 sstack EBP:-6,0
__239:
 12656 rstack EAX,EBP:-8
 12660 mov EBX,48
 12663 sub EBX,EAX
 12665 fabs EBX,EBX
 12667 fsgn EBX,EBX
 12669 lneg EBX
// if (C=='0')
 12671 cmp 0,EBX
 12674 jge 12682
// N=0
 12677 sstack EBP:-6,0
__240:
__238:
__242:
 12682 rstack EAX,EBP:-8
 12686 mov EBX,49
 12689 sub EBX,EAX
 12691 fabs EBX,EBX
 12693 fsgn EBX,EBX
 12695 lneg EBX
// if (C=='1')
 12697 cmp 0,EBX
 12700 jge 12708
// N=1
 12703 sstack EBP:-6,1
__243:
__241:
__245:
 12708 rstack EAX,EBP:-8
 12712 mov EBX,50
 12715 sub EBX,EAX
 12717 fabs EBX,EBX
 12719 fsgn EBX,EBX
 12721 lneg EBX
// if (C=='2')
 12723 cmp 0,EBX
 12726 jge 12734
// N=2
 12729 sstack EBP:-6,2
__246:
__244:
__248:
 12734 rstack EAX,EBP:-8
 12738 mov EBX,51
 12741 sub EBX,EAX
 12743 fabs EBX,EBX
 12745 fsgn EBX,EBX
 12747 lneg EBX
// if (C=='3')
 12749 cmp 0,EBX
 12752 jge 12760
// N=3
 12755 sstack EBP:-6,3
__249:
__247:
__251:
 12760 rstack EAX,EBP:-8
 12764 mov EBX,52
 12767 sub EBX,EAX
 12769 fabs EBX,EBX
 12771 fsgn EBX,EBX
 12773 lneg EBX
// if (C=='4')
 12775 cmp 0,EBX
 12778 jge 12786
// N=4
 12781 sstack EBP:-6,4
__252:
__250:
__254:
 12786 rstack EAX,EBP:-8
 12790 mov EBX,53
 12793 sub EBX,EAX
 12795 fabs EBX,EBX
 12797 fsgn EBX,EBX
 12799 lneg EBX
// if (C=='5')
 12801 cmp 0,EBX
 12804 jge 12812
// N=5
 12807 sstack EBP:-6,5
__255:
__253:
__257:
 12812 rstack EAX,EBP:-8
 12816 mov EBX,54
 12819 sub EBX,EAX
 12821 fabs EBX,EBX
 12823 fsgn EBX,EBX
 12825 lneg EBX
// if (C=='6')
 12827 cmp 0,EBX
 12830 jge 12838
// N=6
 12833 sstack EBP:-6,6
__258:
__256:
__260:
 12838 rstack EAX,EBP:-8
 12842 mov EBX,55
 12845 sub EBX,EAX
 12847 fabs EBX,EBX
 12849 fsgn EBX,EBX
 12851 lneg EBX
// if (C=='7')
 12853 cmp 0,EBX
 12856 jge 12864
// N=7
 12859 sstack EBP:-6,7
__261:
__259:
__263:
 12864 rstack EAX,EBP:-8
 12868 mov EBX,56
 12871 sub EBX,EAX
 12873 fabs EBX,EBX
 12875 fsgn EBX,EBX
 12877 lneg EBX
// if (C=='8')
 12879 cmp 0,EBX
 12882 jge 12890
// N=8
 12885 sstack EBP:-6,8
__264:
__262:
__266:
 12890 rstack EAX,EBP:-8
 12894 mov EBX,57
 12897 sub EBX,EAX
 12899 fabs EBX,EBX
 12901 fsgn EBX,EBX
 12903 lneg EBX
// if (C=='9')
 12905 cmp 0,EBX
 12908 jge 12916
// N=9
 12911 sstack EBP:-6,9
__267:
__265:
__269:
 12916 rstack EAX,EBP:-8
 12920 mov EBX,65
 12923 sub EBX,EAX
 12925 fabs EBX,EBX
 12927 fsgn EBX,EBX
 12929 lneg EBX
// if (C=='A')
 12931 cmp 0,EBX
 12934 jge 12942
// N=10
 12937 sstack EBP:-6,10
__270:
__268:
__272:
 12942 rstack EAX,EBP:-8
 12946 mov EBX,66
 12949 sub EBX,EAX
 12951 fabs EBX,EBX
 12953 fsgn EBX,EBX
 12955 lneg EBX
// if (C=='B')
 12957 cmp 0,EBX
 12960 jge 12968
// N=11
 12963 sstack EBP:-6,11
__273:
__271:
__275:
 12968 rstack EAX,EBP:-8
 12972 mov EBX,67
 12975 sub EBX,EAX
 12977 fabs EBX,EBX
 12979 fsgn EBX,EBX
 12981 lneg EBX
// if (C=='C')
 12983 cmp 0,EBX
 12986 jge 12994
// N=12
 12989 sstack EBP:-6,12
__276:
__274:
__278:
 12994 rstack EAX,EBP:-8
 12998 mov EBX,68
 13001 sub EBX,EAX
 13003 fabs EBX,EBX
 13005 fsgn EBX,EBX
 13007 lneg EBX
// if (C=='D')
 13009 cmp 0,EBX
 13012 jge 13020
// N=13
 13015 sstack EBP:-6,13
__279:
__277:
__281:
 13020 rstack EAX,EBP:-8
 13024 mov EBX,69
 13027 sub EBX,EAX
 13029 fabs EBX,EBX
 13031 fsgn EBX,EBX
 13033 lneg EBX
// if (C=='E')
 13035 cmp 0,EBX
 13038 jge 13046
// N=14
 13041 sstack EBP:-6,14
__282:
__280:
__284:
 13046 rstack EAX,EBP:-8
 13050 mov EBX,70
 13053 sub EBX,EAX
 13055 fabs EBX,EBX
 13057 fsgn EBX,EBX
 13059 lneg EBX
// if (C=='F')
 13061 cmp 0,EBX
 13064 jge 13072
// N=15
 13067 sstack EBP:-6,15
__285:
__283:
 13072 rstack EAX,EBP:-6
 13076 rstack EBX,EBP:-7
 13080 rstack ECX,EBP:-3
 13084 mul ECX,EBX
 13086 mov EBX,ECX
 13088 add EBX,EAX
// Num=Num*Base+N
 13090 sstack EBP:-3,EBX
__236:
__232:
__230:
__226:
 13094 jmp 12550
__224:
__287:
 13097 rstack EAX,EBP:-5
 13101 mov EBX,1
 13104 sub EBX,EAX
 13106 fabs EBX,EBX
 13108 fsgn EBX,EBX
 13110 lneg EBX
// if (Frac==1)
 13112 cmp 0,EBX
 13115 jge 13646
// End=0
 13118 sstack EBP:-1,0
__290:
 13123 rstack EAX,EBP:-1
 13127 lneg EAX
 13129 mov EBX,EAX
// if (!End
 13131 cmp 0,EBX
 13134 jz 13646
 13137 rstack EAX,EBP:-2
 13141 mov EBX,EAX
 13143 inc EAX
 13145 sstack EBP:-2,EAX
 13149 rstack EAX,EBP:2
 13153 add EAX,EBX
 13155 mov EBX,EAX
// C=str[I++]
 13157 sstack EBP:-8,#EBX
__292:
 13161 rstack EAX,EBP:-8
 13165 mov EBX,0
 13168 sub EBX,EAX
 13170 fabs EBX,EBX
 13172 fsgn EBX,EBX
 13174 lneg EBX
// if (C==0)
 13176 cmp 0,EBX
 13179 jge 13190
// End=1
 13182 sstack EBP:-1,1
 13187 jmp 13643
__294:
__293:
__296:
// N=0
 13190 sstack EBP:-6,0
__298:
 13195 rstack EAX,EBP:-8
 13199 mov EBX,48
 13202 sub EBX,EAX
 13204 fabs EBX,EBX
 13206 fsgn EBX,EBX
 13208 lneg EBX
// if (C=='0')
 13210 cmp 0,EBX
 13213 jge 13221
// N=0
 13216 sstack EBP:-6,0
__299:
__297:
__301:
 13221 rstack EAX,EBP:-8
 13225 mov EBX,49
 13228 sub EBX,EAX
 13230 fabs EBX,EBX
 13232 fsgn EBX,EBX
 13234 lneg EBX
// if (C=='1')
 13236 cmp 0,EBX
 13239 jge 13247
// N=1
 13242 sstack EBP:-6,1
__302:
__300:
__304:
 13247 rstack EAX,EBP:-8
 13251 mov EBX,50
 13254 sub EBX,EAX
 13256 fabs EBX,EBX
 13258 fsgn EBX,EBX
 13260 lneg EBX
// if (C=='2')
 13262 cmp 0,EBX
 13265 jge 13273
// N=2
 13268 sstack EBP:-6,2
__305:
__303:
__307:
 13273 rstack EAX,EBP:-8
 13277 mov EBX,51
 13280 sub EBX,EAX
 13282 fabs EBX,EBX
 13284 fsgn EBX,EBX
 13286 lneg EBX
// if (C=='3')
 13288 cmp 0,EBX
 13291 jge 13299
// N=3
 13294 sstack EBP:-6,3
__308:
__306:
__310:
 13299 rstack EAX,EBP:-8
 13303 mov EBX,52
 13306 sub EBX,EAX
 13308 fabs EBX,EBX
 13310 fsgn EBX,EBX
 13312 lneg EBX
// if (C=='4')
 13314 cmp 0,EBX
 13317 jge 13325
// N=4
 13320 sstack EBP:-6,4
__311:
__309:
__313:
 13325 rstack EAX,EBP:-8
 13329 mov EBX,53
 13332 sub EBX,EAX
 13334 fabs EBX,EBX
 13336 fsgn EBX,EBX
 13338 lneg EBX
// if (C=='5')
 13340 cmp 0,EBX
 13343 jge 13351
// N=5
 13346 sstack EBP:-6,5
__314:
__312:
__316:
 13351 rstack EAX,EBP:-8
 13355 mov EBX,54
 13358 sub EBX,EAX
 13360 fabs EBX,EBX
 13362 fsgn EBX,EBX
 13364 lneg EBX
// if (C=='6')
 13366 cmp 0,EBX
 13369 jge 13377
// N=6
 13372 sstack EBP:-6,6
__317:
__315:
__319:
 13377 rstack EAX,EBP:-8
 13381 mov EBX,55
 13384 sub EBX,EAX
 13386 fabs EBX,EBX
 13388 fsgn EBX,EBX
 13390 lneg EBX
// if (C=='7')
 13392 cmp 0,EBX
 13395 jge 13403
// N=7
 13398 sstack EBP:-6,7
__320:
__318:
__322:
 13403 rstack EAX,EBP:-8
 13407 mov EBX,56
 13410 sub EBX,EAX
 13412 fabs EBX,EBX
 13414 fsgn EBX,EBX
 13416 lneg EBX
// if (C=='8')
 13418 cmp 0,EBX
 13421 jge 13429
// N=8
 13424 sstack EBP:-6,8
__323:
__321:
__325:
 13429 rstack EAX,EBP:-8
 13433 mov EBX,57
 13436 sub EBX,EAX
 13438 fabs EBX,EBX
 13440 fsgn EBX,EBX
 13442 lneg EBX
// if (C=='9')
 13444 cmp 0,EBX
 13447 jge 13455
// N=9
 13450 sstack EBP:-6,9
__326:
__324:
__328:
 13455 rstack EAX,EBP:-8
 13459 mov EBX,65
 13462 sub EBX,EAX
 13464 fabs EBX,EBX
 13466 fsgn EBX,EBX
 13468 lneg EBX
// if (C=='A')
 13470 cmp 0,EBX
 13473 jge 13481
// N=10
 13476 sstack EBP:-6,10
__329:
__327:
__331:
 13481 rstack EAX,EBP:-8
 13485 mov EBX,66
 13488 sub EBX,EAX
 13490 fabs EBX,EBX
 13492 fsgn EBX,EBX
 13494 lneg EBX
// if (C=='B')
 13496 cmp 0,EBX
 13499 jge 13507
// N=11
 13502 sstack EBP:-6,11
__332:
__330:
__334:
 13507 rstack EAX,EBP:-8
 13511 mov EBX,67
 13514 sub EBX,EAX
 13516 fabs EBX,EBX
 13518 fsgn EBX,EBX
 13520 lneg EBX
// if (C=='C')
 13522 cmp 0,EBX
 13525 jge 13533
// N=12
 13528 sstack EBP:-6,12
__335:
__333:
__337:
 13533 rstack EAX,EBP:-8
 13537 mov EBX,68
 13540 sub EBX,EAX
 13542 fabs EBX,EBX
 13544 fsgn EBX,EBX
 13546 lneg EBX
// if (C=='D')
 13548 cmp 0,EBX
 13551 jge 13559
// N=13
 13554 sstack EBP:-6,13
__338:
__336:
__340:
 13559 rstack EAX,EBP:-8
 13563 mov EBX,69
 13566 sub EBX,EAX
 13568 fabs EBX,EBX
 13570 fsgn EBX,EBX
 13572 lneg EBX
// if (C=='E')
 13574 cmp 0,EBX
 13577 jge 13585
// N=14
 13580 sstack EBP:-6,14
__341:
__339:
__343:
 13585 rstack EAX,EBP:-8
 13589 mov EBX,70
 13592 sub EBX,EAX
 13594 fabs EBX,EBX
 13596 fsgn EBX,EBX
 13598 lneg EBX
// if (C=='F')
 13600 cmp 0,EBX
 13603 jge 13611
// N=15
 13606 sstack EBP:-6,15
__344:
__342:
 13611 rstack EAX,EBP:-6
 13615 rstack EBX,EBP:-7
 13619 rstack ECX,EBP:-3
 13623 mul ECX,EBX
 13625 mov EBX,ECX
 13627 add EBX,EAX
// Num=Num*Base+N
 13629 sstack EBP:-3,EBX
 13633 rstack EAX,EBP:-5
// Frac++
 13637 inc EAX
 13639 sstack EBP:-5,EAX
__295:
__291:
 13643 jmp 13123
__289:
__288:
__286:
__346:
 13646 rstack EAX,EBP:-5
// if (Frac)
 13650 cmp 0,EAX
 13653 jge 13683
 13656 rstack EAX,EBP:-5
 13660 add EAX,-1
 13663 mov EBX,EAX
 13665 rstack EAX,EBP:-7
 13669 fpwr EAX,EBX
 13671 mov EBX,EAX
 13673 rstack EAX,EBP:-3
// Num/=(Base^^(Frac-1))
 13677 div EAX,EBX
 13679 sstack EBP:-3,EAX
__347:
__345:
__349:
 13683 rstack EAX,EBP:-4
// if (Minus)
 13687 cmp 0,EAX
 13690 jge 13705
 13693 rstack EAX,EBP:-3
 13697 neg EAX
 13699 mov EBX,EAX
// Num=-Num
 13701 sstack EBP:-3,EBX
__350:
__348:
 13705 rstack EAX,EBP:-3
 13709 leave 
 13710 ret 
__201:
 13711 leave 
 13712 ret 
getNdigit:
// getNdigit(num,digit,Base)
 13713 enter -0
__352:
 13716 rstack EBX,EBP:4
 13720 push EBX
 13722 rstack EBX,EBP:2
 13726 push EBX
 13728 mov ECX,2
// Nlog(...)
 13731 call 15282
 13734 add ESP,2
 13737 push EAX
 13739 mov EBX,EAX
 13741 pop EAX
// EAX=Nlog(num,Base)
 13743 mov EAX,EBX
 13745 fint EAX
 13747 inc EAX
 13749 rstack EBX,EBP:3
 13753 sub EAX,EBX
 13755 rstack EBX,EBP:4
 13759 mov EDX,EBX
 13761 fpwr EDX,EAX
 13763 rstack EBX,EBP:2
 13767 mov EAX,EBX
 13769 div EAX,EDX
 13771 fint EAX
 13773 rstack EBX,EBP:4
 13777 mod EAX,EBX
 13779 leave 
 13780 ret 
__351:
 13781 leave 
 13782 ret 
num2strSet:
// num2strSet(base,precision)
 13783 enter -0
__354:
 13786 rstack EAX,EBP:2
// Nbase=base
 13790 mov #77167,EAX
 13793 rstack EAX,EBP:3
// Nprec=precision
 13797 mov #77168,EAX
__353:
 13800 leave 
 13801 ret 
num2str:
// num2str(num)
 13802 enter 10
__356:
 13805 sstack EBP:-1,0
 13810 sstack EBP:-2,0
 13815 rstack EBX,EBP:2
 13819 sstack EBP:-3,EBX
 13823 sstack EBP:-4,10
 13828 sstack EBP:-5,3
// Base=Nbase
 13833 sstack EBP:-4,#77167
// Prec=Nprec
 13838 sstack EBP:-5,#77168
__358:
 13843 rstack EBX,EBP:-3
 13847 mov ECX,0
 13850 sub ECX,EBX
 13852 fsgn ECX,ECX
 13854 max ECX,0
// if (NM<0)
 13857 cmp 0,ECX
 13860 jge 13893
 13863 rstack EBX,EBP:-3
 13867 neg EBX
 13869 mov ECX,EBX
// NM=-NM
 13871 sstack EBP:-3,ECX
 13875 rstack EBX,EBP:-1
 13879 mov ECX,EBX
 13881 inc EBX
 13883 sstack EBP:-1,EBX
 13887 add ECX,77169
// Nstack[NI++]='-'
 13890 mov #ECX,45
__359:
__357:
__361:
 13893 rstack EBX,EBP:-4
 13897 mov ECX,2
 13900 sub ECX,EBX
 13902 fabs ECX,ECX
 13904 fsgn ECX,ECX
 13906 lneg ECX
// if (Base==2)
 13908 cmp 0,ECX
 13911 jge 13950
 13914 rstack EBX,EBP:-1
 13918 mov ECX,EBX
 13920 inc EBX
 13922 sstack EBP:-1,EBX
 13926 add ECX,77169
// Nstack[NI++]='0'
 13929 mov #ECX,48
 13932 rstack EBX,EBP:-1
 13936 mov ECX,EBX
 13938 inc EBX
 13940 sstack EBP:-1,EBX
 13944 add ECX,77169
// Nstack[NI++]='b'
 13947 mov #ECX,98
__362:
__360:
__364:
 13950 rstack EBX,EBP:-4
 13954 mov ECX,8
 13957 sub ECX,EBX
 13959 fabs ECX,ECX
 13961 fsgn ECX,ECX
 13963 lneg ECX
// if (Base==8)
 13965 cmp 0,ECX
 13968 jge 14007
 13971 rstack EBX,EBP:-1
 13975 mov ECX,EBX
 13977 inc EBX
 13979 sstack EBP:-1,EBX
 13983 add ECX,77169
// Nstack[NI++]='0'
 13986 mov #ECX,48
 13989 rstack EBX,EBP:-1
 13993 mov ECX,EBX
 13995 inc EBX
 13997 sstack EBP:-1,EBX
 14001 add ECX,77169
// Nstack[NI++]='o'
 14004 mov #ECX,111
__365:
__363:
__367:
 14007 rstack EBX,EBP:-4
 14011 mov ECX,16
 14014 sub ECX,EBX
 14016 fabs ECX,ECX
 14018 fsgn ECX,ECX
 14020 lneg ECX
// if (Base==16)
 14022 cmp 0,ECX
 14025 jge 14064
 14028 rstack EBX,EBP:-1
 14032 mov ECX,EBX
 14034 inc EBX
 14036 sstack EBP:-1,EBX
 14040 add ECX,77169
// Nstack[NI++]='0'
 14043 mov #ECX,48
 14046 rstack EBX,EBP:-1
 14050 mov ECX,EBX
 14052 inc EBX
 14054 sstack EBP:-1,EBX
 14058 add ECX,77169
// Nstack[NI++]='x'
 14061 mov #ECX,120
__368:
__366:
__370:
 14064 rstack EBX,EBP:-3
 14068 mov ECX,1
 14071 sub ECX,EBX
 14073 fsgn ECX,ECX
 14075 max ECX,0
// if (NM<1)
 14078 cmp 0,ECX
 14081 jge 14102
 14084 rstack EBX,EBP:-1
 14088 mov ECX,EBX
 14090 inc EBX
 14092 sstack EBP:-1,EBX
 14096 add ECX,77169
// Nstack[NI++]='0'
 14099 mov #ECX,48
__371:
__369:
 14102 rstack EBX,EBP:-4
 14106 push EBX
 14108 rstack EBX,EBP:-3
 14112 push EBX
 14114 mov ECX,2
// Nlog(...)
 14117 call 15282
 14120 add ESP,2
 14123 push EAX
 14125 mov EBX,EAX
 14127 pop EAX
// EAX=Nlog(NM,Base)
 14129 mov EAX,EBX
 14131 mov EBX,EAX
 14133 add EBX,1
 14136 sstack EBP:-6,EBX
 14140 sstack EBP:-9,0
// init loop
 14145 sstack EBP:-9,1
__373:
 14150 rstack EBX,EBP:-9
 14154 rstack ECX,EBP:-6
 14158 sub ECX,EBX
 14160 mov EBX,ECX
 14162 fsgn EBX,EBX
 14164 inc EBX
// condition
 14166 max EBX,0
 14169 cmp 0,EBX
 14172 jz 14667
// C='F'
 14175 sstack EBP:-8,70
 14180 rstack EBX,EBP:-4
// getNdigit arg #3 (float Base)
 14184 push EBX
 14186 rstack EBX,EBP:-9
// getNdigit arg #2 (float digit)
 14190 push EBX
 14192 rstack EBX,EBP:-3
// getNdigit arg #1 (float num)
 14196 push EBX
 14198 mov ECX,3
// getNdigit(...)
 14201 call 13713
 14204 add ESP,3
 14207 push EAX
 14209 mov EBX,EAX
 14211 pop EAX
// N=getNdigit(NM,I,Base)
 14213 sstack EBP:-7,EBX
__375:
 14217 rstack EBX,EBP:-7
 14221 mov ECX,0
 14224 sub ECX,EBX
 14226 fabs ECX,ECX
 14228 fsgn ECX,ECX
 14230 lneg ECX
// if (N==0)
 14232 cmp 0,ECX
 14235 jge 14243
// C='0'
 14238 sstack EBP:-8,48
__376:
__374:
__378:
 14243 rstack EBX,EBP:-7
 14247 mov ECX,1
 14250 sub ECX,EBX
 14252 fabs ECX,ECX
 14254 fsgn ECX,ECX
 14256 lneg ECX
// if (N==1)
 14258 cmp 0,ECX
 14261 jge 14269
// C='1'
 14264 sstack EBP:-8,49
__379:
__377:
__381:
 14269 rstack EBX,EBP:-7
 14273 mov ECX,2
 14276 sub ECX,EBX
 14278 fabs ECX,ECX
 14280 fsgn ECX,ECX
 14282 lneg ECX
// if (N==2)
 14284 cmp 0,ECX
 14287 jge 14295
// C='2'
 14290 sstack EBP:-8,50
__382:
__380:
__384:
 14295 rstack EBX,EBP:-7
 14299 mov ECX,3
 14302 sub ECX,EBX
 14304 fabs ECX,ECX
 14306 fsgn ECX,ECX
 14308 lneg ECX
// if (N==3)
 14310 cmp 0,ECX
 14313 jge 14321
// C='3'
 14316 sstack EBP:-8,51
__385:
__383:
__387:
 14321 rstack EBX,EBP:-7
 14325 mov ECX,4
 14328 sub ECX,EBX
 14330 fabs ECX,ECX
 14332 fsgn ECX,ECX
 14334 lneg ECX
// if (N==4)
 14336 cmp 0,ECX
 14339 jge 14347
// C='4'
 14342 sstack EBP:-8,52
__388:
__386:
__390:
 14347 rstack EBX,EBP:-7
 14351 mov ECX,5
 14354 sub ECX,EBX
 14356 fabs ECX,ECX
 14358 fsgn ECX,ECX
 14360 lneg ECX
// if (N==5)
 14362 cmp 0,ECX
 14365 jge 14373
// C='5'
 14368 sstack EBP:-8,53
__391:
__389:
__393:
 14373 rstack EBX,EBP:-7
 14377 mov ECX,6
 14380 sub ECX,EBX
 14382 fabs ECX,ECX
 14384 fsgn ECX,ECX
 14386 lneg ECX
// if (N==6)
 14388 cmp 0,ECX
 14391 jge 14399
// C='6'
 14394 sstack EBP:-8,54
__394:
__392:
__396:
 14399 rstack EBX,EBP:-7
 14403 mov ECX,7
 14406 sub ECX,EBX
 14408 fabs ECX,ECX
 14410 fsgn ECX,ECX
 14412 lneg ECX
// if (N==7)
 14414 cmp 0,ECX
 14417 jge 14425
// C='7'
 14420 sstack EBP:-8,55
__397:
__395:
__399:
 14425 rstack EBX,EBP:-7
 14429 mov ECX,8
 14432 sub ECX,EBX
 14434 fabs ECX,ECX
 14436 fsgn ECX,ECX
 14438 lneg ECX
// if (N==8)
 14440 cmp 0,ECX
 14443 jge 14451
// C='8'
 14446 sstack EBP:-8,56
__400:
__398:
__402:
 14451 rstack EBX,EBP:-7
 14455 mov ECX,9
 14458 sub ECX,EBX
 14460 fabs ECX,ECX
 14462 fsgn ECX,ECX
 14464 lneg ECX
// if (N==9)
 14466 cmp 0,ECX
 14469 jge 14477
// C='9'
 14472 sstack EBP:-8,57
__403:
__401:
__405:
 14477 rstack EBX,EBP:-7
 14481 mov ECX,10
 14484 sub ECX,EBX
 14486 fabs ECX,ECX
 14488 fsgn ECX,ECX
 14490 lneg ECX
// if (N==10)
 14492 cmp 0,ECX
 14495 jge 14503
// C='A'
 14498 sstack EBP:-8,65
__406:
__404:
__408:
 14503 rstack EBX,EBP:-7
 14507 mov ECX,11
 14510 sub ECX,EBX
 14512 fabs ECX,ECX
 14514 fsgn ECX,ECX
 14516 lneg ECX
// if (N==11)
 14518 cmp 0,ECX
 14521 jge 14529
// C='B'
 14524 sstack EBP:-8,66
__409:
__407:
__411:
 14529 rstack EBX,EBP:-7
 14533 mov ECX,12
 14536 sub ECX,EBX
 14538 fabs ECX,ECX
 14540 fsgn ECX,ECX
 14542 lneg ECX
// if (N==12)
 14544 cmp 0,ECX
 14547 jge 14555
// C='C'
 14550 sstack EBP:-8,67
__412:
__410:
__414:
 14555 rstack EBX,EBP:-7
 14559 mov ECX,13
 14562 sub ECX,EBX
 14564 fabs ECX,ECX
 14566 fsgn ECX,ECX
 14568 lneg ECX
// if (N==13)
 14570 cmp 0,ECX
 14573 jge 14581
// C='D'
 14576 sstack EBP:-8,68
__415:
__413:
__417:
 14581 rstack EBX,EBP:-7
 14585 mov ECX,14
 14588 sub ECX,EBX
 14590 fabs ECX,ECX
 14592 fsgn ECX,ECX
 14594 lneg ECX
// if (N==14)
 14596 cmp 0,ECX
 14599 jge 14607
// C='E'
 14602 sstack EBP:-8,69
__418:
__416:
__420:
 14607 rstack EBX,EBP:-7
 14611 mov ECX,15
 14614 sub ECX,EBX
 14616 fabs ECX,ECX
 14618 fsgn ECX,ECX
 14620 lneg ECX
// if (N==15)
 14622 cmp 0,ECX
 14625 jge 14633
// C='F'
 14628 sstack EBP:-8,70
__421:
__419:
 14633 rstack EBX,EBP:-8
 14637 rstack ECX,EBP:-1
 14641 mov EDX,ECX
 14643 inc ECX
 14645 sstack EBP:-1,ECX
 14649 add EDX,77169
// Nstack[NI++]=C
 14652 mov #EDX,EBX
 14654 rstack EBX,EBP:-9
// loop step
 14658 inc EBX
 14660 sstack EBP:-9,EBX
 14664 jmp 14150
__372:
 14667 rstack EBX,EBP:-3
 14671 mov EAX,EBX
 14673 ffrac EAX
__423:
 14675 rstack EBX,EBP:-5
 14679 mov ECX,0
 14682 sub ECX,EBX
 14684 neg ECX
 14686 fsgn ECX,ECX
 14688 max ECX,0
 14691 mov EBX,0
 14694 sub EBX,EAX
 14696 neg EBX
 14698 fsgn EBX,EBX
 14700 max EBX,0
 14703 and EBX,ECX
// if ((EAX>0)&&(Prec>0))
 14705 cmp 0,EBX
 14708 jge 15263
 14711 sstack EBP:-10,0
 14716 rstack EBX,EBP:-1
 14720 mov ECX,EBX
 14722 inc EBX
 14724 sstack EBP:-1,EBX
 14728 add ECX,77169
// Nstack[NI++]='.'
 14731 mov #ECX,46
 14734 rstack EBX,EBP:-9
// init loop
 14738 sstack EBP:-10,EBX
__426:
 14742 rstack EBX,EBP:-10
 14746 rstack ECX,EBP:-5
 14750 rstack EDX,EBP:-9
 14754 add EDX,ECX
 14756 mov ECX,EDX
 14758 sub ECX,EBX
 14760 fsgn ECX,ECX
// condition
 14762 max ECX,0
 14765 cmp 0,ECX
 14768 jz 15263
// C='F'
 14771 sstack EBP:-8,70
 14776 rstack EBX,EBP:-4
// getNdigit arg #3 (float Base)
 14780 push EBX
 14782 rstack EBX,EBP:-10
// getNdigit arg #2 (float digit)
 14786 push EBX
 14788 rstack EBX,EBP:-3
// getNdigit arg #1 (float num)
 14792 push EBX
 14794 mov ECX,3
// getNdigit(...)
 14797 call 13713
 14800 add ESP,3
 14803 push EAX
 14805 mov EBX,EAX
 14807 pop EAX
// N=getNdigit(NM,K,Base)
 14809 sstack EBP:-7,EBX
__428:
 14813 rstack EBX,EBP:-7
 14817 mov ECX,0
 14820 sub ECX,EBX
 14822 fabs ECX,ECX
 14824 fsgn ECX,ECX
 14826 lneg ECX
// if (N==0)
 14828 cmp 0,ECX
 14831 jge 14839
// C='0'
 14834 sstack EBP:-8,48
__429:
__427:
__431:
 14839 rstack EBX,EBP:-7
 14843 mov ECX,1
 14846 sub ECX,EBX
 14848 fabs ECX,ECX
 14850 fsgn ECX,ECX
 14852 lneg ECX
// if (N==1)
 14854 cmp 0,ECX
 14857 jge 14865
// C='1'
 14860 sstack EBP:-8,49
__432:
__430:
__434:
 14865 rstack EBX,EBP:-7
 14869 mov ECX,2
 14872 sub ECX,EBX
 14874 fabs ECX,ECX
 14876 fsgn ECX,ECX
 14878 lneg ECX
// if (N==2)
 14880 cmp 0,ECX
 14883 jge 14891
// C='2'
 14886 sstack EBP:-8,50
__435:
__433:
__437:
 14891 rstack EBX,EBP:-7
 14895 mov ECX,3
 14898 sub ECX,EBX
 14900 fabs ECX,ECX
 14902 fsgn ECX,ECX
 14904 lneg ECX
// if (N==3)
 14906 cmp 0,ECX
 14909 jge 14917
// C='3'
 14912 sstack EBP:-8,51
__438:
__436:
__440:
 14917 rstack EBX,EBP:-7
 14921 mov ECX,4
 14924 sub ECX,EBX
 14926 fabs ECX,ECX
 14928 fsgn ECX,ECX
 14930 lneg ECX
// if (N==4)
 14932 cmp 0,ECX
 14935 jge 14943
// C='4'
 14938 sstack EBP:-8,52
__441:
__439:
__443:
 14943 rstack EBX,EBP:-7
 14947 mov ECX,5
 14950 sub ECX,EBX
 14952 fabs ECX,ECX
 14954 fsgn ECX,ECX
 14956 lneg ECX
// if (N==5)
 14958 cmp 0,ECX
 14961 jge 14969
// C='5'
 14964 sstack EBP:-8,53
__444:
__442:
__446:
 14969 rstack EBX,EBP:-7
 14973 mov ECX,6
 14976 sub ECX,EBX
 14978 fabs ECX,ECX
 14980 fsgn ECX,ECX
 14982 lneg ECX
// if (N==6)
 14984 cmp 0,ECX
 14987 jge 14995
// C='6'
 14990 sstack EBP:-8,54
__447:
__445:
__449:
 14995 rstack EBX,EBP:-7
 14999 mov ECX,7
 15002 sub ECX,EBX
 15004 fabs ECX,ECX
 15006 fsgn ECX,ECX
 15008 lneg ECX
// if (N==7)
 15010 cmp 0,ECX
 15013 jge 15021
// C='7'
 15016 sstack EBP:-8,55
__450:
__448:
__452:
 15021 rstack EBX,EBP:-7
 15025 mov ECX,8
 15028 sub ECX,EBX
 15030 fabs ECX,ECX
 15032 fsgn ECX,ECX
 15034 lneg ECX
// if (N==8)
 15036 cmp 0,ECX
 15039 jge 15047
// C='8'
 15042 sstack EBP:-8,56
__453:
__451:
__455:
 15047 rstack EBX,EBP:-7
 15051 mov ECX,9
 15054 sub ECX,EBX
 15056 fabs ECX,ECX
 15058 fsgn ECX,ECX
 15060 lneg ECX
// if (N==9)
 15062 cmp 0,ECX
 15065 jge 15073
// C='9'
 15068 sstack EBP:-8,57
__456:
__454:
__458:
 15073 rstack EBX,EBP:-7
 15077 mov ECX,10
 15080 sub ECX,EBX
 15082 fabs ECX,ECX
 15084 fsgn ECX,ECX
 15086 lneg ECX
// if (N==10)
 15088 cmp 0,ECX
 15091 jge 15099
// C='A'
 15094 sstack EBP:-8,65
__459:
__457:
__461:
 15099 rstack EBX,EBP:-7
 15103 mov ECX,11
 15106 sub ECX,EBX
 15108 fabs ECX,ECX
 15110 fsgn ECX,ECX
 15112 lneg ECX
// if (N==11)
 15114 cmp 0,ECX
 15117 jge 15125
// C='B'
 15120 sstack EBP:-8,66
__462:
__460:
__464:
 15125 rstack EBX,EBP:-7
 15129 mov ECX,12
 15132 sub ECX,EBX
 15134 fabs ECX,ECX
 15136 fsgn ECX,ECX
 15138 lneg ECX
// if (N==12)
 15140 cmp 0,ECX
 15143 jge 15151
// C='C'
 15146 sstack EBP:-8,67
__465:
__463:
__467:
 15151 rstack EBX,EBP:-7
 15155 mov ECX,13
 15158 sub ECX,EBX
 15160 fabs ECX,ECX
 15162 fsgn ECX,ECX
 15164 lneg ECX
// if (N==13)
 15166 cmp 0,ECX
 15169 jge 15177
// C='D'
 15172 sstack EBP:-8,68
__468:
__466:
__470:
 15177 rstack EBX,EBP:-7
 15181 mov ECX,14
 15184 sub ECX,EBX
 15186 fabs ECX,ECX
 15188 fsgn ECX,ECX
 15190 lneg ECX
// if (N==14)
 15192 cmp 0,ECX
 15195 jge 15203
// C='E'
 15198 sstack EBP:-8,69
__471:
__469:
__473:
 15203 rstack EBX,EBP:-7
 15207 mov ECX,15
 15210 sub ECX,EBX
 15212 fabs ECX,ECX
 15214 fsgn ECX,ECX
 15216 lneg ECX
// if (N==15)
 15218 cmp 0,ECX
 15221 jge 15229
// C='F'
 15224 sstack EBP:-8,70
__474:
__472:
 15229 rstack EBX,EBP:-8
 15233 rstack ECX,EBP:-1
 15237 mov EDX,ECX
 15239 inc ECX
 15241 sstack EBP:-1,ECX
 15245 add EDX,77169
// Nstack[NI++]=C
 15248 mov #EDX,EBX
 15250 rstack EBX,EBP:-10
// loop step
 15254 inc EBX
 15256 sstack EBP:-10,EBX
 15260 jmp 14742
__425:
__424:
__422:
 15263 rstack EBX,EBP:-1
 15267 add EBX,77169
 15270 mov ECX,EBX
// Nstack[NI]=0
 15272 mov #ECX,0
 15275 mov EAX,77169
 15278 leave 
 15279 ret 
__355:
 15280 leave 
 15281 ret 
Nlog:
// Nlog(A,B)
 15282 enter -0
__476:
 15285 rstack ESI,EBP:2
 15289 mov EAX,ESI
 15291 rstack ESI,EBP:3
 15295 mov EBX,ESI
 15297 fln EDX,EAX
 15299 fln ECX,EBX
 15301 div EDX,ECX
 15303 mov EAX,EDX
 15305 leave 
 15306 ret 
__475:
 15307 leave 
 15308 ret 
isPrint:
// isPrint(C)
 15309 enter -0
__478:
 15312 rstack EAX,EBP:2
 15316 mov EBX,127
 15319 sub EBX,EAX
 15321 fsgn EBX,EBX
 15323 max EBX,0
 15326 rstack EAX,EBP:2
 15330 sub EAX,31
 15333 mov ECX,EAX
 15335 fsgn ECX,ECX
 15337 max ECX,0
 15340 and ECX,EBX
 15342 mov EAX,ECX
 15344 leave 
 15345 ret 
__477:
 15346 leave 
 15347 ret 
isNum:
// isNum(C)
 15348 enter -0
__480:
 15351 rstack EAX,EBP:2
 15355 mov EBX,58
 15358 sub EBX,EAX
 15360 fsgn EBX,EBX
 15362 max EBX,0
 15365 rstack EAX,EBP:2
 15369 sub EAX,47
 15372 mov ECX,EAX
 15374 fsgn ECX,ECX
 15376 max ECX,0
 15379 and ECX,EBX
 15381 mov EAX,ECX
 15383 leave 
 15384 ret 
__479:
 15385 leave 
 15386 ret 
isAlpha:
// isAlpha(C)
 15387 enter -0
__482:
 15390 rstack EAX,EBP:2
 15394 mov EBX,123
 15397 sub EBX,EAX
 15399 fsgn EBX,EBX
 15401 max EBX,0
 15404 rstack EAX,EBP:2
 15408 sub EAX,96
 15411 mov ECX,EAX
 15413 fsgn ECX,ECX
 15415 max ECX,0
 15418 and ECX,EBX
 15420 rstack EAX,EBP:2
 15424 mov EBX,91
 15427 sub EBX,EAX
 15429 fsgn EBX,EBX
 15431 max EBX,0
 15434 rstack EAX,EBP:2
 15438 sub EAX,64
 15441 mov EDX,EAX
 15443 fsgn EDX,EDX
 15445 max EDX,0
 15448 and EDX,EBX
 15450 or EDX,ECX
 15452 mov EAX,EDX
 15454 leave 
 15455 ret 
__481:
 15456 leave 
 15457 ret 
toLower:
// toLower(C)
 15458 enter -0
__484:
__486:
 15461 rstack EAX,EBP:2
 15465 mov EBX,91
 15468 sub EBX,EAX
 15470 fsgn EBX,EBX
 15472 max EBX,0
 15475 rstack EAX,EBP:2
 15479 sub EAX,64
 15482 mov ECX,EAX
 15484 fsgn ECX,ECX
 15486 max ECX,0
 15489 and ECX,EBX
// if ((64<C)&&(C<91))
 15491 cmp 0,ECX
 15494 jge 15513
 15497 rstack EAX,EBP:2
 15501 add EAX,32
 15504 mov EBX,EAX
 15506 mov EAX,EBX
 15508 leave 
 15509 ret 
 15510 jmp 15519
__488:
__487:
__490:
 15513 rstack EAX,EBP:2
 15517 leave 
 15518 ret 
__489:
__485:
__483:
 15519 leave 
 15520 ret 
toUpper:
// toUpper(C)
 15521 enter -0
__492:
__494:
 15524 rstack EAX,EBP:2
 15528 mov EBX,123
 15531 sub EBX,EAX
 15533 fsgn EBX,EBX
 15535 max EBX,0
 15538 rstack EAX,EBP:2
 15542 sub EAX,96
 15545 mov ECX,EAX
 15547 fsgn ECX,ECX
 15549 max ECX,0
 15552 and ECX,EBX
// if ((96<C)&&(C<123))
 15554 cmp 0,ECX
 15557 jge 15576
 15560 rstack EAX,EBP:2
 15564 add EAX,-32
 15567 mov EBX,EAX
 15569 mov EAX,EBX
 15571 leave 
 15572 ret 
 15573 jmp 15582
__496:
__495:
__498:
 15576 rstack EAX,EBP:2
 15580 leave 
 15581 ret 
__497:
__493:
__491:
 15582 leave 
 15583 ret 
Con:
// Con(str1,str2,str3,str4,str5)
 15584 enter 3
__500:
 15587 sstack EBP:-1,0
 15592 sstack EBP:-2,0
 15597 rstack EAX,EBP:-1
 15601 mov EBX,EAX
 15603 inc EAX
 15605 sstack EBP:-1,EAX
 15609 rstack EAX,EBP:2
 15613 add EAX,EBX
 15615 mov EBX,EAX
 15617 sstack EBP:-3,#EBX
__502:
 15621 rstack EAX,EBP:-2
 15625 mov EBX,256
 15628 sub EBX,EAX
 15630 fsgn EBX,EBX
 15632 max EBX,0
 15635 rstack EAX,EBP:-3
 15639 mov ECX,0
 15642 sub ECX,EAX
 15644 neg ECX
 15646 fsgn ECX,ECX
 15648 max ECX,0
 15651 band ECX,EBX
// if ((C>0)&(I2<256)
 15653 cmp 0,ECX
 15656 jz 15707
 15659 rstack EAX,EBP:-3
 15663 rstack EBX,EBP:-2
 15667 mov ECX,EBX
 15669 inc EBX
 15671 sstack EBP:-2,EBX
 15675 add ECX,76911
// Constr[I2++]=C
 15678 mov #ECX,EAX
 15680 rstack EAX,EBP:-1
 15684 mov EBX,EAX
 15686 inc EAX
 15688 sstack EBP:-1,EAX
 15692 rstack EAX,EBP:2
 15696 add EAX,EBX
 15698 mov EBX,EAX
// C=str1[I++]
 15700 sstack EBP:-3,#EBX
 15704 jmp 15621
__501:
// I=0
 15707 sstack EBP:-1,0
 15712 rstack EAX,EBP:-1
 15716 mov EBX,EAX
 15718 inc EAX
 15720 sstack EBP:-1,EAX
 15724 rstack EAX,EBP:3
 15728 add EAX,EBX
 15730 mov EBX,EAX
// C=str2[I++]
 15732 sstack EBP:-3,#EBX
__504:
 15736 rstack EAX,EBP:-2
 15740 mov EBX,256
 15743 sub EBX,EAX
 15745 fsgn EBX,EBX
 15747 max EBX,0
 15750 rstack EAX,EBP:-3
 15754 mov ECX,0
 15757 sub ECX,EAX
 15759 neg ECX
 15761 fsgn ECX,ECX
 15763 max ECX,0
 15766 band ECX,EBX
// if ((C>0)&(I2<256)
 15768 cmp 0,ECX
 15771 jz 15822
 15774 rstack EAX,EBP:-3
 15778 rstack EBX,EBP:-2
 15782 mov ECX,EBX
 15784 inc EBX
 15786 sstack EBP:-2,EBX
 15790 add ECX,76911
// Constr[I2++]=C
 15793 mov #ECX,EAX
 15795 rstack EAX,EBP:-1
 15799 mov EBX,EAX
 15801 inc EAX
 15803 sstack EBP:-1,EAX
 15807 rstack EAX,EBP:3
 15811 add EAX,EBX
 15813 mov EBX,EAX
// C=str2[I++]
 15815 sstack EBP:-3,#EBX
 15819 jmp 15736
__503:
// I=0
 15822 sstack EBP:-1,0
 15827 rstack EAX,EBP:-1
 15831 mov EBX,EAX
 15833 inc EAX
 15835 sstack EBP:-1,EAX
 15839 rstack EAX,EBP:4
 15843 add EAX,EBX
 15845 mov EBX,EAX
// C=str3[I++]
 15847 sstack EBP:-3,#EBX
__506:
 15851 rstack EAX,EBP:-2
 15855 mov EBX,256
 15858 sub EBX,EAX
 15860 fsgn EBX,EBX
 15862 max EBX,0
 15865 rstack EAX,EBP:-3
 15869 mov ECX,0
 15872 sub ECX,EAX
 15874 neg ECX
 15876 fsgn ECX,ECX
 15878 max ECX,0
 15881 band ECX,EBX
// if ((C>0)&(I2<256)
 15883 cmp 0,ECX
 15886 jz 15937
 15889 rstack EAX,EBP:-3
 15893 rstack EBX,EBP:-2
 15897 mov ECX,EBX
 15899 inc EBX
 15901 sstack EBP:-2,EBX
 15905 add ECX,76911
// Constr[I2++]=C
 15908 mov #ECX,EAX
 15910 rstack EAX,EBP:-1
 15914 mov EBX,EAX
 15916 inc EAX
 15918 sstack EBP:-1,EAX
 15922 rstack EAX,EBP:4
 15926 add EAX,EBX
 15928 mov EBX,EAX
// C=str3[I++]
 15930 sstack EBP:-3,#EBX
 15934 jmp 15851
__505:
// I=0
 15937 sstack EBP:-1,0
 15942 rstack EAX,EBP:-1
 15946 mov EBX,EAX
 15948 inc EAX
 15950 sstack EBP:-1,EAX
 15954 rstack EAX,EBP:5
 15958 add EAX,EBX
 15960 mov EBX,EAX
// C=str4[I++]
 15962 sstack EBP:-3,#EBX
__508:
 15966 rstack EAX,EBP:-2
 15970 mov EBX,256
 15973 sub EBX,EAX
 15975 fsgn EBX,EBX
 15977 max EBX,0
 15980 rstack EAX,EBP:-3
 15984 mov ECX,0
 15987 sub ECX,EAX
 15989 neg ECX
 15991 fsgn ECX,ECX
 15993 max ECX,0
 15996 band ECX,EBX
// if ((C>0)&(I2<256)
 15998 cmp 0,ECX
 16001 jz 16052
 16004 rstack EAX,EBP:-3
 16008 rstack EBX,EBP:-2
 16012 mov ECX,EBX
 16014 inc EBX
 16016 sstack EBP:-2,EBX
 16020 add ECX,76911
// Constr[I2++]=C
 16023 mov #ECX,EAX
 16025 rstack EAX,EBP:-1
 16029 mov EBX,EAX
 16031 inc EAX
 16033 sstack EBP:-1,EAX
 16037 rstack EAX,EBP:5
 16041 add EAX,EBX
 16043 mov EBX,EAX
// C=str4[I++]
 16045 sstack EBP:-3,#EBX
 16049 jmp 15966
__507:
// I=0
 16052 sstack EBP:-1,0
 16057 rstack EAX,EBP:-1
 16061 mov EBX,EAX
 16063 inc EAX
 16065 sstack EBP:-1,EAX
 16069 rstack EAX,EBP:6
 16073 add EAX,EBX
 16075 mov EBX,EAX
// C=str5[I++]
 16077 sstack EBP:-3,#EBX
__510:
 16081 rstack EAX,EBP:-2
 16085 mov EBX,256
 16088 sub EBX,EAX
 16090 fsgn EBX,EBX
 16092 max EBX,0
 16095 rstack EAX,EBP:-3
 16099 mov ECX,0
 16102 sub ECX,EAX
 16104 neg ECX
 16106 fsgn ECX,ECX
 16108 max ECX,0
 16111 band ECX,EBX
// if ((C>0)&(I2<256)
 16113 cmp 0,ECX
 16116 jz 16167
 16119 rstack EAX,EBP:-3
 16123 rstack EBX,EBP:-2
 16127 mov ECX,EBX
 16129 inc EBX
 16131 sstack EBP:-2,EBX
 16135 add ECX,76911
// Constr[I2++]=C
 16138 mov #ECX,EAX
 16140 rstack EAX,EBP:-1
 16144 mov EBX,EAX
 16146 inc EAX
 16148 sstack EBP:-1,EAX
 16152 rstack EAX,EBP:6
 16156 add EAX,EBX
 16158 mov EBX,EAX
// C=str5[I++]
 16160 sstack EBP:-3,#EBX
 16164 jmp 16081
__509:
 16167 rstack EAX,EBP:-2
 16171 add EAX,76911
 16174 mov EBX,EAX
// Constr[I2]=0
 16176 mov #EBX,0
 16179 mov EAX,76911
 16182 leave 
 16183 ret 
__499:
 16184 leave 
 16185 ret 
concat:
// concat()
 16186 enter 9
__512:
 16189 sstack EBP:-1,ECX
 16193 sstack EBP:-2,0
 16198 mov ECX,0
// va_start_0(...)
 16201 call 10011
 16204 sstack EBP:-3,EAX
 16208 sstack EBP:-4,0
__514:
 16213 rstack EAX,EBP:-2
 16217 rstack EBX,EBP:-1
 16221 sub EBX,EAX
 16223 mov EAX,EBX
 16225 fsgn EAX,EAX
 16227 max EAX,0
// if (I<n
 16230 cmp 0,EAX
 16233 jz 16346
 16236 mov EAX,SS:ESP
 16239 add EAX,-3
 16242 push EAX
 16244 mov ECX,1
// va_next(...)
 16247 call 10016
 16250 add ESP,1
 16253 sstack EBP:-5,EAX
 16257 sstack EBP:-6,0
 16262 rstack EAX,EBP:-6
 16266 mov EBX,EAX
 16268 inc EAX
 16270 sstack EBP:-6,EAX
 16274 rstack EAX,EBP:-5
 16278 add EAX,EBX
 16280 mov EBX,EAX
 16282 sstack EBP:-7,#EBX
__516:
 16286 rstack EAX,EBP:-7
// if (C
 16290 cmp 0,EAX
 16293 jz 16333
 16296 rstack EAX,EBP:-4
// len++
 16300 inc EAX
 16302 sstack EBP:-4,EAX
 16306 rstack EAX,EBP:-6
 16310 mov EBX,EAX
 16312 inc EAX
 16314 sstack EBP:-6,EAX
 16318 rstack EAX,EBP:-5
 16322 add EAX,EBX
 16324 mov EBX,EAX
// C=str[J++]
 16326 sstack EBP:-7,#EBX
 16330 jmp 16286
__515:
 16333 rstack EAX,EBP:-2
// I++
 16337 inc EAX
 16339 sstack EBP:-2,EAX
 16343 jmp 16213
__513:
 16346 rstack EAX,EBP:-4
 16350 add EAX,1
 16353 mov EBX,EAX
 16355 push EBX
 16357 mov ECX,1
// stack_alloc(...)
 16360 call 11635
 16363 add ESP,1
 16366 sstack EBP:-8,EAX
// I=0
 16370 sstack EBP:-2,0
 16375 mov ECX,0
// va_start_0(...)
 16378 call 10011
// va=va_start_0()
 16381 sstack EBP:-3,EAX
 16385 sstack EBP:-9,0
__518:
 16390 rstack EAX,EBP:-2
 16394 rstack EBX,EBP:-1
 16398 sub EBX,EAX
 16400 mov EAX,EBX
 16402 fsgn EAX,EAX
 16404 max EAX,0
// if (I<n
 16407 cmp 0,EAX
 16410 jz 16539
 16413 mov EAX,SS:ESP
 16416 add EAX,-3
 16419 push EAX
 16421 mov ECX,1
// va_next(...)
 16424 call 10016
 16427 add ESP,1
// str=va_next(&va)
 16430 sstack EBP:-5,EAX
// J=0
 16434 sstack EBP:-6,0
 16439 rstack EAX,EBP:-6
 16443 mov EBX,EAX
 16445 inc EAX
 16447 sstack EBP:-6,EAX
 16451 rstack EAX,EBP:-5
 16455 add EAX,EBX
 16457 mov EBX,EAX
// C=str[J++]
 16459 sstack EBP:-7,#EBX
__520:
 16463 rstack EAX,EBP:-7
// if (C
 16467 cmp 0,EAX
 16470 jz 16526
 16473 rstack EAX,EBP:-7
 16477 rstack EBX,EBP:-9
 16481 mov ECX,EBX
 16483 inc EBX
 16485 sstack EBP:-9,EBX
 16489 rstack EBX,EBP:-8
 16493 add EBX,ECX
 16495 mov ECX,EBX
// newstr[J2++]=C
 16497 mov #ECX,EAX
 16499 rstack EAX,EBP:-6
 16503 mov EBX,EAX
 16505 inc EAX
 16507 sstack EBP:-6,EAX
 16511 rstack EAX,EBP:-5
 16515 add EAX,EBX
 16517 mov EBX,EAX
// C=str[J++]
 16519 sstack EBP:-7,#EBX
 16523 jmp 16463
__519:
 16526 rstack EAX,EBP:-2
// I++
 16530 inc EAX
 16532 sstack EBP:-2,EAX
 16536 jmp 16390
__517:
 16539 rstack EAX,EBP:-9
 16543 rstack EBX,EBP:-8
 16547 add EBX,EAX
 16549 mov EAX,EBX
// newstr[J2]=0
 16551 mov #EAX,0
 16554 rstack EAX,EBP:-1
// stack_return arg #3 (float num_args)
 16558 push EAX
 16560 rstack EAX,EBP:-4
 16564 add EAX,1
 16567 mov EBX,EAX
// stack_return arg #2 (float size)
 16569 push EBX
 16571 rstack EAX,EBP:-8
// stack_return arg #1 (float ptr)
 16575 push EAX
 16577 mov ECX,3
// stack_return(...)
 16580 call 11897
 16583 add ESP,3
 16586 leave 
 16587 ret 
__511:
 16588 leave 
 16589 ret 
c2str:
// c2str(C)
 16590 enter -0
__522:
__524:
 16593 rstack EAX,EBP:2
 16597 mov EBX,10
 16600 sub EBX,EAX
 16602 fabs EBX,EBX
 16604 fsgn EBX,EBX
 16606 lneg EBX
// if (C=='\10')
 16608 cmp 0,EBX
 16611 jge 16632
// stack_return arg #3 (float num_args)
 16614 push 1
// stack_return arg #2 (float size)
 16617 push 3
// stack_return arg #1 (float ptr)
 16620 push 17278
 16623 mov ECX,3
// stack_return(...)
 16626 call 11897
 16629 add ESP,3
__525:
__523:
__527:
 16632 rstack EAX,EBP:2
 16636 mov EBX,0
 16639 sub EBX,EAX
 16641 fabs EBX,EBX
 16643 fsgn EBX,EBX
 16645 lneg EBX
// if (C==0)
 16647 cmp 0,EBX
 16650 jge 16671
// stack_return arg #3 (float num_args)
 16653 push 1
// stack_return arg #2 (float size)
 16656 push 3
// stack_return arg #1 (float ptr)
 16659 push 17280
 16662 mov ECX,3
// stack_return(...)
 16665 call 11897
 16668 add ESP,3
__528:
__526:
 16671 rstack EAX,EBP:2
 16675 mov EBX,0
 16678 add EBX,76909
// c2str_str[0]=C
 16681 mov #EBX,EAX
 16683 mov EAX,1
 16686 add EAX,76909
// c2str_str[1]=0
 16689 mov #EAX,0
// stack_return arg #3 (float num_args)
 16692 push 1
// stack_return arg #2 (float size)
 16695 push 2
// stack_return arg #1 (float ptr)
 16698 push 76909
 16701 mov ECX,3
// stack_return(...)
 16704 call 11897
 16707 add ESP,3
__521:
 16710 leave 
 16711 ret 
cstr_find_first_of:
// cstr_find_first_of(S,C)
 16712 enter 2
__530:
 16715 sstack EBP:-1,0
 16720 rstack EAX,EBP:-1
 16724 rstack EBX,EBP:2
 16728 add EBX,EAX
 16730 mov EAX,EBX
 16732 sstack EBP:-2,#EAX
__532:
 16736 rstack EAX,EBP:-2
 16740 mov EBX,0
 16743 sub EBX,EAX
 16745 fabs EBX,EBX
 16747 fsgn EBX,EBX
// if (C1!=0
 16749 cmp 0,EBX
 16752 jz 16814
__534:
 16755 rstack EAX,EBP:-2
 16759 rstack EBX,EBP:3
 16763 sub EBX,EAX
 16765 mov EAX,EBX
 16767 fabs EAX,EAX
 16769 fsgn EAX,EAX
 16771 lneg EAX
// if (C1==C)
 16773 cmp 0,EAX
 16776 jge 16785
 16779 rstack EAX,EBP:-1
 16783 leave 
 16784 ret 
__535:
__533:
 16785 rstack EAX,EBP:-1
// I++
 16789 inc EAX
 16791 sstack EBP:-1,EAX
 16795 rstack EAX,EBP:-1
 16799 rstack EBX,EBP:2
 16803 add EBX,EAX
 16805 mov EAX,EBX
// C1=S[I]
 16807 sstack EBP:-2,#EAX
 16811 jmp 16736
__531:
 16814 mov EAX,-1
 16817 leave 
 16818 ret 
__529:
 16819 leave 
 16820 ret 
cstr_find_last_of:
// cstr_find_last_of(S,C)
 16821 enter 2
__537:
 16824 rstack EAX,EBP:2
// strlen arg #1 (char* str)
 16828 push EAX
 16830 mov ECX,1
// strlen(...)
 16833 call 11121
 16836 add ESP,1
 16839 add EAX,-1
 16842 sstack EBP:-1,EAX
 16846 rstack EAX,EBP:-1
 16850 rstack EBX,EBP:2
 16854 add EBX,EAX
 16856 mov EAX,EBX
 16858 sstack EBP:-2,#EAX
__539:
 16862 rstack EAX,EBP:-1
 16866 mov EBX,-1
 16869 sub EBX,EAX
 16871 fabs EBX,EBX
 16873 fsgn EBX,EBX
// if (I!=-1
 16875 cmp 0,EBX
 16878 jz 16940
__541:
 16881 rstack EAX,EBP:-2
 16885 rstack EBX,EBP:3
 16889 sub EBX,EAX
 16891 mov EAX,EBX
 16893 fabs EAX,EAX
 16895 fsgn EAX,EAX
 16897 lneg EAX
// if (C1==C)
 16899 cmp 0,EAX
 16902 jge 16911
 16905 rstack EAX,EBP:-1
 16909 leave 
 16910 ret 
__542:
__540:
 16911 rstack EAX,EBP:-1
// I--
 16915 dec EAX
 16917 sstack EBP:-1,EAX
 16921 rstack EAX,EBP:-1
 16925 rstack EBX,EBP:2
 16929 add EBX,EAX
 16931 mov EAX,EBX
// C1=S[I]
 16933 sstack EBP:-2,#EAX
 16937 jmp 16862
__538:
 16940 mov EAX,-1
 16943 leave 
 16944 ret 
__536:
 16945 leave 
 16946 ret 
stack_copy:
// stack_copy(ptr,size)
 16947 enter -0
__544:
// stack_return arg #3 (float num_args)
 16950 push 2
 16953 rstack EAX,EBP:3
// stack_return arg #2 (float size)
 16957 push EAX
 16959 rstack EAX,EBP:2
// stack_return arg #1 (float ptr)
 16963 push EAX
 16965 mov ECX,3
// stack_return(...)
 16968 call 11897
 16971 add ESP,3
 16974 leave 
 16975 ret 
__543:
 16976 leave 
 16977 ret 
cstr_stack_copy:
// cstr_stack_copy(str)
 16978 enter 1
__546:
 16981 rstack EAX,EBP:2
// strlen arg #1 (char* str)
 16985 push EAX
 16987 mov ECX,1
// strlen(...)
 16990 call 11121
 16993 add ESP,1
 16996 sstack EBP:-1,EAX
// stack_return arg #3 (float num_args)
 17000 push 1
 17003 rstack EAX,EBP:-1
 17007 add EAX,1
 17010 mov EBX,EAX
// stack_return arg #2 (float size)
 17012 push EBX
 17014 rstack EAX,EBP:2
// stack_return arg #1 (float ptr)
 17018 push EAX
 17020 mov ECX,3
// stack_return(...)
 17023 call 11897
 17026 add ESP,3
 17029 leave 
 17030 ret 
__545:
 17031 leave 
 17032 ret 
isspace:
// isspace(C)
 17033 enter -0
__548:
__550:
 17036 rstack EAX,EBP:2
 17040 mov EBX,32
 17043 sub EBX,EAX
 17045 fabs EBX,EBX
 17047 fsgn EBX,EBX
 17049 lneg EBX
// if (C==' ')
 17051 cmp 0,EBX
 17054 jge 17062
 17057 mov EAX,1
 17060 leave 
 17061 ret 
__551:
__549:
__553:
 17062 rstack EAX,EBP:2
 17066 mov EBX,9
 17069 sub EBX,EAX
 17071 fabs EBX,EBX
 17073 fsgn EBX,EBX
 17075 lneg EBX
// if (C=='\9')
 17077 cmp 0,EBX
 17080 jge 17088
 17083 mov EAX,1
 17086 leave 
 17087 ret 
__554:
__552:
__556:
 17088 rstack EAX,EBP:2
 17092 mov EBX,10
 17095 sub EBX,EAX
 17097 fabs EBX,EBX
 17099 fsgn EBX,EBX
 17101 lneg EBX
// if (C=='\10')
 17103 cmp 0,EBX
 17106 jge 17114
 17109 mov EAX,1
 17112 leave 
 17113 ret 
__557:
__555:
__559:
 17114 rstack EAX,EBP:2
 17118 mov EBX,11
 17121 sub EBX,EAX
 17123 fabs EBX,EBX
 17125 fsgn EBX,EBX
 17127 lneg EBX
// if (C=='\11')
 17129 cmp 0,EBX
 17132 jge 17140
 17135 mov EAX,1
 17138 leave 
 17139 ret 
__560:
__558:
__562:
 17140 rstack EAX,EBP:2
 17144 mov EBX,12
 17147 sub EBX,EAX
 17149 fabs EBX,EBX
 17151 fsgn EBX,EBX
 17153 lneg EBX
// if (C=='\12')
 17155 cmp 0,EBX
 17158 jge 17166
 17161 mov EAX,1
 17164 leave 
 17165 ret 
__563:
__561:
__565:
 17166 rstack EAX,EBP:2
 17170 mov EBX,13
 17173 sub EBX,EAX
 17175 fabs EBX,EBX
 17177 fsgn EBX,EBX
 17179 lneg EBX
// if (C=='\13')
 17181 cmp 0,EBX
 17184 jge 17192
 17187 mov EAX,1
 17190 leave 
 17191 ret 
__566:
__564:
 17192 mov EAX,0
 17195 leave 
 17196 ret 
__547:
 17197 leave 
 17198 ret 
stralloc:
// stralloc(S)
 17199 enter 2
__568:
 17202 rstack EAX,EBP:2
// strlen arg #1 (char* str)
 17206 push EAX
 17208 mov ECX,1
// strlen(...)
 17211 call 11121
 17214 add ESP,1
 17217 add EAX,1
 17220 sstack EBP:-1,EAX
 17224 rstack EAX,EBP:-1
 17228 push EAX
 17230 mov ECX,1
// malloc(...)
 17233 call 29334
 17236 add ESP,1
 17239 sstack EBP:-2,EAX
 17243 rstack EAX,EBP:-1
// memcpy arg #3 (float n)
 17247 push EAX
 17249 rstack EAX,EBP:2
// memcpy arg #2 (void* src)
 17253 push EAX
 17255 rstack EAX,EBP:-2
// memcpy arg #1 (void* dest)
 17259 push EAX
 17261 mov ECX,3
// memcpy(...)
 17264 call 10355
 17267 add ESP,3
 17270 rstack EAX,EBP:-2
 17274 leave 
 17275 ret 
__567:
 17276 leave 
 17277 ret 
LIBSTRING_CONSTANTS:
c2str_n:
 17278 db ""
 17278 db 110
 17279 db 0
c2str_0:
 17280 db ""
 17280 db 48
 17281 db 0
LIBSTRING_END:
libmarker4:
 17282 db 0
libconsolescreen_init:
// libconsolescreen_init()
 17283 enter -0
__570:
// cs_last_x=29
 17286 mov #76900,29
// cs_last_y=17
 17290 mov #76901,17
// printScrX=0
 17294 mov #76902,0
// printScrY=0
 17298 mov #76903,0
__569:
 17302 leave 
 17303 ret 
setPrintCursor:
// setPrintCursor(x,y)
 17304 enter -0
__572:
 17307 rstack EAX,EBP:2
// printScrX=x
 17311 mov #76902,EAX
 17314 rstack EAX,EBP:3
// printScrY=y
 17318 mov #76903,EAX
__571:
 17321 leave 
 17322 ret 
Print:
// Print(str,col0)
 17323 enter 6
__574:
 17326 sstack EBP:-1,ECX
 17330 sstack EBP:-2,999
__576:
 17335 rstack EAX,EBP:-1
 17339 mov EBX,2
 17342 sub EBX,EAX
 17344 fabs EBX,EBX
 17346 fsgn EBX,EBX
 17348 lneg EBX
// if (nargs==2)
 17350 cmp 0,EBX
 17353 jge 17364
 17356 rstack EAX,EBP:3
// col=col0
 17360 sstack EBP:-2,EAX
__577:
__575:
 17364 rstack EAX,EBP:2
 17368 add EAX,0
 17371 mov EBX,EAX
 17373 sstack EBP:-3,#EBX
 17377 sstack EBP:-4,1
 17382 sstack EBP:-5,0
 17387 sstack EBP:-6,0
__579:
 17392 rstack EAX,EBP:-3
 17396 mov EBX,0
 17399 sub EBX,EAX
 17401 fabs EBX,EBX
 17403 fsgn EBX,EBX
// if (C!=0
 17405 cmp 0,EBX
 17408 jz 17686
__581:
 17411 mov EAX,#76901
 17414 sub EAX,#76903
 17417 neg EAX
 17419 fsgn EAX,EAX
 17421 max EAX,0
// if (printScrY>cs_last_y)
 17424 cmp 0,EAX
 17427 jge 17436
 17430 mov ECX,0
// ConsoleShiftUp(...)
 17433 call 18375
__582:
__580:
__584:
 17436 rstack EAX,EBP:-3
 17440 mov EBX,10
 17443 sub EBX,EAX
 17445 fabs EBX,EBX
 17447 fsgn EBX,EBX
 17449 lneg EBX
// if ((C=='\10'))
 17451 cmp 0,EBX
 17454 jge 17463
 17457 jmp 17652
 17460 jmp 17633
__586:
__585:
__588:
__590:
 17463 rstack EAX,EBP:-3
 17467 mov EBX,13
 17470 sub EBX,EAX
 17472 fabs EBX,EBX
 17474 fsgn EBX,EBX
 17476 lneg EBX
// if ((C=='\13'))
 17478 cmp 0,EBX
 17481 jge 17491
// printScrX=0
 17484 mov #76902,0
 17488 jmp 17633
__592:
__591:
__594:
__596:
 17491 rstack EAX,EBP:-3
 17495 mov EBX,8
 17498 sub EBX,EAX
 17500 fabs EBX,EBX
 17502 fsgn EBX,EBX
 17504 lneg EBX
// if ((C=='\8'))
 17506 cmp 0,EBX
 17509 jge 17522
// printScrY--
 17512 dec #76903
// printScrX=0
 17515 mov #76902,0
 17519 jmp 17633
__598:
__597:
__600:
__602:
 17522 rstack EAX,EBP:-3
 17526 mov EBX,12
 17529 sub EBX,EAX
 17531 fabs EBX,EBX
 17533 fsgn EBX,EBX
 17535 lneg EBX
// if ((C=='\12'))
 17537 cmp 0,EBX
 17540 jge 17603
__605:
 17543 mov EAX,#76900
 17546 sub EAX,#76902
 17549 fsgn EAX,EAX
 17551 inc EAX
 17553 max EAX,0
// if (printScrX<=cs_last_x
 17556 cmp 0,EAX
 17559 jz 17600
// ch=' '
 17562 sstack EBP:-6,32
 17567 rstack EAX,EBP:-2
 17571 push EAX
 17573 rstack EAX,EBP:-6
 17577 push EAX
 17579 push #76903
 17582 push #76902
 17585 mov ECX,4
// PrintCharXY(...)
 17588 call 17911
 17591 add ESP,4
// printScrX++
 17594 inc #76902
 17597 jmp 17543
__604:
 17600 jmp 17633
__606:
__603:
__608:
 17603 rstack EAX,EBP:-2
 17607 push EAX
 17609 rstack EAX,EBP:-3
 17613 push EAX
 17615 push #76903
 17618 push #76902
 17621 mov ECX,4
// PrintCharXY(...)
 17624 call 17911
 17627 add ESP,4
// printScrX++
 17630 inc #76902
__607:
__601:
__599:
__595:
__593:
__589:
__587:
__583:
__610:
 17633 mov EAX,#76900
 17636 sub EAX,#76902
 17639 neg EAX
 17641 fsgn EAX,EAX
 17643 max EAX,0
// if (printScrX>cs_last_x)
 17646 cmp 0,EAX
 17649 jge 17659
print_nextline:
// printScrX=0
 17652 mov #76902,0
// printScrY++
 17656 inc #76903
__611:
__609:
 17659 rstack EAX,EBP:-4
 17663 mov EBX,EAX
 17665 inc EAX
 17667 sstack EBP:-4,EAX
 17671 rstack EAX,EBP:2
 17675 add EAX,EBX
 17677 mov EBX,EAX
// C=str[I++]
 17679 sstack EBP:-3,#EBX
 17683 jmp 17392
__578:
__573:
 17686 leave 
 17687 ret 
PrintChar:
// PrintChar(C,col)
 17688 enter -0
__613:
 17691 rstack EAX,EBP:3
 17695 push EAX
 17697 rstack EAX,EBP:2
 17701 push EAX
 17703 push #76903
 17706 push #76902
 17709 mov ECX,4
// PrintCharXY(...)
 17712 call 17911
 17715 add ESP,4
// printScrX++
 17718 inc #76902
__615:
 17721 mov EAX,#76900
 17724 sub EAX,#76902
 17727 neg EAX
 17729 fsgn EAX,EAX
 17731 max EAX,0
// if (printScrX>cs_last_x)
 17734 cmp 0,EAX
 17737 jge 17774
// printScrX=0
 17740 mov #76902,0
// printScrY++
 17744 inc #76903
__618:
 17747 mov EAX,#76901
 17750 sub EAX,#76903
 17753 neg EAX
 17755 fsgn EAX,EAX
 17757 inc EAX
 17759 max EAX,0
// if (printScrY>=cs_last_y)
 17762 cmp 0,EAX
 17765 jge 17774
 17768 mov ECX,0
// ConsoleShiftUp(...)
 17771 call 18375
__619:
__617:
__616:
__614:
__612:
 17774 leave 
 17775 ret 
PrintStringXY:
// PrintStringXY(x,y,str,col)
 17776 enter 3
__621:
 17779 rstack EAX,EBP:2
 17783 rstack EBX,EBP:3
 17787 mul EBX,30
 17790 mov ECX,EBX
 17792 add ECX,EAX
 17794 mul ECX,2
 17797 sstack EBP:-1,ECX
 17801 sstack EBP:-2,0
 17806 rstack EAX,EBP:-2
 17810 mov EBX,EAX
 17812 inc EAX
 17814 sstack EBP:-2,EAX
 17818 rstack EAX,EBP:4
 17822 add EAX,EBX
 17824 mov EBX,EAX
 17826 sstack EBP:-3,#EBX
__623:
 17830 rstack EAX,EBP:-3
// if (C
 17834 cmp 0,EAX
 17837 jz 17909
 17840 rstack EAX,EBP:-3
 17844 rstack EBX,EBP:-1
 17848 mov ECX,EBX
 17850 inc EBX
 17852 sstack EBP:-1,EBX
 17856 add ECX,#76904
// AdrScreen[P++]=C
 17859 mov #ECX,EAX
 17861 rstack EAX,EBP:5
 17865 rstack EBX,EBP:-1
 17869 mov ECX,EBX
 17871 inc EBX
 17873 sstack EBP:-1,EBX
 17877 add ECX,#76904
// AdrScreen[P++]=col
 17880 mov #ECX,EAX
 17882 rstack EAX,EBP:-2
 17886 mov EBX,EAX
 17888 inc EAX
 17890 sstack EBP:-2,EAX
 17894 rstack EAX,EBP:4
 17898 add EAX,EBX
 17900 mov EBX,EAX
// C=str[I++]
 17902 sstack EBP:-3,#EBX
 17906 jmp 17830
__622:
__620:
 17909 leave 
 17910 ret 
PrintCharXY:
// printCharXY(X,Y,C,col)
 17911 enter 1
__625:
 17914 rstack EAX,EBP:3
 17918 mul EAX,30
 17921 mov EBX,EAX
 17923 rstack EAX,EBP:2
 17927 add EAX,EBX
 17929 mov EBX,EAX
 17931 mov EAX,2
 17934 mul EAX,EBX
 17936 mov EBX,#76904
 17939 add EBX,EAX
 17941 sstack EBP:-1,EBX
 17945 rstack EAX,EBP:4
 17949 rstack EBX,EBP:-1
 17953 mov ECX,EBX
 17955 inc EBX
 17957 sstack EBP:-1,EBX
// *P++=C
 17961 mov #ECX,EAX
 17963 rstack EAX,EBP:5
 17967 rstack EBX,EBP:-1
// *P=col
 17971 mov #EBX,EAX
__624:
 17973 leave 
 17974 ret 
screenEraseChar:
// screenEraseChar()
 17975 enter -0
__627:
__629:
 17978 mov EAX,0
 17981 sub EAX,#76902
 17984 neg EAX
 17986 fsgn EAX,EAX
 17988 max EAX,0
// if (printScrX>0)
 17991 cmp 0,EAX
 17994 jge 18003
// printScrX--
 17997 dec #76902
 18000 jmp 18029
__631:
__630:
__633:
__635:
 18003 mov EAX,0
 18006 sub EAX,#76903
 18009 neg EAX
 18011 fsgn EAX,EAX
 18013 max EAX,0
// if (printScrY>0)
 18016 cmp 0,EAX
 18019 jge 18029
// printScrY--
 18022 dec #76903
// printScrX=cs_last_x
 18025 mov #76902,#76900
__636:
__634:
__632:
__628:
 18029 push 999
 18032 push 32
 18035 push #76903
 18038 push #76902
 18041 mov ECX,4
// PrintCharXY(...)
 18044 call 17911
 18047 add ESP,4
__626:
 18050 leave 
 18051 ret 
screen_set:
// screen_set(scr)
 18052 enter -0
__638:
 18055 rstack EAX,EBP:2
// AdrScreen=scr
 18059 mov #76904,EAX
__637:
 18062 leave 
 18063 ret 
screen_clear:
// screen_clear()
 18064 enter -0
__640:
 18067 mov EAX,2041
 18070 add EAX,#76904
// AdrScreen[2041]=1
 18073 mov #EAX,1
__639:
 18076 leave 
 18077 ret 
screen_cursor_enable:
// screen_cursor_enable()
 18078 enter -0
__642:
 18081 mov EAX,2046
 18084 add EAX,#76904
// AdrScreen[2046]=1
 18087 mov #EAX,1
__641:
 18090 leave 
 18091 ret 
screen_cursor_disable:
// screen_cursor_disable()
 18092 enter -0
__644:
 18095 mov EAX,2046
 18098 add EAX,#76904
// AdrScreen[2046]=0
 18101 mov #EAX,0
__643:
 18104 leave 
 18105 ret 
screen_set_cursor_pos:
// screen_set_cursor_pos(I)
 18106 enter -0
__646:
 18109 rstack EAX,EBP:2
 18113 mov EBX,2
 18116 mul EBX,EAX
 18118 mov EAX,2045
 18121 add EAX,#76904
// AdrScreen[2045]=2*I
 18124 mov #EAX,EBX
__645:
 18126 leave 
 18127 ret 
screen_set_cursor_pos_xy:
// screen_set_cursor_pos_xy(x,y)
 18128 enter -0
__648:
 18131 rstack EAX,EBP:2
 18135 rstack EBX,EBP:3
 18139 mov ECX,30
 18142 mul ECX,EBX
 18144 add ECX,EAX
 18146 mov EAX,2
 18149 mul EAX,ECX
 18151 mov EBX,2045
 18154 add EBX,#76904
// AdrScreen[2045]=2*(30*y+x)
 18157 mov #EBX,EAX
__647:
 18159 leave 
 18160 ret 
screen_force_refresh:
// screen_force_refresh()
 18161 enter -0
__650:
 18164 mov EAX,2020
 18167 add EAX,#76904
// AdrScreen[2020]=1
 18170 mov #EAX,1
 18173 push 1
 18176 mov ECX,1
// delay(...)
 18179 call 25046
 18182 add ESP,1
__649:
 18185 leave 
 18186 ret 
screen_set_shift_box_x1:
// screen_set_shift_box_x1(n)
 18187 enter -0
__652:
 18190 rstack EAX,EBP:2
 18194 mov EBX,2031
 18197 add EBX,#76904
// AdrScreen[2031]=n
 18200 mov #EBX,EAX
__651:
 18202 leave 
 18203 ret 
screen_set_shift_box_x2:
// screen_set_shift_box_x2(n)
 18204 enter -0
__654:
 18207 rstack EAX,EBP:2
 18211 mov EBX,2032
 18214 add EBX,#76904
// AdrScreen[2032]=n
 18217 mov #EBX,EAX
__653:
 18219 leave 
 18220 ret 
screen_set_shift_box_y1:
// screen_set_shift_box_y1(n)
 18221 enter -0
__656:
 18224 rstack EAX,EBP:2
 18228 mov EBX,2033
 18231 add EBX,#76904
// AdrScreen[2033]=n
 18234 mov #EBX,EAX
__655:
 18236 leave 
 18237 ret 
screen_set_shift_box_y2:
// screen_set_shift_box_y2(n)
 18238 enter -0
__658:
 18241 rstack EAX,EBP:2
 18245 mov EBX,2034
 18248 add EBX,#76904
// AdrScreen[2034]=n
 18251 mov #EBX,EAX
__657:
 18253 leave 
 18254 ret 
screen_set_shift_box:
// screen_set_shift_box(x1,x2,y1,y2)
 18255 enter -0
__660:
 18258 rstack EAX,EBP:2
 18262 mov EBX,2031
 18265 add EBX,#76904
// AdrScreen[2031]=x1
 18268 mov #EBX,EAX
 18270 rstack EAX,EBP:3
 18274 mov EBX,2032
 18277 add EBX,#76904
// AdrScreen[2032]=x2
 18280 mov #EBX,EAX
 18282 rstack EAX,EBP:4
 18286 mov EBX,2033
 18289 add EBX,#76904
// AdrScreen[2033]=y1
 18292 mov #EBX,EAX
 18294 rstack EAX,EBP:5
 18298 mov EBX,2034
 18301 add EBX,#76904
// AdrScreen[2034]=y2
 18304 mov #EBX,EAX
__659:
 18306 leave 
 18307 ret 
screen_set_print_box:
// screen_set_print_box(x1,y1,x2,y2)
 18308 enter -0
__662:
 18311 rstack EAX,EBP:2
// screen_print_x_min=x1
 18315 mov #76905,EAX
 18318 rstack EAX,EBP:3
// screen_print_y_min=y1
 18322 mov #76906,EAX
 18325 rstack EAX,EBP:4
// screen_print_x_max=x2
 18329 mov #76907,EAX
 18332 rstack EAX,EBP:5
// screen_print_y_max=y2
 18336 mov #76908,EAX
__661:
 18339 leave 
 18340 ret 
screen_shift_vertical:
// screen_shift_vertical(n)
 18341 enter -0
__664:
 18344 rstack EAX,EBP:2
 18348 mov EBX,2038
 18351 add EBX,#76904
// AdrScreen[2038]=n
 18354 mov #EBX,EAX
__663:
 18356 leave 
 18357 ret 
screen_shift_horizontal:
// screen_shift_horizontal(n)
 18358 enter -0
__666:
 18361 rstack EAX,EBP:2
 18365 mov EBX,2037
 18368 add EBX,#76904
// AdrScreen[2037]=n
 18371 mov #EBX,EAX
__665:
 18373 leave 
 18374 ret 
ConsoleShiftUp:
// ConsoleShiftUp()
 18375 enter -0
__668:
__670:
 18378 mov EAX,#76901
 18381 sub EAX,#76903
 18384 neg EAX
 18386 fsgn EAX,EAX
 18388 inc EAX
 18390 max EAX,0
// if (printScrY>=cs_last_y)
 18393 cmp 0,EAX
 18396 jge 18414
// screen_shift_vertical arg #1 (float n)
 18399 push 1
 18402 mov ECX,1
// screen_shift_vertical(...)
 18405 call 18341
 18408 add ESP,1
// printScrY--
 18411 dec #76903
__671:
__669:
__667:
 18414 leave 
 18415 ret 
libmarker5:
 18416 db 0
udhDeviceString0:
 18417 db "None",0
udhDeviceString1:
 18422 db "Unknown",0
udhDeviceString2:
 18430 db "Extended bus",0
udhDeviceString3:
 18443 db "Address bus",0
udhDeviceString4:
 18455 db "Zyelios CPU",0
udhDeviceString5:
 18467 db "Zyelios GPU",0
udhDeviceString6:
 18479 db "Zyelios SPU",0
udhDeviceString7:
 18491 db "Flash EEPROM",0
udhDeviceString8:
 18504 db "ROM",0
udhDeviceString9:
 18508 db "Data bus",0
udhDeviceString10:
 18517 db "CD Ray",0
udhDeviceString11:
 18524 db "Console screen",0
udhDeviceString12:
 18539 db "Digital screen",0
udhDeviceString13:
 18554 db "Data plug",0
udhDeviceString14:
 18564 db "Data socket",0
udhDeviceString15:
 18576 db "Keyboard",0
udhDeviceString16:
 18585 db "Oscilloscope",0
udhDeviceString17:
 18598 db "Sound emitter",0
udhDeviceString18:
 18612 db "Constant value",0
udhDeviceString19:
 18627 db "Data port",0
udhDeviceString20:
 18637 db "RAM",0
udhDeviceName:
 18641 db 18417,18422,18430
 18644 db 18443,18455,18467
 18647 db 18479,18491,18504
 18650 db 18508,18517,18524
 18653 db 18539,18554,18564
 18656 db 18576,18585,18598
 18659 db 18612,18627,18637
udhBusOffset:
 18662 alloc 1
udhQueryCallback:
 18663 alloc 8
udhQueryCallbackCount:
 18671 db 0
udhSetBusAddress:
// udhSetBusAddress(extOffset)
 18672 enter -0
__673:
 18675 rstack EAX,EBP:2
// udhBusOffset=extOffset
 18679 mov #18662,EAX
 18682 mov ECX,0
// udhQueryDevices(...)
 18685 call 18690
__672:
 18688 leave 
 18689 ret 
udhQueryDevices:
// udhQueryDevices()
 18690 enter 2
__675:
 18693 mov EAX,16
 18696 add EAX,#18662
// udhBusOffset[16]=32+8
 18699 mov #EAX,40
 18702 mov EAX,17
 18705 add EAX,#18662
// udhBusOffset[17]=1
 18708 mov #EAX,1
// init loop
 18711 sstack EBP:-1,0
__677:
 18716 rstack EAX,EBP:-1
 18720 mov EBX,#18671
 18723 sub EBX,EAX
 18725 fsgn EBX,EBX
// condition
 18727 max EBX,0
 18730 cmp 0,EBX
 18733 jz 18771
 18736 rstack EAX,EBP:-1
 18740 add EAX,18663
 18743 mov EBX,EAX
 18745 sstack EBP:-2,#EBX
 18749 mov ECX,0
 18752 rstack EAX,EBP:-2
// functionPtr(...)
 18756 call EAX
 18758 rstack EAX,EBP:-1
// loop step
 18762 inc EAX
 18764 sstack EBP:-1,EAX
 18768 jmp 18716
__676:
__674:
 18771 leave 
 18772 ret 
udhRegisterDriver:
// udhRegisterDriver(queryDeviceFunction)
 18773 enter -0
__679:
 18776 rstack EAX,EBP:2
 18780 mov EBX,#18671
 18783 add EBX,18663
// udhQueryCallback[udhQueryCallbackCount]=queryDeviceFunction
 18786 mov #EBX,EAX
__681:
 18788 mov EAX,8
 18791 sub EAX,#18671
 18794 fsgn EAX,EAX
 18796 max EAX,0
// if (udhQueryCallbackCount<8)
 18799 cmp 0,EAX
 18802 jge 18808
// udhQueryCallbackCount++
 18805 inc #18671
__680:
__682:
__678:
 18808 leave 
 18809 ret 
udhGetDeviceType:
// udhGetDeviceType(busIndex)
 18810 enter -0
__684:
 18813 rstack EAX,EBP:2
 18817 mov EBX,32
 18820 add EBX,EAX
 18822 add EBX,#18662
 18825 mov EAX,#EBX
 18827 leave 
 18828 ret 
__683:
 18829 leave 
 18830 ret 
udhGetDeviceOffset:
// udhGetDeviceOffset(busIndex)
 18831 enter -0
__686:
 18834 rstack EAX,EBP:2
 18838 mul EAX,2
 18841 mov EBX,EAX
 18843 add EBX,#18662
 18846 mov EAX,8
 18849 add EAX,#EBX
 18851 mov EBX,32
 18854 add EBX,EAX
 18856 mov EAX,#18662
 18859 add EAX,EBX
 18861 leave 
 18862 ret 
__685:
 18863 leave 
 18864 ret 
udhGetDeviceStart:
// udhGetDeviceStart(busIndex)
 18865 enter -0
__688:
 18868 rstack EAX,EBP:2
 18872 mul EAX,2
 18875 mov EBX,EAX
 18877 add EBX,#18662
 18880 mov EAX,#EBX
 18882 leave 
 18883 ret 
__687:
 18884 leave 
 18885 ret 
udhGetDeviceEnd:
// udhGetDeviceEnd(busIndex)
 18886 enter -0
__690:
 18889 rstack EAX,EBP:2
 18893 mul EAX,2
 18896 mov EBX,EAX
 18898 add EBX,1
 18901 add EBX,#18662
 18904 mov EAX,#EBX
 18906 leave 
 18907 ret 
__689:
 18908 leave 
 18909 ret 
udhSetDeviceStart:
// udhSetDeviceStart(busIndex,val)
 18910 enter -0
__692:
 18913 rstack EAX,EBP:3
 18917 rstack EBX,EBP:2
 18921 mul EBX,2
 18924 mov ECX,EBX
 18926 add ECX,#18662
// udhBusOffset[busIndex*2]=val
 18929 mov #ECX,EAX
__691:
 18931 leave 
 18932 ret 
udhSetDeviceEnd:
// udhSetDeviceEnd(busIndex,val)
 18933 enter -0
__694:
 18936 rstack EAX,EBP:3
 18940 rstack EBX,EBP:2
 18944 mul EBX,2
 18947 mov ECX,EBX
 18949 add ECX,1
 18952 add ECX,#18662
 18955 mov #ECX,EAX
 18957 mov EBX,#ECX
 18959 mov EAX,EBX
 18961 leave 
 18962 ret 
__693:
 18963 leave 
 18964 ret 
udhGetDeviceName:
// udhGetDeviceName(busIndex)
 18965 enter 1
__696:
 18968 rstack EAX,EBP:2
// udhGetDeviceType arg #1 (float busIndex)
 18972 push EAX
 18974 mov ECX,1
// udhGetDeviceType(...)
 18977 call 18810
 18980 add ESP,1
 18983 sstack EBP:-1,EAX
__698:
 18987 rstack EAX,EBP:-1
 18991 mov EBX,20
 18994 sub EBX,EAX
 18996 fsgn EBX,EBX
 18998 inc EBX
 19000 max EBX,0
 19003 rstack EAX,EBP:-1
 19007 mov ECX,0
 19010 sub ECX,EAX
 19012 neg ECX
 19014 fsgn ECX,ECX
 19016 inc ECX
 19018 max ECX,0
 19021 and ECX,EBX
// if ((deviceType>=0)&&(deviceType<=20))
 19023 cmp 0,ECX
 19026 jge 19045
 19029 rstack EAX,EBP:-1
 19033 add EAX,18641
 19036 mov EBX,EAX
 19038 mov EAX,#EBX
 19040 leave 
 19041 ret 
 19042 jmp 19055
__700:
__699:
__702:
 19045 mov EAX,1
 19048 add EAX,18641
 19051 mov EAX,#EAX
 19053 leave 
 19054 ret 
__701:
__697:
__695:
 19055 leave 
 19056 ret 
udhTypeToString:
// udhTypeToString(type)
 19057 enter -0
__704:
__706:
 19060 rstack EAX,EBP:2
 19064 mov EBX,20
 19067 sub EBX,EAX
 19069 fsgn EBX,EBX
 19071 inc EBX
 19073 max EBX,0
 19076 rstack EAX,EBP:2
 19080 mov ECX,0
 19083 sub ECX,EAX
 19085 neg ECX
 19087 fsgn ECX,ECX
 19089 inc ECX
 19091 max ECX,0
 19094 and ECX,EBX
// if ((type>=0)&&(type<=20))
 19096 cmp 0,ECX
 19099 jge 19118
 19102 rstack EAX,EBP:2
 19106 add EAX,18641
 19109 mov EBX,EAX
 19111 mov EAX,#EBX
 19113 leave 
 19114 ret 
 19115 jmp 19128
__708:
__707:
__710:
 19118 mov EAX,1
 19121 add EAX,18641
 19124 mov EAX,#EAX
 19126 leave 
 19127 ret 
__709:
__705:
__703:
 19128 leave 
 19129 ret 
udhSetDeviceOffsetSize:
// udhSetDeviceOffsetSize(busIndex,offst,size)
 19130 enter -0
__712:
 19133 rstack EAX,EBP:3
 19137 rstack EBX,EBP:2
 19141 mul EBX,2
 19144 mov ECX,EBX
 19146 add ECX,0
 19149 add ECX,#18662
// udhBusOffset[busIndex*2+0]=offst
 19152 mov #ECX,EAX
 19154 rstack EAX,EBP:4
 19158 add EAX,-1
 19161 mov EBX,EAX
 19163 rstack EAX,EBP:3
 19167 add EAX,EBX
 19169 mov EBX,EAX
 19171 rstack EAX,EBP:2
 19175 mul EAX,2
 19178 mov ECX,EAX
 19180 add ECX,1
 19183 add ECX,#18662
// udhBusOffset[busIndex*2+1]=offst+size-1
 19186 mov #ECX,EBX
__711:
 19188 leave 
 19189 ret 
udhGetNumDevices:
// udhGetNumDevices()
 19190 enter -0
__714:
 19193 mov EAX,8
 19196 leave 
 19197 ret 
__713:
 19198 leave 
 19199 ret 
udhGetDevices:
// udhGetDevices(type,maxCount,deviceList)
 19200 enter 3
__716:
 19203 rstack EAX,EBP:4
// devPtr=deviceList
 19207 sstack EBP:-2,EAX
// n=0
 19211 sstack EBP:-3,0
// init loop
 19216 sstack EBP:-1,0
__718:
 19221 rstack EAX,EBP:-1
 19225 mov EBX,8
 19228 sub EBX,EAX
 19230 fsgn EBX,EBX
// condition
 19232 max EBX,0
 19235 cmp 0,EBX
 19238 jz 19342
__720:
 19241 rstack EAX,EBP:-3
 19245 rstack EBX,EBP:3
 19249 sub EBX,EAX
 19251 mov EAX,EBX
 19253 fsgn EAX,EAX
 19255 max EAX,0
 19258 rstack EBX,EBP:-1
// udhGetDeviceType arg #1 (float busIndex)
 19262 push EBX
 19264 mov ECX,1
// udhGetDeviceType(...)
 19267 call 18810
 19270 add ESP,1
 19273 push EAX
 19275 mov EBX,EAX
 19277 pop EAX
 19279 rstack ECX,EBP:2
 19283 sub ECX,EBX
 19285 mov EBX,ECX
 19287 fabs EBX,EBX
 19289 fsgn EBX,EBX
 19291 lneg EBX
 19293 and EBX,EAX
// if ((udhGetDeviceType(i)==type)&&(n<maxCount))
 19295 cmp 0,EBX
 19298 jge 19329
 19301 rstack EAX,EBP:-3
// n++
 19305 inc EAX
 19307 sstack EBP:-3,EAX
 19311 rstack EAX,EBP:-1
 19315 rstack EBX,EBP:-2
 19319 mov ECX,EBX
 19321 inc EBX
 19323 sstack EBP:-2,EBX
// *devPtr++=i
 19327 mov #ECX,EAX
__721:
__719:
 19329 rstack EAX,EBP:-1
// loop step
 19333 inc EAX
 19335 sstack EBP:-1,EAX
 19339 jmp 19221
__717:
 19342 rstack EAX,EBP:-3
 19346 leave 
 19347 ret 
__715:
 19348 leave 
 19349 ret 
udhSetRecursive:
// udhSetRecursive(val)
 19350 enter -0
__723:
 19353 rstack EAX,EBP:2
 19357 mov EBX,20
 19360 add EBX,#18662
// udhBusOffset[20]=val
 19363 mov #EBX,EAX
__722:
 19365 leave 
 19366 ret 
udh_getSizeFromType:
// udh_getSizeFromType(type)
 19367 enter 1
__725:
 19370 sstack EBP:-1,4096
__727:
 19375 rstack EAX,EBP:2
 19379 mov EBX,15
 19382 sub EBX,EAX
 19384 fabs EBX,EBX
 19386 fsgn EBX,EBX
 19388 lneg EBX
// if (type==15)
 19390 cmp 0,EBX
 19393 jge 19401
// size=32+128
 19396 sstack EBP:-1,160
__728:
__726:
__730:
 19401 rstack EAX,EBP:2
 19405 mov EBX,20
 19408 sub EBX,EAX
 19410 fabs EBX,EBX
 19412 fsgn EBX,EBX
 19414 lneg EBX
// if (type==20)
 19416 cmp 0,EBX
 19419 jge 19427
// size=128*1024
 19422 sstack EBP:-1,131072
__731:
__729:
__733:
 19427 rstack EAX,EBP:2
 19431 mov EBX,8
 19434 sub EBX,EAX
 19436 fabs EBX,EBX
 19438 fsgn EBX,EBX
 19440 lneg EBX
// if (type==8)
 19442 cmp 0,EBX
 19445 jge 19453
// size=256*1024
 19448 sstack EBP:-1,262144
__734:
__732:
__736:
 19453 rstack EAX,EBP:2
 19457 mov EBX,11
 19460 sub EBX,EAX
 19462 fabs EBX,EBX
 19464 fsgn EBX,EBX
 19466 lneg EBX
// if (type==11)
 19468 cmp 0,EBX
 19471 jge 19479
// size=2048
 19474 sstack EBP:-1,2048
__737:
__735:
__739:
 19479 rstack EAX,EBP:2
 19483 mov EBX,12
 19486 sub EBX,EAX
 19488 fabs EBX,EBX
 19490 fsgn EBX,EBX
 19492 lneg EBX
// if (type==12)
 19494 cmp 0,EBX
 19497 jge 19505
// size=256*256
 19500 sstack EBP:-1,65536
__740:
__738:
__742:
 19505 rstack EAX,EBP:2
 19509 mov EBX,4
 19512 sub EBX,EAX
 19514 fabs EBX,EBX
 19516 fsgn EBX,EBX
 19518 lneg EBX
// if (type==4)
 19520 cmp 0,EBX
 19523 jge 19531
// size=65536
 19526 sstack EBP:-1,65536
__743:
__741:
 19531 rstack EAX,EBP:-1
 19535 leave 
 19536 ret 
__724:
 19537 leave 
 19538 ret 
typeof_EBcb_entry:
 19539 db "EBcbEntry",0
sizeof_EBcb_entry:
 19549 db 5
EBcb_entry_constructor:
// EBcb_entry_constructor(this)
 19550 enter 1
__745:
 19553 rstack EAX,EBP:2
 19557 add EAX,0
 19560 mov EBX,EAX
// this[0]=typeof_EBcb_entry
 19562 mov #EBX,19539
// init loop
 19565 sstack EBP:-1,1
__747:
 19570 rstack EAX,EBP:-1
 19574 mov EBX,5
 19577 sub EBX,EAX
 19579 fsgn EBX,EBX
// condition
 19581 max EBX,0
 19584 cmp 0,EBX
 19587 jz 19618
 19590 rstack EAX,EBP:-1
 19594 rstack EBX,EBP:2
 19598 add EBX,EAX
 19600 mov EAX,EBX
// this[I]=0
 19602 mov #EAX,0
 19605 rstack EAX,EBP:-1
// loop step
 19609 inc EAX
 19611 sstack EBP:-1,EAX
 19615 jmp 19570
__746:
__744:
 19618 leave 
 19619 ret 
EBcb_entry_set_type:
// EBcb_entry_set_type(this,val)
 19620 enter -0
__749:
 19623 rstack EAX,EBP:3
 19627 rstack EBX,EBP:2
 19631 add EBX,1
 19634 mov ECX,EBX
// this[1]=val
 19636 mov #ECX,EAX
__748:
 19638 leave 
 19639 ret 
EBcb_entry_set_size:
// EBcb_entry_set_size(this,val)
 19640 enter -0
__751:
 19643 rstack EAX,EBP:3
 19647 rstack EBX,EBP:2
 19651 add EBX,2
 19654 mov ECX,EBX
// this[2]=val
 19656 mov #ECX,EAX
__750:
 19658 leave 
 19659 ret 
EBcb_entry_set_addr:
// EBcb_entry_set_addr(this,val)
 19660 enter -0
__753:
 19663 rstack EAX,EBP:3
 19667 rstack EBX,EBP:2
 19671 add EBX,3
 19674 mov ECX,EBX
// this[3]=val
 19676 mov #ECX,EAX
__752:
 19678 leave 
 19679 ret 
EBcb_entry_set_user:
// EBcb_entry_set_user(this,val)
 19680 enter -0
__755:
 19683 rstack EAX,EBP:3
 19687 rstack EBX,EBP:2
 19691 add EBX,4
 19694 mov ECX,EBX
// this[4]=val
 19696 mov #ECX,EAX
__754:
 19698 leave 
 19699 ret 
EBcb_entry_get_type:
// EBcb_entry_get_type(this)
 19700 enter -0
__757:
 19703 rstack EAX,EBP:2
 19707 add EAX,1
 19710 mov EBX,EAX
 19712 mov EAX,#EBX
 19714 leave 
 19715 ret 
__756:
 19716 leave 
 19717 ret 
EBcb_entry_get_size:
// EBcb_entry_get_size(this)
 19718 enter -0
__759:
 19721 rstack EAX,EBP:2
 19725 add EAX,2
 19728 mov EBX,EAX
 19730 mov EAX,#EBX
 19732 leave 
 19733 ret 
__758:
 19734 leave 
 19735 ret 
EBcb_entry_get_addr:
// EBcb_entry_get_addr(this)
 19736 enter -0
__761:
 19739 rstack EAX,EBP:2
 19743 add EAX,3
 19746 mov EBX,EAX
 19748 mov EAX,#EBX
 19750 leave 
 19751 ret 
__760:
 19752 leave 
 19753 ret 
EBcb_entry_get_user:
// EBcb_entry_get_user(this)
 19754 enter -0
__763:
 19757 rstack EAX,EBP:2
 19761 add EAX,4
 19764 mov EBX,EAX
 19766 mov EAX,#EBX
 19768 leave 
 19769 ret 
__762:
 19770 leave 
 19771 ret 
typeof_EBcb:
 19772 db "EBctrlBlock",0
sizeof_EBcb:
 19784 db 46
EBcb_constructor:
// EBcb_constructor(this)
 19785 enter 2
__765:
 19788 rstack EAX,EBP:2
 19792 add EAX,0
 19795 mov EBX,EAX
// this[0]=typeof_EBcb
 19797 mov #EBX,19772
// init loop
 19800 sstack EBP:-1,0
__767:
 19805 rstack EAX,EBP:-1
 19809 mov EBX,9
 19812 sub EBX,EAX
 19814 fsgn EBX,EBX
// condition
 19816 max EBX,0
 19819 cmp 0,EBX
 19822 jz 19878
 19825 rstack EAX,EBP:-1
 19829 push EAX
 19831 rstack EAX,EBP:2
 19835 push EAX
 19837 mov ECX,2
// EBcb_get_entry(...)
 19840 call 19880
 19843 add ESP,2
 19846 sstack EBP:-2,EAX
 19850 rstack EAX,EBP:-2
// EBcb_entry_constructor arg #1 (float this)
 19854 push EAX
 19856 mov ECX,1
// EBcb_entry_constructor(...)
 19859 call 19550
 19862 add ESP,1
 19865 rstack EAX,EBP:-1
// loop step
 19869 inc EAX
 19871 sstack EBP:-1,EAX
 19875 jmp 19805
__766:
__764:
 19878 leave 
 19879 ret 
EBcb_get_entry:
// EBcb_get_entry(this,num)
 19880 enter 1
__769:
 19883 rstack EAX,EBP:3
 19887 mov EBX,#19549
 19890 mul EBX,EAX
 19892 add EBX,1
 19895 rstack EAX,EBP:2
 19899 add EAX,EBX
 19901 mov EBX,EAX
 19903 sstack EBP:-1,EBX
 19907 rstack EAX,EBP:-1
 19911 leave 
 19912 ret 
__768:
 19913 leave 
 19914 ret 
EBcb_populate:
// EBcb_populate(this)
 19915 enter 8
__771:
// EBcb_get_entry arg #2 (float num)
 19918 push 0
 19921 rstack EAX,EBP:2
// EBcb_get_entry arg #1 (float this)
 19925 push EAX
 19927 mov ECX,2
// EBcb_get_entry(...)
 19930 call 19880
 19933 add ESP,2
 19936 sstack EBP:-1,EAX
 19940 rstack EAX,EBP:-1
// EBcb_entry_get_addr arg #1 (float this)
 19944 push EAX
 19946 mov ECX,1
// EBcb_entry_get_addr(...)
 19949 call 19736
 19952 add ESP,1
 19955 sstack EBP:-2,EAX
 19959 rstack EAX,EBP:-2
// udhSetBusAddress arg #1 (float extOffset)
 19963 push EAX
 19965 mov ECX,1
// udhSetBusAddress(...)
 19968 call 18672
 19971 add ESP,1
// udhSetRecursive arg #1 (float val)
 19974 push 0
 19977 mov ECX,1
// udhSetRecursive(...)
 19980 call 19350
 19983 add ESP,1
 19986 mov ECX,0
// udhQueryDevices(...)
 19989 call 18690
// init loop
 19992 sstack EBP:-3,0
__773:
 19997 rstack EAX,EBP:-3
 20001 mov EBX,8
 20004 sub EBX,EAX
 20006 fsgn EBX,EBX
// condition
 20008 max EBX,0
 20011 cmp 0,EBX
 20014 jz 20211
 20017 rstack EAX,EBP:-3
 20021 add EAX,1
 20024 mov EBX,EAX
 20026 sstack EBP:-4,EBX
 20030 rstack EAX,EBP:-4
// EBcb_get_entry arg #2 (float num)
 20034 push EAX
 20036 rstack EAX,EBP:2
// EBcb_get_entry arg #1 (float this)
 20040 push EAX
 20042 mov ECX,2
// EBcb_get_entry(...)
 20045 call 19880
 20048 add ESP,2
// EBentry=EBcb_get_entry(this,entryNum)
 20051 sstack EBP:-1,EAX
 20055 rstack EAX,EBP:-3
// udhGetDeviceType arg #1 (float busIndex)
 20059 push EAX
 20061 mov ECX,1
// udhGetDeviceType(...)
 20064 call 18810
 20067 add ESP,1
 20070 sstack EBP:-5,EAX
 20074 rstack EAX,EBP:-3
// udhGetDeviceStart arg #1 (float busIndex)
 20078 push EAX
 20080 mov ECX,1
// udhGetDeviceStart(...)
 20083 call 18865
 20086 add ESP,1
 20089 sstack EBP:-6,EAX
 20093 rstack EAX,EBP:-3
// udhGetDeviceEnd arg #1 (float busIndex)
 20097 push EAX
 20099 mov ECX,1
// udhGetDeviceEnd(...)
 20102 call 18886
 20105 add ESP,1
 20108 sstack EBP:-7,EAX
 20112 rstack EAX,EBP:-6
 20116 neg EAX
 20118 mov EBX,EAX
 20120 add EBX,1
 20123 rstack EAX,EBP:-7
 20127 add EAX,EBX
 20129 mov EBX,EAX
 20131 sstack EBP:-8,EBX
 20135 rstack EAX,EBP:-5
// EBcb_entry_set_type arg #2 (float val)
 20139 push EAX
 20141 rstack EAX,EBP:-1
// EBcb_entry_set_type arg #1 (float this)
 20145 push EAX
 20147 mov ECX,2
// EBcb_entry_set_type(...)
 20150 call 19620
 20153 add ESP,2
 20156 rstack EAX,EBP:-8
// EBcb_entry_set_size arg #2 (float val)
 20160 push EAX
 20162 rstack EAX,EBP:-1
// EBcb_entry_set_size arg #1 (float this)
 20166 push EAX
 20168 mov ECX,2
// EBcb_entry_set_size(...)
 20171 call 19640
 20174 add ESP,2
 20177 rstack EAX,EBP:-6
// EBcb_entry_set_addr arg #2 (float val)
 20181 push EAX
 20183 rstack EAX,EBP:-1
// EBcb_entry_set_addr arg #1 (float this)
 20187 push EAX
 20189 mov ECX,2
// EBcb_entry_set_addr(...)
 20192 call 19660
 20195 add ESP,2
 20198 rstack EAX,EBP:-3
// loop step
 20202 inc EAX
 20204 sstack EBP:-3,EAX
 20208 jmp 19997
__772:
__770:
 20211 leave 
 20212 ret 
getSizeFromDevType:
// getSizeFromDevType(type)
 20213 enter -0
__775:
 20216 rstack EAX,EBP:2
// udh_getSizeFromType arg #1 (float type)
 20220 push EAX
 20222 mov ECX,1
// udh_getSizeFromType(...)
 20225 call 19367
 20228 add ESP,1
 20231 leave 
 20232 ret 
__774:
 20233 leave 
 20234 ret 
EBcb_autoconf:
// EBcb_autoconf(this)
 20235 enter 11
__777:
// EBcb_get_entry arg #2 (float num)
 20238 push 0
 20241 rstack EAX,EBP:2
// EBcb_get_entry arg #1 (float this)
 20245 push EAX
 20247 mov ECX,2
// EBcb_get_entry(...)
 20250 call 19880
 20253 add ESP,2
 20256 sstack EBP:-1,EAX
 20260 rstack EAX,EBP:-1
// EBcb_entry_get_addr arg #1 (float this)
 20264 push EAX
 20266 mov ECX,1
// EBcb_entry_get_addr(...)
 20269 call 19736
 20272 add ESP,1
 20275 sstack EBP:-2,EAX
 20279 rstack EAX,EBP:-2
// udhSetBusAddress arg #1 (float extOffset)
 20283 push EAX
 20285 mov ECX,1
// udhSetBusAddress(...)
 20288 call 18672
 20291 add ESP,1
// udhSetRecursive arg #1 (float val)
 20294 push 0
 20297 mov ECX,1
// udhSetRecursive(...)
 20300 call 19350
 20303 add ESP,1
 20306 mov ECX,0
// udhQueryDevices(...)
 20309 call 18690
 20312 sstack EBP:-3,0
// init loop
 20317 sstack EBP:-4,0
__779:
 20322 rstack EAX,EBP:-4
 20326 mov EBX,8
 20329 sub EBX,EAX
 20331 fsgn EBX,EBX
// condition
 20333 max EBX,0
 20336 cmp 0,EBX
 20339 jz 20592
 20342 rstack EAX,EBP:-4
 20346 add EAX,1
 20349 mov EBX,EAX
 20351 sstack EBP:-5,EBX
 20355 rstack EAX,EBP:-5
// EBcb_get_entry arg #2 (float num)
 20359 push EAX
 20361 rstack EAX,EBP:2
// EBcb_get_entry arg #1 (float this)
 20365 push EAX
 20367 mov ECX,2
// EBcb_get_entry(...)
 20370 call 19880
 20373 add ESP,2
 20376 sstack EBP:-6,EAX
 20380 rstack EAX,EBP:-4
// udhGetDeviceType arg #1 (float busIndex)
 20384 push EAX
 20386 mov ECX,1
// udhGetDeviceType(...)
 20389 call 18810
 20392 add ESP,1
 20395 sstack EBP:-7,EAX
 20399 rstack EAX,EBP:-3
 20403 sstack EBP:-8,EAX
 20407 rstack EAX,EBP:-7
// getSizeFromDevType arg #1 (float type)
 20411 push EAX
 20413 mov ECX,1
// getSizeFromDevType(...)
 20416 call 20213
 20419 add ESP,1
 20422 sstack EBP:-9,EAX
 20426 rstack EAX,EBP:-9
 20430 rstack EBX,EBP:-8
 20434 add EBX,EAX
 20436 mov EAX,EBX
 20438 sstack EBP:-10,EAX
 20442 rstack EAX,EBP:-8
// udhSetDeviceStart arg #2 (float val)
 20446 push EAX
 20448 rstack EAX,EBP:-4
// udhSetDeviceStart arg #1 (float busIndex)
 20452 push EAX
 20454 mov ECX,2
// udhSetDeviceStart(...)
 20457 call 18910
 20460 add ESP,2
 20463 rstack EAX,EBP:-10
// udhSetDeviceEnd arg #2 (float val)
 20467 push EAX
 20469 rstack EAX,EBP:-4
// udhSetDeviceEnd arg #1 (float busIndex)
 20473 push EAX
 20475 mov ECX,2
// udhSetDeviceEnd(...)
 20478 call 18933
 20481 add ESP,2
 20484 rstack EAX,EBP:-10
 20488 add EAX,1
 20491 mov EBX,EAX
// accumulatedAddr=devEnd+1
 20493 sstack EBP:-3,EBX
 20497 rstack EAX,EBP:-7
// EBcb_entry_set_type arg #2 (float val)
 20501 push EAX
 20503 rstack EAX,EBP:-6
// EBcb_entry_set_type arg #1 (float this)
 20507 push EAX
 20509 mov ECX,2
// EBcb_entry_set_type(...)
 20512 call 19620
 20515 add ESP,2
 20518 rstack EAX,EBP:-9
// EBcb_entry_set_size arg #2 (float val)
 20522 push EAX
 20524 rstack EAX,EBP:-6
// EBcb_entry_set_size arg #1 (float this)
 20528 push EAX
 20530 mov ECX,2
// EBcb_entry_set_size(...)
 20533 call 19640
 20536 add ESP,2
 20539 rstack EAX,EBP:-4
// udhGetDeviceOffset arg #1 (float busIndex)
 20543 push EAX
 20545 mov ECX,1
// udhGetDeviceOffset(...)
 20548 call 18831
 20551 add ESP,1
 20554 sstack EBP:-11,EAX
 20558 rstack EAX,EBP:-11
// EBcb_entry_set_addr arg #2 (float val)
 20562 push EAX
 20564 rstack EAX,EBP:-6
// EBcb_entry_set_addr arg #1 (float this)
 20568 push EAX
 20570 mov ECX,2
// EBcb_entry_set_addr(...)
 20573 call 19660
 20576 add ESP,2
 20579 rstack EAX,EBP:-4
// loop step
 20583 inc EAX
 20585 sstack EBP:-4,EAX
 20589 jmp 20322
__778:
__776:
 20592 leave 
 20593 ret 
EBcb_resize_dev:
// EBcb_resize_dev(this,num,size)
 20594 enter 10
__781:
// EBcb_get_entry arg #2 (float num)
 20597 push 0
 20600 rstack EAX,EBP:2
// EBcb_get_entry arg #1 (float this)
 20604 push EAX
 20606 mov ECX,2
// EBcb_get_entry(...)
 20609 call 19880
 20612 add ESP,2
 20615 sstack EBP:-1,EAX
 20619 rstack EAX,EBP:-1
// EBcb_entry_get_addr arg #1 (float this)
 20623 push EAX
 20625 mov ECX,1
// EBcb_entry_get_addr(...)
 20628 call 19736
 20631 add ESP,1
 20634 sstack EBP:-2,EAX
 20638 rstack EAX,EBP:3
 20642 add EAX,1
 20645 mov EBX,EAX
// EBcb_get_entry arg #2 (float num)
 20647 push EBX
 20649 rstack EAX,EBP:2
// EBcb_get_entry arg #1 (float this)
 20653 push EAX
 20655 mov ECX,2
// EBcb_get_entry(...)
 20658 call 19880
 20661 add ESP,2
 20664 sstack EBP:-3,EAX
 20668 rstack EAX,EBP:3
// udhGetDeviceStart arg #1 (float busIndex)
 20672 push EAX
 20674 mov ECX,1
// udhGetDeviceStart(...)
 20677 call 18865
 20680 add ESP,1
 20683 sstack EBP:-4,EAX
 20687 rstack EAX,EBP:4
 20691 sstack EBP:-5,EAX
 20695 rstack EAX,EBP:-5
 20699 rstack EBX,EBP:-4
 20703 add EBX,EAX
 20705 mov EAX,EBX
 20707 sstack EBP:-6,EAX
 20711 rstack EAX,EBP:-4
// udhSetDeviceStart arg #2 (float val)
 20715 push EAX
 20717 rstack EAX,EBP:3
// udhSetDeviceStart arg #1 (float busIndex)
 20721 push EAX
 20723 mov ECX,2
// udhSetDeviceStart(...)
 20726 call 18910
 20729 add ESP,2
 20732 rstack EAX,EBP:-6
// udhSetDeviceEnd arg #2 (float val)
 20736 push EAX
 20738 rstack EAX,EBP:3
// udhSetDeviceEnd arg #1 (float busIndex)
 20742 push EAX
 20744 mov ECX,2
// udhSetDeviceEnd(...)
 20747 call 18933
 20750 add ESP,2
 20753 rstack EAX,EBP:-6
 20757 add EAX,1
 20760 mov EBX,EAX
 20762 sstack EBP:-7,EBX
 20766 rstack EAX,EBP:3
 20770 add EAX,1
 20773 mov EBX,EAX
// init loop
 20775 sstack EBP:-8,EBX
__783:
 20779 rstack EAX,EBP:-8
 20783 mov EBX,8
 20786 sub EBX,EAX
 20788 fsgn EBX,EBX
// condition
 20790 max EBX,0
 20793 cmp 0,EBX
 20796 jz 20988
 20799 rstack EAX,EBP:-8
 20803 add EAX,1
 20806 mov EBX,EAX
 20808 sstack EBP:-9,EBX
 20812 rstack EAX,EBP:-9
// EBcb_get_entry arg #2 (float num)
 20816 push EAX
 20818 rstack EAX,EBP:2
// EBcb_get_entry arg #1 (float this)
 20822 push EAX
 20824 mov ECX,2
// EBcb_get_entry(...)
 20827 call 19880
 20830 add ESP,2
// devEntry=EBcb_get_entry(this,entryNum)
 20833 sstack EBP:-3,EAX
 20837 rstack EAX,EBP:-7
// devStart=accumulatedAddr
 20841 sstack EBP:-4,EAX
 20845 rstack EAX,EBP:-3
// EBcb_entry_get_size arg #1 (float this)
 20849 push EAX
 20851 mov ECX,1
// EBcb_entry_get_size(...)
 20854 call 19718
 20857 add ESP,1
// devSize=EBcb_entry_get_size(devEntry)
 20860 sstack EBP:-5,EAX
 20864 rstack EAX,EBP:-5
 20868 rstack EBX,EBP:-4
 20872 add EBX,EAX
 20874 mov EAX,EBX
// devEnd=devStart+devSize
 20876 sstack EBP:-6,EAX
 20880 rstack EAX,EBP:-4
// udhSetDeviceStart arg #2 (float val)
 20884 push EAX
 20886 rstack EAX,EBP:-8
// udhSetDeviceStart arg #1 (float busIndex)
 20890 push EAX
 20892 mov ECX,2
// udhSetDeviceStart(...)
 20895 call 18910
 20898 add ESP,2
 20901 rstack EAX,EBP:-6
// udhSetDeviceEnd arg #2 (float val)
 20905 push EAX
 20907 rstack EAX,EBP:-8
// udhSetDeviceEnd arg #1 (float busIndex)
 20911 push EAX
 20913 mov ECX,2
// udhSetDeviceEnd(...)
 20916 call 18933
 20919 add ESP,2
 20922 rstack EAX,EBP:-8
// udhGetDeviceOffset arg #1 (float busIndex)
 20926 push EAX
 20928 mov ECX,1
// udhGetDeviceOffset(...)
 20931 call 18831
 20934 add ESP,1
 20937 sstack EBP:-10,EAX
 20941 rstack EAX,EBP:-10
// EBcb_entry_set_addr arg #2 (float val)
 20945 push EAX
 20947 rstack EAX,EBP:-3
// EBcb_entry_set_addr arg #1 (float this)
 20951 push EAX
 20953 mov ECX,2
// EBcb_entry_set_addr(...)
 20956 call 19660
 20959 add ESP,2
 20962 rstack EAX,EBP:-6
 20966 add EAX,1
 20969 mov EBX,EAX
// accumulatedAddr=devEnd+1
 20971 sstack EBP:-7,EBX
 20975 rstack EAX,EBP:-8
// loop step
 20979 inc EAX
 20981 sstack EBP:-8,EAX
 20985 jmp 20779
__782:
__780:
 20988 leave 
 20989 ret 
EBcb_device_bind:
// EBcb_device_bind(this,type,user)
 20990 enter 7
__785:
// init loop
 20993 sstack EBP:-1,0
__787:
 20998 rstack EAX,EBP:-1
 21002 mov EBX,8
 21005 sub EBX,EAX
 21007 fsgn EBX,EBX
// condition
 21009 max EBX,0
 21012 cmp 0,EBX
 21015 jz 21196
 21018 rstack EAX,EBP:-1
 21022 add EAX,1
 21025 mov EBX,EAX
 21027 sstack EBP:-2,EBX
 21031 rstack EAX,EBP:-2
// EBcb_get_entry arg #2 (float num)
 21035 push EAX
 21037 rstack EAX,EBP:2
// EBcb_get_entry arg #1 (float this)
 21041 push EAX
 21043 mov ECX,2
// EBcb_get_entry(...)
 21046 call 19880
 21049 add ESP,2
 21052 sstack EBP:-3,EAX
 21056 rstack EAX,EBP:-3
// EBcb_entry_get_type arg #1 (float this)
 21060 push EAX
 21062 mov ECX,1
// EBcb_entry_get_type(...)
 21065 call 19700
 21068 add ESP,1
 21071 sstack EBP:-4,EAX
 21075 rstack EAX,EBP:-3
// EBcb_entry_get_user arg #1 (float this)
 21079 push EAX
 21081 mov ECX,1
// EBcb_entry_get_user(...)
 21084 call 19754
 21087 add ESP,1
 21090 sstack EBP:-5,EAX
 21094 rstack EAX,EBP:-4
 21098 rstack EBX,EBP:3
 21102 sub EBX,EAX
 21104 mov EAX,EBX
 21106 fabs EAX,EAX
 21108 fsgn EAX,EAX
 21110 lneg EAX
 21112 sstack EBP:-6,EAX
 21116 rstack EAX,EBP:-5
 21120 mov EBX,0
 21123 sub EBX,EAX
 21125 fabs EBX,EBX
 21127 fsgn EBX,EBX
 21129 lneg EBX
 21131 sstack EBP:-7,EBX
__789:
 21135 rstack EAX,EBP:-7
 21139 rstack EBX,EBP:-6
 21143 and EBX,EAX
 21145 mov EAX,EBX
// if (bTypeOk&&bUserOk)
 21147 cmp 0,EAX
 21150 jge 21183
 21153 rstack EAX,EBP:4
// EBcb_entry_set_user arg #2 (float val)
 21157 push EAX
 21159 rstack EAX,EBP:-3
// EBcb_entry_set_user arg #1 (float this)
 21163 push EAX
 21165 mov ECX,2
// EBcb_entry_set_user(...)
 21168 call 19680
 21171 add ESP,2
 21174 rstack EAX,EBP:-2
 21178 leave 
 21179 ret 
 21180 jmp 21183
__791:
__790:
__793:
__792:
__788:
 21183 rstack EAX,EBP:-1
// loop step
 21187 inc EAX
 21189 sstack EBP:-1,EAX
 21193 jmp 20998
__786:
 21196 mov EAX,0
 21199 leave 
 21200 ret 
__784:
 21201 leave 
 21202 ret 
EBcb_device_bind_addr:
// EBcb_device_bind_addr(this,type,user,res)
 21203 enter 3
__795:
 21206 rstack EAX,EBP:4
// EBcb_device_bind arg #3 (float user)
 21210 push EAX
 21212 rstack EAX,EBP:3
// EBcb_device_bind arg #2 (float type)
 21216 push EAX
 21218 rstack EAX,EBP:2
// EBcb_device_bind arg #1 (float this)
 21222 push EAX
 21224 mov ECX,3
// EBcb_device_bind(...)
 21227 call 20990
 21230 add ESP,3
 21233 sstack EBP:-1,EAX
 21237 sstack EBP:-2,0
__797:
 21242 rstack EAX,EBP:-1
// if (entryNum)
 21246 cmp 0,EAX
 21249 jge 21296
 21252 rstack EAX,EBP:-1
// EBcb_get_entry arg #2 (float num)
 21256 push EAX
 21258 rstack EAX,EBP:2
// EBcb_get_entry arg #1 (float this)
 21262 push EAX
 21264 mov ECX,2
// EBcb_get_entry(...)
 21267 call 19880
 21270 add ESP,2
 21273 sstack EBP:-3,EAX
 21277 rstack EAX,EBP:-3
// EBcb_entry_get_addr arg #1 (float this)
 21281 push EAX
 21283 mov ECX,1
// EBcb_entry_get_addr(...)
 21286 call 19736
 21289 add ESP,1
// addr=EBcb_entry_get_addr(devEntry)
 21292 sstack EBP:-2,EAX
__798:
__796:
 21296 rstack EAX,EBP:-2
 21300 rstack EBX,EBP:5
// *res=addr
 21304 mov #EBX,EAX
 21306 rstack EAX,EBP:-2
 21310 leave 
 21311 ret 
__794:
 21312 leave 
 21313 ret 
EBcb_print:
// EBcb_print(this)
 21314 enter 7
__800:
// init loop
 21317 sstack EBP:-1,0
__802:
 21322 rstack EAX,EBP:-1
 21326 mov EBX,9
 21329 sub EBX,EAX
 21331 fsgn EBX,EBX
// condition
 21333 max EBX,0
 21336 cmp 0,EBX
 21339 jz 21475
 21342 rstack EAX,EBP:-1
// EBcb_get_entry arg #2 (float num)
 21346 push EAX
 21348 rstack EAX,EBP:2
// EBcb_get_entry arg #1 (float this)
 21352 push EAX
 21354 mov ECX,2
// EBcb_get_entry(...)
 21357 call 19880
 21360 add ESP,2
 21363 sstack EBP:-2,EAX
 21367 rstack EAX,EBP:-2
// EBcb_entry_get_type arg #1 (float this)
 21371 push EAX
 21373 mov ECX,1
// EBcb_entry_get_type(...)
 21376 call 19700
 21379 add ESP,1
 21382 sstack EBP:-3,EAX
 21386 rstack EAX,EBP:-3
// udhTypeToString arg #1 (float type)
 21390 push EAX
 21392 mov ECX,1
// udhTypeToString(...)
 21395 call 19057
 21398 add ESP,1
 21401 sstack EBP:-4,EAX
 21405 rstack EAX,EBP:-2
// EBcb_entry_get_size arg #1 (float this)
 21409 push EAX
 21411 mov ECX,1
// EBcb_entry_get_size(...)
 21414 call 19718
 21417 add ESP,1
 21420 sstack EBP:-5,EAX
 21424 rstack EAX,EBP:-2
// EBcb_entry_get_addr arg #1 (float this)
 21428 push EAX
 21430 mov ECX,1
// EBcb_entry_get_addr(...)
 21433 call 19736
 21436 add ESP,1
 21439 sstack EBP:-6,EAX
 21443 rstack EAX,EBP:-2
// EBcb_entry_get_user arg #1 (float this)
 21447 push EAX
 21449 mov ECX,1
// EBcb_entry_get_user(...)
 21452 call 19754
 21455 add ESP,1
 21458 sstack EBP:-7,EAX
 21462 rstack EAX,EBP:-1
// loop step
 21466 inc EAX
 21468 sstack EBP:-1,EAX
 21472 jmp 21322
__801:
__799:
 21475 leave 
 21476 ret 
libmarker6:
 21477 db 0
ioRead:
// ioRead(pos)
 21478 enter 1
__804:
// assert_arity arg #2 (float num_args)
 21481 push 1
// assert_arity arg #1 (float ecx_here)
 21484 push ECX
 21486 mov ECX,2
// assert_arity(...)
 21489 call 10245
 21492 add ESP,2
 21495 rstack EAX,EBP:2
 21499 rstack EBX,EBP:-1
 21503 in EBX,EAX
 21505 sstack EBP:-1,EBX
 21509 rstack EAX,EBP:-1
 21513 leave 
 21514 ret 
__803:
 21515 leave 
 21516 ret 
ioReadBuff:
// ioReadBuff(dest,src,size)
 21517 enter 1
__806:
// assert_arity arg #2 (float num_args)
 21520 push 3
// assert_arity arg #1 (float ecx_here)
 21523 push ECX
 21525 mov ECX,2
// assert_arity(...)
 21528 call 10245
 21531 add ESP,2
// init loop
 21534 sstack EBP:-1,0
__808:
 21539 rstack EAX,EBP:-1
 21543 rstack EBX,EBP:4
 21547 sub EBX,EAX
 21549 mov EAX,EBX
 21551 fsgn EAX,EAX
// condition
 21553 max EAX,0
 21556 cmp 0,EAX
 21559 jz 21612
 21562 rstack EAX,EBP:3
 21566 mov EBX,EAX
 21568 inc EAX
 21570 sstack EBP:3,EAX
// ioRead arg #1 (float pos)
 21574 push EBX
 21576 mov ECX,1
// ioRead(...)
 21579 call 21478
 21582 add ESP,1
 21585 rstack EBX,EBP:2
 21589 mov ECX,EBX
 21591 inc EBX
 21593 sstack EBP:2,EBX
// *dest++=ioRead(src++)
 21597 mov #ECX,EAX
 21599 rstack EAX,EBP:-1
// loop step
 21603 inc EAX
 21605 sstack EBP:-1,EAX
 21609 jmp 21539
__807:
__805:
 21612 leave 
 21613 ret 
ioWrite:
// ioWrite(pos,val)
 21614 enter -0
__810:
// assert_arity arg #2 (float num_args)
 21617 push 2
// assert_arity arg #1 (float ecx_here)
 21620 push ECX
 21622 mov ECX,2
// assert_arity(...)
 21625 call 10245
 21628 add ESP,2
 21631 rstack EAX,EBP:3
 21635 rstack EBX,EBP:2
 21639 out EBX,EAX
 21641 sstack EBP:2,EBX
__809:
 21645 leave 
 21646 ret 
ioWriteBuff:
// ioWriteBuff(dest,src,size)
 21647 enter 1
__812:
// assert_arity arg #2 (float num_args)
 21650 push 3
// assert_arity arg #1 (float ecx_here)
 21653 push ECX
 21655 mov ECX,2
// assert_arity(...)
 21658 call 10245
 21661 add ESP,2
// init loop
 21664 sstack EBP:-1,0
__814:
 21669 rstack EAX,EBP:-1
 21673 rstack EBX,EBP:4
 21677 sub EBX,EAX
 21679 mov EAX,EBX
 21681 fsgn EAX,EAX
// condition
 21683 max EAX,0
 21686 cmp 0,EAX
 21689 jz 21742
 21692 rstack EAX,EBP:3
 21696 mov EBX,EAX
 21698 inc EAX
 21700 sstack EBP:3,EAX
// ioWrite arg #2 (float val)
 21704 push #EBX
 21706 rstack EAX,EBP:2
 21710 mov EBX,EAX
 21712 inc EAX
 21714 sstack EBP:2,EAX
// ioWrite arg #1 (float pos)
 21718 push EBX
 21720 mov ECX,2
// ioWrite(...)
 21723 call 21614
 21726 add ESP,2
 21729 rstack EAX,EBP:-1
// loop step
 21733 inc EAX
 21735 sstack EBP:-1,EAX
 21739 jmp 21669
__813:
__811:
 21742 leave 
 21743 ret 
iocpy:
// iocpy(dest,src,num)
 21744 enter 3
__816:
// assert_arity arg #2 (float num_args)
 21747 push 3
// assert_arity arg #1 (float ecx_here)
 21750 push ECX
 21752 mov ECX,2
// assert_arity(...)
 21755 call 10245
 21758 add ESP,2
// init loop
 21761 sstack EBP:-1,0
__818:
 21766 rstack EAX,EBP:-1
 21770 rstack EBX,EBP:4
 21774 sub EBX,EAX
 21776 mov EAX,EBX
 21778 fsgn EAX,EAX
// condition
 21780 max EAX,0
 21783 cmp 0,EAX
 21786 jz 21848
 21789 rstack EAX,EBP:-1
 21793 rstack EBX,EBP:3
 21797 add EBX,EAX
 21799 mov EAX,EBX
 21801 sstack EBP:-2,#EAX
 21805 rstack EAX,EBP:-1
 21809 rstack EBX,EBP:2
 21813 add EBX,EAX
 21815 mov EAX,EBX
 21817 sstack EBP:-3,EAX
 21821 rstack EAX,EBP:-2
 21825 rstack EBX,EBP:-3
 21829 out EBX,EAX
 21831 sstack EBP:-3,EBX
 21835 rstack EAX,EBP:-1
// loop step
 21839 inc EAX
 21841 sstack EBP:-1,EAX
 21845 jmp 21766
__817:
__815:
 21848 leave 
 21849 ret 
libmarker7:
 21850 db 0
printf:
// printf(format)
 21851 enter 13
__820:
 21854 mov EAX,SS:ESP
 21857 add EAX,2
 21860 push EAX
 21862 mov ECX,1
// va_start(...)
 21865 call 10002
 21868 add ESP,1
 21871 sstack EBP:-1,EAX
 21875 sstack EBP:-2,0
 21880 sstack EBP:-3,0
 21885 sstack EBP:-4,0
 21890 sstack EBP:-5,0
 21895 sstack EBP:-6,0
 21900 sstack EBP:-7,0
 21905 sstack EBP:-8,0
 21910 sstack EBP:-9,999
 21915 sstack EBP:-10,999
 21920 sstack EBP:-11,222
 21925 sstack EBP:-12,0
 21930 rstack EAX,EBP:-2
 21934 rstack EBX,EBP:2
 21938 add EBX,EAX
 21940 mov EAX,EBX
// C=format[I]
 21942 sstack EBP:-3,#EAX
__822:
 21946 rstack EAX,EBP:-3
 21950 mov EBX,0
 21953 sub EBX,EAX
 21955 fabs EBX,EBX
 21957 fsgn EBX,EBX
// if (C!=0
 21959 cmp 0,EBX
 21962 jz 23819
__824:
 21965 rstack EAX,EBP:-3
 21969 mov EBX,37
 21972 sub EBX,EAX
 21974 fabs EBX,EBX
 21976 fsgn EBX,EBX
 21978 lneg EBX
// if (C=='%')
 21980 cmp 0,EBX
 21983 jge 22979
 21986 rstack EAX,EBP:-2
 21990 add EAX,1
 21993 mov EBX,EAX
 21995 rstack EAX,EBP:2
 21999 add EAX,EBX
 22001 mov EBX,EAX
// S=format[I+1]
 22003 sstack EBP:-4,#EBX
__827:
 22007 rstack EAX,EBP:-4
 22011 mov EBX,100
 22014 sub EBX,EAX
 22016 fabs EBX,EBX
 22018 fsgn EBX,EBX
 22020 lneg EBX
// if (S=='d')
 22022 cmp 0,EBX
 22025 jge 22102
 22028 mov EAX,SS:ESP
 22031 add EAX,-1
 22034 push EAX
 22036 mov ECX,1
// va_next(...)
 22039 call 10016
 22042 add ESP,1
// A=va_next(&va)
 22045 sstack EBP:-5,EAX
 22049 rstack EAX,EBP:-5
// num2str arg #1 (float num)
 22053 push EAX
 22055 mov ECX,1
// num2str(...)
 22058 call 13802
 22061 add ESP,1
 22064 sstack EBP:-13,EAX
 22068 rstack EAX,EBP:-9
// Print arg #2 (float col0)
 22072 push EAX
 22074 rstack EAX,EBP:-13
// Print arg #1 (char str)
 22078 push EAX
 22080 mov ECX,2
// Print(...)
 22083 call 17323
 22086 add ESP,2
 22089 rstack EAX,EBP:-2
 22093 add EAX,2
 22096 mov EBX,EAX
// I=I+2
 22098 sstack EBP:-2,EBX
__828:
__826:
__830:
 22102 rstack EAX,EBP:-4
 22106 mov EBX,99
 22109 sub EBX,EAX
 22111 fabs EBX,EBX
 22113 fsgn EBX,EBX
 22115 lneg EBX
// if (S=='c')
 22117 cmp 0,EBX
 22120 jge 22631
 22123 mov EAX,SS:ESP
 22126 add EAX,-1
 22129 push EAX
 22131 mov ECX,1
// va_next(...)
 22134 call 10016
 22137 add ESP,1
// A=va_next(&va)
 22140 sstack EBP:-5,EAX
 22144 rstack EAX,EBP:-5
// A2=A
 22148 sstack EBP:-6,EAX
 22152 rstack EAX,EBP:-9
// pcolor2=pcolor
 22156 sstack EBP:-10,EAX
__833:
 22160 rstack EAX,EBP:-12
 22164 mov EBX,2
 22167 sub EBX,EAX
 22169 fabs EBX,EBX
 22171 fsgn EBX,EBX
 22173 lneg EBX
// if (escmode==2)
 22175 cmp 0,EBX
 22178 jge 22238
__836:
 22181 rstack EAX,EBP:-5
// isPrint arg #1 (char C)
 22185 push EAX
 22187 mov ECX,1
// isPrint(...)
 22190 call 15309
 22193 add ESP,1
 22196 mov EBX,0
 22199 sub EBX,EAX
 22201 fabs EBX,EBX
 22203 fsgn EBX,EBX
 22205 lneg EBX
// if (isPrint(A)==0)
 22207 cmp 0,EBX
 22210 jge 22238
// A2='.'
 22213 sstack EBP:-6,46
 22218 rstack EAX,EBP:-11
 22222 neg EAX
 22224 mov EBX,EAX
 22226 rstack EAX,EBP:-9
 22230 add EAX,EBX
 22232 mov EBX,EAX
// pcolor2=pcolor-pdarken
 22234 sstack EBP:-10,EBX
__837:
__835:
__834:
__832:
__839:
 22238 rstack EAX,EBP:-12
 22242 mov EBX,1
 22245 sub EBX,EAX
 22247 fabs EBX,EBX
 22249 fsgn EBX,EBX
 22251 lneg EBX
// if (escmode==1)
 22253 cmp 0,EBX
 22256 jge 22587
__842:
 22259 rstack EAX,EBP:-5
// isPrint arg #1 (char C)
 22263 push EAX
 22265 mov ECX,1
// isPrint(...)
 22268 call 15309
 22271 add ESP,1
 22274 mov EBX,0
 22277 sub EBX,EAX
 22279 fabs EBX,EBX
 22281 fsgn EBX,EBX
 22283 lneg EBX
// if (isPrint(A)==0)
 22285 cmp 0,EBX
 22288 jge 22311
 22291 rstack EAX,EBP:-11
 22295 neg EAX
 22297 mov EBX,EAX
 22299 rstack EAX,EBP:-9
 22303 add EAX,EBX
 22305 mov EBX,EAX
// pcolor2=pcolor-pdarken
 22307 sstack EBP:-10,EBX
__843:
__841:
__845:
 22311 rstack EAX,EBP:-5
 22315 mov EBX,7
 22318 sub EBX,EAX
 22320 fabs EBX,EBX
 22322 fsgn EBX,EBX
 22324 lneg EBX
// if (A=='\7')
 22326 cmp 0,EBX
 22329 jge 22357
// A2='a'
 22332 sstack EBP:-6,97
 22337 rstack EAX,EBP:-11
 22341 neg EAX
 22343 mov EBX,EAX
 22345 rstack EAX,EBP:-9
 22349 add EAX,EBX
 22351 mov EBX,EAX
// pcolor2=pcolor-pdarken
 22353 sstack EBP:-10,EBX
__846:
__844:
__848:
 22357 rstack EAX,EBP:-5
 22361 mov EBX,8
 22364 sub EBX,EAX
 22366 fabs EBX,EBX
 22368 fsgn EBX,EBX
 22370 lneg EBX
// if (A=='\8')
 22372 cmp 0,EBX
 22375 jge 22403
// A2='b'
 22378 sstack EBP:-6,98
 22383 rstack EAX,EBP:-11
 22387 neg EAX
 22389 mov EBX,EAX
 22391 rstack EAX,EBP:-9
 22395 add EAX,EBX
 22397 mov EBX,EAX
// pcolor2=pcolor-pdarken
 22399 sstack EBP:-10,EBX
__849:
__847:
__851:
 22403 rstack EAX,EBP:-5
 22407 mov EBX,10
 22410 sub EBX,EAX
 22412 fabs EBX,EBX
 22414 fsgn EBX,EBX
 22416 lneg EBX
// if (A=='\10')
 22418 cmp 0,EBX
 22421 jge 22449
// A2='n'
 22424 sstack EBP:-6,110
 22429 rstack EAX,EBP:-11
 22433 neg EAX
 22435 mov EBX,EAX
 22437 rstack EAX,EBP:-9
 22441 add EAX,EBX
 22443 mov EBX,EAX
// pcolor2=pcolor-pdarken
 22445 sstack EBP:-10,EBX
__852:
__850:
__854:
 22449 rstack EAX,EBP:-5
 22453 mov EBX,13
 22456 sub EBX,EAX
 22458 fabs EBX,EBX
 22460 fsgn EBX,EBX
 22462 lneg EBX
// if (A=='\13')
 22464 cmp 0,EBX
 22467 jge 22495
// A2='r'
 22470 sstack EBP:-6,114
 22475 rstack EAX,EBP:-11
 22479 neg EAX
 22481 mov EBX,EAX
 22483 rstack EAX,EBP:-9
 22487 add EAX,EBX
 22489 mov EBX,EAX
// pcolor2=pcolor-pdarken
 22491 sstack EBP:-10,EBX
__855:
__853:
__857:
 22495 rstack EAX,EBP:-5
 22499 mov EBX,9
 22502 sub EBX,EAX
 22504 fabs EBX,EBX
 22506 fsgn EBX,EBX
 22508 lneg EBX
// if (A=='\9')
 22510 cmp 0,EBX
 22513 jge 22541
// A2='t'
 22516 sstack EBP:-6,116
 22521 rstack EAX,EBP:-11
 22525 neg EAX
 22527 mov EBX,EAX
 22529 rstack EAX,EBP:-9
 22533 add EAX,EBX
 22535 mov EBX,EAX
// pcolor2=pcolor-pdarken
 22537 sstack EBP:-10,EBX
__858:
__856:
__860:
 22541 rstack EAX,EBP:-5
 22545 mov EBX,0
 22548 sub EBX,EAX
 22550 fabs EBX,EBX
 22552 fsgn EBX,EBX
 22554 lneg EBX
// if (A=='\0')
 22556 cmp 0,EBX
 22559 jge 22587
// A2='0'
 22562 sstack EBP:-6,48
 22567 rstack EAX,EBP:-11
 22571 neg EAX
 22573 mov EBX,EAX
 22575 rstack EAX,EBP:-9
 22579 add EAX,EBX
 22581 mov EBX,EAX
// pcolor2=pcolor-pdarken
 22583 sstack EBP:-10,EBX
__861:
__859:
__840:
__838:
 22587 rstack EAX,EBP:-6
// c2=A2
 22591 sstack EBP:-8,EAX
 22595 rstack EAX,EBP:-10
// Print arg #2 (float col0)
 22599 push EAX
 22601 mov EAX,SS:ESP
 22604 add EAX,-8
// Print arg #1 (char str)
 22607 push EAX
 22609 mov ECX,2
// Print(...)
 22612 call 17323
 22615 add ESP,2
 22618 rstack EAX,EBP:-2
 22622 add EAX,2
 22625 mov EBX,EAX
// I=I+2
 22627 sstack EBP:-2,EBX
__831:
__829:
__863:
 22631 rstack EAX,EBP:-4
 22635 mov EBX,115
 22638 sub EBX,EAX
 22640 fabs EBX,EBX
 22642 fsgn EBX,EBX
 22644 lneg EBX
// if (S=='s')
 22646 cmp 0,EBX
 22649 jge 22726
 22652 mov EAX,SS:ESP
 22655 add EAX,-1
 22658 push EAX
 22660 mov ECX,1
// va_next(...)
 22663 call 10016
 22666 add ESP,1
// A=va_next(&va)
 22669 sstack EBP:-5,EAX
__866:
 22673 rstack EAX,EBP:-5
 22677 lneg EAX
 22679 mov EBX,EAX
// if (!A)
 22681 cmp 0,EBX
 22684 jge 22692
// A="<null>"
 22687 sstack EBP:-5,23827
__867:
__865:
 22692 rstack EAX,EBP:-9
// Print arg #2 (float col0)
 22696 push EAX
 22698 rstack EAX,EBP:-5
// Print arg #1 (char str)
 22702 push EAX
 22704 mov ECX,2
// Print(...)
 22707 call 17323
 22710 add ESP,2
 22713 rstack EAX,EBP:-2
 22717 add EAX,2
 22720 mov EBX,EAX
// I=I+2
 22722 sstack EBP:-2,EBX
__864:
__862:
__870:
 22726 rstack EAX,EBP:-4
 22730 mov EBX,109
 22733 sub EBX,EAX
 22735 fabs EBX,EBX
 22737 fsgn EBX,EBX
 22739 lneg EBX
// if (S=='m')
 22741 cmp 0,EBX
 22744 jge 22789
 22747 mov EAX,SS:ESP
 22750 add EAX,-1
 22753 push EAX
 22755 mov ECX,1
// va_next(...)
 22758 call 10016
 22761 add ESP,1
// A=va_next(&va)
 22764 sstack EBP:-5,EAX
 22768 rstack EAX,EBP:-5
// pcolor=A
 22772 sstack EBP:-9,EAX
 22776 rstack EAX,EBP:-2
 22780 add EAX,2
 22783 mov EBX,EAX
// I=I+2
 22785 sstack EBP:-2,EBX
__871:
__869:
__873:
 22789 rstack EAX,EBP:-4
 22793 mov EBX,101
 22796 sub EBX,EAX
 22798 fabs EBX,EBX
 22800 fsgn EBX,EBX
 22802 lneg EBX
// if (S=='e')
 22804 cmp 0,EBX
 22807 jge 22852
 22810 mov EAX,SS:ESP
 22813 add EAX,-1
 22816 push EAX
 22818 mov ECX,1
// va_next(...)
 22821 call 10016
 22824 add ESP,1
// A=va_next(&va)
 22827 sstack EBP:-5,EAX
 22831 rstack EAX,EBP:-5
// escmode=A
 22835 sstack EBP:-12,EAX
 22839 rstack EAX,EBP:-2
 22843 add EAX,2
 22846 mov EBX,EAX
// I=I+2
 22848 sstack EBP:-2,EBX
__874:
__872:
__876:
 22852 rstack EAX,EBP:-4
 22856 mov EBX,120
 22859 sub EBX,EAX
 22861 fabs EBX,EBX
 22863 fsgn EBX,EBX
 22865 lneg EBX
// if (S=='x')
 22867 cmp 0,EBX
 22870 jge 22914
 22873 mov EAX,SS:ESP
 22876 add EAX,-1
 22879 push EAX
 22881 mov ECX,1
// va_next(...)
 22884 call 10016
 22887 add ESP,1
// A=va_next(&va)
 22890 sstack EBP:-5,EAX
 22894 rstack EAX,EBP:-5
// PrintScrX=A
 22898 mov #76902,EAX
 22901 rstack EAX,EBP:-2
 22905 add EAX,2
 22908 mov EBX,EAX
// I=I+2
 22910 sstack EBP:-2,EBX
__877:
__875:
__879:
 22914 rstack EAX,EBP:-4
 22918 mov EBX,121
 22921 sub EBX,EAX
 22923 fabs EBX,EBX
 22925 fsgn EBX,EBX
 22927 lneg EBX
// if (S=='y')
 22929 cmp 0,EBX
 22932 jge 22976
 22935 mov EAX,SS:ESP
 22938 add EAX,-1
 22941 push EAX
 22943 mov ECX,1
// va_next(...)
 22946 call 10016
 22949 add ESP,1
// A=va_next(&va)
 22952 sstack EBP:-5,EAX
 22956 rstack EAX,EBP:-5
// PrintScrY=A
 22960 mov #76903,EAX
 22963 rstack EAX,EBP:-2
 22967 add EAX,2
 22970 mov EBX,EAX
// I=I+2
 22972 sstack EBP:-2,EBX
__880:
__878:
 22976 jmp 23800
__881:
__825:
__883:
__886:
 22979 rstack EAX,EBP:-3
 22983 mov EBX,23826
 22986 sub EBX,EAX
 22988 fabs EBX,EBX
 22990 fsgn EBX,EBX
 22992 lneg EBX
// if (C=="")
 22994 cmp 0,EBX
 22997 jge 23321
 23000 rstack EAX,EBP:-2
 23004 add EAX,1
 23007 mov EBX,EAX
 23009 rstack EAX,EBP:2
 23013 add EAX,EBX
 23015 mov EBX,EAX
// S=format[I+1]
 23017 sstack EBP:-4,#EBX
__889:
 23021 rstack EAX,EBP:-4
 23025 mov EBX,97
 23028 sub EBX,EAX
 23030 fabs EBX,EBX
 23032 fsgn EBX,EBX
 23034 lneg EBX
// if (S=='a')
 23036 cmp 0,EBX
 23039 jge 23054
// PrintChar arg #1 (float C)
 23042 push 7
 23045 mov ECX,1
// PrintChar(...)
 23048 call 17688
 23051 add ESP,1
__890:
__888:
__892:
 23054 rstack EAX,EBP:-4
 23058 mov EBX,98
 23061 sub EBX,EAX
 23063 fabs EBX,EBX
 23065 fsgn EBX,EBX
 23067 lneg EBX
// if (S=='b')
 23069 cmp 0,EBX
 23072 jge 23087
// PrintChar arg #1 (float C)
 23075 push 8
 23078 mov ECX,1
// PrintChar(...)
 23081 call 17688
 23084 add ESP,1
__893:
__891:
__895:
 23087 rstack EAX,EBP:-4
 23091 mov EBX,110
 23094 sub EBX,EAX
 23096 fabs EBX,EBX
 23098 fsgn EBX,EBX
 23100 lneg EBX
// if (S=='n')
 23102 cmp 0,EBX
 23105 jge 23120
// PrintChar arg #1 (float C)
 23108 push 10
 23111 mov ECX,1
// PrintChar(...)
 23114 call 17688
 23117 add ESP,1
__896:
__894:
__898:
 23120 rstack EAX,EBP:-4
 23124 mov EBX,114
 23127 sub EBX,EAX
 23129 fabs EBX,EBX
 23131 fsgn EBX,EBX
 23133 lneg EBX
// if (S=='r')
 23135 cmp 0,EBX
 23138 jge 23153
// PrintChar arg #1 (float C)
 23141 push 13
 23144 mov ECX,1
// PrintChar(...)
 23147 call 17688
 23150 add ESP,1
__899:
__897:
__901:
 23153 rstack EAX,EBP:-4
 23157 mov EBX,116
 23160 sub EBX,EAX
 23162 fabs EBX,EBX
 23164 fsgn EBX,EBX
 23166 lneg EBX
// if (S=='t')
 23168 cmp 0,EBX
 23171 jge 23186
// PrintChar arg #1 (float C)
 23174 push 9
 23177 mov ECX,1
// PrintChar(...)
 23180 call 17688
 23183 add ESP,1
__902:
__900:
__904:
 23186 rstack EAX,EBP:-4
 23190 mov EBX,23826
 23193 sub EBX,EAX
 23195 fabs EBX,EBX
 23197 fsgn EBX,EBX
 23199 lneg EBX
// if (S=="")
 23201 cmp 0,EBX
 23204 jge 23219
// PrintChar arg #1 (float C)
 23207 push 23826
 23210 mov ECX,1
// PrintChar(...)
 23213 call 17688
 23216 add ESP,1
__905:
__903:
__907:
 23219 rstack EAX,EBP:-4
 23223 mov EBX,39
 23226 sub EBX,EAX
 23228 fabs EBX,EBX
 23230 fsgn EBX,EBX
 23232 lneg EBX
// if (S==''')
 23234 cmp 0,EBX
 23237 jge 23252
// PrintChar arg #1 (float C)
 23240 push 39
 23243 mov ECX,1
// PrintChar(...)
 23246 call 17688
 23249 add ESP,1
__908:
__906:
__910:
 23252 rstack EAX,EBP:-4
 23256 mov EBX,34
 23259 sub EBX,EAX
 23261 fabs EBX,EBX
 23263 fsgn EBX,EBX
 23265 lneg EBX
// if (S=='"')
 23267 cmp 0,EBX
 23270 jge 23285
// PrintChar arg #1 (float C)
 23273 push 34
 23276 mov ECX,1
// PrintChar(...)
 23279 call 17688
 23282 add ESP,1
__911:
__909:
__913:
 23285 rstack EAX,EBP:-4
 23289 mov EBX,48
 23292 sub EBX,EAX
 23294 fabs EBX,EBX
 23296 fsgn EBX,EBX
 23298 lneg EBX
// if (S=='0')
 23300 cmp 0,EBX
 23303 jge 23318
// PrintChar arg #1 (float C)
 23306 push 0
 23309 mov ECX,1
// PrintChar(...)
 23312 call 17688
 23315 add ESP,1
__914:
__912:
 23318 jmp 23800
__915:
__887:
__917:
 23321 rstack EAX,EBP:-9
// pcolor2=pcolor
 23325 sstack EBP:-10,EAX
__919:
 23329 rstack EAX,EBP:-12
 23333 mov EBX,2
 23336 sub EBX,EAX
 23338 fabs EBX,EBX
 23340 fsgn EBX,EBX
 23342 lneg EBX
// if (escmode==2)
 23344 cmp 0,EBX
 23347 jge 23407
__922:
 23350 rstack EAX,EBP:-3
// isPrint arg #1 (char C)
 23354 push EAX
 23356 mov ECX,1
// isPrint(...)
 23359 call 15309
 23362 add ESP,1
 23365 mov EBX,0
 23368 sub EBX,EAX
 23370 fabs EBX,EBX
 23372 fsgn EBX,EBX
 23374 lneg EBX
// if (isPrint(C)==0)
 23376 cmp 0,EBX
 23379 jge 23407
// C='.'
 23382 sstack EBP:-3,46
 23387 rstack EAX,EBP:-11
 23391 neg EAX
 23393 mov EBX,EAX
 23395 rstack EAX,EBP:-9
 23399 add EAX,EBX
 23401 mov EBX,EAX
// pcolor2=pcolor-pdarken
 23403 sstack EBP:-10,EBX
__923:
__921:
__920:
__918:
__925:
 23407 rstack EAX,EBP:-12
 23411 mov EBX,1
 23414 sub EBX,EAX
 23416 fabs EBX,EBX
 23418 fsgn EBX,EBX
 23420 lneg EBX
// if (escmode==1)
 23422 cmp 0,EBX
 23425 jge 23756
__928:
 23428 rstack EAX,EBP:-3
 23432 mov EBX,7
 23435 sub EBX,EAX
 23437 fabs EBX,EBX
 23439 fsgn EBX,EBX
 23441 lneg EBX
// if (C=='\7')
 23443 cmp 0,EBX
 23446 jge 23474
// C='a'
 23449 sstack EBP:-3,97
 23454 rstack EAX,EBP:-11
 23458 neg EAX
 23460 mov EBX,EAX
 23462 rstack EAX,EBP:-9
 23466 add EAX,EBX
 23468 mov EBX,EAX
// pcolor2=pcolor-pdarken
 23470 sstack EBP:-10,EBX
__929:
__927:
__931:
 23474 rstack EAX,EBP:-3
 23478 mov EBX,8
 23481 sub EBX,EAX
 23483 fabs EBX,EBX
 23485 fsgn EBX,EBX
 23487 lneg EBX
// if (C=='\8')
 23489 cmp 0,EBX
 23492 jge 23520
// C='b'
 23495 sstack EBP:-3,98
 23500 rstack EAX,EBP:-11
 23504 neg EAX
 23506 mov EBX,EAX
 23508 rstack EAX,EBP:-9
 23512 add EAX,EBX
 23514 mov EBX,EAX
// pcolor2=pcolor-pdarken
 23516 sstack EBP:-10,EBX
__932:
__930:
__934:
 23520 rstack EAX,EBP:-3
 23524 mov EBX,10
 23527 sub EBX,EAX
 23529 fabs EBX,EBX
 23531 fsgn EBX,EBX
 23533 lneg EBX
// if (C=='\10')
 23535 cmp 0,EBX
 23538 jge 23566
// C='n'
 23541 sstack EBP:-3,110
 23546 rstack EAX,EBP:-11
 23550 neg EAX
 23552 mov EBX,EAX
 23554 rstack EAX,EBP:-9
 23558 add EAX,EBX
 23560 mov EBX,EAX
// pcolor2=pcolor-pdarken
 23562 sstack EBP:-10,EBX
__935:
__933:
__937:
 23566 rstack EAX,EBP:-3
 23570 mov EBX,13
 23573 sub EBX,EAX
 23575 fabs EBX,EBX
 23577 fsgn EBX,EBX
 23579 lneg EBX
// if (C=='\13')
 23581 cmp 0,EBX
 23584 jge 23612
// C='r'
 23587 sstack EBP:-3,114
 23592 rstack EAX,EBP:-11
 23596 neg EAX
 23598 mov EBX,EAX
 23600 rstack EAX,EBP:-9
 23604 add EAX,EBX
 23606 mov EBX,EAX
// pcolor2=pcolor-pdarken
 23608 sstack EBP:-10,EBX
__938:
__936:
__940:
 23612 rstack EAX,EBP:-3
 23616 mov EBX,9
 23619 sub EBX,EAX
 23621 fabs EBX,EBX
 23623 fsgn EBX,EBX
 23625 lneg EBX
// if (C=='\9')
 23627 cmp 0,EBX
 23630 jge 23658
// C='t'
 23633 sstack EBP:-3,116
 23638 rstack EAX,EBP:-11
 23642 neg EAX
 23644 mov EBX,EAX
 23646 rstack EAX,EBP:-9
 23650 add EAX,EBX
 23652 mov EBX,EAX
// pcolor2=pcolor-pdarken
 23654 sstack EBP:-10,EBX
__941:
__939:
__943:
 23658 rstack EAX,EBP:-3
 23662 mov EBX,0
 23665 sub EBX,EAX
 23667 fabs EBX,EBX
 23669 fsgn EBX,EBX
 23671 lneg EBX
// if (C=='\0')
 23673 cmp 0,EBX
 23676 jge 23704
// C='0'
 23679 sstack EBP:-3,48
 23684 rstack EAX,EBP:-11
 23688 neg EAX
 23690 mov EBX,EAX
 23692 rstack EAX,EBP:-9
 23696 add EAX,EBX
 23698 mov EBX,EAX
// pcolor2=pcolor-pdarken
 23700 sstack EBP:-10,EBX
__944:
__942:
__946:
 23704 rstack EAX,EBP:-3
// isPrint arg #1 (char C)
 23708 push EAX
 23710 mov ECX,1
// isPrint(...)
 23713 call 15309
 23716 add ESP,1
 23719 mov EBX,0
 23722 sub EBX,EAX
 23724 fabs EBX,EBX
 23726 fsgn EBX,EBX
 23728 lneg EBX
// if (isPrint(C)==0)
 23730 cmp 0,EBX
 23733 jge 23756
 23736 rstack EAX,EBP:-11
 23740 neg EAX
 23742 mov EBX,EAX
 23744 rstack EAX,EBP:-9
 23748 add EAX,EBX
 23750 mov EBX,EAX
// pcolor2=pcolor-pdarken
 23752 sstack EBP:-10,EBX
__947:
__945:
__926:
__924:
 23756 rstack EAX,EBP:-3
// c2=C
 23760 sstack EBP:-8,EAX
 23764 rstack EAX,EBP:-10
// Print arg #2 (float col0)
 23768 push EAX
 23770 mov EAX,SS:ESP
 23773 add EAX,-8
// Print arg #1 (char str)
 23776 push EAX
 23778 mov ECX,2
// Print(...)
 23781 call 17323
 23784 add ESP,2
 23787 rstack EAX,EBP:-2
 23791 add EAX,1
 23794 mov EBX,EAX
// I=I+1
 23796 sstack EBP:-2,EBX
__916:
__885:
__882:
__823:
 23800 rstack EAX,EBP:-2
 23804 rstack EBX,EBP:2
 23808 add EBX,EAX
 23810 mov EAX,EBX
// C=format[I]
 23812 sstack EBP:-3,#EAX
 23816 jmp 21946
__821:
 23819 mov EAX,1
 23822 leave 
 23823 ret 
__819:
 23824 leave 
 23825 ret 
__884:
 23826 db "",0
__868:
 23827 db "<null>",0
snprintf_cpy:
// snprintf_cpy(ppbuff,pn,src)
 23834 enter 2
__949:
 23837 rstack EAX,EBP:2
 23841 sstack EBP:-1,#EAX
 23845 rstack EAX,EBP:3
 23849 sstack EBP:-2,#EAX
__951:
 23853 rstack EAX,EBP:4
 23857 rstack EBX,EBP:-2
 23861 and EBX,#EAX
 23863 mov EAX,EBX
// if (n&&(*src)
 23865 cmp 0,EAX
 23868 jz 23910
 23871 rstack EAX,EBP:4
 23875 mov EBX,EAX
 23877 inc EAX
 23879 sstack EBP:4,EAX
 23883 rstack EAX,EBP:-1
 23887 mov ECX,EAX
 23889 inc EAX
 23891 sstack EBP:-1,EAX
// *pbuff++=*src++
 23895 mov #ECX,#EBX
 23897 rstack EAX,EBP:-2
// n--
 23901 dec EAX
 23903 sstack EBP:-2,EAX
 23907 jmp 23853
__950:
 23910 rstack EAX,EBP:-1
 23914 rstack EBX,EBP:2
// *ppbuff=pbuff
 23918 mov #EBX,EAX
 23920 rstack EAX,EBP:-2
 23924 rstack EBX,EBP:3
// *pn=n
 23928 mov #EBX,EAX
__948:
 23930 leave 
 23931 ret 
snprintf_putch:
// snprintf_putch(ppbuff,pn,c)
 23932 enter 2
__953:
 23935 rstack EAX,EBP:2
 23939 sstack EBP:-1,#EAX
 23943 rstack EAX,EBP:3
 23947 sstack EBP:-2,#EAX
__955:
 23951 rstack EAX,EBP:-2
// if (n)
 23955 cmp 0,EAX
 23958 jge 23979
 23961 rstack EAX,EBP:4
 23965 rstack EBX,EBP:-1
 23969 mov ECX,EBX
 23971 inc EBX
 23973 sstack EBP:-1,EBX
// *pbuff++=c
 23977 mov #ECX,EAX
__956:
__954:
 23979 rstack EAX,EBP:-1
 23983 rstack EBX,EBP:2
// *ppbuff=pbuff
 23987 mov #EBX,EAX
 23989 rstack EAX,EBP:-2
 23993 rstack EBX,EBP:3
// *pn=n
 23997 mov #EBX,EAX
__952:
 23999 leave 
 24000 ret 
snprintf:
// snprintf(buff,n,format)
 24001 enter 10
__958:
 24004 mov EAX,SS:ESP
 24007 add EAX,4
 24010 push EAX
 24012 mov ECX,1
// va_start(...)
 24015 call 10002
 24018 add ESP,1
 24021 sstack EBP:-1,EAX
 24025 sstack EBP:-2,0
 24030 sstack EBP:-3,0
 24035 sstack EBP:-4,0
 24040 sstack EBP:-5,0
 24045 sstack EBP:-6,0
 24050 sstack EBP:-7,0
 24055 sstack EBP:-8,0
 24060 rstack EAX,EBP:2
 24064 sstack EBP:-9,EAX
 24068 rstack EAX,EBP:-2
 24072 rstack EBX,EBP:4
 24076 add EBX,EAX
 24078 mov EAX,EBX
// C=format[I]
 24080 sstack EBP:-3,#EAX
__960:
 24084 rstack EAX,EBP:-3
 24088 mov EBX,0
 24091 sub EBX,EAX
 24093 fabs EBX,EBX
 24095 fsgn EBX,EBX
// if (C!=0
 24097 cmp 0,EBX
 24100 jz 24993
__962:
 24103 rstack EAX,EBP:-3
 24107 mov EBX,37
 24110 sub EBX,EAX
 24112 fabs EBX,EBX
 24114 fsgn EBX,EBX
 24116 lneg EBX
// if (C=='%')
 24118 cmp 0,EBX
 24121 jge 24444
 24124 rstack EAX,EBP:-2
 24128 add EAX,1
 24131 mov EBX,EAX
 24133 rstack EAX,EBP:4
 24137 add EAX,EBX
 24139 mov EBX,EAX
// S=format[I+1]
 24141 sstack EBP:-4,#EBX
__965:
 24145 rstack EAX,EBP:-4
 24149 mov EBX,100
 24152 sub EBX,EAX
 24154 fabs EBX,EBX
 24156 fsgn EBX,EBX
 24158 lneg EBX
// if (S=='d')
 24160 cmp 0,EBX
 24163 jge 24250
 24166 mov EAX,SS:ESP
 24169 add EAX,-1
 24172 push EAX
 24174 mov ECX,1
// va_next(...)
 24177 call 10016
 24180 add ESP,1
// A=va_next(&va)
 24183 sstack EBP:-5,EAX
 24187 rstack EAX,EBP:-5
// num2str arg #1 (float num)
 24191 push EAX
 24193 mov ECX,1
// num2str(...)
 24196 call 13802
 24199 add ESP,1
 24202 sstack EBP:-10,EAX
 24206 rstack EAX,EBP:-10
// snprintf_cpy arg #3 (float src)
 24210 push EAX
 24212 mov EAX,SS:ESP
 24215 add EAX,3
// snprintf_cpy arg #2 (float pn)
 24218 push EAX
 24220 mov EAX,SS:ESP
 24223 add EAX,-9
// snprintf_cpy arg #1 (float ppbuff)
 24226 push EAX
 24228 mov ECX,3
// snprintf_cpy(...)
 24231 call 23834
 24234 add ESP,3
 24237 rstack EAX,EBP:-2
 24241 add EAX,2
 24244 mov EBX,EAX
// I=I+2
 24246 sstack EBP:-2,EBX
__966:
__964:
__968:
 24250 rstack EAX,EBP:-4
 24254 mov EBX,99
 24257 sub EBX,EAX
 24259 fabs EBX,EBX
 24261 fsgn EBX,EBX
 24263 lneg EBX
// if (S=='c')
 24265 cmp 0,EBX
 24268 jge 24336
 24271 mov EAX,SS:ESP
 24274 add EAX,-1
 24277 push EAX
 24279 mov ECX,1
// va_next(...)
 24282 call 10016
 24285 add ESP,1
// A=va_next(&va)
 24288 sstack EBP:-5,EAX
 24292 rstack EAX,EBP:-5
// snprintf_putch arg #3 (float c)
 24296 push EAX
 24298 mov EAX,SS:ESP
 24301 add EAX,3
// snprintf_putch arg #2 (float pn)
 24304 push EAX
 24306 mov EAX,SS:ESP
 24309 add EAX,-9
// snprintf_putch arg #1 (float ppbuff)
 24312 push EAX
 24314 mov ECX,3
// snprintf_putch(...)
 24317 call 23932
 24320 add ESP,3
 24323 rstack EAX,EBP:-2
 24327 add EAX,2
 24330 mov EBX,EAX
// I=I+2
 24332 sstack EBP:-2,EBX
__969:
__967:
__971:
 24336 rstack EAX,EBP:-4
 24340 mov EBX,115
 24343 sub EBX,EAX
 24345 fabs EBX,EBX
 24347 fsgn EBX,EBX
 24349 lneg EBX
// if (S=='s')
 24351 cmp 0,EBX
 24354 jge 24441
 24357 mov EAX,SS:ESP
 24360 add EAX,-1
 24363 push EAX
 24365 mov ECX,1
// va_next(...)
 24368 call 10016
 24371 add ESP,1
// A=va_next(&va)
 24374 sstack EBP:-5,EAX
__974:
 24378 rstack EAX,EBP:-5
 24382 lneg EAX
 24384 mov EBX,EAX
// if (!A)
 24386 cmp 0,EBX
 24389 jge 24397
// A="<null>"
 24392 sstack EBP:-5,23827
__975:
__973:
 24397 rstack EAX,EBP:-5
// snprintf_cpy arg #3 (float src)
 24401 push EAX
 24403 mov EAX,SS:ESP
 24406 add EAX,3
// snprintf_cpy arg #2 (float pn)
 24409 push EAX
 24411 mov EAX,SS:ESP
 24414 add EAX,-9
// snprintf_cpy arg #1 (float ppbuff)
 24417 push EAX
 24419 mov ECX,3
// snprintf_cpy(...)
 24422 call 23834
 24425 add ESP,3
 24428 rstack EAX,EBP:-2
 24432 add EAX,2
 24435 mov EBX,EAX
// I=I+2
 24437 sstack EBP:-2,EBX
__972:
__970:
 24441 jmp 24974
__976:
__963:
__978:
__980:
 24444 rstack EAX,EBP:-3
 24448 mov EBX,23826
 24451 sub EBX,EAX
 24453 fabs EBX,EBX
 24455 fsgn EBX,EBX
 24457 lneg EBX
// if (C=="")
 24459 cmp 0,EBX
 24462 jge 24930
 24465 rstack EAX,EBP:-2
 24469 add EAX,1
 24472 mov EBX,EAX
 24474 rstack EAX,EBP:4
 24478 add EAX,EBX
 24480 mov EBX,EAX
// S=format[I+1]
 24482 sstack EBP:-4,#EBX
__983:
 24486 rstack EAX,EBP:-4
 24490 mov EBX,97
 24493 sub EBX,EAX
 24495 fabs EBX,EBX
 24497 fsgn EBX,EBX
 24499 lneg EBX
// if (S=='a')
 24501 cmp 0,EBX
 24504 jge 24535
// snprintf_putch arg #3 (float c)
 24507 push 7
 24510 mov EAX,SS:ESP
 24513 add EAX,3
// snprintf_putch arg #2 (float pn)
 24516 push EAX
 24518 mov EAX,SS:ESP
 24521 add EAX,-9
// snprintf_putch arg #1 (float ppbuff)
 24524 push EAX
 24526 mov ECX,3
// snprintf_putch(...)
 24529 call 23932
 24532 add ESP,3
__984:
__982:
__986:
 24535 rstack EAX,EBP:-4
 24539 mov EBX,98
 24542 sub EBX,EAX
 24544 fabs EBX,EBX
 24546 fsgn EBX,EBX
 24548 lneg EBX
// if (S=='b')
 24550 cmp 0,EBX
 24553 jge 24584
// snprintf_putch arg #3 (float c)
 24556 push 8
 24559 mov EAX,SS:ESP
 24562 add EAX,3
// snprintf_putch arg #2 (float pn)
 24565 push EAX
 24567 mov EAX,SS:ESP
 24570 add EAX,-9
// snprintf_putch arg #1 (float ppbuff)
 24573 push EAX
 24575 mov ECX,3
// snprintf_putch(...)
 24578 call 23932
 24581 add ESP,3
__987:
__985:
__989:
 24584 rstack EAX,EBP:-4
 24588 mov EBX,110
 24591 sub EBX,EAX
 24593 fabs EBX,EBX
 24595 fsgn EBX,EBX
 24597 lneg EBX
// if (S=='n')
 24599 cmp 0,EBX
 24602 jge 24633
// snprintf_putch arg #3 (float c)
 24605 push 10
 24608 mov EAX,SS:ESP
 24611 add EAX,3
// snprintf_putch arg #2 (float pn)
 24614 push EAX
 24616 mov EAX,SS:ESP
 24619 add EAX,-9
// snprintf_putch arg #1 (float ppbuff)
 24622 push EAX
 24624 mov ECX,3
// snprintf_putch(...)
 24627 call 23932
 24630 add ESP,3
__990:
__988:
__992:
 24633 rstack EAX,EBP:-4
 24637 mov EBX,114
 24640 sub EBX,EAX
 24642 fabs EBX,EBX
 24644 fsgn EBX,EBX
 24646 lneg EBX
// if (S=='r')
 24648 cmp 0,EBX
 24651 jge 24682
// snprintf_putch arg #3 (float c)
 24654 push 13
 24657 mov EAX,SS:ESP
 24660 add EAX,3
// snprintf_putch arg #2 (float pn)
 24663 push EAX
 24665 mov EAX,SS:ESP
 24668 add EAX,-9
// snprintf_putch arg #1 (float ppbuff)
 24671 push EAX
 24673 mov ECX,3
// snprintf_putch(...)
 24676 call 23932
 24679 add ESP,3
__993:
__991:
__995:
 24682 rstack EAX,EBP:-4
 24686 mov EBX,116
 24689 sub EBX,EAX
 24691 fabs EBX,EBX
 24693 fsgn EBX,EBX
 24695 lneg EBX
// if (S=='t')
 24697 cmp 0,EBX
 24700 jge 24731
// snprintf_putch arg #3 (float c)
 24703 push 9
 24706 mov EAX,SS:ESP
 24709 add EAX,3
// snprintf_putch arg #2 (float pn)
 24712 push EAX
 24714 mov EAX,SS:ESP
 24717 add EAX,-9
// snprintf_putch arg #1 (float ppbuff)
 24720 push EAX
 24722 mov ECX,3
// snprintf_putch(...)
 24725 call 23932
 24728 add ESP,3
__996:
__994:
__998:
 24731 rstack EAX,EBP:-4
 24735 mov EBX,23826
 24738 sub EBX,EAX
 24740 fabs EBX,EBX
 24742 fsgn EBX,EBX
 24744 lneg EBX
// if (S=="")
 24746 cmp 0,EBX
 24749 jge 24780
// snprintf_putch arg #3 (float c)
 24752 push 23826
 24755 mov EAX,SS:ESP
 24758 add EAX,3
// snprintf_putch arg #2 (float pn)
 24761 push EAX
 24763 mov EAX,SS:ESP
 24766 add EAX,-9
// snprintf_putch arg #1 (float ppbuff)
 24769 push EAX
 24771 mov ECX,3
// snprintf_putch(...)
 24774 call 23932
 24777 add ESP,3
__999:
__997:
__1001:
 24780 rstack EAX,EBP:-4
 24784 mov EBX,39
 24787 sub EBX,EAX
 24789 fabs EBX,EBX
 24791 fsgn EBX,EBX
 24793 lneg EBX
// if (S==''')
 24795 cmp 0,EBX
 24798 jge 24829
// snprintf_putch arg #3 (float c)
 24801 push 39
 24804 mov EAX,SS:ESP
 24807 add EAX,3
// snprintf_putch arg #2 (float pn)
 24810 push EAX
 24812 mov EAX,SS:ESP
 24815 add EAX,-9
// snprintf_putch arg #1 (float ppbuff)
 24818 push EAX
 24820 mov ECX,3
// snprintf_putch(...)
 24823 call 23932
 24826 add ESP,3
__1002:
__1000:
__1004:
 24829 rstack EAX,EBP:-4
 24833 mov EBX,34
 24836 sub EBX,EAX
 24838 fabs EBX,EBX
 24840 fsgn EBX,EBX
 24842 lneg EBX
// if (S=='"')
 24844 cmp 0,EBX
 24847 jge 24878
// snprintf_putch arg #3 (float c)
 24850 push 34
 24853 mov EAX,SS:ESP
 24856 add EAX,3
// snprintf_putch arg #2 (float pn)
 24859 push EAX
 24861 mov EAX,SS:ESP
 24864 add EAX,-9
// snprintf_putch arg #1 (float ppbuff)
 24867 push EAX
 24869 mov ECX,3
// snprintf_putch(...)
 24872 call 23932
 24875 add ESP,3
__1005:
__1003:
__1007:
 24878 rstack EAX,EBP:-4
 24882 mov EBX,48
 24885 sub EBX,EAX
 24887 fabs EBX,EBX
 24889 fsgn EBX,EBX
 24891 lneg EBX
// if (S=='0')
 24893 cmp 0,EBX
 24896 jge 24927
// snprintf_putch arg #3 (float c)
 24899 push 0
 24902 mov EAX,SS:ESP
 24905 add EAX,3
// snprintf_putch arg #2 (float pn)
 24908 push EAX
 24910 mov EAX,SS:ESP
 24913 add EAX,-9
// snprintf_putch arg #1 (float ppbuff)
 24916 push EAX
 24918 mov ECX,3
// snprintf_putch(...)
 24921 call 23932
 24924 add ESP,3
__1008:
__1006:
 24927 jmp 24974
__1009:
__981:
__1011:
 24930 rstack EAX,EBP:-3
// snprintf_putch arg #3 (float c)
 24934 push EAX
 24936 mov EAX,SS:ESP
 24939 add EAX,3
// snprintf_putch arg #2 (float pn)
 24942 push EAX
 24944 mov EAX,SS:ESP
 24947 add EAX,-9
// snprintf_putch arg #1 (float ppbuff)
 24950 push EAX
 24952 mov ECX,3
// snprintf_putch(...)
 24955 call 23932
 24958 add ESP,3
 24961 rstack EAX,EBP:-2
 24965 add EAX,1
 24968 mov EBX,EAX
// I=I+1
 24970 sstack EBP:-2,EBX
__1010:
__979:
__977:
__961:
 24974 rstack EAX,EBP:-2
 24978 rstack EBX,EBP:4
 24982 add EBX,EAX
 24984 mov EAX,EBX
// C=format[I]
 24986 sstack EBP:-3,#EAX
 24990 jmp 24084
__959:
__1013:
 24993 rstack EAX,EBP:3
// if (n)
 24997 cmp 0,EAX
 25000 jge 25021
 25003 rstack EAX,EBP:-9
 25007 mov EBX,EAX
 25009 inc EAX
 25011 sstack EBP:-9,EAX
// *pbuff++=0
 25015 mov #EBX,0
 25018 jmp 25038
__1015:
__1014:
__1017:
 25021 rstack EAX,EBP:-9
// pbuff--
 25025 dec EAX
 25027 sstack EBP:-9,EAX
 25031 rstack EAX,EBP:-9
// *pbuff=0
 25035 mov #EAX,0
__1016:
__1012:
 25038 mov EAX,1
 25041 leave 
 25042 ret 
__957:
 25043 leave 
 25044 ret 
libmarker8:
 25045 db 0
delay:
// delay(time)
 25046 enter 1
__1019:
 25049 timer EDX
 25051 sstack EBP:-1,EDX
__1021:
 25055 rstack EAX,EBP:-1
 25059 neg EAX
 25061 mov EBX,EAX
 25063 add EDX,EBX
 25065 rstack EAX,EBP:2
 25069 sub EAX,EDX
 25071 mov EBX,EAX
 25073 fsgn EBX,EBX
 25075 max EBX,0
// if ((EDX-T)<time
 25078 cmp 0,EBX
 25081 jz 25089
 25084 timer EDX
 25086 jmp 25055
__1020:
__1018:
 25089 leave 
 25090 ret 
getTime:
// getTime()
 25091 enter 1
__1023:
 25094 timer EDX
 25096 sstack EBP:-1,EDX
 25100 rstack EAX,EBP:-1
 25104 leave 
 25105 ret 
__1022:
 25106 leave 
 25107 ret 
setTimeout:
// setTimeout(timeleft)
 25108 enter 1
__1025:
 25111 mov ECX,0
// getTime(...)
 25114 call 25091
 25117 sstack EBP:-1,EAX
 25121 rstack EAX,EBP:2
 25125 rstack EBX,EBP:-1
 25129 add EBX,EAX
 25131 mov EAX,EBX
// T=T+timeleft
 25133 sstack EBP:-1,EAX
 25137 rstack EAX,EBP:-1
 25141 leave 
 25142 ret 
__1024:
 25143 leave 
 25144 ret 
timePassed:
// timePassed(timestamp)
 25145 enter -0
__1027:
 25148 mov ECX,0
// getTime(...)
 25151 call 25091
 25154 rstack EBX,EBP:2
 25158 sub EBX,EAX
 25160 mov EAX,EBX
 25162 neg EAX
 25164 fsgn EAX,EAX
 25166 max EAX,0
 25169 leave 
 25170 ret 
__1026:
 25171 leave 
 25172 ret 
libmarker9:
 25173 db 0
typeof_process_h:
 25174 db "h_process",0
sizeof_process_h:
 25184 db 11
process_h_constructor:
// process_h_constructor(this)
 25185 enter -0
__1029:
 25188 rstack EAX,EBP:2
 25192 add EAX,0
 25195 mov EBX,EAX
// this[0]=typeof_process_h
 25197 mov #EBX,25174
 25200 rstack EAX,EBP:2
 25204 add EAX,1
 25207 mov EBX,EAX
// this[1]=0
 25209 mov #EBX,0
 25212 rstack EAX,EBP:2
 25216 add EAX,2
 25219 mov EBX,EAX
// this[2]=0
 25221 mov #EBX,0
 25224 rstack EAX,EBP:2
 25228 add EAX,3
 25231 mov EBX,EAX
// this[3]=0
 25233 mov #EBX,0
 25236 rstack EAX,EBP:2
 25240 add EAX,4
 25243 mov EBX,EAX
// this[4]=0
 25245 mov #EBX,0
 25248 rstack EAX,EBP:2
 25252 add EAX,5
 25255 mov EBX,EAX
// this[5]=0
 25257 mov #EBX,0
 25260 push 1
 25263 rstack EAX,EBP:2
 25267 add EAX,6
 25270 mov EBX,EAX
 25272 push EBX
 25274 mov ECX,2
// vector_constructor(...)
 25277 call 32207
 25280 add ESP,2
__1028:
 25283 leave 
 25284 ret 
process_h_get_procID:
// process_h_get_procID(this)
 25285 enter -0
__1031:
 25288 rstack EAX,EBP:2
 25292 add EAX,1
 25295 mov EBX,EAX
 25297 mov EAX,#EBX
 25299 leave 
 25300 ret 
__1030:
 25301 leave 
 25302 ret 
process_h_get_thread:
// process_h_get_thread(this)
 25303 enter -0
__1033:
 25306 rstack EAX,EBP:2
 25310 add EAX,2
 25313 mov EBX,EAX
 25315 mov EAX,#EBX
 25317 leave 
 25318 ret 
__1032:
 25319 leave 
 25320 ret 
process_h_get_free_pages_start:
// process_h_get_free_pages_start(this)
 25321 enter -0
__1035:
 25324 rstack EAX,EBP:2
 25328 add EAX,3
 25331 mov EBX,EAX
 25333 mov EAX,#EBX
 25335 leave 
 25336 ret 
__1034:
 25337 leave 
 25338 ret 
process_h_get_free_pages_end:
// process_h_get_free_pages_end(this)
 25339 enter -0
__1037:
 25342 rstack EAX,EBP:2
 25346 add EAX,4
 25349 mov EBX,EAX
 25351 mov EAX,#EBX
 25353 leave 
 25354 ret 
__1036:
 25355 leave 
 25356 ret 
process_h_get_proginfo:
// process_h_get_proginfo(this)
 25357 enter -0
__1039:
 25360 rstack EAX,EBP:2
 25364 add EAX,5
 25367 mov EBX,EAX
 25369 mov EAX,#EBX
 25371 leave 
 25372 ret 
__1038:
 25373 leave 
 25374 ret 
process_h_get_pagemap:
// process_h_get_pagemap(this)
 25375 enter -0
__1041:
 25378 rstack EAX,EBP:2
 25382 add EAX,6
 25385 mov EBX,EAX
 25387 mov EAX,EBX
 25389 leave 
 25390 ret 
__1040:
 25391 leave 
 25392 ret 
process_h_set_procID:
// process_h_set_procID(this,val)
 25393 enter -0
__1043:
 25396 rstack EAX,EBP:3
 25400 rstack EBX,EBP:2
 25404 add EBX,1
 25407 mov ECX,EBX
// this[1]=val
 25409 mov #ECX,EAX
__1042:
 25411 leave 
 25412 ret 
process_h_set_thread:
// process_h_set_thread(this,val)
 25413 enter -0
__1045:
 25416 rstack EAX,EBP:3
 25420 rstack EBX,EBP:2
 25424 add EBX,2
 25427 mov ECX,EBX
// this[2]=val
 25429 mov #ECX,EAX
__1044:
 25431 leave 
 25432 ret 
process_h_set_free_pages_start:
// process_h_set_free_pages_start(this,val)
 25433 enter -0
__1047:
 25436 rstack EAX,EBP:3
 25440 rstack EBX,EBP:2
 25444 add EBX,3
 25447 mov ECX,EBX
// this[3]=val
 25449 mov #ECX,EAX
__1046:
 25451 leave 
 25452 ret 
process_h_set_free_pages_end:
// process_h_set_free_pages_end(this,val)
 25453 enter -0
__1049:
 25456 rstack EAX,EBP:3
 25460 rstack EBX,EBP:2
 25464 add EBX,4
 25467 mov ECX,EBX
// this[4]=val
 25469 mov #ECX,EAX
__1048:
 25471 leave 
 25472 ret 
process_h_set_proginfo:
// process_h_set_proginfo(this,val)
 25473 enter -0
__1051:
 25476 rstack EAX,EBP:3
 25480 rstack EBX,EBP:2
 25484 add EBX,5
 25487 mov ECX,EBX
// this[5]=val
 25489 mov #ECX,EAX
__1050:
 25491 leave 
 25492 ret 
libmarker10:
 25493 db 0
palloc_set_disk:
// palloc_set_disk(disk,size)
 25494 enter 2
__1053:
 25497 rstack EAX,EBP:2
 25501 mod EAX,128
 25504 mov EBX,EAX
 25506 sstack EBP:-1,EBX
__1055:
 25510 rstack EAX,EBP:-1
 25514 mov EBX,0
 25517 sub EBX,EAX
 25519 fabs EBX,EBX
 25521 fsgn EBX,EBX
// if (ddisk!=0)
 25523 cmp 0,EBX
 25526 jge 25582
 25529 rstack EAX,EBP:-1
 25533 neg EAX
 25535 mov EBX,EAX
 25537 mov EAX,128
 25540 add EAX,EBX
 25542 sstack EBP:-2,EAX
 25546 rstack EAX,EBP:-2
 25550 rstack EBX,EBP:2
 25554 add EBX,EAX
 25556 mov EAX,EBX
// disk=disk+doff
 25558 sstack EBP:2,EAX
 25562 rstack EAX,EBP:-2
 25566 neg EAX
 25568 mov EBX,EAX
 25570 rstack EAX,EBP:3
 25574 add EAX,EBX
 25576 mov EBX,EAX
// size=size-doff
 25578 sstack EBP:3,EBX
__1056:
__1054:
 25582 rstack EAX,EBP:2
// page_allocator_disk=disk
 25586 mov #77210,EAX
 25589 rstack EAX,EBP:3
// page_allocator_size=size
 25593 mov #77211,EAX
__1052:
 25596 leave 
 25597 ret 
palloc_init:
// palloc_init()
 25598 enter 2
__1058:
 25601 push 1
 25604 push 77212
 25607 mov ECX,2
// vector_constructor(...)
 25610 call 32207
 25613 add ESP,2
 25616 mov EAX,#77211
 25619 div EAX,128
 25622 push EAX
 25624 mov ECX,1
// floor(...)
 25627 call 31069
 25630 add ESP,1
 25633 sstack EBP:-1,EAX
 25637 rstack EAX,EBP:-1
 25641 push EAX
 25643 push 77212
 25646 mov ECX,2
// vector_resize(...)
 25649 call 35271
 25652 add ESP,2
// init loop
 25655 sstack EBP:-2,0
__1060:
 25660 rstack EAX,EBP:-2
 25664 rstack EBX,EBP:-1
 25668 sub EBX,EAX
 25670 mov EAX,EBX
 25672 fsgn EAX,EAX
// condition
 25674 max EAX,0
 25677 cmp 0,EAX
 25680 jz 25717
 25683 rstack EAX,EBP:-2
 25687 push EAX
 25689 push 0
 25692 push 77212
 25695 mov ECX,3
// vector_set(...)
 25698 call 33949
 25701 add ESP,3
 25704 rstack EAX,EBP:-2
// loop step
 25708 inc EAX
 25710 sstack EBP:-2,EAX
 25714 jmp 25660
__1059:
__1057:
 25717 leave 
 25718 ret 
palloc:
// palloc()
 25719 enter 4
__1062:
 25722 push 77212
 25725 mov ECX,1
// vector_size(...)
 25728 call 33515
 25731 add ESP,1
 25734 sstack EBP:-1,EAX
// init loop
 25738 sstack EBP:-2,0
__1064:
 25743 rstack EAX,EBP:-2
 25747 rstack EBX,EBP:-1
 25751 sub EBX,EAX
 25753 mov EAX,EBX
 25755 fsgn EAX,EAX
// condition
 25757 max EAX,0
 25760 cmp 0,EAX
 25763 jz 25870
 25766 rstack EAX,EBP:-2
 25770 push EAX
 25772 push 0
 25775 push 77212
 25778 mov ECX,3
// vector_get(...)
 25781 call 33598
 25784 add ESP,3
 25787 sstack EBP:-3,EAX
__1066:
 25791 rstack EAX,EBP:-3
 25795 mov EBX,0
 25798 sub EBX,EAX
 25800 fabs EBX,EBX
 25802 fsgn EBX,EBX
 25804 lneg EBX
// if (u==0)
 25806 cmp 0,EBX
 25809 jge 25857
 25812 rstack EAX,EBP:-2
 25816 push EAX
 25818 push 1
 25821 push 77212
 25824 mov ECX,3
// vector_set(...)
 25827 call 33949
 25830 add ESP,3
 25833 rstack EAX,EBP:-2
 25837 mov EBX,128
 25840 mul EBX,EAX
 25842 mov EAX,#77210
 25845 add EAX,EBX
 25847 sstack EBP:-4,EAX
 25851 rstack EAX,EBP:-4
 25855 leave 
 25856 ret 
__1067:
__1065:
 25857 rstack EAX,EBP:-2
// loop step
 25861 inc EAX
 25863 sstack EBP:-2,EAX
 25867 jmp 25743
__1063:
// printf arg #1 (char* format)
 25870 push 25895
 25873 mov ECX,1
// printf(...)
 25876 call 21851
 25879 add ESP,1
 25882 mov ECX,0
// panic(...)
 25885 call 96246
 25888 mov EAX,0
 25891 leave 
 25892 ret 
__1061:
 25893 leave 
 25894 ret 
__1068:
 25895 db "%mERROR: palloc: no free pages
",0
pfree:
// pfree(p)
 25927 enter 1
__1070:
 25930 mov EAX,#77210
 25933 neg EAX
 25935 rstack EBX,EBP:2
 25939 add EBX,EAX
 25941 mov EAX,EBX
 25943 div EAX,128
 25946 sstack EBP:-1,EAX
 25950 rstack EAX,EBP:-1
 25954 push EAX
 25956 push 0
 25959 push 77212
 25962 mov ECX,3
// vector_set(...)
 25965 call 33949
 25968 add ESP,3
__1069:
 25971 leave 
 25972 ret 
palloc_count_used:
// palloc_count_used()
 25973 enter 4
__1072:
 25976 sstack EBP:-1,0
 25981 push 77212
 25984 mov ECX,1
// vector_size(...)
 25987 call 33515
 25990 add ESP,1
 25993 sstack EBP:-2,EAX
// init loop
 25997 sstack EBP:-3,0
__1074:
 26002 rstack EAX,EBP:-3
 26006 rstack EBX,EBP:-2
 26010 sub EBX,EAX
 26012 mov EAX,EBX
 26014 fsgn EAX,EAX
// condition
 26016 max EAX,0
 26019 cmp 0,EAX
 26022 jz 26083
 26025 rstack EAX,EBP:-3
 26029 push EAX
 26031 push 0
 26034 push 77212
 26037 mov ECX,3
// vector_get(...)
 26040 call 33598
 26043 add ESP,3
 26046 sstack EBP:-4,EAX
__1076:
 26050 rstack EAX,EBP:-4
// if (u)
 26054 cmp 0,EAX
 26057 jge 26070
 26060 rstack EAX,EBP:-1
// count++
 26064 inc EAX
 26066 sstack EBP:-1,EAX
__1077:
__1075:
 26070 rstack EAX,EBP:-3
// loop step
 26074 inc EAX
 26076 sstack EBP:-3,EAX
 26080 jmp 26002
__1073:
 26083 rstack EAX,EBP:-1
 26087 leave 
 26088 ret 
__1071:
 26089 leave 
 26090 ret 
palloc_count_free:
// palloc_count_free()
 26091 enter 3
__1079:
 26094 push 77212
 26097 mov ECX,1
// vector_size(...)
 26100 call 33515
 26103 add ESP,1
 26106 sstack EBP:-1,EAX
 26110 rstack EAX,EBP:-1
// printf arg #2 (unknown)
 26114 push EAX
// printf arg #1 (char* format)
 26116 push 26228
 26119 mov ECX,2
// printf(...)
 26122 call 21851
 26125 add ESP,2
 26128 mov ECX,0
// palloc_count_used(...)
 26131 call 25973
 26134 sstack EBP:-2,EAX
 26138 rstack EAX,EBP:-2
// printf arg #2 (unknown)
 26142 push EAX
// printf arg #1 (char* format)
 26144 push 26202
 26147 mov ECX,2
// printf(...)
 26150 call 21851
 26153 add ESP,2
 26156 rstack EAX,EBP:-2
 26160 neg EAX
 26162 mov EBX,EAX
 26164 rstack EAX,EBP:-1
 26168 add EAX,EBX
 26170 mov EBX,EAX
 26172 sstack EBP:-3,EBX
 26176 rstack EAX,EBP:-3
// printf arg #2 (unknown)
 26180 push EAX
// printf arg #1 (char* format)
 26182 push 26217
 26185 mov ECX,2
// printf(...)
 26188 call 21851
 26191 add ESP,2
 26194 rstack EAX,EBP:-3
 26198 leave 
 26199 ret 
__1078:
 26200 leave 
 26201 ret 
__1081:
 26202 db "num used = %d
",0
__1082:
 26217 db "free = %d
",0
__1080:
 26228 db "palloc_count_free:
numpages = %d
",0
libmarker11:
 26262 db 0
ZMALLOC_CODE:
allocation_constructor:
// allocation_constructor(A)
 26263 enter -0
__1084:
 26266 push 0
 26269 rstack EAX,EBP:2
 26273 push EAX
 26275 mov ECX,2
// allocation_set_size(...)
 26278 call 26340
 26281 add ESP,2
 26284 push 0
 26287 rstack EAX,EBP:2
 26291 push EAX
 26293 mov ECX,2
// allocation_set_owner(...)
 26296 call 26360
 26299 add ESP,2
 26302 push 0
 26305 rstack EAX,EBP:2
 26309 push EAX
 26311 mov ECX,2
// allocation_set_prev(...)
 26314 call 26380
 26317 add ESP,2
 26320 push 0
 26323 rstack EAX,EBP:2
 26327 push EAX
 26329 mov ECX,2
// allocation_set_next(...)
 26332 call 26400
 26335 add ESP,2
__1083:
 26338 leave 
 26339 ret 
allocation_set_size:
// allocation_set_size(A,n)
 26340 enter -0
__1086:
 26343 rstack EAX,EBP:3
 26347 rstack EBX,EBP:2
 26351 add EBX,0
 26354 mov ECX,EBX
// A[0]=n
 26356 mov #ECX,EAX
__1085:
 26358 leave 
 26359 ret 
allocation_set_owner:
// allocation_set_owner(A,n)
 26360 enter -0
__1088:
 26363 rstack EAX,EBP:3
 26367 rstack EBX,EBP:2
 26371 add EBX,1
 26374 mov ECX,EBX
// A[1]=n
 26376 mov #ECX,EAX
__1087:
 26378 leave 
 26379 ret 
allocation_set_prev:
// allocation_set_prev(A,n)
 26380 enter -0
__1090:
 26383 rstack EAX,EBP:3
 26387 rstack EBX,EBP:2
 26391 add EBX,2
 26394 mov ECX,EBX
// A[2]=n
 26396 mov #ECX,EAX
__1089:
 26398 leave 
 26399 ret 
allocation_set_next:
// allocation_set_next(A,n)
 26400 enter -0
__1092:
 26403 rstack EAX,EBP:3
 26407 rstack EBX,EBP:2
 26411 add EBX,3
 26414 mov ECX,EBX
// A[3]=n
 26416 mov #ECX,EAX
__1091:
 26418 leave 
 26419 ret 
allocation_get_size:
// allocation_get_size(A)
 26420 enter -0
__1094:
 26423 rstack EAX,EBP:2
 26427 add EAX,0
 26430 mov EBX,EAX
 26432 mov EAX,#EBX
 26434 leave 
 26435 ret 
__1093:
 26436 leave 
 26437 ret 
allocation_get_owner:
// allocation_get_owner(A)
 26438 enter -0
__1096:
 26441 rstack EAX,EBP:2
 26445 add EAX,1
 26448 mov EBX,EAX
 26450 mov EAX,#EBX
 26452 leave 
 26453 ret 
__1095:
 26454 leave 
 26455 ret 
allocation_get_prev:
// allocation_get_prev(A)
 26456 enter -0
__1098:
 26459 rstack EAX,EBP:2
 26463 add EAX,2
 26466 mov EBX,EAX
 26468 mov EAX,#EBX
 26470 leave 
 26471 ret 
__1097:
 26472 leave 
 26473 ret 
allocation_get_next:
// allocation_get_next(A)
 26474 enter -0
__1100:
 26477 rstack EAX,EBP:2
 26481 add EAX,3
 26484 mov EBX,EAX
 26486 mov EAX,#EBX
 26488 leave 
 26489 ret 
__1099:
 26490 leave 
 26491 ret 
malloc_getAllocation:
// malloc_getAllocation(I)
 26492 enter -0
__1102:
__1104:
 26495 rstack EAX,EBP:2
 26499 mov EBX,1
 26502 sub EBX,EAX
 26504 fsgn EBX,EBX
 26506 max EBX,0
// if (I<1)
 26509 cmp 0,EBX
 26512 jge 26577
__1107:
// if (malloc_debug)
 26515 cmp 0,#77201
 26519 jge 26572
 26522 push 26735
 26525 mov ECX,1
// malloc_print(...)
 26528 call #77202
 26531 add ESP,1
 26534 rstack EAX,EBP:2
 26538 push EAX
 26540 mov ECX,1
// malloc_num2str(...)
 26543 call #77203
 26546 add ESP,1
 26549 push EAX
 26551 mov ECX,1
// malloc_print(...)
 26554 call #77202
 26557 add ESP,1
 26560 push 26729
 26563 mov ECX,1
// malloc_print(...)
 26566 call #77202
 26569 add ESP,1
__1108:
__1106:
 26572 mov EAX,0
 26575 leave 
 26576 ret 
__1105:
__1103:
__1112:
 26577 rstack EAX,EBP:2
 26581 mov EBX,#77206
 26584 neg EBX
 26586 mov ECX,#77205
 26589 add ECX,EBX
 26591 sub ECX,EAX
 26593 neg ECX
 26595 fsgn ECX,ECX
 26597 max ECX,0
// if (I>malloc_max_disk-malloc_header)
 26600 cmp 0,ECX
 26603 jge 26712
__1115:
// if (malloc_debug)
 26606 cmp 0,#77201
 26610 jge 26707
 26613 push 26735
 26616 mov ECX,1
// malloc_print(...)
 26619 call #77202
 26622 add ESP,1
 26625 rstack EAX,EBP:2
 26629 push EAX
 26631 mov ECX,1
// malloc_num2str(...)
 26634 call #77203
 26637 add ESP,1
 26640 push EAX
 26642 mov ECX,1
// malloc_print(...)
 26645 call #77202
 26648 add ESP,1
 26651 push 26757
 26654 mov ECX,1
// malloc_print(...)
 26657 call #77202
 26660 add ESP,1
 26663 mov EAX,#77206
 26666 neg EAX
 26668 mov EBX,#77205
 26671 add EBX,EAX
 26673 push EBX
 26675 mov ECX,1
// malloc_num2str(...)
 26678 call #77203
 26681 add ESP,1
 26684 push EAX
 26686 mov ECX,1
// malloc_print(...)
 26689 call #77202
 26692 add ESP,1
 26695 push 26727
 26698 mov ECX,1
// malloc_print(...)
 26701 call #77202
 26704 add ESP,1
__1116:
__1114:
 26707 mov EAX,0
 26710 leave 
 26711 ret 
__1113:
__1111:
 26712 rstack EAX,EBP:2
 26716 mov EBX,#77204
 26719 add EBX,EAX
 26721 mov EAX,EBX
 26723 leave 
 26724 ret 
__1101:
 26725 leave 
 26726 ret 
__1118:
 26727 db "
",0
__1110:
 26729 db "<= 0
",0
__1109:
 26735 db "getAllocation fails: ",0
__1117:
 26757 db ">",0
malloc_getDataFromIndex:
// malloc_getDataFromIndex(I)
 26759 enter -0
__1120:
 26762 rstack EAX,EBP:2
 26766 add EAX,#77206
 26769 mov EBX,EAX
 26771 mov EAX,#77204
 26774 add EAX,EBX
 26776 leave 
 26777 ret 
__1119:
 26778 leave 
 26779 ret 
malloc_getDataFromAllocation:
// malloc_getDataFromAllocation(A)
 26780 enter -0
__1122:
 26783 rstack EAX,EBP:2
 26787 add EAX,#77206
 26790 mov EBX,EAX
 26792 mov EAX,EBX
 26794 leave 
 26795 ret 
__1121:
 26796 leave 
 26797 ret 
malloc_getIndex:
// malloc_getIndex(ptr)
 26798 enter -0
__1124:
 26801 mov EAX,#77204
 26804 neg EAX
 26806 rstack EBX,EBP:2
 26810 add EBX,EAX
 26812 mov EAX,EBX
 26814 leave 
 26815 ret 
__1123:
 26816 leave 
 26817 ret 
malloc_trySplit:
// malloc_trySplit(A,returnB,n)
 26818 enter 7
__1126:
 26821 rstack EAX,EBP:2
// allocation_get_size arg #1 (float* A)
 26825 push EAX
 26827 mov ECX,1
// allocation_get_size(...)
 26830 call 26420
 26833 add ESP,1
 26836 sstack EBP:-1,EAX
 26840 mov EAX,#77206
 26843 add EAX,1
 26846 rstack EBX,EBP:4
 26850 add EBX,EAX
 26852 mov EAX,EBX
 26854 sstack EBP:-2,EAX
__1128:
 26858 rstack EAX,EBP:2
// allocation_get_size arg #1 (float* A)
 26862 push EAX
 26864 mov ECX,1
// allocation_get_size(...)
 26867 call 26420
 26870 add ESP,1
 26873 mov EBX,#77206
 26876 add EBX,1
 26879 rstack ECX,EBP:4
 26883 add ECX,EBX
 26885 mov EBX,ECX
 26887 sub EBX,EAX
 26889 fsgn EBX,EBX
 26891 max EBX,0
// if (allocation_get_size(A)<n+malloc_header+1)
 26894 cmp 0,EBX
 26897 jge 26945
// printf arg #2 (unknown)
 26900 push 990
// printf arg #1 (char* format)
 26903 push 27380
 26906 mov ECX,2
// printf(...)
 26909 call 21851
 26912 add ESP,2
 26915 rstack EAX,EBP:-2
// printf arg #4 (unknown)
 26919 push EAX
 26921 rstack EAX,EBP:-1
// printf arg #3 (unknown)
 26925 push EAX
 26927 rstack EAX,EBP:2
// printf arg #2 (unknown)
 26931 push EAX
// printf arg #1 (char* format)
 26933 push 27334
 26936 mov ECX,4
// printf(...)
 26939 call 21851
 26942 add ESP,4
__1129:
__1127:
 26945 rstack EAX,EBP:2
// allocation_get_size arg #1 (float* A)
 26949 push EAX
 26951 mov ECX,1
// allocation_get_size(...)
 26954 call 26420
 26957 add ESP,1
 26960 sstack EBP:-3,EAX
 26964 rstack EAX,EBP:4
// allocation_set_size arg #2 (float n)
 26968 push EAX
 26970 rstack EAX,EBP:2
// allocation_set_size arg #1 (float* A)
 26974 push EAX
 26976 mov ECX,2
// allocation_set_size(...)
 26979 call 26340
 26982 add ESP,2
 26985 rstack EAX,EBP:2
// malloc_getDataFromAllocation arg #1 (float* A)
 26989 push EAX
 26991 mov ECX,1
// malloc_getDataFromAllocation(...)
 26994 call 26780
 26997 add ESP,1
 27000 sstack EBP:-4,EAX
 27004 rstack EAX,EBP:4
 27008 rstack EBX,EBP:-4
 27012 add EBX,EAX
 27014 mov EAX,EBX
// tmp=tmp+n
 27016 sstack EBP:-4,EAX
 27020 rstack EAX,EBP:-4
// malloc_getIndex arg #1 (float* ptr)
 27024 push EAX
 27026 mov ECX,1
// malloc_getIndex(...)
 27029 call 26798
 27032 add ESP,1
// tmp=malloc_getIndex(tmp)
 27035 sstack EBP:-4,EAX
 27039 rstack EAX,EBP:-4
// malloc_getAllocation arg #1 (float I)
 27043 push EAX
 27045 mov ECX,1
// malloc_getAllocation(...)
 27048 call 26492
 27051 add ESP,1
 27054 sstack EBP:-5,EAX
 27058 rstack EAX,EBP:-5
 27062 sstack EBP:-6,EAX
 27066 mov EAX,#77206
 27069 neg EAX
 27071 rstack EBX,EBP:4
 27075 neg EBX
 27077 mov ECX,EBX
 27079 add ECX,EAX
 27081 rstack EAX,EBP:-3
 27085 add EAX,ECX
 27087 mov EBX,EAX
 27089 sstack EBP:-7,EBX
 27093 rstack EAX,EBP:-7
// allocation_set_size arg #2 (float n)
 27097 push EAX
 27099 rstack EAX,EBP:-6
// allocation_set_size arg #1 (float* A)
 27103 push EAX
 27105 mov ECX,2
// allocation_set_size(...)
 27108 call 26340
 27111 add ESP,2
 27114 rstack EAX,EBP:2
// allocation_get_owner arg #1 (float* A)
 27118 push EAX
 27120 mov ECX,1
// allocation_get_owner(...)
 27123 call 26438
 27126 add ESP,1
// allocation_set_owner arg #2 (float n)
 27129 push EAX
 27131 rstack EAX,EBP:-6
// allocation_set_owner arg #1 (float* A)
 27135 push EAX
 27137 mov ECX,2
// allocation_set_owner(...)
 27140 call 26360
 27143 add ESP,2
 27146 rstack EAX,EBP:2
// malloc_getIndex arg #1 (float* ptr)
 27150 push EAX
 27152 mov ECX,1
// malloc_getIndex(...)
 27155 call 26798
 27158 add ESP,1
// allocation_set_prev arg #2 (float n)
 27161 push EAX
 27163 rstack EAX,EBP:-6
// allocation_set_prev arg #1 (float* A)
 27167 push EAX
 27169 mov ECX,2
// allocation_set_prev(...)
 27172 call 26380
 27175 add ESP,2
 27178 rstack EAX,EBP:2
// allocation_get_next arg #1 (float* A)
 27182 push EAX
 27184 mov ECX,1
// allocation_get_next(...)
 27187 call 26474
 27190 add ESP,1
// allocation_set_next arg #2 (float n)
 27193 push EAX
 27195 rstack EAX,EBP:-6
// allocation_set_next arg #1 (float* A)
 27199 push EAX
 27201 mov ECX,2
// allocation_set_next(...)
 27204 call 26400
 27207 add ESP,2
 27210 rstack EAX,EBP:-6
// malloc_getIndex arg #1 (float* ptr)
 27214 push EAX
 27216 mov ECX,1
// malloc_getIndex(...)
 27219 call 26798
 27222 add ESP,1
// allocation_set_next arg #2 (float n)
 27225 push EAX
 27227 rstack EAX,EBP:2
// allocation_set_next arg #1 (float* A)
 27231 push EAX
 27233 mov ECX,2
// allocation_set_next(...)
 27236 call 26400
 27239 add ESP,2
__1133:
 27242 rstack EAX,EBP:-6
// allocation_get_next arg #1 (float* A)
 27246 push EAX
 27248 mov ECX,1
// allocation_get_next(...)
 27251 call 26474
 27254 add ESP,1
// if (allocation_get_next(B))
 27257 cmp 0,EAX
 27260 jge 27317
 27263 rstack EAX,EBP:-6
// malloc_getIndex arg #1 (float* ptr)
 27267 push EAX
 27269 mov ECX,1
// malloc_getIndex(...)
 27272 call 26798
 27275 add ESP,1
// allocation_set_prev arg #2 (float n)
 27278 push EAX
 27280 rstack EAX,EBP:-6
// allocation_get_next arg #1 (float* A)
 27284 push EAX
 27286 mov ECX,1
// allocation_get_next(...)
 27289 call 26474
 27292 add ESP,1
// malloc_getAllocation arg #1 (float I)
 27295 push EAX
 27297 mov ECX,1
// malloc_getAllocation(...)
 27300 call 26492
 27303 add ESP,1
// allocation_set_prev arg #1 (float* A)
 27306 push EAX
 27308 mov ECX,2
// allocation_set_prev(...)
 27311 call 26380
 27314 add ESP,2
__1134:
__1132:
 27317 rstack EAX,EBP:-6
 27321 rstack EBX,EBP:3
// *returnB=B
 27325 mov #EBX,EAX
 27327 mov EAX,1
 27330 leave 
 27331 ret 
__1125:
 27332 leave 
 27333 ret 
__1131:
 27334 db "size of allocation %d is %d, need %d or more
",0
__1130:
 27380 db "%mmalloc: too small, cant split
",0
malloc_join:
// malloc_join(A,B)
 27413 enter 2
__1136:
 27416 rstack EAX,EBP:2
// allocation_get_size arg #1 (float* A)
 27420 push EAX
 27422 mov ECX,1
// allocation_get_size(...)
 27425 call 26420
 27428 add ESP,1
 27431 sstack EBP:-1,EAX
 27435 rstack EAX,EBP:3
// allocation_get_size arg #1 (float* A)
 27439 push EAX
 27441 mov ECX,1
// allocation_get_size(...)
 27444 call 26420
 27447 add ESP,1
 27450 rstack EBX,EBP:-1
 27454 add EBX,EAX
 27456 mov EAX,EBX
// tmp=tmp+allocation_get_size(B)
 27458 sstack EBP:-1,EAX
 27462 rstack EAX,EBP:-1
 27466 add EAX,#77206
 27469 mov EBX,EAX
// tmp=tmp+malloc_header
 27471 sstack EBP:-1,EBX
 27475 rstack EAX,EBP:-1
// allocation_set_size arg #2 (float n)
 27479 push EAX
 27481 rstack EAX,EBP:2
// allocation_set_size arg #1 (float* A)
 27485 push EAX
 27487 mov ECX,2
// allocation_set_size(...)
 27490 call 26340
 27493 add ESP,2
 27496 rstack EAX,EBP:3
// allocation_get_next arg #1 (float* A)
 27500 push EAX
 27502 mov ECX,1
// allocation_get_next(...)
 27505 call 26474
 27508 add ESP,1
// tmp=allocation_get_next(B)
 27511 sstack EBP:-1,EAX
 27515 rstack EAX,EBP:-1
// allocation_set_next arg #2 (float n)
 27519 push EAX
 27521 rstack EAX,EBP:2
// allocation_set_next arg #1 (float* A)
 27525 push EAX
 27527 mov ECX,2
// allocation_set_next(...)
 27530 call 26400
 27533 add ESP,2
__1138:
 27536 rstack EAX,EBP:3
// allocation_get_next arg #1 (float* A)
 27540 push EAX
 27542 mov ECX,1
// allocation_get_next(...)
 27545 call 26474
 27548 add ESP,1
// if (allocation_get_next(B))
 27551 cmp 0,EAX
 27554 jge 27635
 27557 rstack EAX,EBP:3
// allocation_get_next arg #1 (float* A)
 27561 push EAX
 27563 mov ECX,1
// allocation_get_next(...)
 27566 call 26474
 27569 add ESP,1
// tmp=allocation_get_next(B)
 27572 sstack EBP:-1,EAX
 27576 rstack EAX,EBP:-1
// malloc_getAllocation arg #1 (float I)
 27580 push EAX
 27582 mov ECX,1
// malloc_getAllocation(...)
 27585 call 26492
 27588 add ESP,1
// tmp=malloc_getAllocation(tmp)
 27591 sstack EBP:-1,EAX
 27595 rstack EAX,EBP:2
// malloc_getIndex arg #1 (float* ptr)
 27599 push EAX
 27601 mov ECX,1
// malloc_getIndex(...)
 27604 call 26798
 27607 add ESP,1
 27610 sstack EBP:-2,EAX
 27614 rstack EAX,EBP:-2
// allocation_set_prev arg #2 (float n)
 27618 push EAX
 27620 rstack EAX,EBP:-1
// allocation_set_prev arg #1 (float* A)
 27624 push EAX
 27626 mov ECX,2
// allocation_set_prev(...)
 27629 call 26380
 27632 add ESP,2
__1139:
__1137:
__1135:
 27635 leave 
 27636 ret 
malloc_set_disk:
// malloc_set_disk(disk,disk_size)
 27637 enter -0
__1141:
 27640 rstack EAX,EBP:2
// malloc_disk=disk
 27644 mov #77204,EAX
 27647 rstack EAX,EBP:3
// malloc_max_disk=disk_size
 27651 mov #77205,EAX
// malloc_header=4
 27654 mov #77206,4
// malloc_user=1
 27658 mov #77207,1
// malloc_debug=0
 27662 mov #77201,0
__1140:
 27666 leave 
 27667 ret 
malloc_init:
// malloc_init()
 27668 enter 1
__1143:
__1145:
// if (malloc_debug)
 27671 cmp 0,#77201
 27675 jge 27725
 27678 push 27940
 27681 mov ECX,1
// malloc_print(...)
 27684 call #77202
 27687 add ESP,1
 27690 push #77204
 27693 mov ECX,1
// malloc_num2str(...)
 27696 call #77203
 27699 add ESP,1
 27702 push EAX
 27704 mov ECX,1
// malloc_print(...)
 27707 call #77202
 27710 add ESP,1
 27713 push 26727
 27716 mov ECX,1
// malloc_print(...)
 27719 call #77202
 27722 add ESP,1
__1146:
__1144:
// malloc_getAllocation arg #1 (float I)
 27725 push 1
 27728 mov ECX,1
// malloc_getAllocation(...)
 27731 call 26492
 27734 add ESP,1
 27737 sstack EBP:-1,EAX
__1149:
// if (malloc_debug)
 27741 cmp 0,#77201
 27745 jge 27798
 27748 push 27903
 27751 mov ECX,1
// malloc_print(...)
 27754 call #77202
 27757 add ESP,1
 27760 rstack EAX,EBP:-1
 27764 push EAX
 27766 mov ECX,1
// malloc_num2str(...)
 27769 call #77203
 27772 add ESP,1
 27775 push EAX
 27777 mov ECX,1
// malloc_print(...)
 27780 call #77202
 27783 add ESP,1
 27786 push 26727
 27789 mov ECX,1
// malloc_print(...)
 27792 call #77202
 27795 add ESP,1
__1150:
__1148:
 27798 mov EAX,#77206
 27801 neg EAX
 27803 add EAX,-1
 27806 mov EBX,#77205
 27809 add EBX,EAX
// allocation_set_size arg #2 (float n)
 27811 push EBX
 27813 rstack EAX,EBP:-1
// allocation_set_size arg #1 (float* A)
 27817 push EAX
 27819 mov ECX,2
// allocation_set_size(...)
 27822 call 26340
 27825 add ESP,2
// allocation_set_owner arg #2 (float n)
 27828 push 0
 27831 rstack EAX,EBP:-1
// allocation_set_owner arg #1 (float* A)
 27835 push EAX
 27837 mov ECX,2
// allocation_set_owner(...)
 27840 call 26360
 27843 add ESP,2
// allocation_set_prev arg #2 (float n)
 27846 push 0
 27849 rstack EAX,EBP:-1
// allocation_set_prev arg #1 (float* A)
 27853 push EAX
 27855 mov ECX,2
// allocation_set_prev(...)
 27858 call 26380
 27861 add ESP,2
// allocation_set_next arg #2 (float n)
 27864 push 0
 27867 rstack EAX,EBP:-1
// allocation_set_next arg #1 (float* A)
 27871 push EAX
 27873 mov ECX,2
// allocation_set_next(...)
 27876 call 26400
 27879 add ESP,2
__1153:
// if (malloc_debug)
 27882 cmp 0,#77201
 27886 jge 27901
 27889 push 27917
 27892 mov ECX,1
// malloc_print(...)
 27895 call #77202
 27898 add ESP,1
__1154:
__1152:
__1142:
 27901 leave 
 27902 ret 
__1151:
 27903 db "allocation = ",0
__1155:
 27917 db "malloc_init returning
",0
__1147:
 27940 db "disk = ",0
malloc_test:
// malloc_test()
 27948 enter 5
__1157:
 27951 mov EAX,SS:ESP
 27954 add EAX,-4
 27957 push EAX
 27959 mov EAX,SS:ESP
 27962 add EAX,-3
 27965 push EAX
 27967 mov EAX,SS:ESP
 27970 add EAX,-2
 27973 push EAX
 27975 mov EAX,SS:ESP
 27978 add EAX,-1
 27981 push EAX
 27983 mov ECX,4
// malloc_count(...)
 27986 call 28288
 27989 add ESP,4
__1159:
 27992 rstack EAX,EBP:-4
 27996 rstack EBX,EBP:-3
 28000 add EBX,EAX
 28002 mov EAX,EBX
 28004 mov EBX,#77206
 28007 mul EBX,EAX
 28009 add EBX,1
 28012 rstack EAX,EBP:-2
 28016 add EAX,EBX
 28018 mov EBX,EAX
 28020 rstack EAX,EBP:-1
 28024 add EAX,EBX
 28026 mov EBX,EAX
 28028 sstack EBP:-5,EBX
__1161:
 28032 rstack EAX,EBP:-5
 28036 mov EBX,#77205
 28039 sub EBX,EAX
 28041 fabs EBX,EBX
 28043 fsgn EBX,EBX
// if (calcsize!=malloc_max_disk)
 28045 cmp 0,EBX
 28048 jge 28148
__1164:
// if (malloc_print)
 28051 cmp 0,#77202
 28055 jge 28143
 28058 push 28155
 28061 mov ECX,1
// malloc_print(...)
 28064 call #77202
 28067 add ESP,1
 28070 rstack EAX,EBP:-5
 28074 push EAX
 28076 mov ECX,1
// malloc_num2str(...)
 28079 call #77203
 28082 add ESP,1
 28085 push EAX
 28087 mov ECX,1
// malloc_print(...)
 28090 call #77202
 28093 add ESP,1
 28096 push 28182
 28099 mov ECX,1
// malloc_print(...)
 28102 call #77202
 28105 add ESP,1
 28108 push #77205
 28111 mov ECX,1
// malloc_num2str(...)
 28114 call #77203
 28117 add ESP,1
 28120 push EAX
 28122 mov ECX,1
// malloc_print(...)
 28125 call #77202
 28128 add ESP,1
 28131 push 28179
 28134 mov ECX,1
// malloc_print(...)
 28137 call #77202
 28140 add ESP,1
__1165:
__1163:
 28143 mov EAX,1
 28146 leave 
 28147 ret 
__1162:
__1160:
__1158:
 28148 mov EAX,0
 28151 leave 
 28152 ret 
__1156:
 28153 leave 
 28154 ret 
__1166:
 28155 db "ERROR: HEAP CORRUPTED
(",0
__1168:
 28179 db ")
",0
__1167:
 28182 db " / ",0
malloc_print_count:
// malloc_print_count()
 28186 enter 1
__1170:
// malloc_getAllocation arg #1 (float I)
 28189 push 1
 28192 mov ECX,1
// malloc_getAllocation(...)
 28195 call 26492
 28198 add ESP,1
 28201 sstack EBP:-1,EAX
__1172:
// if (1
 28205 cmp 0,1
 28209 jz 28286
 28212 rstack EAX,EBP:-1
 28216 push EAX
 28218 mov ECX,1
// printAllocationSimple(...)
 28221 call 28526
 28224 add ESP,1
__1174:
 28227 rstack EAX,EBP:-1
// allocation_get_next arg #1 (float* A)
 28231 push EAX
 28233 mov ECX,1
// allocation_get_next(...)
 28236 call 26474
 28239 add ESP,1
// if (allocation_get_next(A))
 28242 cmp 0,EAX
 28245 jge 28281
 28248 rstack EAX,EBP:-1
// allocation_get_next arg #1 (float* A)
 28252 push EAX
 28254 mov ECX,1
// allocation_get_next(...)
 28257 call 26474
 28260 add ESP,1
// malloc_getAllocation arg #1 (float I)
 28263 push EAX
 28265 mov ECX,1
// malloc_getAllocation(...)
 28268 call 26492
 28271 add ESP,1
// A=malloc_getAllocation(allocation_get_next(A))
 28274 sstack EBP:-1,EAX
 28278 jmp 28283
__1176:
__1175:
__1178:
 28281 leave 
 28282 ret 
__1177:
__1173:
 28283 jmp 28205
__1171:
__1169:
 28286 leave 
 28287 ret 
malloc_count:
// malloc_count(freesize,usedsize,freecount,usedcount)
 28288 enter 1
__1180:
 28291 rstack EAX,EBP:2
// *freesize=0
 28295 mov #EAX,0
 28298 rstack EAX,EBP:3
// *usedsize=0
 28302 mov #EAX,0
 28305 rstack EAX,EBP:4
// *freecount=0
 28309 mov #EAX,0
 28312 rstack EAX,EBP:5
// *usedcount=0
 28316 mov #EAX,0
// malloc_getAllocation arg #1 (float I)
 28319 push 1
 28322 mov ECX,1
// malloc_getAllocation(...)
 28325 call 26492
 28328 add ESP,1
 28331 sstack EBP:-1,EAX
__1182:
// if (1
 28335 cmp 0,1
 28339 jz 28524
__1184:
 28342 rstack EAX,EBP:-1
// allocation_get_owner arg #1 (float* A)
 28346 push EAX
 28348 mov ECX,1
// allocation_get_owner(...)
 28351 call 26438
 28354 add ESP,1
 28357 mov EBX,0
 28360 sub EBX,EAX
 28362 fabs EBX,EBX
 28364 fsgn EBX,EBX
 28366 lneg EBX
// if (allocation_get_owner(A)==0)
 28368 cmp 0,EBX
 28371 jge 28421
 28374 rstack EAX,EBP:-1
// allocation_get_size arg #1 (float* A)
 28378 push EAX
 28380 mov ECX,1
// allocation_get_size(...)
 28383 call 26420
 28386 add ESP,1
 28389 rstack EBX,EBP:2
 28393 mov ECX,#EBX
 28395 add ECX,EAX
 28397 rstack EAX,EBP:2
// *freesize=*freesize+allocation_get_size(A)
 28401 mov #EAX,ECX
 28403 rstack EAX,EBP:4
 28407 mov EBX,#EAX
 28409 add EBX,1
 28412 rstack EAX,EBP:4
// *freecount=*freecount+1
 28416 mov #EAX,EBX
 28418 jmp 28465
__1186:
__1185:
__1188:
 28421 rstack EAX,EBP:-1
// allocation_get_size arg #1 (float* A)
 28425 push EAX
 28427 mov ECX,1
// allocation_get_size(...)
 28430 call 26420
 28433 add ESP,1
 28436 rstack EBX,EBP:3
 28440 mov ECX,#EBX
 28442 add ECX,EAX
 28444 rstack EAX,EBP:3
// *usedsize=*usedsize+allocation_get_size(A)
 28448 mov #EAX,ECX
 28450 rstack EAX,EBP:5
 28454 mov EBX,#EAX
 28456 add EBX,1
 28459 rstack EAX,EBP:5
// *usedcount=*usedcount+1
 28463 mov #EAX,EBX
__1187:
__1183:
__1190:
 28465 rstack EAX,EBP:-1
// allocation_get_next arg #1 (float* A)
 28469 push EAX
 28471 mov ECX,1
// allocation_get_next(...)
 28474 call 26474
 28477 add ESP,1
// if (allocation_get_next(A))
 28480 cmp 0,EAX
 28483 jge 28519
 28486 rstack EAX,EBP:-1
// allocation_get_next arg #1 (float* A)
 28490 push EAX
 28492 mov ECX,1
// allocation_get_next(...)
 28495 call 26474
 28498 add ESP,1
// malloc_getAllocation arg #1 (float I)
 28501 push EAX
 28503 mov ECX,1
// malloc_getAllocation(...)
 28506 call 26492
 28509 add ESP,1
// A=malloc_getAllocation(allocation_get_next(A))
 28512 sstack EBP:-1,EAX
 28516 jmp 28521
__1192:
__1191:
__1194:
 28519 leave 
 28520 ret 
__1193:
__1189:
 28521 jmp 28335
__1181:
__1179:
 28524 leave 
 28525 ret 
printAllocationSimple:
// printAllocationSimple(A)
 28526 enter -0
__1196:
__1198:
 28529 rstack EAX,EBP:2
// allocation_get_owner arg #1 (float* A)
 28533 push EAX
 28535 mov ECX,1
// allocation_get_owner(...)
 28538 call 26438
 28541 add ESP,1
// if (allocation_get_owner(A))
 28544 cmp 0,EAX
 28547 jge 28565
 28550 push 28669
 28553 mov ECX,1
// malloc_print(...)
 28556 call #77202
 28559 add ESP,1
 28562 jmp 28577
__1201:
__1199:
__1203:
 28565 push 28666
 28568 mov ECX,1
// malloc_print(...)
 28571 call #77202
 28574 add ESP,1
__1202:
__1197:
 28577 rstack EAX,EBP:2
 28581 push EAX
 28583 mov ECX,1
// malloc_num2str(...)
 28586 call #77203
 28589 add ESP,1
 28592 push EAX
 28594 mov ECX,1
// malloc_print(...)
 28597 call #77202
 28600 add ESP,1
 28603 push 28672
 28606 mov ECX,1
// malloc_print(...)
 28609 call #77202
 28612 add ESP,1
 28615 rstack EAX,EBP:2
// allocation_get_size arg #1 (float* A)
 28619 push EAX
 28621 mov ECX,1
// allocation_get_size(...)
 28624 call 26420
 28627 add ESP,1
 28630 push EAX
 28632 mov ECX,1
// malloc_num2str(...)
 28635 call #77203
 28638 add ESP,1
 28641 push EAX
 28643 mov ECX,1
// malloc_print(...)
 28646 call #77202
 28649 add ESP,1
 28652 push 26727
 28655 mov ECX,1
// malloc_print(...)
 28658 call #77202
 28661 add ESP,1
__1195:
 28664 leave 
 28665 ret 
__1204:
 28666 db "O ",0
__1200:
 28669 db "X ",0
__1205:
 28672 db " ",0
printAllocation:
// printAllocation(A)
 28674 enter -0
__1207:
 28677 push 28998
 28680 mov ECX,1
// malloc_print(...)
 28683 call #77202
 28686 add ESP,1
 28689 rstack EAX,EBP:2
 28693 push EAX
 28695 mov ECX,1
// malloc_num2str(...)
 28698 call #77203
 28701 add ESP,1
 28704 push EAX
 28706 mov ECX,1
// malloc_print(...)
 28709 call #77202
 28712 add ESP,1
 28715 push 28974
 28718 mov ECX,1
// malloc_print(...)
 28721 call #77202
 28724 add ESP,1
 28727 rstack EAX,EBP:2
// malloc_getDataFromAllocation arg #1 (float* A)
 28731 push EAX
 28733 mov ECX,1
// malloc_getDataFromAllocation(...)
 28736 call 26780
 28739 add ESP,1
 28742 push EAX
 28744 mov ECX,1
// malloc_num2str(...)
 28747 call #77203
 28750 add ESP,1
 28753 push EAX
 28755 mov ECX,1
// malloc_print(...)
 28758 call #77202
 28761 add ESP,1
 28764 push 28990
 28767 mov ECX,1
// malloc_print(...)
 28770 call #77202
 28773 add ESP,1
 28776 rstack EAX,EBP:2
// allocation_get_size arg #1 (float* A)
 28780 push EAX
 28782 mov ECX,1
// allocation_get_size(...)
 28785 call 26420
 28788 add ESP,1
 28791 push EAX
 28793 mov ECX,1
// malloc_num2str(...)
 28796 call #77203
 28799 add ESP,1
 28802 push EAX
 28804 mov ECX,1
// malloc_print(...)
 28807 call #77202
 28810 add ESP,1
 28813 push 29011
 28816 mov ECX,1
// malloc_print(...)
 28819 call #77202
 28822 add ESP,1
 28825 rstack EAX,EBP:2
// allocation_get_owner arg #1 (float* A)
 28829 push EAX
 28831 mov ECX,1
// allocation_get_owner(...)
 28834 call 26438
 28837 add ESP,1
 28840 push EAX
 28842 mov ECX,1
// malloc_num2str(...)
 28845 call #77203
 28848 add ESP,1
 28851 push EAX
 28853 mov ECX,1
// malloc_print(...)
 28856 call #77202
 28859 add ESP,1
 28862 push 28982
 28865 mov ECX,1
// malloc_print(...)
 28868 call #77202
 28871 add ESP,1
 28874 rstack EAX,EBP:2
// allocation_get_prev arg #1 (float* A)
 28878 push EAX
 28880 mov ECX,1
// allocation_get_prev(...)
 28883 call 26456
 28886 add ESP,1
 28889 push EAX
 28891 mov ECX,1
// malloc_num2str(...)
 28894 call #77203
 28897 add ESP,1
 28900 push EAX
 28902 mov ECX,1
// malloc_print(...)
 28905 call #77202
 28908 add ESP,1
 28911 push 29003
 28914 mov ECX,1
// malloc_print(...)
 28917 call #77202
 28920 add ESP,1
 28923 rstack EAX,EBP:2
// allocation_get_next arg #1 (float* A)
 28927 push EAX
 28929 mov ECX,1
// allocation_get_next(...)
 28932 call 26474
 28935 add ESP,1
 28938 push EAX
 28940 mov ECX,1
// malloc_num2str(...)
 28943 call #77203
 28946 add ESP,1
 28949 push EAX
 28951 mov ECX,1
// malloc_print(...)
 28954 call #77202
 28957 add ESP,1
 28960 push 26727
 28963 mov ECX,1
// malloc_print(...)
 28966 call #77202
 28969 add ESP,1
__1206:
 28972 leave 
 28973 ret 
__1209:
 28974 db ", data ",0
__1212:
 28982 db ", prev ",0
__1210:
 28990 db ", size ",0
__1208:
 28998 db "Alc ",0
__1213:
 29003 db ", next ",0
__1211:
 29011 db ", owner ",0
mallocLast:
// mallocLast(n)
 29020 enter 9
__1215:
// malloc_getAllocation arg #1 (float I)
 29023 push #77208
 29026 mov ECX,1
// malloc_getAllocation(...)
 29029 call 26492
 29032 add ESP,1
 29035 sstack EBP:-1,EAX
__1217:
// if (1
 29039 cmp 0,1
 29043 jz 29332
// malloc_debug_iters++
 29046 inc #77209
 29049 rstack EAX,EBP:-1
// allocation_get_owner arg #1 (float* A)
 29053 push EAX
 29055 mov ECX,1
// allocation_get_owner(...)
 29058 call 26438
 29061 add ESP,1
 29064 sstack EBP:-2,EAX
 29068 rstack EAX,EBP:-1
// allocation_get_size arg #1 (float* A)
 29072 push EAX
 29074 mov ECX,1
// allocation_get_size(...)
 29077 call 26420
 29080 add ESP,1
 29083 sstack EBP:-3,EAX
 29087 rstack EAX,EBP:-2
 29091 mov EBX,0
 29094 sub EBX,EAX
 29096 fabs EBX,EBX
 29098 fsgn EBX,EBX
 29100 lneg EBX
 29102 sstack EBP:-4,EBX
 29106 rstack EAX,EBP:-3
 29110 rstack EBX,EBP:2
 29114 add EBX,-1
 29117 mov ECX,EBX
 29119 sub ECX,EAX
 29121 neg ECX
 29123 fsgn ECX,ECX
 29125 max ECX,0
 29128 sstack EBP:-5,ECX
 29132 rstack EAX,EBP:-5
 29136 rstack EBX,EBP:-4
 29140 and EBX,EAX
 29142 mov EAX,EBX
 29144 sstack EBP:-6,EAX
__1219:
 29148 rstack EAX,EBP:-6
// if (cond)
 29152 cmp 0,EAX
 29155 jge 29262
 29158 rstack EAX,EBP:2
// malloc_trySplit arg #3 (float n)
 29162 push EAX
 29164 mov EAX,SS:ESP
 29167 add EAX,-7
// malloc_trySplit arg #2 (float** returnB)
 29170 push EAX
 29172 rstack EAX,EBP:-1
// malloc_trySplit arg #1 (float* A)
 29176 push EAX
 29178 mov ECX,3
// malloc_trySplit(...)
 29181 call 26818
 29184 add ESP,3
// allocation_set_owner arg #2 (float n)
 29187 push #77207
 29190 rstack EAX,EBP:-1
// allocation_set_owner arg #1 (float* A)
 29194 push EAX
 29196 mov ECX,2
// allocation_set_owner(...)
 29199 call 26360
 29202 add ESP,2
 29205 rstack EAX,EBP:-7
// malloc_getIndex arg #1 (float* ptr)
 29209 push EAX
 29211 mov ECX,1
// malloc_getIndex(...)
 29214 call 26798
 29217 add ESP,1
// lastFreeAllocation=malloc_getIndex(B)
 29220 mov #77208,EAX
 29223 rstack EAX,EBP:-7
// allocation_get_size arg #1 (float* A)
 29227 push EAX
 29229 mov ECX,1
// allocation_get_size(...)
 29232 call 26420
 29235 add ESP,1
 29238 sstack EBP:-8,EAX
 29242 rstack EAX,EBP:-1
// malloc_getDataFromAllocation arg #1 (float* A)
 29246 push EAX
 29248 mov ECX,1
// malloc_getDataFromAllocation(...)
 29251 call 26780
 29254 add ESP,1
 29257 leave 
 29258 ret 
 29259 jmp 29329
__1221:
__1220:
__1223:
__1225:
 29262 rstack EAX,EBP:-1
// allocation_get_next arg #1 (float* A)
 29266 push EAX
 29268 mov ECX,1
// allocation_get_next(...)
 29271 call 26474
 29274 add ESP,1
// if (allocation_get_next(A))
 29277 cmp 0,EAX
 29280 jge 29324
 29283 rstack EAX,EBP:-1
// allocation_get_next arg #1 (float* A)
 29287 push EAX
 29289 mov ECX,1
// allocation_get_next(...)
 29292 call 26474
 29295 add ESP,1
 29298 sstack EBP:-9,EAX
 29302 rstack EAX,EBP:-9
// malloc_getAllocation arg #1 (float I)
 29306 push EAX
 29308 mov ECX,1
// malloc_getAllocation(...)
 29311 call 26492
 29314 add ESP,1
// A=malloc_getAllocation(tmp)
 29317 sstack EBP:-1,EAX
 29321 jmp 29329
__1227:
__1226:
__1229:
 29324 mov EAX,0
 29327 leave 
 29328 ret 
__1228:
__1224:
__1222:
__1218:
 29329 jmp 29039
__1216:
__1214:
 29332 leave 
 29333 ret 
malloc:
// malloc(n)
 29334 enter 12
__1231:
// malloc_debug_iters=0
 29337 mov #77209,0
 29341 sstack EBP:-2,0
 29346 sstack EBP:-3,0
__1233:
// if (malloc_debug)
 29351 cmp 0,#77201
 29355 jge 29364
 29358 timer EAX
 29360 sstack EBP:-2,EAX
__1234:
__1232:
 29364 rstack EAX,EBP:2
// mallocLast arg #1 (float n)
 29368 push EAX
 29370 mov ECX,1
// mallocLast(...)
 29373 call 29020
 29376 add ESP,1
// res=mallocLast(n)
 29379 sstack EBP:-1,EAX
__1236:
 29383 rstack EAX,EBP:-1
// if (res)
 29387 cmp 0,EAX
 29390 jge 29396
 29393 jmp 29726
__1237:
__1235:
// malloc_getAllocation arg #1 (float I)
 29396 push 1
 29399 mov ECX,1
// malloc_getAllocation(...)
 29402 call 26492
 29405 add ESP,1
 29408 sstack EBP:-4,EAX
__1239:
// if (1
 29412 cmp 0,1
 29416 jz 29726
// malloc_debug_iters++
 29419 inc #77209
 29422 rstack EAX,EBP:-4
// allocation_get_owner arg #1 (float* A)
 29426 push EAX
 29428 mov ECX,1
// allocation_get_owner(...)
 29431 call 26438
 29434 add ESP,1
 29437 sstack EBP:-5,EAX
 29441 rstack EAX,EBP:-4
// allocation_get_size arg #1 (float* A)
 29445 push EAX
 29447 mov ECX,1
// allocation_get_size(...)
 29450 call 26420
 29453 add ESP,1
 29456 sstack EBP:-6,EAX
 29460 rstack EAX,EBP:-5
 29464 mov EBX,0
 29467 sub EBX,EAX
 29469 fabs EBX,EBX
 29471 fsgn EBX,EBX
 29473 lneg EBX
 29475 sstack EBP:-7,EBX
 29479 rstack EAX,EBP:-6
 29483 rstack EBX,EBP:2
 29487 add EBX,-1
 29490 mov ECX,EBX
 29492 sub ECX,EAX
 29494 neg ECX
 29496 fsgn ECX,ECX
 29498 max ECX,0
 29501 sstack EBP:-8,ECX
 29505 rstack EAX,EBP:-8
 29509 rstack EBX,EBP:-7
 29513 and EBX,EAX
 29515 mov EAX,EBX
 29517 sstack EBP:-9,EAX
__1241:
 29521 rstack EAX,EBP:-9
// if (cond)
 29525 cmp 0,EAX
 29528 jge 29616
__1244:
 29531 rstack EAX,EBP:2
// malloc_trySplit arg #3 (float n)
 29535 push EAX
 29537 mov EAX,SS:ESP
 29540 add EAX,-10
// malloc_trySplit arg #2 (float** returnB)
 29543 push EAX
 29545 rstack EAX,EBP:-4
// malloc_trySplit arg #1 (float* A)
 29549 push EAX
 29551 mov ECX,3
// malloc_trySplit(...)
 29554 call 26818
 29557 add ESP,3
// if (malloc_trySplit(A,&B,n))
 29560 cmp 0,EAX
 29563 jge 29569
 29566 jmp 29573
__1246:
__1245:
__1248:
// lastFreeAllocation=1
 29569 mov #77208,1
__1247:
__1243:
// allocation_set_owner arg #2 (float n)
 29573 push #77207
 29576 rstack EAX,EBP:-4
// allocation_set_owner arg #1 (float* A)
 29580 push EAX
 29582 mov ECX,2
// allocation_set_owner(...)
 29585 call 26360
 29588 add ESP,2
 29591 rstack EAX,EBP:-4
// malloc_getDataFromAllocation arg #1 (float* A)
 29595 push EAX
 29597 mov ECX,1
// malloc_getDataFromAllocation(...)
 29600 call 26780
 29603 add ESP,1
// res=malloc_getDataFromAllocation(A)
 29606 sstack EBP:-1,EAX
 29610 jmp 29726
 29613 jmp 29723
__1249:
__1242:
__1251:
__1253:
 29616 rstack EAX,EBP:-4
// allocation_get_next arg #1 (float* A)
 29620 push EAX
 29622 mov ECX,1
// allocation_get_next(...)
 29625 call 26474
 29628 add ESP,1
// if (allocation_get_next(A))
 29631 cmp 0,EAX
 29634 jge 29678
 29637 rstack EAX,EBP:-4
// allocation_get_next arg #1 (float* A)
 29641 push EAX
 29643 mov ECX,1
// allocation_get_next(...)
 29646 call 26474
 29649 add ESP,1
 29652 sstack EBP:-11,EAX
 29656 rstack EAX,EBP:-11
// malloc_getAllocation arg #1 (float I)
 29660 push EAX
 29662 mov ECX,1
// malloc_getAllocation(...)
 29665 call 26492
 29668 add ESP,1
// A=malloc_getAllocation(tmp)
 29671 sstack EBP:-4,EAX
 29675 jmp 29723
__1255:
__1254:
__1257:
__1259:
// if (malloc_debug)
 29678 cmp 0,#77201
 29682 jge 29697
 29685 push 29767
 29688 mov ECX,1
// malloc_print(...)
 29691 call #77202
 29694 add ESP,1
__1260:
__1258:
// printf arg #2 (unknown)
 29697 push 900
// printf arg #1 (char* format)
 29700 push 29799
 29703 mov ECX,2
// printf(...)
 29706 call 21851
 29709 add ESP,2
 29712 mov ECX,0
// panic(...)
 29715 call 96246
 29718 mov EAX,0
 29721 leave 
 29722 ret 
__1256:
__1252:
__1250:
__1240:
 29723 jmp 29412
__1238:
malloc_goodreturn:
__1264:
// if (malloc_debug)
 29726 cmp 0,#77201
 29730 jge 29759
 29733 timer EAX
 29735 sstack EBP:-3,EAX
 29739 rstack EAX,EBP:-2
 29743 neg EAX
 29745 mov EBX,EAX
 29747 rstack EAX,EBP:-3
 29751 add EAX,EBX
 29753 mov EBX,EAX
 29755 sstack EBP:-12,EBX
__1265:
__1263:
 29759 rstack EAX,EBP:-1
 29763 leave 
 29764 ret 
__1230:
 29765 leave 
 29766 ret 
__1261:
 29767 db "malloc: no memory, returning 0
",0
__1262:
 29799 db "%mERROR MALLOC FAILED PANIC
",0
free:
// free(ptr)
 29828 enter 6
__1267:
__1269:
// if (malloc_debug)
 29831 cmp 0,#77201
 29835 jge 29888
 29838 push 30285
 29841 mov ECX,1
// malloc_print(...)
 29844 call #77202
 29847 add ESP,1
 29850 rstack EAX,EBP:2
 29854 push EAX
 29856 mov ECX,1
// malloc_num2str(...)
 29859 call #77203
 29862 add ESP,1
 29865 push EAX
 29867 mov ECX,1
// malloc_print(...)
 29870 call #77202
 29873 add ESP,1
 29876 push 28179
 29879 mov ECX,1
// malloc_print(...)
 29882 call #77202
 29885 add ESP,1
__1270:
__1268:
__1273:
 29888 rstack EAX,EBP:2
 29892 mov EBX,1
 29895 add EBX,#77206
 29898 mov ECX,#77204
 29901 add ECX,EBX
 29903 sub ECX,EAX
 29905 fsgn ECX,ECX
 29907 max ECX,0
// if (ptr<malloc_disk+1+malloc_header)
 29910 cmp 0,ECX
 29913 jge 29986
__1276:
// if (malloc_debug)
 29916 cmp 0,#77201
 29920 jge 29984
 29923 push 30291
 29926 mov ECX,1
// malloc_print(...)
 29929 call #77202
 29932 add ESP,1
 29935 rstack EAX,EBP:2
// malloc_getIndex arg #1 (float* ptr)
 29939 push EAX
 29941 mov ECX,1
// malloc_getIndex(...)
 29944 call 26798
 29947 add ESP,1
 29950 push EAX
 29952 mov ECX,1
// malloc_num2str(...)
 29955 call #77203
 29958 add ESP,1
 29961 push EAX
 29963 mov ECX,1
// malloc_print(...)
 29966 call #77202
 29969 add ESP,1
 29972 push 28179
 29975 mov ECX,1
// malloc_print(...)
 29978 call #77202
 29981 add ESP,1
__1277:
__1275:
 29984 leave 
 29985 ret 
__1274:
__1272:
 29986 rstack EAX,EBP:2
// malloc_getIndex arg #1 (float* ptr)
 29990 push EAX
 29992 mov ECX,1
// malloc_getIndex(...)
 29995 call 26798
 29998 add ESP,1
 30001 sstack EBP:-1,EAX
 30005 mov EAX,#77206
 30008 neg EAX
 30010 rstack EBX,EBP:-1
 30014 add EBX,EAX
 30016 mov EAX,EBX
// tmp=tmp-malloc_header
 30018 sstack EBP:-1,EAX
 30022 rstack EAX,EBP:-1
// malloc_getAllocation arg #1 (float I)
 30026 push EAX
 30028 mov ECX,1
// malloc_getAllocation(...)
 30031 call 26492
 30034 add ESP,1
// tmp=malloc_getAllocation(tmp)
 30037 sstack EBP:-1,EAX
 30041 rstack EAX,EBP:-1
 30045 sstack EBP:-2,EAX
// allocation_set_owner arg #2 (float n)
 30049 push 0
 30052 rstack EAX,EBP:-2
// allocation_set_owner arg #1 (float* A)
 30056 push EAX
 30058 mov ECX,2
// allocation_set_owner(...)
 30061 call 26360
 30064 add ESP,2
free_loop1:
 30067 rstack EAX,EBP:-2
// allocation_get_prev arg #1 (float* A)
 30071 push EAX
 30073 mov ECX,1
// allocation_get_prev(...)
 30076 call 26456
 30079 add ESP,1
// prev=allocation_get_prev(A)
 30082 sstack EBP:-3,EAX
__1280:
 30086 rstack EAX,EBP:-3
// if (prev)
 30090 cmp 0,EAX
 30093 jge 30179
 30096 rstack EAX,EBP:-3
// malloc_getAllocation arg #1 (float I)
 30100 push EAX
 30102 mov ECX,1
// malloc_getAllocation(...)
 30105 call 26492
 30108 add ESP,1
// prevA=malloc_getAllocation(prev)
 30111 sstack EBP:-4,EAX
__1283:
 30115 rstack EAX,EBP:-4
// allocation_get_owner arg #1 (float* A)
 30119 push EAX
 30121 mov ECX,1
// allocation_get_owner(...)
 30124 call 26438
 30127 add ESP,1
 30130 mov EBX,0
 30133 sub EBX,EAX
 30135 fabs EBX,EBX
 30137 fsgn EBX,EBX
 30139 lneg EBX
// if (allocation_get_owner(prevA)==0)
 30141 cmp 0,EBX
 30144 jge 30179
 30147 rstack EAX,EBP:-2
// malloc_join arg #2 (float* B)
 30151 push EAX
 30153 rstack EAX,EBP:-4
// malloc_join arg #1 (float* A)
 30157 push EAX
 30159 mov ECX,2
// malloc_join(...)
 30162 call 27413
 30165 add ESP,2
 30168 rstack EAX,EBP:-4
// A=prevA
 30172 sstack EBP:-2,EAX
 30176 jmp 30067
__1284:
__1282:
__1281:
__1279:
free_loop2:
 30179 rstack EAX,EBP:-2
// allocation_get_next arg #1 (float* A)
 30183 push EAX
 30185 mov ECX,1
// allocation_get_next(...)
 30188 call 26474
 30191 add ESP,1
// next=allocation_get_next(A)
 30194 sstack EBP:-5,EAX
__1286:
 30198 rstack EAX,EBP:-5
// if (next)
 30202 cmp 0,EAX
 30205 jge 30283
 30208 rstack EAX,EBP:-5
// malloc_getAllocation arg #1 (float I)
 30212 push EAX
 30214 mov ECX,1
// malloc_getAllocation(...)
 30217 call 26492
 30220 add ESP,1
// nextA=malloc_getAllocation(next)
 30223 sstack EBP:-6,EAX
__1289:
 30227 rstack EAX,EBP:-6
// allocation_get_owner arg #1 (float* A)
 30231 push EAX
 30233 mov ECX,1
// allocation_get_owner(...)
 30236 call 26438
 30239 add ESP,1
 30242 mov EBX,0
 30245 sub EBX,EAX
 30247 fabs EBX,EBX
 30249 fsgn EBX,EBX
 30251 lneg EBX
// if (allocation_get_owner(nextA)==0)
 30253 cmp 0,EBX
 30256 jge 30283
 30259 rstack EAX,EBP:-6
// malloc_join arg #2 (float* B)
 30263 push EAX
 30265 rstack EAX,EBP:-2
// malloc_join arg #1 (float* A)
 30269 push EAX
 30271 mov ECX,2
// malloc_join(...)
 30274 call 27413
 30277 add ESP,2
 30280 jmp 30179
__1290:
__1288:
__1287:
__1285:
__1266:
 30283 leave 
 30284 ret 
__1271:
 30285 db "free(",0
__1278:
 30291 db "free: null pointer (index ",0
realloc:
// realloc(ptr,n)
 30318 enter 4
__1292:
 30321 rstack EAX,EBP:3
// malloc arg #1 (float n)
 30325 push EAX
 30327 mov ECX,1
// malloc(...)
 30330 call 29334
 30333 add ESP,1
 30336 sstack EBP:-1,EAX
__1294:
 30340 rstack EAX,EBP:-1
// if (newp)
 30344 cmp 0,EAX
 30347 jge 30552
__1297:
 30350 rstack EAX,EBP:2
// if (ptr)
 30354 cmp 0,EAX
 30357 jge 30543
 30360 rstack EAX,EBP:2
// malloc_getIndex arg #1 (float* ptr)
 30364 push EAX
 30366 mov ECX,1
// malloc_getIndex(...)
 30369 call 26798
 30372 add ESP,1
 30375 sstack EBP:-2,EAX
 30379 mov EAX,#77206
 30382 neg EAX
 30384 rstack EBX,EBP:-2
 30388 add EBX,EAX
 30390 mov EAX,EBX
// tmp=tmp-malloc_header
 30392 sstack EBP:-2,EAX
 30396 rstack EAX,EBP:-2
// malloc_getAllocation arg #1 (float I)
 30400 push EAX
 30402 mov ECX,1
// malloc_getAllocation(...)
 30405 call 26492
 30408 add ESP,1
// tmp=malloc_getAllocation(tmp)
 30411 sstack EBP:-2,EAX
 30415 rstack EAX,EBP:-2
 30419 sstack EBP:-3,EAX
 30423 rstack EAX,EBP:-3
// allocation_get_size arg #1 (float* A)
 30427 push EAX
 30429 mov ECX,1
// allocation_get_size(...)
 30432 call 26420
 30435 add ESP,1
 30438 sstack EBP:-4,EAX
__1300:
 30442 rstack EAX,EBP:3
 30446 rstack EBX,EBP:-4
 30450 sub EBX,EAX
 30452 mov EAX,EBX
 30454 fsgn EAX,EAX
 30456 max EAX,0
// if (n<size)
 30459 cmp 0,EAX
 30462 jge 30473
 30465 rstack EAX,EBP:3
// size=n
 30469 sstack EBP:-4,EAX
__1301:
__1299:
 30473 rstack EAX,EBP:-3
// malloc_getDataFromAllocation arg #1 (float* A)
 30477 push EAX
 30479 mov ECX,1
// malloc_getDataFromAllocation(...)
 30482 call 26780
 30485 add ESP,1
// tmp=malloc_getDataFromAllocation(A)
 30488 sstack EBP:-2,EAX
 30492 rstack EAX,EBP:-4
 30496 push EAX
 30498 rstack EAX,EBP:-1
 30502 push EAX
 30504 rstack EAX,EBP:-2
 30508 push EAX
 30510 mov ECX,3
// malloc_memcopy(...)
 30513 call 30559
 30516 add ESP,3
 30519 rstack EAX,EBP:2
// free arg #1 (float* ptr)
 30523 push EAX
 30525 mov ECX,1
// free(...)
 30528 call 29828
 30531 add ESP,1
 30534 rstack EAX,EBP:-1
 30538 leave 
 30539 ret 
 30540 jmp 30549
__1302:
__1298:
__1304:
 30543 rstack EAX,EBP:-1
 30547 leave 
 30548 ret 
__1303:
__1296:
 30549 jmp 30557
__1305:
__1295:
__1307:
 30552 mov EAX,0
 30555 leave 
 30556 ret 
__1306:
__1293:
__1291:
 30557 leave 
 30558 ret 
malloc_memcopy:
// malloc_memcopy(from,to,n)
 30559 enter 1
__1309:
// init loop
 30562 sstack EBP:-1,0
__1311:
 30567 rstack EAX,EBP:-1
 30571 rstack EBX,EBP:4
 30575 sub EBX,EAX
 30577 mov EAX,EBX
 30579 fsgn EAX,EAX
// condition
 30581 max EAX,0
 30584 cmp 0,EAX
 30587 jz 30639
 30590 rstack EAX,EBP:2
 30594 rstack EBX,EBP:3
// *to=*from
 30598 mov #EBX,#EAX
 30600 rstack EAX,EBP:3
 30604 add EAX,1
 30607 mov EBX,EAX
// to=to+1
 30609 sstack EBP:3,EBX
 30613 rstack EAX,EBP:2
 30617 add EAX,1
 30620 mov EBX,EAX
// from=from+1
 30622 sstack EBP:2,EBX
 30626 rstack EAX,EBP:-1
// loop step
 30630 inc EAX
 30632 sstack EBP:-1,EAX
 30636 jmp 30567
__1310:
__1308:
 30639 leave 
 30640 ret 
str_alloc:
// str_alloc(str)
 30641 enter 2
__1313:
 30644 rstack EAX,EBP:2
// strlen arg #1 (char* str)
 30648 push EAX
 30650 mov ECX,1
// strlen(...)
 30653 call 11121
 30656 add ESP,1
 30659 add EAX,1
 30662 sstack EBP:-1,EAX
 30666 rstack EAX,EBP:-1
// malloc arg #1 (float n)
 30670 push EAX
 30672 mov ECX,1
// malloc(...)
 30675 call 29334
 30678 add ESP,1
 30681 sstack EBP:-2,EAX
 30685 rstack EAX,EBP:2
// strcpy arg #2 (char* src)
 30689 push EAX
 30691 rstack EAX,EBP:-2
// strcpy arg #1 (char* dest)
 30695 push EAX
 30697 mov ECX,2
// strcpy(...)
 30700 call 10963
 30703 add ESP,2
 30706 rstack EAX,EBP:-2
 30710 leave 
 30711 ret 
__1312:
 30712 leave 
 30713 ret 
lfa_check:
// lfa_check(str)
 30714 enter 2
__1315:
// malloc_getAllocation arg #1 (float I)
 30717 push #77208
 30720 mov ECX,1
// malloc_getAllocation(...)
 30723 call 26492
 30726 add ESP,1
 30729 sstack EBP:-1,EAX
 30733 rstack EAX,EBP:-1
// allocation_get_size arg #1 (float* A)
 30737 push EAX
 30739 mov ECX,1
// allocation_get_size(...)
 30742 call 26420
 30745 add ESP,1
 30748 sstack EBP:-2,EAX
 30752 rstack EAX,EBP:-2
// printf arg #5 (unknown)
 30756 push EAX
 30758 rstack EAX,EBP:-1
// printf arg #4 (unknown)
 30762 push EAX
// printf arg #3 (unknown)
 30764 push #77208
 30767 rstack EAX,EBP:2
// printf arg #2 (unknown)
 30771 push EAX
// printf arg #1 (char* format)
 30773 push 30787
 30776 mov ECX,5
// printf(...)
 30779 call 21851
 30782 add ESP,5
__1314:
 30785 leave 
 30786 ret 
__1316:
 30787 db "%s lfAidx = %d, lfA = %d, lfAsize = %d
",0
ZMALLOC_CONSTANTS:
ZMALLOC_END:
libmarker12:
 30827 db 0
LIBNUMBER_CODE:
pow:
// pow(A,B)
 30828 enter -0
__1318:
 30831 rstack EAX,EBP:3
 30835 rstack EBX,EBP:2
 30839 fpwr EBX,EAX
 30841 mov EAX,EBX
 30843 leave 
 30844 ret 
__1317:
 30845 leave 
 30846 ret 
modulo:
// modulo(A,B)
 30847 enter -0
__1320:
 30850 rstack EAX,EBP:3
 30854 rstack EBX,EBP:2
 30858 mod EBX,EAX
 30860 sstack EBP:2,EBX
 30864 rstack EAX,EBP:2
 30868 leave 
 30869 ret 
__1319:
 30870 leave 
 30871 ret 
sqrt:
// sqrt(A)
 30872 enter -0
__1322:
 30875 rstack EAX,EBP:2
 30879 fpwr EAX,0.5
 30882 mov EBX,EAX
 30884 mov EAX,EBX
 30886 leave 
 30887 ret 
__1321:
 30888 leave 
 30889 ret 
cbrt:
// cbrt(A)
 30890 enter -0
__1324:
 30893 rstack EAX,EBP:2
 30897 fpwr EAX,0.33333333333333
 30900 mov EBX,EAX
 30902 mov EAX,EBX
 30904 leave 
 30905 ret 
__1323:
 30906 leave 
 30907 ret 
root:
// root(A,B)
 30908 enter -0
__1326:
 30911 rstack EAX,EBP:3
 30915 mov EBX,1
 30918 div EBX,EAX
 30920 rstack EAX,EBP:2
 30924 fpwr EAX,EBX
 30926 mov EBX,EAX
 30928 mov EAX,EBX
 30930 leave 
 30931 ret 
__1325:
 30932 leave 
 30933 ret 
e:
// e()
 30934 enter -0
__1328:
 30937 fe EAX
 30939 leave 
 30940 ret 
__1327:
 30941 leave 
 30942 ret 
exp:
// exp(A)
 30943 enter -0
__1330:
 30946 fpi EAX
 30948 rstack EBX,EBP:2
 30952 fpwr EAX,EBX
 30954 leave 
 30955 ret 
__1329:
 30956 leave 
 30957 ret 
ln:
// ln(A)
 30958 enter -0
__1332:
 30961 rstack EBX,EBP:2
 30965 mov EAX,EBX
 30967 fln EDX,EAX
 30969 mov EAX,EDX
 30971 leave 
 30972 ret 
__1331:
 30973 leave 
 30974 ret 
log2:
// log2(A)
 30975 enter -0
__1334:
 30978 rstack EBX,EBP:2
 30982 mov EAX,EBX
 30984 fln EDX,EAX
 30986 fln ECX,2
 30989 mov EBX,EDX
 30991 div EBX,ECX
 30993 mov EAX,EBX
 30995 leave 
 30996 ret 
__1333:
 30997 leave 
 30998 ret 
log10:
// log10(A)
 30999 enter -0
__1336:
 31002 flog10 EDX,EAX
 31004 mov EAX,EDX
 31006 leave 
 31007 ret 
__1335:
 31008 leave 
 31009 ret 
log:
// log(A,B)
 31010 enter -0
__1338:
 31013 rstack ESI,EBP:2
 31017 mov EAX,ESI
 31019 rstack ESI,EBP:3
 31023 mov EBX,ESI
 31025 fln EDX,EAX
 31027 fln ECX,EBX
 31029 div EDX,ECX
 31031 mov EAX,EDX
 31033 leave 
 31034 ret 
__1337:
 31035 leave 
 31036 ret 
abs:
// abs(A)
 31037 enter -0
__1340:
 31040 rstack EBX,EBP:2
 31044 mov EAX,EBX
 31046 fabs EDX,EAX
 31048 mov EAX,EDX
 31050 leave 
 31051 ret 
__1339:
 31052 leave 
 31053 ret 
ceil:
// ceil(A)
 31054 enter -0
__1342:
 31057 rstack EBX,EBP:2
 31061 mov EAX,EBX
 31063 fceil EAX
 31065 leave 
 31066 ret 
__1341:
 31067 leave 
 31068 ret 
floor:
// floor(A)
 31069 enter -0
__1344:
 31072 rstack EBX,EBP:2
 31076 mov EAX,EBX
 31078 fint EAX
 31080 leave 
 31081 ret 
__1343:
 31082 leave 
 31083 ret 
round:
// round(A)
 31084 enter -0
__1346:
 31087 rstack EBX,EBP:2
 31091 mov EAX,EBX
 31093 frnd EAX
 31095 leave 
 31096 ret 
__1345:
 31097 leave 
 31098 ret 
integer:
// integer(A)
 31099 enter -0
__1348:
 31102 rstack EBX,EBP:2
 31106 mov EAX,EBX
 31108 fint EAX
 31110 leave 
 31111 ret 
__1347:
 31112 leave 
 31113 ret 
frac:
// frac(A)
 31114 enter -0
__1350:
 31117 rstack EBX,EBP:2
 31121 mov EAX,EBX
 31123 ffrac EAX
 31125 leave 
 31126 ret 
__1349:
 31127 leave 
 31128 ret 
clamp:
// clamp(A,MinA,MaxA)
 31129 enter -0
__1352:
 31132 rstack EBX,EBP:2
 31136 mov EAX,EBX
 31138 rstack EBX,EBP:3
 31142 max EAX,EBX
 31144 rstack EBX,EBP:4
 31148 min EAX,EBX
 31150 leave 
 31151 ret 
__1351:
 31152 leave 
 31153 ret 
inrange:
// inrange(A,MinA,MaxA)
 31154 enter -0
__1354:
 31157 rstack EAX,EBP:2
 31161 rstack EBX,EBP:4
 31165 sub EBX,EAX
 31167 mov EAX,EBX
 31169 fsgn EAX,EAX
 31171 max EAX,0
 31174 rstack EBX,EBP:2
 31178 rstack ECX,EBP:3
 31182 sub ECX,EBX
 31184 mov EBX,ECX
 31186 neg EBX
 31188 fsgn EBX,EBX
 31190 max EBX,0
 31193 and EBX,EAX
 31195 mov EAX,EBX
 31197 leave 
 31198 ret 
__1353:
 31199 leave 
 31200 ret 
minimal:
// minimal(A,B)
 31201 enter -0
__1356:
 31204 rstack ECX,EBP:2
 31208 mov EAX,ECX
 31210 rstack ECX,EBP:3
 31214 mov EBX,ECX
 31216 min EAX,EBX
 31218 leave 
 31219 ret 
__1355:
 31220 leave 
 31221 ret 
maximal:
// maximal(A,B)
 31222 enter -0
__1358:
 31225 rstack ECX,EBP:2
 31229 mov EAX,ECX
 31231 rstack ECX,EBP:3
 31235 mov EBX,ECX
 31237 max EAX,EBX
 31239 leave 
 31240 ret 
__1357:
 31241 leave 
 31242 ret 
random:
// random()
 31243 enter -0
__1360:
 31246 rand EAX
 31248 leave 
 31249 ret 
__1359:
 31250 leave 
 31251 ret 
random1:
// random1(A)
 31252 enter -0
__1362:
 31255 rstack EBX,EBP:2
 31259 mov EAX,EBX
 31261 rand EDX
 31263 mul EDX,EAX
 31265 mov EAX,EDX
 31267 leave 
 31268 ret 
__1361:
 31269 leave 
 31270 ret 
random2:
// random2(A,B)
 31271 enter -0
__1364:
 31274 rstack ECX,EBP:2
 31278 mov EAX,ECX
 31280 rstack ECX,EBP:3
 31284 mov EBX,ECX
 31286 rand EDX
 31288 sub EBX,EAX
 31290 mul EDX,EBX
 31292 add EDX,EAX
 31294 mov EAX,EDX
 31296 leave 
 31297 ret 
__1363:
 31298 leave 
 31299 ret 
randint1:
// randint1(A)
 31300 enter -0
__1366:
 31303 rstack EBX,EBP:2
 31307 mov EAX,EBX
 31309 rand EDX
 31311 mul EDX,EAX
 31313 fint EDX
 31315 mov EAX,EDX
 31317 leave 
 31318 ret 
__1365:
 31319 leave 
 31320 ret 
randint2:
// randint2(A,B)
 31321 enter -0
__1368:
 31324 rstack ECX,EBP:2
 31328 mov EAX,ECX
 31330 rstack ECX,EBP:3
 31334 mov EBX,ECX
 31336 rand EDX
 31338 sub EBX,EAX
 31340 mul EDX,EBX
 31342 add EDX,EAX
 31344 fint EDX
 31346 mov EAX,EDX
 31348 leave 
 31349 ret 
__1367:
 31350 leave 
 31351 ret 
pi:
// pi()
 31352 enter -0
__1370:
 31355 fpi EAX
 31357 leave 
 31358 ret 
__1369:
 31359 leave 
 31360 ret 
toRad:
// toRad(N)
 31361 enter -0
__1372:
 31364 rstack ECX,EBP:2
 31368 mov EAX,ECX
 31370 fpi EBX
 31372 mul EAX,EBX
 31374 div EAX,180
 31377 leave 
 31378 ret 
__1371:
 31379 leave 
 31380 ret 
toDeg:
// toDeg(N)
 31381 enter -0
__1374:
 31384 rstack ECX,EBP:2
 31388 mov EAX,ECX
 31390 fpi EBX
 31392 mul EAX,180
 31395 div EAX,EBX
 31397 leave 
 31398 ret 
__1373:
 31399 leave 
 31400 ret 
sin:
// sin(N)
 31401 enter -0
__1376:
 31404 rstack EBX,EBP:2
// toRad arg #1 (float N)
 31408 push EBX
 31410 mov ECX,1
// toRad(...)
 31413 call 31361
 31416 add ESP,1
 31419 fsin EAX,EAX
 31421 leave 
 31422 ret 
__1375:
 31423 leave 
 31424 ret 
cos:
// cos(N)
 31425 enter -0
__1378:
 31428 rstack EBX,EBP:2
// toRad arg #1 (float N)
 31432 push EBX
 31434 mov ECX,1
// toRad(...)
 31437 call 31361
 31440 add ESP,1
 31443 fcos EAX,EAX
 31445 leave 
 31446 ret 
__1377:
 31447 leave 
 31448 ret 
tan:
// tan(N)
 31449 enter -0
__1380:
 31452 rstack EBX,EBP:2
// toRad arg #1 (float N)
 31456 push EBX
 31458 mov ECX,1
// toRad(...)
 31461 call 31361
 31464 add ESP,1
 31467 ftan EAX,EAX
 31469 leave 
 31470 ret 
__1379:
 31471 leave 
 31472 ret 
cot:
// cot(N)
 31473 enter -0
__1382:
 31476 rstack EBX,EBP:2
// toRad arg #1 (float N)
 31480 push EBX
 31482 mov ECX,1
// toRad(...)
 31485 call 31361
 31488 add ESP,1
 31491 ftan EAX,EAX
 31493 finv EAX
 31495 leave 
 31496 ret 
__1381:
 31497 leave 
 31498 ret 
sec:
// sec(N)
 31499 enter -0
__1384:
 31502 rstack EBX,EBP:2
// toRad arg #1 (float N)
 31506 push EBX
 31508 mov ECX,1
// toRad(...)
 31511 call 31361
 31514 add ESP,1
 31517 fcos EAX,EAX
 31519 finv EAX
 31521 leave 
 31522 ret 
__1383:
 31523 leave 
 31524 ret 
csc:
// csc(N)
 31525 enter -0
__1386:
 31528 rstack EBX,EBP:2
// toRad arg #1 (float N)
 31532 push EBX
 31534 mov ECX,1
// toRad(...)
 31537 call 31361
 31540 add ESP,1
 31543 fsin EAX,EAX
 31545 finv EAX
 31547 leave 
 31548 ret 
__1385:
 31549 leave 
 31550 ret 
asin:
// asin(N)
 31551 enter -0
__1388:
 31554 rstack EBX,EBP:2
 31558 fasin EAX,EBX
// toDeg arg #1 (float N)
 31560 push EAX
 31562 mov ECX,1
// toDeg(...)
 31565 call 31381
 31568 add ESP,1
 31571 leave 
 31572 ret 
__1387:
 31573 leave 
 31574 ret 
acos:
// acos(N)
 31575 enter -0
__1390:
 31578 rstack EBX,EBP:2
 31582 facos EAX,EBX
// toDeg arg #1 (float N)
 31584 push EAX
 31586 mov ECX,1
// toDeg(...)
 31589 call 31381
 31592 add ESP,1
 31595 leave 
 31596 ret 
__1389:
 31597 leave 
 31598 ret 
atan:
// atan(N)
 31599 enter -0
__1392:
 31602 rstack EBX,EBP:2
 31606 fatan EAX,EBX
// toDeg arg #1 (float N)
 31608 push EAX
 31610 mov ECX,1
// toDeg(...)
 31613 call 31381
 31616 add ESP,1
 31619 leave 
 31620 ret 
__1391:
 31621 leave 
 31622 ret 
sinh:
// sinh(N)
 31623 enter -0
__1394:
 31626 fe EAX
 31628 rstack EBX,EBP:2
 31632 neg EBX
 31634 mov ECX,EBX
 31636 mov EBX,EAX
 31638 neg EBX
 31640 fpwr EBX,ECX
 31642 rstack ECX,EBP:2
 31646 mov EDX,EAX
 31648 fpwr EDX,ECX
 31650 add EDX,EBX
 31652 mov EBX,0.5
 31655 mul EBX,EDX
 31657 mov EAX,EBX
 31659 leave 
 31660 ret 
__1393:
 31661 leave 
 31662 ret 
cosh:
// cosh(N)
 31663 enter -0
__1396:
 31666 fe EAX
 31668 rstack EBX,EBP:2
 31672 neg EBX
 31674 mov ECX,EBX
 31676 mov EBX,EAX
 31678 fpwr EBX,ECX
 31680 rstack ECX,EBP:2
 31684 mov EDX,EAX
 31686 fpwr EDX,ECX
 31688 add EDX,EBX
 31690 mov EBX,0.5
 31693 mul EBX,EDX
 31695 mov EAX,EBX
 31697 leave 
 31698 ret 
__1395:
 31699 leave 
 31700 ret 
tanh:
// tanh(N)
 31701 enter -0
__1398:
 31704 fe EAX
 31706 rstack EBX,EBP:2
 31710 mov ECX,2
 31713 mul ECX,EBX
 31715 mov EBX,EAX
 31717 fpwr EBX,ECX
 31719 add EBX,1
 31722 rstack ECX,EBP:2
 31726 mov EDX,2
 31729 mul EDX,ECX
 31731 mov ECX,EAX
 31733 fpwr ECX,EDX
 31735 add ECX,-1
 31738 div ECX,EBX
 31740 mov EAX,ECX
 31742 leave 
 31743 ret 
__1397:
 31744 leave 
 31745 ret 
coth:
// coth(N)
 31746 enter -0
__1400:
 31749 fe EAX
 31751 rstack EBX,EBP:2
 31755 mov ECX,2
 31758 mul ECX,EBX
 31760 mov EBX,EAX
 31762 fpwr EBX,ECX
 31764 add EBX,-1
 31767 rstack ECX,EBP:2
 31771 mov EDX,2
 31774 mul EDX,ECX
 31776 mov ECX,EAX
 31778 fpwr ECX,EDX
 31780 add ECX,1
 31783 div ECX,EBX
 31785 mov EAX,ECX
 31787 leave 
 31788 ret 
__1399:
 31789 leave 
 31790 ret 
sech:
// sech(N)
 31791 enter -0
__1402:
 31794 fe EAX
 31796 rstack EBX,EBP:2
 31800 neg EBX
 31802 mov ECX,EBX
 31804 mov EBX,EAX
 31806 fpwr EBX,ECX
 31808 rstack ECX,EBP:2
 31812 mov EDX,EAX
 31814 fpwr EDX,ECX
 31816 add EDX,EBX
 31818 mov EBX,2
 31821 div EBX,EDX
 31823 mov EAX,EBX
 31825 leave 
 31826 ret 
__1401:
 31827 leave 
 31828 ret 
csch:
// csch(N)
 31829 enter -0
__1404:
 31832 fe EAX
 31834 rstack EBX,EBP:2
 31838 neg EBX
 31840 mov ECX,EBX
 31842 mov EBX,EAX
 31844 neg EBX
 31846 fpwr EBX,ECX
 31848 rstack ECX,EBP:2
 31852 mov EDX,EAX
 31854 fpwr EDX,ECX
 31856 add EDX,EBX
 31858 mov EBX,2
 31861 div EBX,EDX
 31863 mov EAX,EBX
 31865 leave 
 31866 ret 
__1403:
 31867 leave 
 31868 ret 
sinr:
// sinr(N)
 31869 enter -0
__1406:
 31872 rstack EBX,EBP:2
 31876 fsin EAX,EBX
 31878 leave 
 31879 ret 
__1405:
 31880 leave 
 31881 ret 
cosr:
// cosr(N)
 31882 enter -0
__1408:
 31885 rstack EBX,EBP:2
 31889 fcos EAX,EBX
 31891 leave 
 31892 ret 
__1407:
 31893 leave 
 31894 ret 
tanr:
// tanr(N)
 31895 enter -0
__1410:
 31898 rstack EBX,EBP:2
 31902 ftan EAX,EBX
 31904 leave 
 31905 ret 
__1409:
 31906 leave 
 31907 ret 
cotr:
// cotr(N)
 31908 enter -0
__1412:
 31911 rstack EBX,EBP:2
 31915 ftan EAX,EBX
 31917 finv EAX
 31919 leave 
 31920 ret 
__1411:
 31921 leave 
 31922 ret 
secr:
// secr(N)
 31923 enter -0
__1414:
 31926 rstack EBX,EBP:2
 31930 fcos EAX,EBX
 31932 finv EAX
 31934 leave 
 31935 ret 
__1413:
 31936 leave 
 31937 ret 
cscr:
// cscr(N)
 31938 enter -0
__1416:
 31941 rstack EBX,EBP:2
 31945 fsin EAX,EBX
 31947 finv EAX
 31949 leave 
 31950 ret 
__1415:
 31951 leave 
 31952 ret 
asinr:
// asinr(N)
 31953 enter -0
__1418:
 31956 rstack EBX,EBP:2
 31960 fasin EAX,EBX
 31962 leave 
 31963 ret 
__1417:
 31964 leave 
 31965 ret 
acosr:
// acosr(N)
 31966 enter -0
__1420:
 31969 rstack EBX,EBP:2
 31973 facos EAX,EBX
 31975 leave 
 31976 ret 
__1419:
 31977 leave 
 31978 ret 
atanr:
// atanr(N)
 31979 enter -0
__1422:
 31982 rstack EBX,EBP:2
 31986 fatan EAX,EBX
 31988 leave 
 31989 ret 
__1421:
 31990 leave 
 31991 ret 
ceil2:
// ceil2(A,B)
 31992 enter -0
__1424:
 31995 rstack ECX,EBP:2
 31999 mov EAX,ECX
 32001 rstack ECX,EBP:3
 32005 mov EBX,ECX
 32007 mov EDX,10
 32010 fpwr EBX,EDX
 32012 rstack ECX,EBP:3
 32016 div EAX,ECX
 32018 mov EDX,EAX
 32020 fceil EDX
 32022 mul EDX,EBX
 32024 mov EAX,EDX
 32026 leave 
 32027 ret 
__1423:
 32028 leave 
 32029 ret 
floor2:
// floor2(A,B)
 32030 enter -0
__1426:
 32033 rstack ECX,EBP:2
 32037 mov EAX,ECX
 32039 rstack ECX,EBP:3
 32043 mov EBX,ECX
 32045 mov EDX,10
 32048 fpwr EBX,EDX
 32050 rstack ECX,EBP:3
 32054 div EAX,ECX
 32056 mov EDX,EAX
 32058 fint EDX
 32060 mul EDX,EBX
 32062 mov EAX,EDX
 32064 leave 
 32065 ret 
__1425:
 32066 leave 
 32067 ret 
round2:
// round2(A,B)
 32068 enter -0
__1428:
 32071 rstack ECX,EBP:2
 32075 mov EAX,ECX
 32077 rstack ECX,EBP:3
 32081 mov EBX,ECX
 32083 mov EDX,10
 32086 fpwr EBX,EDX
 32088 rstack ECX,EBP:3
 32092 div EAX,ECX
 32094 mov EDX,EAX
 32096 frnd EDX
 32098 mul EDX,EBX
 32100 mov EAX,EDX
 32102 leave 
 32103 ret 
__1427:
 32104 leave 
 32105 ret 
LIBNUMBER_CONSTANTS:
LIBNUMBER_VARS:
LIBNUMBER_END:
ZVECTOR_CODE:
v_error:
// v_error(str)
 32106 enter -0
__1430:
 32109 rstack EAX,EBP:2
// printf arg #3 (unknown)
 32113 push EAX
// printf arg #2 (unknown)
 32115 push 900
// printf arg #1 (char* format)
 32118 push 32138
 32121 mov ECX,3
// printf(...)
 32124 call 21851
 32127 add ESP,3
 32130 mov ECX,0
// panic(...)
 32133 call 96246
__1429:
 32136 leave 
 32137 ret 
__1431:
 32138 db "%mVector error: %s
",0
v_warning:
// v_warning(str)
 32158 enter -0
__1433:
 32161 rstack EAX,EBP:2
// printf arg #3 (unknown)
 32165 push EAX
// printf arg #2 (unknown)
 32167 push 990
// printf arg #1 (char* format)
 32170 push 32184
 32173 mov ECX,3
// printf(...)
 32176 call 21851
 32179 add ESP,3
__1432:
 32182 leave 
 32183 ret 
__1434:
 32184 db "%mVector warning: %s
",0
sizeof_vector:
 32206 db 5
vector_constructor:
// vector_constructor(self,element_size)
 32207 enter -0
__1436:
// assert_arity arg #2 (float num_args)
 32210 push 2
// assert_arity arg #1 (float ecx_here)
 32213 push ECX
 32215 mov ECX,2
// assert_arity(...)
 32218 call 10245
 32221 add ESP,2
 32224 rstack EAX,EBP:2
 32228 add EAX,0
 32231 mov EBX,EAX
// self[0]=typeof_vector
 32233 mov #EBX,35487
 32236 rstack EAX,EBP:3
 32240 mov EBX,10
 32243 mul EBX,EAX
// malloc arg #1 (float n)
 32245 push EBX
 32247 mov ECX,1
// malloc(...)
 32250 call 29334
 32253 add ESP,1
 32256 rstack EBX,EBP:2
 32260 add EBX,1
 32263 mov ECX,EBX
// self[1]=malloc(10*element_size)
 32265 mov #ECX,EAX
 32267 rstack EAX,EBP:2
 32271 add EAX,2
 32274 mov EBX,EAX
// self[2]=0
 32276 mov #EBX,0
 32279 rstack EAX,EBP:2
 32283 add EAX,3
 32286 mov EBX,EAX
// self[3]=10
 32288 mov #EBX,10
 32291 rstack EAX,EBP:3
 32295 rstack EBX,EBP:2
 32299 add EBX,4
 32302 mov ECX,EBX
// self[4]=element_size
 32304 mov #ECX,EAX
__1435:
 32306 leave 
 32307 ret 
vector_copy_constructor:
// vector_copy_constructor(self,other)
 32308 enter 3
__1438:
// assert_type arg #2 (float t)
 32311 push 35487
 32314 rstack EAX,EBP:3
// assert_type arg #1 (float self)
 32318 push EAX
 32320 mov ECX,2
// assert_type(...)
 32323 call 10123
 32326 add ESP,2
 32329 rstack EAX,EBP:3
 32333 add EAX,0
 32336 mov EBX,EAX
 32338 rstack EAX,EBP:2
 32342 add EAX,0
 32345 mov ECX,EAX
// self[0]=other[0]
 32347 mov #ECX,#EBX
 32349 rstack EAX,EBP:3
 32353 add EAX,1
 32356 mov EBX,EAX
 32358 rstack EAX,EBP:2
 32362 add EAX,1
 32365 mov ECX,EAX
// self[1]=other[1]
 32367 mov #ECX,#EBX
 32369 rstack EAX,EBP:3
 32373 add EAX,2
 32376 mov EBX,EAX
 32378 rstack EAX,EBP:2
 32382 add EAX,2
 32385 mov ECX,EAX
// self[2]=other[2]
 32387 mov #ECX,#EBX
 32389 rstack EAX,EBP:3
 32393 add EAX,3
 32396 mov EBX,EAX
 32398 rstack EAX,EBP:2
 32402 add EAX,3
 32405 mov ECX,EAX
// self[3]=other[3]
 32407 mov #ECX,#EBX
 32409 rstack EAX,EBP:3
 32413 add EAX,4
 32416 mov EBX,EAX
 32418 rstack EAX,EBP:2
 32422 add EAX,4
 32425 mov ECX,EAX
// self[4]=other[4]
 32427 mov #ECX,#EBX
 32429 rstack EAX,EBP:2
 32433 add EAX,4
 32436 mov EBX,EAX
 32438 rstack EAX,EBP:2
 32442 add EAX,2
 32445 mov ECX,EAX
 32447 mov EAX,#ECX
 32449 mul EAX,#EBX
 32451 sstack EBP:-1,EAX
 32455 rstack EAX,EBP:-1
// malloc arg #1 (float n)
 32459 push EAX
 32461 mov ECX,1
// malloc(...)
 32464 call 29334
 32467 add ESP,1
 32470 sstack EBP:-2,EAX
 32474 rstack EAX,EBP:2
 32478 add EAX,1
 32481 mov EBX,EAX
 32483 sstack EBP:-3,#EBX
 32487 rstack EAX,EBP:-1
// memcpy arg #3 (float n)
 32491 push EAX
 32493 rstack EAX,EBP:-3
// memcpy arg #2 (void* src)
 32497 push EAX
 32499 rstack EAX,EBP:-2
// memcpy arg #1 (void* dest)
 32503 push EAX
 32505 mov ECX,3
// memcpy(...)
 32508 call 10355
 32511 add ESP,3
 32514 rstack EAX,EBP:-2
 32518 rstack EBX,EBP:2
 32522 add EBX,1
 32525 mov ECX,EBX
// self[1]=newarray
 32527 mov #ECX,EAX
__1437:
 32529 leave 
 32530 ret 
vector_get_array:
// vector_get_array(self)
 32531 enter -0
__1440:
// assert_type arg #2 (float t)
 32534 push 35487
 32537 rstack EAX,EBP:2
// assert_type arg #1 (float self)
 32541 push EAX
 32543 mov ECX,2
// assert_type(...)
 32546 call 10123
 32549 add ESP,2
 32552 rstack EAX,EBP:2
 32556 add EAX,1
 32559 mov EBX,EAX
 32561 mov EAX,#EBX
 32563 leave 
 32564 ret 
__1439:
 32565 leave 
 32566 ret 
vector_get_size:
// vector_get_size(self)
 32567 enter -0
__1442:
// assert_type arg #2 (float t)
 32570 push 35487
 32573 rstack EAX,EBP:2
// assert_type arg #1 (float self)
 32577 push EAX
 32579 mov ECX,2
// assert_type(...)
 32582 call 10123
 32585 add ESP,2
 32588 rstack EAX,EBP:2
 32592 add EAX,2
 32595 mov EBX,EAX
 32597 mov EAX,#EBX
 32599 leave 
 32600 ret 
__1441:
 32601 leave 
 32602 ret 
vector_get_capacity:
// vector_get_capacity(self)
 32603 enter -0
__1444:
// assert_type arg #2 (float t)
 32606 push 35487
 32609 rstack EAX,EBP:2
// assert_type arg #1 (float self)
 32613 push EAX
 32615 mov ECX,2
// assert_type(...)
 32618 call 10123
 32621 add ESP,2
 32624 rstack EAX,EBP:2
 32628 add EAX,3
 32631 mov EBX,EAX
 32633 mov EAX,#EBX
 32635 leave 
 32636 ret 
__1443:
 32637 leave 
 32638 ret 
vector_get_element_size:
// vector_get_element_size(self)
 32639 enter -0
__1446:
// assert_type arg #2 (float t)
 32642 push 35487
 32645 rstack EAX,EBP:2
// assert_type arg #1 (float self)
 32649 push EAX
 32651 mov ECX,2
// assert_type(...)
 32654 call 10123
 32657 add ESP,2
 32660 rstack EAX,EBP:2
 32664 add EAX,4
 32667 mov EBX,EAX
 32669 mov EAX,#EBX
 32671 leave 
 32672 ret 
__1445:
 32673 leave 
 32674 ret 
vector_set_array:
// vector_set_array(self,n)
 32675 enter -0
__1448:
// assert_type arg #2 (float t)
 32678 push 35487
 32681 rstack EAX,EBP:2
// assert_type arg #1 (float self)
 32685 push EAX
 32687 mov ECX,2
// assert_type(...)
 32690 call 10123
 32693 add ESP,2
 32696 rstack EAX,EBP:3
 32700 rstack EBX,EBP:2
 32704 add EBX,1
 32707 mov ECX,EBX
// self[1]=n
 32709 mov #ECX,EAX
__1447:
 32711 leave 
 32712 ret 
vector_set_size:
// vector_set_size(self,n)
 32713 enter -0
__1450:
// assert_type arg #2 (float t)
 32716 push 35487
 32719 rstack EAX,EBP:2
// assert_type arg #1 (float self)
 32723 push EAX
 32725 mov ECX,2
// assert_type(...)
 32728 call 10123
 32731 add ESP,2
 32734 rstack EAX,EBP:3
 32738 rstack EBX,EBP:2
 32742 add EBX,2
 32745 mov ECX,EBX
// self[2]=n
 32747 mov #ECX,EAX
__1449:
 32749 leave 
 32750 ret 
vector_set_capacity:
// vector_set_capacity(self,n)
 32751 enter -0
__1452:
// assert_type arg #2 (float t)
 32754 push 35487
 32757 rstack EAX,EBP:2
// assert_type arg #1 (float self)
 32761 push EAX
 32763 mov ECX,2
// assert_type(...)
 32766 call 10123
 32769 add ESP,2
 32772 rstack EAX,EBP:3
 32776 rstack EBX,EBP:2
 32780 add EBX,3
 32783 mov ECX,EBX
// self[3]=n
 32785 mov #ECX,EAX
__1451:
 32787 leave 
 32788 ret 
vector_set_element_size:
// vector_set_element_size(self,n)
 32789 enter -0
__1454:
// assert_type arg #2 (float t)
 32792 push 35487
 32795 rstack EAX,EBP:2
// assert_type arg #1 (float self)
 32799 push EAX
 32801 mov ECX,2
// assert_type(...)
 32804 call 10123
 32807 add ESP,2
 32810 rstack EAX,EBP:3
 32814 rstack EBX,EBP:2
 32818 add EBX,4
 32821 mov ECX,EBX
// self[4]=n
 32823 mov #ECX,EAX
__1453:
 32825 leave 
 32826 ret 
vector_destructor:
// vector_destructor(self)
 32827 enter -0
__1456:
// assert_type arg #2 (float t)
 32830 push 35487
 32833 rstack EAX,EBP:2
// assert_type arg #1 (float self)
 32837 push EAX
 32839 mov ECX,2
// assert_type(...)
 32842 call 10123
 32845 add ESP,2
 32848 rstack EAX,EBP:2
 32852 add EAX,1
 32855 mov EBX,EAX
// free arg #1 (float* ptr)
 32857 push #EBX
 32859 mov ECX,1
// free(...)
 32862 call 29828
 32865 add ESP,1
__1455:
 32868 leave 
 32869 ret 
vector_clear:
// vector_clear(self)
 32870 enter 1
__1458:
// assert_type arg #2 (float t)
 32873 push 35487
 32876 rstack EAX,EBP:2
// assert_type arg #1 (float self)
 32880 push EAX
 32882 mov ECX,2
// assert_type(...)
 32885 call 10123
 32888 add ESP,2
 32891 rstack EAX,EBP:2
 32895 add EAX,2
 32898 mov EBX,EAX
 32900 sstack EBP:-1,#EBX
// self_size=0
 32904 sstack EBP:-1,0
 32909 rstack EAX,EBP:-1
 32913 rstack EBX,EBP:2
 32917 add EBX,2
 32920 mov ECX,EBX
// self[2]=self_size
 32922 mov #ECX,EAX
__1457:
 32924 leave 
 32925 ret 
vector_push:
// vector_push(self,element)
 32926 enter 5
__1460:
// assert_arity arg #2 (float num_args)
 32929 push 2
// assert_arity arg #1 (float ecx_here)
 32932 push ECX
 32934 mov ECX,2
// assert_arity(...)
 32937 call 10245
 32940 add ESP,2
// assert_type arg #2 (float t)
 32943 push 35487
 32946 rstack EAX,EBP:2
// assert_type arg #1 (float self)
 32950 push EAX
 32952 mov ECX,2
// assert_type(...)
 32955 call 10123
 32958 add ESP,2
 32961 rstack EAX,EBP:2
 32965 add EAX,1
 32968 mov EBX,EAX
 32970 sstack EBP:-1,#EBX
 32974 rstack EAX,EBP:2
 32978 add EAX,2
 32981 mov EBX,EAX
 32983 sstack EBP:-2,#EBX
 32987 rstack EAX,EBP:2
 32991 add EAX,3
 32994 mov EBX,EAX
 32996 sstack EBP:-3,#EBX
 33000 rstack EAX,EBP:2
 33004 add EAX,4
 33007 mov EBX,EAX
 33009 sstack EBP:-4,#EBX
 33013 rstack EAX,EBP:-2
// self_size++
 33017 inc EAX
 33019 sstack EBP:-2,EAX
__1462:
 33023 rstack EAX,EBP:-2
 33027 rstack EBX,EBP:-3
 33031 sub EBX,EAX
 33033 mov EAX,EBX
 33035 neg EAX
 33037 fsgn EAX,EAX
 33039 max EAX,0
// if (self_size>self_capacity)
 33042 cmp 0,EAX
 33045 jge 33153
 33048 rstack EAX,EBP:-3
 33052 add EAX,1
 33055 mov EBX,EAX
 33057 sstack EBP:-5,EBX
 33061 rstack EAX,EBP:-5
 33065 mul EAX,1.5
 33068 mov EBX,EAX
// newsize=newsize*1.5
 33070 sstack EBP:-5,EBX
 33074 rstack EAX,EBP:-5
// ceil arg #1 (float A)
 33078 push EAX
 33080 mov ECX,1
// ceil(...)
 33083 call 31054
 33086 add ESP,1
// newsize=ceil(newsize)
 33089 sstack EBP:-5,EAX
 33093 rstack EAX,EBP:-5
 33097 push EAX
 33099 rstack EAX,EBP:2
 33103 push EAX
 33105 mov ECX,2
// vector_reserve(...)
 33108 call 35024
 33111 add ESP,2
// array=vector_reserve(self,newsize)
 33114 sstack EBP:-1,EAX
__1465:
 33118 rstack EAX,EBP:-1
 33122 mov EBX,0
 33125 sub EBX,EAX
 33127 fabs EBX,EBX
 33129 fsgn EBX,EBX
 33131 lneg EBX
// if (array==0)
 33133 cmp 0,EBX
 33136 jge 33153
// v_warning arg #1 (float str)
 33139 push 33263
 33142 mov ECX,1
// v_warning(...)
 33145 call 32158
 33148 add ESP,1
 33151 leave 
 33152 ret 
__1466:
__1464:
__1463:
__1461:
__1469:
 33153 rstack EAX,EBP:-4
 33157 mov EBX,1
 33160 sub EBX,EAX
 33162 fabs EBX,EBX
 33164 fsgn EBX,EBX
 33166 lneg EBX
// if (element_size==1)
 33168 cmp 0,EBX
 33171 jge 33200
 33174 rstack EAX,EBP:3
 33178 rstack EBX,EBP:-2
 33182 add EBX,-1
 33185 mov ECX,EBX
 33187 rstack EBX,EBP:-1
 33191 add EBX,ECX
 33193 mov ECX,EBX
// array[self_size-1]=element
 33195 mov #ECX,EAX
 33197 jmp 33246
__1471:
__1470:
__1473:
 33200 rstack EAX,EBP:-4
// memcpy2 arg #3 (float n)
 33204 push EAX
 33206 rstack EAX,EBP:3
// memcpy2 arg #2 (void* src)
 33210 push EAX
 33212 rstack EAX,EBP:-4
 33216 rstack EBX,EBP:-2
 33220 add EBX,-1
 33223 mov ECX,EBX
 33225 mul ECX,EAX
 33227 rstack EAX,EBP:-1
 33231 add EAX,ECX
 33233 mov EBX,EAX
// memcpy2 arg #1 (void* dest)
 33235 push EBX
 33237 mov ECX,3
// memcpy2(...)
 33240 call 11463
 33243 add ESP,3
__1472:
__1468:
 33246 rstack EAX,EBP:-2
 33250 rstack EBX,EBP:2
 33254 add EBX,2
 33257 mov ECX,EBX
// self[2]=self_size
 33259 mov #ECX,EAX
__1459:
 33261 leave 
 33262 ret 
__1467:
 33263 db "can't resize",0
vector_pop:
// vector_pop(self,element)
 33276 enter 5
__1475:
// assert_type arg #2 (float t)
 33279 push 35487
 33282 rstack EAX,EBP:2
// assert_type arg #1 (float self)
 33286 push EAX
 33288 mov ECX,2
// assert_type(...)
 33291 call 10123
 33294 add ESP,2
 33297 rstack EAX,EBP:2
 33301 add EAX,1
 33304 mov EBX,EAX
 33306 sstack EBP:-1,#EBX
 33310 rstack EAX,EBP:2
 33314 add EAX,2
 33317 mov EBX,EAX
 33319 sstack EBP:-2,#EBX
 33323 rstack EAX,EBP:2
 33327 add EAX,3
 33330 mov EBX,EAX
 33332 sstack EBP:-3,#EBX
 33336 rstack EAX,EBP:2
 33340 add EAX,4
 33343 mov EBX,EAX
 33345 sstack EBP:-4,#EBX
__1477:
 33349 rstack EAX,EBP:-2
 33353 mov EBX,0
 33356 sub EBX,EAX
 33358 fsgn EBX,EBX
 33360 inc EBX
 33362 max EBX,0
// if (self_size<=0)
 33365 cmp 0,EBX
 33368 jge 33383
// v_error arg #1 (float str)
 33371 push 33505
 33374 mov ECX,1
// v_error(...)
 33377 call 32106
 33380 add ESP,1
__1478:
__1476:
__1481:
 33383 rstack EAX,EBP:3
 33387 mov EBX,0
 33390 sub EBX,EAX
 33392 fabs EBX,EBX
 33394 fsgn EBX,EBX
// if (element!=0)
 33396 cmp 0,EBX
 33399 jge 33445
 33402 rstack EAX,EBP:-4
// memcpy2 arg #3 (float n)
 33406 push EAX
 33408 rstack EAX,EBP:-4
 33412 rstack EBX,EBP:-2
 33416 mul EBX,EAX
 33418 mov EAX,EBX
 33420 rstack EBX,EBP:-1
 33424 add EBX,EAX
 33426 mov EAX,EBX
// memcpy2 arg #2 (void* src)
 33428 push EAX
 33430 rstack EAX,EBP:3
// memcpy2 arg #1 (void* dest)
 33434 push EAX
 33436 mov ECX,3
// memcpy2(...)
 33439 call 11463
 33442 add ESP,3
__1482:
__1480:
 33445 rstack EAX,EBP:-4
 33449 rstack EBX,EBP:-2
 33453 add EBX,-1
 33456 mov ECX,EBX
 33458 mul ECX,EAX
 33460 rstack EAX,EBP:-1
 33464 add EAX,ECX
 33466 mov EBX,EAX
 33468 sstack EBP:-5,#EBX
 33472 rstack EAX,EBP:-2
// self_size--
 33476 dec EAX
 33478 sstack EBP:-2,EAX
 33482 rstack EAX,EBP:-2
 33486 rstack EBX,EBP:2
 33490 add EBX,2
 33493 mov ECX,EBX
// self[2]=self_size
 33495 mov #ECX,EAX
 33497 rstack EAX,EBP:-5
 33501 leave 
 33502 ret 
__1474:
 33503 leave 
 33504 ret 
__1479:
 33505 db "size <= 0",0
vector_size:
// vector_size(self)
 33515 enter -0
__1484:
// assert_type arg #2 (float t)
 33518 push 35487
 33521 rstack EAX,EBP:2
// assert_type arg #1 (float self)
 33525 push EAX
 33527 mov ECX,2
// assert_type(...)
 33530 call 10123
 33533 add ESP,2
 33536 rstack EAX,EBP:2
 33540 add EAX,2
 33543 mov EBX,EAX
 33545 mov EAX,#EBX
 33547 leave 
 33548 ret 
__1483:
 33549 leave 
 33550 ret 
vector_disk_size:
// vector_disk_size(self)
 33551 enter -0
__1486:
// assert_type arg #2 (float t)
 33554 push 35487
 33557 rstack EAX,EBP:2
// assert_type arg #1 (float self)
 33561 push EAX
 33563 mov ECX,2
// assert_type(...)
 33566 call 10123
 33569 add ESP,2
 33572 rstack EAX,EBP:2
 33576 add EAX,4
 33579 mov EBX,EAX
 33581 rstack EAX,EBP:2
 33585 add EAX,2
 33588 mov ECX,EAX
 33590 mov EAX,#ECX
 33592 mul EAX,#EBX
 33594 leave 
 33595 ret 
__1485:
 33596 leave 
 33597 ret 
vector_get:
// vector_get(self,element,pos)
 33598 enter 5
__1488:
// assert_arity arg #2 (float num_args)
 33601 push 3
// assert_arity arg #1 (float ecx_here)
 33604 push ECX
 33606 mov ECX,2
// assert_arity(...)
 33609 call 10245
 33612 add ESP,2
// assert_type arg #2 (float t)
 33615 push 35487
 33618 rstack EAX,EBP:2
// assert_type arg #1 (float self)
 33622 push EAX
 33624 mov ECX,2
// assert_type(...)
 33627 call 10123
 33630 add ESP,2
 33633 rstack EAX,EBP:2
 33637 add EAX,1
 33640 mov EBX,EAX
 33642 sstack EBP:-1,#EBX
 33646 rstack EAX,EBP:2
 33650 add EAX,2
 33653 mov EBX,EAX
 33655 sstack EBP:-2,#EBX
 33659 rstack EAX,EBP:2
 33663 add EAX,3
 33666 mov EBX,EAX
 33668 sstack EBP:-3,#EBX
 33672 rstack EAX,EBP:2
 33676 add EAX,4
 33679 mov EBX,EAX
 33681 sstack EBP:-4,#EBX
__1490:
 33685 rstack EAX,EBP:4
 33689 rstack EBX,EBP:-2
 33693 sub EBX,EAX
 33695 mov EAX,EBX
 33697 neg EAX
 33699 fsgn EAX,EAX
 33701 inc EAX
 33703 max EAX,0
 33706 rstack EBX,EBP:4
 33710 mov ECX,0
 33713 sub ECX,EBX
 33715 fsgn ECX,ECX
 33717 max ECX,0
 33720 or ECX,EAX
// if ((pos<0)||(pos>=self_size))
 33722 cmp 0,ECX
 33725 jge 33740
// v_error arg #1 (float str)
 33728 push 33834
 33731 mov ECX,1
// v_error(...)
 33734 call 32106
 33737 add ESP,1
__1491:
__1489:
__1494:
 33740 rstack EAX,EBP:3
 33744 mov EBX,0
 33747 sub EBX,EAX
 33749 fabs EBX,EBX
 33751 fsgn EBX,EBX
// if (element!=0)
 33753 cmp 0,EBX
 33756 jge 33802
 33759 rstack EAX,EBP:-4
// memcpy2 arg #3 (float n)
 33763 push EAX
 33765 rstack EAX,EBP:-4
 33769 rstack EBX,EBP:4
 33773 mul EBX,EAX
 33775 mov EAX,EBX
 33777 rstack EBX,EBP:-1
 33781 add EBX,EAX
 33783 mov EAX,EBX
// memcpy2 arg #2 (void* src)
 33785 push EAX
 33787 rstack EAX,EBP:3
// memcpy2 arg #1 (void* dest)
 33791 push EAX
 33793 mov ECX,3
// memcpy2(...)
 33796 call 11463
 33799 add ESP,3
__1495:
__1493:
 33802 rstack EAX,EBP:-4
 33806 rstack EBX,EBP:4
 33810 mul EBX,EAX
 33812 mov EAX,EBX
 33814 rstack EBX,EBP:-1
 33818 add EBX,EAX
 33820 mov EAX,EBX
 33822 sstack EBP:-5,#EAX
 33826 rstack EAX,EBP:-5
 33830 leave 
 33831 ret 
__1487:
 33832 leave 
 33833 ret 
__1492:
 33834 db "pos out of range",0
vector_get_ref:
// vector_get_ref(self,pos)
 33851 enter 3
__1497:
// assert_arity arg #2 (float num_args)
 33854 push 2
// assert_arity arg #1 (float ecx_here)
 33857 push ECX
 33859 mov ECX,2
// assert_arity(...)
 33862 call 10245
 33865 add ESP,2
// assert_type arg #2 (float t)
 33868 push 35487
 33871 rstack EAX,EBP:2
// assert_type arg #1 (float self)
 33875 push EAX
 33877 mov ECX,2
// assert_type(...)
 33880 call 10123
 33883 add ESP,2
 33886 rstack EAX,EBP:2
 33890 add EAX,1
 33893 mov EBX,EAX
 33895 sstack EBP:-1,#EBX
 33899 rstack EAX,EBP:2
 33903 add EAX,2
 33906 mov EBX,EAX
 33908 sstack EBP:-2,#EBX
 33912 rstack EAX,EBP:2
 33916 add EAX,4
 33919 mov EBX,EAX
 33921 sstack EBP:-3,#EBX
 33925 rstack EAX,EBP:-3
 33929 rstack EBX,EBP:3
 33933 mul EBX,EAX
 33935 mov EAX,EBX
 33937 rstack EBX,EBP:-1
 33941 add EBX,EAX
 33943 mov EAX,EBX
 33945 leave 
 33946 ret 
__1496:
 33947 leave 
 33948 ret 
vector_set:
// vector_set(self,element,pos)
 33949 enter 4
__1499:
// assert_arity arg #2 (float num_args)
 33952 push 3
// assert_arity arg #1 (float ecx_here)
 33955 push ECX
 33957 mov ECX,2
// assert_arity(...)
 33960 call 10245
 33963 add ESP,2
// assert_type arg #2 (float t)
 33966 push 35487
 33969 rstack EAX,EBP:2
// assert_type arg #1 (float self)
 33973 push EAX
 33975 mov ECX,2
// assert_type(...)
 33978 call 10123
 33981 add ESP,2
 33984 rstack EAX,EBP:2
 33988 add EAX,1
 33991 mov EBX,EAX
 33993 sstack EBP:-1,#EBX
 33997 rstack EAX,EBP:2
 34001 add EAX,2
 34004 mov EBX,EAX
 34006 sstack EBP:-2,#EBX
 34010 rstack EAX,EBP:2
 34014 add EAX,3
 34017 mov EBX,EAX
 34019 sstack EBP:-3,#EBX
 34023 rstack EAX,EBP:2
 34027 add EAX,4
 34030 mov EBX,EAX
 34032 sstack EBP:-4,#EBX
__1501:
 34036 rstack EAX,EBP:4
 34040 rstack EBX,EBP:-2
 34044 sub EBX,EAX
 34046 mov EAX,EBX
 34048 fabs EAX,EAX
 34050 fsgn EAX,EAX
 34052 lneg EAX
// if (pos==self_size)
 34054 cmp 0,EAX
 34057 jge 34083
 34060 rstack EAX,EBP:3
// vector_push arg #2 (void* element)
 34064 push EAX
 34066 rstack EAX,EBP:2
// vector_push arg #1 (void* self)
 34070 push EAX
 34072 mov ECX,2
// vector_push(...)
 34075 call 32926
 34078 add ESP,2
 34081 leave 
 34082 ret 
__1502:
__1500:
__1504:
 34083 rstack EAX,EBP:4
 34087 rstack EBX,EBP:-2
 34091 sub EBX,EAX
 34093 mov EAX,EBX
 34095 neg EAX
 34097 fsgn EAX,EAX
 34099 inc EAX
 34101 max EAX,0
 34104 rstack EBX,EBP:4
 34108 mov ECX,0
 34111 sub ECX,EBX
 34113 fsgn ECX,ECX
 34115 max ECX,0
 34118 or ECX,EAX
// if ((pos<0)||(pos>=self_size))
 34120 cmp 0,ECX
 34123 jge 34138
// v_error arg #1 (float str)
 34126 push 33834
 34129 mov ECX,1
// v_error(...)
 34132 call 32106
 34135 add ESP,1
__1505:
__1503:
__1507:
 34138 rstack EAX,EBP:-4
 34142 mov EBX,1
 34145 sub EBX,EAX
 34147 fabs EBX,EBX
 34149 fsgn EBX,EBX
 34151 lneg EBX
// if (element_size==1)
 34153 cmp 0,EBX
 34156 jge 34180
 34159 rstack EAX,EBP:3
 34163 rstack EBX,EBP:4
 34167 rstack ECX,EBP:-1
 34171 add ECX,EBX
 34173 mov EBX,ECX
// array[pos]=element
 34175 mov #EBX,EAX
 34177 jmp 34223
__1509:
__1508:
__1511:
 34180 rstack EAX,EBP:-4
// memcpy2 arg #3 (float n)
 34184 push EAX
 34186 rstack EAX,EBP:3
// memcpy2 arg #2 (void* src)
 34190 push EAX
 34192 rstack EAX,EBP:-4
 34196 rstack EBX,EBP:4
 34200 mul EBX,EAX
 34202 mov EAX,EBX
 34204 rstack EBX,EBP:-1
 34208 add EBX,EAX
 34210 mov EAX,EBX
// memcpy2 arg #1 (void* dest)
 34212 push EAX
 34214 mov ECX,3
// memcpy2(...)
 34217 call 11463
 34220 add ESP,3
__1510:
__1506:
__1498:
 34223 leave 
 34224 ret 
vector_insert:
// vector_insert(self,element,pos)
 34225 enter 5
__1513:
// assert_arity arg #2 (float num_args)
 34228 push 3
// assert_arity arg #1 (float ecx_here)
 34231 push ECX
 34233 mov ECX,2
// assert_arity(...)
 34236 call 10245
 34239 add ESP,2
// assert_type arg #2 (float t)
 34242 push 35487
 34245 rstack EAX,EBP:2
// assert_type arg #1 (float self)
 34249 push EAX
 34251 mov ECX,2
// assert_type(...)
 34254 call 10123
 34257 add ESP,2
 34260 rstack EAX,EBP:2
 34264 add EAX,2
 34267 mov EBX,EAX
 34269 sstack EBP:-1,#EBX
 34273 rstack EAX,EBP:2
 34277 add EAX,3
 34280 mov EBX,EAX
 34282 sstack EBP:-2,#EBX
 34286 rstack EAX,EBP:2
 34290 add EAX,4
 34293 mov EBX,EAX
 34295 sstack EBP:-3,#EBX
__1515:
 34299 rstack EAX,EBP:4
 34303 rstack EBX,EBP:-1
 34307 sub EBX,EAX
 34309 mov EAX,EBX
 34311 neg EAX
 34313 fsgn EAX,EAX
 34315 max EAX,0
 34318 rstack EBX,EBP:4
 34322 mov ECX,0
 34325 sub ECX,EBX
 34327 fsgn ECX,ECX
 34329 max ECX,0
 34332 or ECX,EAX
// if ((pos<0)||(pos>self_size))
 34334 cmp 0,ECX
 34337 jge 34352
// v_error arg #1 (float str)
 34340 push 33834
 34343 mov ECX,1
// v_error(...)
 34346 call 32106
 34349 add ESP,1
__1516:
__1514:
__1518:
 34352 rstack EAX,EBP:4
 34356 rstack EBX,EBP:-1
 34360 sub EBX,EAX
 34362 mov EAX,EBX
 34364 fabs EAX,EAX
 34366 fsgn EAX,EAX
 34368 lneg EAX
// if (pos==self_size)
 34370 cmp 0,EAX
 34373 jge 34397
 34376 rstack EAX,EBP:3
// vector_push arg #2 (void* element)
 34380 push EAX
 34382 rstack EAX,EBP:2
// vector_push arg #1 (void* self)
 34386 push EAX
 34388 mov ECX,2
// vector_push(...)
 34391 call 32926
 34394 add ESP,2
__1519:
__1517:
 34397 rstack EAX,EBP:-1
// self_size++
 34401 inc EAX
 34403 sstack EBP:-1,EAX
__1521:
 34407 rstack EAX,EBP:-1
 34411 rstack EBX,EBP:-2
 34415 sub EBX,EAX
 34417 mov EAX,EBX
 34419 neg EAX
 34421 fsgn EAX,EAX
 34423 max EAX,0
// if (self_size>self_capacity)
 34426 cmp 0,EAX
 34429 jge 34541
 34432 rstack EAX,EBP:-2
 34436 add EAX,1
 34439 mov EBX,EAX
 34441 sstack EBP:-4,EBX
 34445 rstack EAX,EBP:-4
 34449 mul EAX,1.5
 34452 mov EBX,EAX
// newsize=newsize*1.5
 34454 sstack EBP:-4,EBX
 34458 rstack EAX,EBP:-4
// ceil arg #1 (float A)
 34462 push EAX
 34464 mov ECX,1
// ceil(...)
 34467 call 31054
 34470 add ESP,1
// newsize=ceil(newsize)
 34473 sstack EBP:-4,EAX
 34477 rstack EAX,EBP:-4
 34481 push EAX
 34483 rstack EAX,EBP:2
 34487 push EAX
 34489 mov ECX,2
// vector_reserve(...)
 34492 call 35024
 34495 add ESP,2
// array=vector_reserve(self,newsize)
 34498 mov 77185,EAX
__1524:
 34501 rstack EAX,EBP:-4
 34505 push EAX
 34507 rstack EAX,EBP:2
 34511 push EAX
 34513 mov ECX,2
// vector_reserve(...)
 34516 call 35024
 34519 add ESP,2
 34522 mov EBX,0
 34525 sub EBX,EAX
 34527 fabs EBX,EBX
 34529 fsgn EBX,EBX
 34531 lneg EBX
// if (vector_reserve(self,newsize)==0)
 34533 cmp 0,EBX
 34536 jge 34541
 34539 leave 
 34540 ret 
__1525:
__1523:
__1522:
__1520:
 34541 rstack EAX,EBP:2
 34545 add EAX,1
 34548 mov EBX,EAX
 34550 sstack EBP:-5,#EBX
 34554 rstack EAX,EBP:4
 34558 neg EAX
 34560 mov EBX,EAX
 34562 add EBX,-1
 34565 rstack EAX,EBP:-1
 34569 add EAX,EBX
 34571 mov EBX,EAX
// memcpy2 arg #3 (float n)
 34573 push EBX
 34575 rstack EAX,EBP:-3
 34579 rstack EBX,EBP:4
 34583 mul EBX,EAX
 34585 mov EAX,EBX
 34587 rstack EBX,EBP:-5
 34591 add EBX,EAX
 34593 mov EAX,EBX
// memcpy2 arg #2 (void* src)
 34595 push EAX
 34597 rstack EAX,EBP:-3
 34601 rstack EBX,EBP:4
 34605 add EBX,1
 34608 mov ECX,EBX
 34610 mul ECX,EAX
 34612 rstack EAX,EBP:-5
 34616 add EAX,ECX
 34618 mov EBX,EAX
// memcpy2 arg #1 (void* dest)
 34620 push EBX
 34622 mov ECX,3
// memcpy2(...)
 34625 call 11463
 34628 add ESP,3
__1527:
 34631 rstack EAX,EBP:-3
 34635 mov EBX,1
 34638 sub EBX,EAX
 34640 fabs EBX,EBX
 34642 fsgn EBX,EBX
 34644 lneg EBX
// if (element_size==1)
 34646 cmp 0,EBX
 34649 jge 34673
 34652 rstack EAX,EBP:3
 34656 rstack EBX,EBP:4
 34660 rstack ECX,EBP:-5
 34664 add ECX,EBX
 34666 mov EBX,ECX
// array[pos]=element
 34668 mov #EBX,EAX
 34670 jmp 34716
__1529:
__1528:
__1531:
 34673 rstack EAX,EBP:-3
// memcpy2 arg #3 (float n)
 34677 push EAX
 34679 rstack EAX,EBP:3
// memcpy2 arg #2 (void* src)
 34683 push EAX
 34685 rstack EAX,EBP:-3
 34689 rstack EBX,EBP:4
 34693 mul EBX,EAX
 34695 mov EAX,EBX
 34697 rstack EBX,EBP:-5
 34701 add EBX,EAX
 34703 mov EAX,EBX
// memcpy2 arg #1 (void* dest)
 34705 push EAX
 34707 mov ECX,3
// memcpy2(...)
 34710 call 11463
 34713 add ESP,3
__1530:
__1526:
 34716 rstack EAX,EBP:-1
 34720 rstack EBX,EBP:2
 34724 add EBX,2
 34727 mov ECX,EBX
// self[2]=self_size
 34729 mov #ECX,EAX
__1512:
 34731 leave 
 34732 ret 
vector_remove:
// vector_remove(self,pos)
 34733 enter 4
__1533:
// assert_arity arg #2 (float num_args)
 34736 push 2
// assert_arity arg #1 (float ecx_here)
 34739 push ECX
 34741 mov ECX,2
// assert_arity(...)
 34744 call 10245
 34747 add ESP,2
// assert_type arg #2 (float t)
 34750 push 35487
 34753 rstack EAX,EBP:2
// assert_type arg #1 (float self)
 34757 push EAX
 34759 mov ECX,2
// assert_type(...)
 34762 call 10123
 34765 add ESP,2
 34768 rstack EAX,EBP:2
 34772 add EAX,1
 34775 mov EBX,EAX
 34777 sstack EBP:-1,#EBX
 34781 rstack EAX,EBP:2
 34785 add EAX,2
 34788 mov EBX,EAX
 34790 sstack EBP:-2,#EBX
 34794 rstack EAX,EBP:2
 34798 add EAX,3
 34801 mov EBX,EAX
 34803 sstack EBP:-3,#EBX
 34807 rstack EAX,EBP:2
 34811 add EAX,4
 34814 mov EBX,EAX
 34816 sstack EBP:-4,#EBX
__1535:
 34820 rstack EAX,EBP:3
 34824 rstack EBX,EBP:-2
 34828 sub EBX,EAX
 34830 mov EAX,EBX
 34832 neg EAX
 34834 fsgn EAX,EAX
 34836 max EAX,0
 34839 rstack EBX,EBP:3
 34843 mov ECX,0
 34846 sub ECX,EBX
 34848 fsgn ECX,ECX
 34850 max ECX,0
 34853 or ECX,EAX
// if ((pos<0)||(pos>self_size))
 34855 cmp 0,ECX
 34858 jge 34873
// v_error arg #1 (float str)
 34861 push 33834
 34864 mov ECX,1
// v_error(...)
 34867 call 32106
 34870 add ESP,1
__1536:
__1534:
__1538:
 34873 rstack EAX,EBP:3
 34877 rstack EBX,EBP:-2
 34881 sub EBX,EAX
 34883 mov EAX,EBX
 34885 fabs EAX,EAX
 34887 fsgn EAX,EAX
 34889 lneg EAX
// if (pos==self_size)
 34891 cmp 0,EAX
 34894 jge 34917
// vector_pop arg #2 (void* element)
 34897 push 0
 34900 rstack EAX,EBP:2
// vector_pop arg #1 (void* self)
 34904 push EAX
 34906 mov ECX,2
// vector_pop(...)
 34909 call 33276
 34912 add ESP,2
 34915 leave 
 34916 ret 
__1539:
__1537:
 34917 rstack EAX,EBP:-4
 34921 rstack EBX,EBP:3
 34925 neg EBX
 34927 mov ECX,EBX
 34929 rstack EBX,EBP:-2
 34933 add EBX,ECX
 34935 mov ECX,EBX
 34937 mul ECX,EAX
// memcpy2 arg #3 (float n)
 34939 push ECX
 34941 rstack EAX,EBP:-4
 34945 rstack EBX,EBP:3
 34949 add EBX,1
 34952 mov ECX,EBX
 34954 mul ECX,EAX
 34956 rstack EAX,EBP:-1
 34960 add EAX,ECX
 34962 mov EBX,EAX
// memcpy2 arg #2 (void* src)
 34964 push EBX
 34966 rstack EAX,EBP:-4
 34970 rstack EBX,EBP:3
 34974 mul EBX,EAX
 34976 mov EAX,EBX
 34978 rstack EBX,EBP:-1
 34982 add EBX,EAX
 34984 mov EAX,EBX
// memcpy2 arg #1 (void* dest)
 34986 push EAX
 34988 mov ECX,3
// memcpy2(...)
 34991 call 11463
 34994 add ESP,3
 34997 rstack EAX,EBP:-2
// self_size--
 35001 dec EAX
 35003 sstack EBP:-2,EAX
 35007 rstack EAX,EBP:-2
 35011 rstack EBX,EBP:2
 35015 add EBX,2
 35018 mov ECX,EBX
// self[2]=self_size
 35020 mov #ECX,EAX
__1532:
 35022 leave 
 35023 ret 
vector_reserve:
// vector_reserve(self,newcap)
 35024 enter 6
__1541:
// assert_type arg #2 (float t)
 35027 push 35487
 35030 rstack EAX,EBP:2
// assert_type arg #1 (float self)
 35034 push EAX
 35036 mov ECX,2
// assert_type(...)
 35039 call 10123
 35042 add ESP,2
 35045 rstack EAX,EBP:2
 35049 add EAX,1
 35052 mov EBX,EAX
 35054 sstack EBP:-1,#EBX
 35058 rstack EAX,EBP:2
 35062 add EAX,2
 35065 mov EBX,EAX
 35067 sstack EBP:-2,#EBX
 35071 rstack EAX,EBP:2
 35075 add EAX,3
 35078 mov EBX,EAX
 35080 sstack EBP:-3,#EBX
 35084 rstack EAX,EBP:2
 35088 add EAX,4
 35091 mov EBX,EAX
 35093 sstack EBP:-4,#EBX
 35097 rstack EAX,EBP:-1
 35101 sstack EBP:-5,EAX
 35105 rstack EAX,EBP:3
 35109 rstack EBX,EBP:-4
 35113 mul EBX,EAX
 35115 mov EAX,EBX
 35117 sstack EBP:-6,EAX
 35121 rstack EAX,EBP:3
 35125 rstack EBX,EBP:-4
 35129 mul EBX,EAX
 35131 mov EAX,EBX
// realloc arg #2 (float n)
 35133 push EAX
 35135 rstack EAX,EBP:-1
// realloc arg #1 (float* ptr)
 35139 push EAX
 35141 mov ECX,2
// realloc(...)
 35144 call 30318
 35147 add ESP,2
// array=realloc(array,element_size*newcap)
 35150 sstack EBP:-1,EAX
__1543:
 35154 rstack EAX,EBP:-1
 35158 mov EBX,0
 35161 sub EBX,EAX
 35163 fabs EBX,EBX
 35165 fsgn EBX,EBX
 35167 lneg EBX
// if (array==0)
 35169 cmp 0,EBX
 35172 jge 35192
// v_warning arg #1 (float str)
 35175 push 35253
 35178 mov ECX,1
// v_warning(...)
 35181 call 32158
 35184 add ESP,1
 35187 mov EAX,0
 35190 leave 
 35191 ret 
__1544:
__1542:
 35192 rstack EAX,EBP:3
// self_capacity=newcap
 35196 sstack EBP:-3,EAX
 35200 rstack EAX,EBP:-1
 35204 rstack EBX,EBP:2
 35208 add EBX,1
 35211 mov ECX,EBX
// self[1]=array
 35213 mov #ECX,EAX
 35215 rstack EAX,EBP:-2
 35219 rstack EBX,EBP:2
 35223 add EBX,2
 35226 mov ECX,EBX
// self[2]=self_size
 35228 mov #ECX,EAX
 35230 rstack EAX,EBP:-3
 35234 rstack EBX,EBP:2
 35238 add EBX,3
 35241 mov ECX,EBX
// self[3]=self_capacity
 35243 mov #ECX,EAX
 35245 rstack EAX,EBP:-1
 35249 leave 
 35250 ret 
__1540:
 35251 leave 
 35252 ret 
__1545:
 35253 db "could not reserve",0
vector_resize:
// vector_resize(self,newsize)
 35271 enter 5
__1547:
// assert_type arg #2 (float t)
 35274 push 35487
 35277 rstack EAX,EBP:2
// assert_type arg #1 (float self)
 35281 push EAX
 35283 mov ECX,2
// assert_type(...)
 35286 call 10123
 35289 add ESP,2
 35292 rstack EAX,EBP:2
 35296 add EAX,1
 35299 mov EBX,EAX
 35301 sstack EBP:-1,#EBX
 35305 rstack EAX,EBP:2
 35309 add EAX,2
 35312 mov EBX,EAX
 35314 sstack EBP:-2,#EBX
 35318 rstack EAX,EBP:2
 35322 add EAX,3
 35325 mov EBX,EAX
 35327 sstack EBP:-3,#EBX
 35331 rstack EAX,EBP:2
 35335 add EAX,4
 35338 mov EBX,EAX
 35340 sstack EBP:-4,#EBX
 35344 rstack EAX,EBP:3
 35348 rstack EBX,EBP:-4
 35352 mul EBX,EAX
 35354 mov EAX,EBX
 35356 sstack EBP:-5,EAX
__1549:
 35360 rstack EAX,EBP:-5
 35364 rstack EBX,EBP:-3
 35368 sub EBX,EAX
 35370 mov EAX,EBX
 35372 neg EAX
 35374 fsgn EAX,EAX
 35376 max EAX,0
// if (new_memsize>self_capacity)
 35379 cmp 0,EAX
 35382 jge 35410
 35385 rstack EAX,EBP:3
// vector_reserve arg #2 (float newcap)
 35389 push EAX
 35391 rstack EAX,EBP:2
// vector_reserve arg #1 (void* self)
 35395 push EAX
 35397 mov ECX,2
// vector_reserve(...)
 35400 call 35024
 35403 add ESP,2
// array=vector_reserve(self,newsize)
 35406 sstack EBP:-1,EAX
__1550:
__1548:
__1552:
 35410 rstack EAX,EBP:-1
// if (array)
 35414 cmp 0,EAX
 35417 jge 35443
 35420 rstack EAX,EBP:3
// self_size=newsize
 35424 sstack EBP:-2,EAX
 35428 rstack EAX,EBP:-2
 35432 rstack EBX,EBP:2
 35436 add EBX,2
 35439 mov ECX,EBX
// self[2]=self_size
 35441 mov #ECX,EAX
__1553:
__1551:
 35443 rstack EAX,EBP:-1
 35447 leave 
 35448 ret 
__1546:
 35449 leave 
 35450 ret 
vector_array:
// vector_array(self)
 35451 enter -0
__1555:
// assert_type arg #2 (float t)
 35454 push 35487
 35457 rstack EAX,EBP:2
// assert_type arg #1 (float self)
 35461 push EAX
 35463 mov ECX,2
// assert_type(...)
 35466 call 10123
 35469 add ESP,2
 35472 rstack EAX,EBP:2
 35476 add EAX,1
 35479 mov EBX,EAX
 35481 mov EAX,#EBX
 35483 leave 
 35484 ret 
__1554:
 35485 leave 
 35486 ret 
ZVECTOR_CONSTANTS:
typeof_vector:
 35487 db "vector"
 35493 db 0
ZVECTOR_VARS:
ZVECTOR_END:
libmarker13:
 35494 db 0
initInterrupts:
// initInterrupts(IT,first,size,handler,flags)
 35495 enter 1
__1557:
 35498 rstack EAX,EBP:4
 35502 cpuset 52,EAX
 35505 rstack EAX,EBP:2
 35509 lidtr EAX
 35511 rstack EAX,EBP:3
// init loop
 35515 sstack EBP:-1,EAX
__1559:
 35519 rstack EAX,EBP:-1
 35523 rstack EBX,EBP:4
 35527 sub EBX,EAX
 35529 mov EAX,EBX
 35531 fsgn EAX,EAX
// condition
 35533 max EAX,0
 35536 cmp 0,EAX
 35539 jz 35588
 35542 rstack EAX,EBP:6
 35546 push EAX
 35548 rstack EAX,EBP:5
 35552 push EAX
 35554 rstack EAX,EBP:-1
 35558 push EAX
 35560 rstack EAX,EBP:2
 35564 push EAX
 35566 mov ECX,4
// addInterruptHandler(...)
 35569 call 35590
 35572 add ESP,4
 35575 rstack EAX,EBP:-1
// loop step
 35579 inc EAX
 35581 sstack EBP:-1,EAX
 35585 jmp 35519
__1558:
__1556:
 35588 leave 
 35589 ret 
addInterruptHandler:
// addInterruptHandler(IT,num,func,flags)
 35590 enter 1
__1561:
 35593 rstack EAX,EBP:3
 35597 mov EBX,4
 35600 mul EBX,EAX
 35602 rstack EAX,EBP:2
 35606 add EAX,EBX
 35608 mov EBX,EAX
 35610 sstack EBP:-1,EBX
 35614 rstack EAX,EBP:4
 35618 rstack EBX,EBP:-1
 35622 add EBX,0
 35625 mov ECX,EBX
// pint[0]=func
 35627 mov #ECX,EAX
 35629 rstack EAX,EBP:-1
 35633 add EAX,1
 35636 mov EBX,EAX
// pint[1]=0
 35638 mov #EBX,0
 35641 rstack EAX,EBP:-1
 35645 add EAX,2
 35648 mov EBX,EAX
// pint[2]=0
 35650 mov #EBX,0
 35653 rstack EAX,EBP:5
 35657 rstack EBX,EBP:-1
 35661 add EBX,3
 35664 mov ECX,EBX
// pint[3]=flags
 35666 mov #ECX,EAX
__1560:
 35668 leave 
 35669 ret 
numInts:
 35670 db 0
 35671 alloc 128
intHandlersStart:
intHandlersEnd:
 35799 alloc 128
extendedModeEnable:
// extendedModeEnable()
 35927 enter -0
__1563:
 35930 stef 
__1562:
 35931 leave 
 35932 ret 
extendedModeDisable:
// extendedModeDisable()
 35933 enter -0
__1565:
 35936 clef 
__1564:
 35937 leave 
 35938 ret 
interruptsEnable:
// interruptsEnable()
 35939 enter -0
__1567:
 35942 sti 
__1566:
 35943 leave 
 35944 ret 
interruptsDisable:
// interruptsDisable()
 35945 enter -0
__1569:
 35948 cli 
__1568:
 35949 leave 
 35950 ret 
intnum_to_str:
// intnum_to_str(num)
 35951 enter -0
__1571:
__1573:
 35954 rstack EAX,EBP:2
 35958 mov EBX,0
 35961 sub EBX,EAX
 35963 fsgn EBX,EBX
 35965 max EBX,0
// if (num<0)
 35968 cmp 0,EBX
 35971 jge 35979
 35974 mov EAX,36053
 35977 leave 
 35978 ret 
__1574:
__1572:
__1576:
 35979 rstack EAX,EBP:2
 35983 mov EBX,31
 35986 sub EBX,EAX
 35988 neg EBX
 35990 fsgn EBX,EBX
 35992 max EBX,0
// if (num>31)
 35995 cmp 0,EBX
 35998 jge 36006
 36001 mov EAX,36053
 36004 leave 
 36005 ret 
__1577:
__1575:
 36006 rstack EAX,EBP:2
 36010 add EAX,36021
 36013 mov EBX,EAX
 36015 mov EAX,#EBX
 36017 leave 
 36018 ret 
__1570:
 36019 leave 
 36020 ret 
intnames:
 36021 db 36068
 36022 db 36074
 36023 db 36079
 36024 db 36104
 36025 db 36121
 36026 db 36136
 36027 db 36161
 36028 db 36194
 36029 db 36218
 36030 db 36231
 36031 db 36272
 36032 db 36294
 36033 db 36335
 36034 db 36375
 36035 db 36399
 36036 db 36442
 36037 db 36053
 36038 db 36466
 36039 db 36053
 36040 db 36053
 36041 db 36053
 36042 db 36053
 36043 db 36053
 36044 db 36501
 36045 db 36053
 36046 db 36053
 36047 db 36053
 36048 db 36053
 36049 db 36530
 36050 db 36552
 36051 db 36575
 36052 db 36592
str_int_default:
 36053 db "User interrupt",0
str_int0:
 36068 db "Reset",0
str_int1:
 36074 db "Halt",0
str_int2:
 36079 db "End of program execution",0
str_int3:
 36104 db "Division by zero",0
str_int4:
 36121 db "Unknown opcode",0
str_int5:
 36136 db "Internal processor error",0
str_int6:
 36161 db "Stack error (overflow/underflow)",0
str_int7:
 36194 db "Memory read/write fault",0
str_int8:
 36218 db "MemBus fault",0
str_int9:
 36231 db "Write access violation (page protection)",0
str_int10:
 36272 db "Port read/write fault",0
str_int11:
 36294 db "Page acccess violation (page protection)",0
str_int12:
 36335 db "Read access violation (page protection)",0
str_int13:
 36375 db "General processor fault",0
str_int14:
 36399 db "Execute access violation (page protection)",0
str_int15:
 36442 db "Address space violation",0
str_int17:
 36466 db "Frame instruction limit (GPU only)",0
str_int23:
 36501 db "String read error (GPU only)",0
str_int28:
 36530 db "Page read access trap",0
str_int29:
 36552 db "Page write access trap",0
str_int30:
 36575 db "Page access trap",0
str_int31:
 36592 db "Debug trap",0
libmarker14:
 36603 db 0
LIBKEYBOARD_CODE:
setKeyboard:
// setKeyboard(ptr)
 36604 enter -0
__1579:
 36607 rstack EAX,EBP:2
// ptrKB=ptr
 36611 mov #77222,EAX
__1578:
 36614 leave 
 36615 ret 
isPrint1:
// isPrint1(c)
 36616 enter -0
__1581:
 36619 rstack EAX,EBP:2
 36623 mov EBX,127
 36626 sub EBX,EAX
 36628 fsgn EBX,EBX
 36630 max EBX,0
 36633 rstack EAX,EBP:2
 36637 mov ECX,31
 36640 sub ECX,EAX
 36642 neg ECX
 36644 fsgn ECX,ECX
 36646 max ECX,0
 36649 and ECX,EBX
 36651 mov EAX,ECX
 36653 leave 
 36654 ret 
__1580:
 36655 leave 
 36656 ret 
readKey:
// readKey()
 36657 enter 1
__1583:
 36660 mov EAX,#77222
 36663 add EAX,1
 36666 sstack EBP:-1,#EAX
 36670 mov EAX,#77222
// *ptrKB=0
 36673 mov #EAX,0
 36676 rstack EAX,EBP:-1
 36680 leave 
 36681 ret 
__1582:
 36682 leave 
 36683 ret 
hasKey:
// hasKey()
 36684 enter -0
__1585:
 36687 mov EAX,#77222
 36690 mov EAX,#EAX
 36692 leave 
 36693 ret 
__1584:
 36694 leave 
 36695 ret 
readKB:
// readKB(func)
 36696 enter -0
__1587:
__1589:
 36699 mov ECX,0
// hasKey(...)
 36702 call 36684
// if (hasKey()
 36705 cmp 0,EAX
 36708 jz 36734
 36711 mov ECX,0
// readKey(...)
 36714 call 36657
 36717 push EAX
 36719 mov ECX,1
 36722 rstack EAX,EBP:2
// func(...)
 36726 call EAX
 36728 add ESP,1
 36731 jmp 36699
__1588:
__1586:
 36734 leave 
 36735 ret 
waitKey:
// waitKey()
 36736 enter -0
__1591:
__1593:
 36739 mov ECX,0
// hasKey(...)
 36742 call 36684
 36745 lneg EAX
// if (!hasKey()
 36747 cmp 0,EAX
 36750 jz 36757
 36753 nop 
 36754 jmp 36739
__1592:
 36757 mov ECX,0
// readKey(...)
 36760 call 36657
 36763 leave 
 36764 ret 
__1590:
 36765 leave 
 36766 ret 
readKeyTimed_delay_time:
 36767 db 0.5
readKeyTimed_repeat_time:
 36768 db 0.1
readKeyTimed_keyState:
 36769 db 0
readKeyTimed_lastSeen:
 36770 db 0
readKeyTimed_lastKey:
 36771 db 0
readKeyTimed:
// readKeyTimed()
 36772 enter 2
__1595:
__1597:
 36775 mov EAX,0
 36778 add EAX,#77222
// if (ptrKB[0])
 36781 cmp 0,#EAX
 36784 jge 37007
 36787 mov EAX,0
 36790 add EAX,#77222
 36793 mov EBX,#EAX
 36795 add EBX,#77222
 36798 sstack EBP:-2,#EBX
__1600:
 36802 rstack EAX,EBP:-2
 36806 mov EBX,#36771
 36809 sub EBX,EAX
 36811 fabs EBX,EBX
 36813 fsgn EBX,EBX
 36815 mov EAX,0
 36818 sub EAX,#36769
 36821 fabs EAX,EAX
 36823 fsgn EAX,EAX
 36825 lneg EAX
 36827 or EAX,EBX
// if ((readKeyTimed_keyState==0)||(C!=readKeyTimed_lastKey))
 36829 cmp 0,EAX
 36832 jge 36857
 36835 timer EAX
// readKeyTimed_lastSeen=EAX
 36837 mov #36770,EAX
 36840 rstack EAX,EBP:-2
// readKeyTimed_lastKey=C
 36844 mov #36771,EAX
// readKeyTimed_keyState=1
 36847 mov #36769,1
 36851 rstack EAX,EBP:-2
 36855 leave 
 36856 ret 
__1601:
__1599:
__1603:
 36857 mov EAX,1
 36860 sub EAX,#36769
 36863 fabs EAX,EAX
 36865 fsgn EAX,EAX
 36867 lneg EAX
// if (readKeyTimed_keyState==1)
 36869 cmp 0,EAX
 36872 jge 36934
 36875 timer EAX
// T=EAX
 36877 sstack EBP:-1,EAX
__1606:
 36881 mov EAX,#36770
 36884 neg EAX
 36886 rstack EBX,EBP:-1
 36890 add EBX,EAX
 36892 mov EAX,EBX
 36894 mov EBX,#36767
 36897 sub EBX,EAX
 36899 neg EBX
 36901 fsgn EBX,EBX
 36903 max EBX,0
// if ((T-readKeyTimed_lastSeen)>readKeyTimed_delay_time)
 36906 cmp 0,EBX
 36909 jge 36929
 36912 rstack EAX,EBP:-1
// readKeyTimed_lastSeen=T
 36916 mov #36770,EAX
// readKeyTimed_keyState=2
 36919 mov #36769,2
 36923 rstack EAX,EBP:-2
 36927 leave 
 36928 ret 
__1607:
__1605:
 36929 mov EAX,0
 36932 leave 
 36933 ret 
__1604:
__1602:
__1609:
 36934 mov EAX,2
 36937 sub EAX,#36769
 36940 fabs EAX,EAX
 36942 fsgn EAX,EAX
 36944 lneg EAX
// if (readKeyTimed_keyState==2)
 36946 cmp 0,EAX
 36949 jge 37007
 36952 timer EAX
// T=EAX
 36954 sstack EBP:-1,EAX
__1612:
 36958 mov EAX,#36770
 36961 neg EAX
 36963 rstack EBX,EBP:-1
 36967 add EBX,EAX
 36969 mov EAX,EBX
 36971 mov EBX,#36768
 36974 sub EBX,EAX
 36976 neg EBX
 36978 fsgn EBX,EBX
 36980 max EBX,0
// if ((T-readKeyTimed_lastSeen)>readKeyTimed_repeat_time)
 36983 cmp 0,EBX
 36986 jge 37002
 36989 rstack EAX,EBP:-1
// readKeyTimed_lastSeen=T
 36993 mov #36770,EAX
 36996 rstack EAX,EBP:-2
 37000 leave 
 37001 ret 
__1613:
__1611:
 37002 mov EAX,0
 37005 leave 
 37006 ret 
__1610:
__1608:
__1598:
__1596:
// readKeyTimed_keyState=0
 37007 mov #36769,0
 37011 mov EAX,0
 37014 leave 
 37015 ret 
__1594:
 37016 leave 
 37017 ret 
strLinebuff:
 37018 alloc 64
readline:
// readline()
 37082 enter 2
__1615:
 37085 mov ECX,0
// waitKey(...)
 37088 call 36736
 37091 sstack EBP:-1,EAX
 37095 sstack EBP:-2,37018
__1617:
 37100 rstack EAX,EBP:-2
 37104 mov EBX,37081
 37107 sub EBX,EAX
 37109 fsgn EBX,EBX
 37111 max EBX,0
 37114 rstack EAX,EBP:-1
 37118 mov ECX,10
 37121 sub ECX,EAX
 37123 fabs ECX,ECX
 37125 fsgn ECX,ECX
 37127 and ECX,EBX
// if ((C!=10)&&(P<strLinebuff+63)
 37129 cmp 0,ECX
 37132 jz 37166
 37135 rstack EAX,EBP:-1
 37139 rstack EBX,EBP:-2
 37143 mov ECX,EBX
 37145 inc EBX
 37147 sstack EBP:-2,EBX
// *P++=C
 37151 mov #ECX,EAX
 37153 mov ECX,0
// waitKey(...)
 37156 call 36736
// C=waitKey()
 37159 sstack EBP:-1,EAX
 37163 jmp 37100
__1616:
 37166 rstack EAX,EBP:-2
// *P=0
 37170 mov #EAX,0
 37173 mov EAX,37018
 37176 leave 
 37177 ret 
__1614:
 37178 leave 
 37179 ret 
LIBKEYBOARD_CONSTANTS:
LIBKEYBOARD_VARS:
LIBKEYBOARD_END:
libmarker15:
 37180 db 0
initPaging:
// initPaging(PT,size,flags,runlevel)
 37181 enter 1
__1619:
 37184 rstack EAX,EBP:3
 37188 push EAX
 37190 rstack EAX,EBP:2
 37194 push EAX
 37196 mov ECX,2
// setPageTable(...)
 37199 call 37416
 37202 add ESP,2
// init loop
 37205 sstack EBP:-1,-1
__1621:
 37210 rstack EAX,EBP:-1
 37214 rstack EBX,EBP:3
 37218 sub EBX,EAX
 37220 mov EAX,EBX
 37222 fsgn EAX,EAX
// condition
 37224 max EAX,0
 37227 cmp 0,EAX
 37230 jz 37285
 37233 rstack EAX,EBP:5
 37237 push EAX
 37239 rstack EAX,EBP:4
 37243 push EAX
 37245 rstack EAX,EBP:-1
 37249 push EAX
 37251 rstack EAX,EBP:-1
 37255 push EAX
 37257 rstack EAX,EBP:2
 37261 push EAX
 37263 mov ECX,5
// mapPage(...)
 37266 call 38154
 37269 add ESP,5
 37272 rstack EAX,EBP:-1
// loop step
 37276 inc EAX
 37278 sstack EBP:-1,EAX
 37282 jmp 37210
__1620:
__1618:
 37285 leave 
 37286 ret 
 37287 alloc 128
pg_paging_control:
 37415 db 0
setPageTable:
// setPageTable(PT,size)
 37416 enter -0
__1623:
 37419 rstack EAX,EBP:2
 37423 cpuset 37,EAX
 37426 rstack EAX,EBP:3
 37430 cpuset 38,EAX
__1622:
 37433 leave 
 37434 ret 
pagingEnable:
// pagingEnable()
 37435 enter -0
__1625:
 37438 stm 
__1624:
 37439 leave 
 37440 ret 
pagingDisable:
// pagingDisable()
 37441 enter -0
__1627:
 37444 clm 
__1626:
 37445 leave 
 37446 ret 
pg_paging_control_end:
 37447 db 0
 37448 alloc 128
getPage:
// getPage(PT,page)
 37576 enter -0
__1629:
 37579 rstack EAX,EBP:3
 37583 add EAX,1
 37586 mov EBX,EAX
// page=page+1
 37588 sstack EBP:3,EBX
 37592 rstack EAX,EBP:3
 37596 mul EAX,2
 37599 mov EBX,EAX
// page=page*2
 37601 sstack EBP:3,EBX
 37605 rstack EAX,EBP:3
 37609 rstack EBX,EBP:2
 37613 add EBX,EAX
 37615 mov EAX,EBX
// page=PT+page
 37617 sstack EBP:3,EAX
 37621 rstack EAX,EBP:3
 37625 leave 
 37626 ret 
__1628:
 37627 leave 
 37628 ret 
setPageFlags:
// setPageFlags(page,flags)
 37629 enter 1
__1631:
 37632 rstack EAX,EBP:2
 37636 sstack EBP:-1,#EAX
 37640 rstack EAX,EBP:-1
 37644 div EAX,256
 37647 mov EBX,EAX
// runlevel=runlevel/256
 37649 sstack EBP:-1,EBX
 37653 rstack EAX,EBP:-1
 37657 fint EAX
 37659 sstack EBP:-1,EAX
 37663 rstack EAX,EBP:-1
 37667 mov EBX,256
 37670 mul EBX,EAX
 37672 rstack EAX,EBP:3
 37676 add EAX,EBX
 37678 mov EBX,EAX
 37680 rstack EAX,EBP:2
// *page=flags+256*runlevel
 37684 mov #EAX,EBX
__1630:
 37686 leave 
 37687 ret 
getPageFlags:
// getPageFlags(page)
 37688 enter 1
__1633:
 37691 rstack EAX,EBP:2
 37695 sstack EBP:-1,#EAX
 37699 rstack EAX,EBP:-1
 37703 mod EAX,256
 37706 mov EBX,EAX
// flags=flags%256
 37708 sstack EBP:-1,EBX
 37712 rstack EAX,EBP:-1
 37716 fint EAX
 37718 sstack EBP:-1,EAX
 37722 rstack EAX,EBP:-1
 37726 leave 
 37727 ret 
__1632:
 37728 leave 
 37729 ret 
setPageRunLevel:
// setPageRunLevel(page,level)
 37730 enter 1
__1635:
 37733 rstack EAX,EBP:2
 37737 sstack EBP:-1,#EAX
 37741 rstack EAX,EBP:-1
 37745 mod EAX,256
 37748 mov EBX,EAX
// flags=flags%256
 37750 sstack EBP:-1,EBX
 37754 rstack EAX,EBP:-1
 37758 fint EAX
 37760 sstack EBP:-1,EAX
 37764 rstack EAX,EBP:3
 37768 mov EBX,256
 37771 mul EBX,EAX
 37773 rstack EAX,EBP:-1
 37777 add EAX,EBX
 37779 mov EBX,EAX
 37781 rstack EAX,EBP:2
// *page=flags+256*level
 37785 mov #EAX,EBX
__1634:
 37787 leave 
 37788 ret 
getPageRunlevel:
// getPageRunlevel(page)
 37789 enter 1
__1637:
 37792 rstack EAX,EBP:2
 37796 sstack EBP:-1,#EAX
 37800 rstack EAX,EBP:-1
 37804 div EAX,256
 37807 mov EBX,EAX
// runlevel=runlevel/256
 37809 sstack EBP:-1,EBX
 37813 rstack EAX,EBP:-1
 37817 fint EAX
 37819 sstack EBP:-1,EAX
 37823 rstack EAX,EBP:-1
 37827 leave 
 37828 ret 
__1636:
 37829 leave 
 37830 ret 
setPageMapping:
// setPageMapping(page,phys)
 37831 enter -0
__1639:
 37834 rstack EAX,EBP:3
 37838 rstack EBX,EBP:2
 37842 add EBX,1
 37845 mov ECX,EBX
// page[1]=phys
 37847 mov #ECX,EAX
__1638:
 37849 leave 
 37850 ret 
getPageMapping:
// getPageMapping(page)
 37851 enter -0
__1641:
 37854 rstack EAX,EBP:2
 37858 add EAX,1
 37861 mov EBX,EAX
 37863 mov EAX,#EBX
 37865 leave 
 37866 ret 
__1640:
 37867 leave 
 37868 ret 
reportPage:
// reportPage(pageTable,pageID)
 37869 enter 4
__1643:
 37872 rstack EAX,EBP:3
// getPage arg #2 (float page)
 37876 push EAX
 37878 rstack EAX,EBP:2
// getPage arg #1 (float PT)
 37882 push EAX
 37884 mov ECX,2
// getPage(...)
 37887 call 37576
 37890 add ESP,2
 37893 sstack EBP:-1,EAX
 37897 rstack EAX,EBP:-1
// getPageFlags arg #1 (float page)
 37901 push EAX
 37903 mov ECX,1
// getPageFlags(...)
 37906 call 37688
 37909 add ESP,1
 37912 sstack EBP:-2,EAX
 37916 rstack EAX,EBP:-1
// getPageRunlevel arg #1 (float page)
 37920 push EAX
 37922 mov ECX,1
// getPageRunlevel(...)
 37925 call 37789
 37928 add ESP,1
 37931 sstack EBP:-3,EAX
 37935 rstack EAX,EBP:-1
// getPageMapping arg #1 (float page)
 37939 push EAX
 37941 mov ECX,1
// getPageMapping(...)
 37944 call 37851
 37947 add ESP,1
 37950 sstack EBP:-4,EAX
 37954 rstack EAX,EBP:-4
// printf arg #3 (unknown)
 37958 push EAX
 37960 rstack EAX,EBP:3
// printf arg #2 (unknown)
 37964 push EAX
// printf arg #1 (char* format)
 37966 push 38045
 37969 mov ECX,3
// printf(...)
 37972 call 21851
 37975 add ESP,3
 37978 rstack EAX,EBP:-2
// printf arg #3 (unknown)
 37982 push EAX
 37984 rstack EAX,EBP:3
// printf arg #2 (unknown)
 37988 push EAX
// printf arg #1 (char* format)
 37990 push 38062
 37993 mov ECX,3
// printf(...)
 37996 call 21851
 37999 add ESP,3
 38002 rstack EAX,EBP:-3
// printf arg #3 (unknown)
 38006 push EAX
 38008 rstack EAX,EBP:3
// printf arg #2 (unknown)
 38012 push EAX
// printf arg #1 (char* format)
 38014 push 38028
 38017 mov ECX,3
// printf(...)
 38020 call 21851
 38023 add ESP,3
__1642:
 38026 leave 
 38027 ret 
__1646:
 38028 db "P%d: level = %d
",0
__1644:
 38045 db "P%d: phys  = %d
",0
__1645:
 38062 db "P%d: flags = %d
",0
toPage:
// toPage(addr)
 38079 enter -0
__1648:
 38082 rstack EAX,EBP:2
 38086 div EAX,128
 38089 mov EBX,EAX
// addr=addr/128
 38091 sstack EBP:2,EBX
 38095 rstack EAX,EBP:2
 38099 fint EAX
 38101 sstack EBP:2,EAX
 38105 rstack EAX,EBP:2
 38109 leave 
 38110 ret 
__1647:
 38111 leave 
 38112 ret 
copyPage:
// copyPage(pageto,pagefrom)
 38113 enter -0
__1650:
 38116 rstack EAX,EBP:3
 38120 mov EBX,EAX
 38122 inc EAX
 38124 sstack EBP:3,EAX
 38128 rstack EAX,EBP:2
 38132 mov ECX,EAX
 38134 inc EAX
 38136 sstack EBP:2,EAX
// *pageto++=*pagefrom++
 38140 mov #ECX,#EBX
 38142 rstack EAX,EBP:3
 38146 rstack EBX,EBP:2
// *pageto=*pagefrom
 38150 mov #EBX,#EAX
__1649:
 38152 leave 
 38153 ret 
mapPage:
// mapPage(PT,virt,phys,flags,runlevel)
 38154 enter 1
__1652:
 38157 rstack EAX,EBP:3
// getPage arg #2 (float page)
 38161 push EAX
 38163 rstack EAX,EBP:2
// getPage arg #1 (float PT)
 38167 push EAX
 38169 mov ECX,2
// getPage(...)
 38172 call 37576
 38175 add ESP,2
 38178 sstack EBP:-1,EAX
 38182 rstack EAX,EBP:4
// setPageMapping arg #2 (float phys)
 38186 push EAX
 38188 rstack EAX,EBP:-1
// setPageMapping arg #1 (float page)
 38192 push EAX
 38194 mov ECX,2
// setPageMapping(...)
 38197 call 37831
 38200 add ESP,2
 38203 rstack EAX,EBP:5
// setPageFlags arg #2 (float flags)
 38207 push EAX
 38209 rstack EAX,EBP:-1
// setPageFlags arg #1 (float page)
 38213 push EAX
 38215 mov ECX,2
// setPageFlags(...)
 38218 call 37629
 38221 add ESP,2
 38224 rstack EAX,EBP:6
// setPageRunLevel arg #2 (float level)
 38228 push EAX
 38230 rstack EAX,EBP:-1
// setPageRunLevel arg #1 (float page)
 38234 push EAX
 38236 mov ECX,2
// setPageRunLevel(...)
 38239 call 37730
 38242 add ESP,2
__1651:
 38245 leave 
 38246 ret 
setMemoryRunlevel:
// setMemoryRunlevel(PT,from,to,level)
 38247 enter 4
__1654:
 38250 rstack EAX,EBP:3
// toPage arg #1 (float addr)
 38254 push EAX
 38256 mov ECX,1
// toPage(...)
 38259 call 38079
 38262 add ESP,1
 38265 sstack EBP:-1,EAX
 38269 rstack EAX,EBP:4
// toPage arg #1 (float addr)
 38273 push EAX
 38275 mov ECX,1
// toPage(...)
 38278 call 38079
 38281 add ESP,1
 38284 sstack EBP:-2,EAX
 38288 rstack EAX,EBP:-1
// init loop
 38292 sstack EBP:-3,EAX
__1656:
 38296 rstack EAX,EBP:-3
 38300 rstack EBX,EBP:-2
 38304 sub EBX,EAX
 38306 mov EAX,EBX
 38308 fsgn EAX,EAX
// condition
 38310 max EAX,0
 38313 cmp 0,EAX
 38316 jz 38378
 38319 rstack EAX,EBP:-3
// getPage arg #2 (float page)
 38323 push EAX
 38325 rstack EAX,EBP:2
// getPage arg #1 (float PT)
 38329 push EAX
 38331 mov ECX,2
// getPage(...)
 38334 call 37576
 38337 add ESP,2
 38340 sstack EBP:-4,EAX
 38344 rstack EAX,EBP:5
// setPageRunLevel arg #2 (float level)
 38348 push EAX
 38350 rstack EAX,EBP:-4
// setPageRunLevel arg #1 (float page)
 38354 push EAX
 38356 mov ECX,2
// setPageRunLevel(...)
 38359 call 37730
 38362 add ESP,2
 38365 rstack EAX,EBP:-3
// loop step
 38369 inc EAX
 38371 sstack EBP:-3,EAX
 38375 jmp 38296
__1655:
__1653:
 38378 leave 
 38379 ret 
setMemoryMapping:
// setMemoryMapping(PT,from,to,target)
 38380 enter 7
__1658:
 38383 rstack EAX,EBP:3
 38387 sstack EBP:-1,EAX
 38391 rstack EAX,EBP:4
 38395 sstack EBP:-2,EAX
 38399 rstack EAX,EBP:5
 38403 sstack EBP:-3,EAX
 38407 rstack EAX,EBP:-1
 38411 neg EAX
 38413 mov EBX,EAX
 38415 rstack EAX,EBP:-3
 38419 add EAX,EBX
 38421 mov EBX,EAX
 38423 sstack EBP:-4,EBX
 38427 rstack EAX,EBP:-1
// init loop
 38431 sstack EBP:-5,EAX
__1660:
 38435 rstack EAX,EBP:-5
 38439 rstack EBX,EBP:-2
 38443 sub EBX,EAX
 38445 mov EAX,EBX
 38447 fsgn EAX,EAX
 38449 inc EAX
// condition
 38451 max EAX,0
 38454 cmp 0,EAX
 38457 jz 38535
 38460 rstack EAX,EBP:-5
// getPage arg #2 (float page)
 38464 push EAX
 38466 rstack EAX,EBP:2
// getPage arg #1 (float PT)
 38470 push EAX
 38472 mov ECX,2
// getPage(...)
 38475 call 37576
 38478 add ESP,2
 38481 sstack EBP:-6,EAX
 38485 rstack EAX,EBP:-4
 38489 rstack EBX,EBP:-5
 38493 add EBX,EAX
 38495 mov EAX,EBX
 38497 sstack EBP:-7,EAX
 38501 rstack EAX,EBP:-7
// setPageMapping arg #2 (float phys)
 38505 push EAX
 38507 rstack EAX,EBP:-6
// setPageMapping arg #1 (float page)
 38511 push EAX
 38513 mov ECX,2
// setPageMapping(...)
 38516 call 37831
 38519 add ESP,2
 38522 rstack EAX,EBP:-5
// loop step
 38526 inc EAX
 38528 sstack EBP:-5,EAX
 38532 jmp 38435
__1659:
__1657:
 38535 leave 
 38536 ret 
libmarker16:
 38537 db 0
typeof_proginfo:
 38538 db "proginfo",0
sizeof_proginfo:
 38547 db 4
proginfo_constructor:
// proginfo_constructor(this)
 38548 enter -0
__1662:
 38551 rstack EAX,EBP:2
 38555 add EAX,0
 38558 mov EBX,EAX
// this[0]=typeof_proginfo
 38560 mov #EBX,38538
 38563 rstack EAX,EBP:2
 38567 add EAX,1
 38570 mov EBX,EAX
// this[1]=0
 38572 mov #EBX,0
 38575 rstack EAX,EBP:2
 38579 add EAX,2
 38582 mov EBX,EAX
// this[2]=0
 38584 mov #EBX,0
 38587 rstack EAX,EBP:2
 38591 add EAX,3
 38594 mov EBX,EAX
// this[3]=0
 38596 mov #EBX,0
__1661:
 38599 leave 
 38600 ret 
proginfo_get_addr:
// proginfo_get_addr(this)
 38601 enter -0
__1664:
 38604 rstack EAX,EBP:2
 38608 add EAX,1
 38611 mov EBX,EAX
 38613 mov EAX,#EBX
 38615 leave 
 38616 ret 
__1663:
 38617 leave 
 38618 ret 
proginfo_get_size:
// proginfo_get_size(this)
 38619 enter -0
__1666:
 38622 rstack EAX,EBP:2
 38626 add EAX,2
 38629 mov EBX,EAX
 38631 mov EAX,#EBX
 38633 leave 
 38634 ret 
__1665:
 38635 leave 
 38636 ret 
proginfo_get_entry:
// proginfo_get_entry(this)
 38637 enter -0
__1668:
 38640 rstack EAX,EBP:2
 38644 add EAX,3
 38647 mov EBX,EAX
 38649 mov EAX,#EBX
 38651 leave 
 38652 ret 
__1667:
 38653 leave 
 38654 ret 
proginfo_set_addr:
// proginfo_set_addr(this,val)
 38655 enter -0
__1670:
 38658 rstack EAX,EBP:3
 38662 rstack EBX,EBP:2
 38666 add EBX,1
 38669 mov ECX,EBX
// this[1]=val
 38671 mov #ECX,EAX
__1669:
 38673 leave 
 38674 ret 
proginfo_set_size:
// proginfo_set_size(this,val)
 38675 enter -0
__1672:
 38678 rstack EAX,EBP:3
 38682 rstack EBX,EBP:2
 38686 add EBX,2
 38689 mov ECX,EBX
// this[2]=val
 38691 mov #ECX,EAX
__1671:
 38693 leave 
 38694 ret 
proginfo_set_entry:
// proginfo_set_entry(this,val)
 38695 enter -0
__1674:
 38698 rstack EAX,EBP:3
 38702 rstack EBX,EBP:2
 38706 add EBX,3
 38709 mov ECX,EBX
// this[3]=val
 38711 mov #ECX,EAX
__1673:
 38713 leave 
 38714 ret 
generateProcess:
// generateProcess(proginfo,procID)
 38715 enter 4
__1676:
// printf arg #1 (char* format)
 38718 push 38957
 38721 mov ECX,1
// printf(...)
 38724 call 21851
 38727 add ESP,1
// printf arg #1 (char* format)
 38730 push 39003
 38733 mov ECX,1
// printf(...)
 38736 call 21851
 38739 add ESP,1
// malloc arg #1 (float n)
 38742 push #25184
 38745 mov ECX,1
// malloc(...)
 38748 call 29334
 38751 add ESP,1
 38754 sstack EBP:-1,EAX
 38758 rstack EAX,EBP:-1
// process_h_constructor arg #1 (float this)
 38762 push EAX
 38764 mov ECX,1
// process_h_constructor(...)
 38767 call 25185
 38770 add ESP,1
 38773 rstack EAX,EBP:3
// process_h_set_procID arg #2 (float val)
 38777 push EAX
 38779 rstack EAX,EBP:-1
// process_h_set_procID arg #1 (float this)
 38783 push EAX
 38785 mov ECX,2
// process_h_set_procID(...)
 38788 call 25393
 38791 add ESP,2
// printf arg #1 (char* format)
 38794 push 38982
 38797 mov ECX,1
// printf(...)
 38800 call 21851
 38803 add ESP,1
 38806 rstack EAX,EBP:-1
 38810 push EAX
 38812 mov ECX,1
// process_setup_pagetable(...)
 38815 call 39855
 38818 add ESP,1
 38821 rstack EAX,EBP:2
// proginfo_get_addr arg #1 (float this)
 38825 push EAX
 38827 mov ECX,1
// proginfo_get_addr(...)
 38830 call 38601
 38833 add ESP,1
 38836 sstack EBP:-2,EAX
 38840 rstack EAX,EBP:2
// proginfo_get_size arg #1 (float this)
 38844 push EAX
 38846 mov ECX,1
// proginfo_get_size(...)
 38849 call 38619
 38852 add ESP,1
 38855 sstack EBP:-3,EAX
 38859 rstack EAX,EBP:-3
 38863 push EAX
 38865 rstack EAX,EBP:-2
 38869 push EAX
 38871 push 2048
 38874 rstack EAX,EBP:-1
 38878 push EAX
 38880 mov ECX,4
// process_insert_program(...)
 38883 call 41401
 38886 add ESP,4
 38889 sstack EBP:-4,EAX
 38893 rstack EAX,EBP:2
// process_h_set_proginfo arg #2 (float val)
 38897 push EAX
 38899 rstack EAX,EBP:-1
// process_h_set_proginfo arg #1 (float this)
 38903 push EAX
 38905 mov ECX,2
// process_h_set_proginfo(...)
 38908 call 25473
 38911 add ESP,2
// printf arg #1 (char* format)
 38914 push 38934
 38917 mov ECX,1
// printf(...)
 38920 call 21851
 38923 add ESP,1
 38926 rstack EAX,EBP:-1
 38930 leave 
 38931 ret 
__1675:
 38932 leave 
 38933 ret 
__1680:
 38934 db "generateProcess() end
",0
__1677:
 38957 db "generateProcess() begin
",0
__1679:
 38982 db "allocating pages...
",0
__1678:
 39003 db "constructing process...
",0
process_run:
// process_run(proc)
 39028 enter 4
__1682:
// printf arg #1 (char* format)
 39031 push 39249
 39034 mov ECX,1
// printf(...)
 39037 call 21851
 39040 add ESP,1
// printf arg #1 (char* format)
 39043 push 39210
 39046 mov ECX,1
// printf(...)
 39049 call 21851
 39052 add ESP,1
 39055 rstack EAX,EBP:2
// process_h_get_proginfo arg #1 (float this)
 39059 push EAX
 39061 mov ECX,1
// process_h_get_proginfo(...)
 39064 call 25357
 39067 add ESP,1
 39070 sstack EBP:-1,EAX
 39074 rstack EAX,EBP:-1
// proginfo_get_entry arg #1 (float this)
 39078 push EAX
 39080 mov ECX,1
// proginfo_get_entry(...)
 39083 call 38637
 39086 add ESP,1
 39089 sstack EBP:-2,EAX
 39093 rstack EAX,EBP:-2
// process_h_set_thread arg #2 (float val)
 39097 push EAX
 39099 rstack EAX,EBP:2
// process_h_set_thread arg #1 (float this)
 39103 push EAX
 39105 mov ECX,2
// process_h_set_thread(...)
 39108 call 25413
 39111 add ESP,2
 39114 sstack EBP:-3,EBP
 39118 sstack EBP:-4,ESP
 39122 push 39161
 39125 rstack EAX,EBP:-4
 39129 push EAX
 39131 rstack EAX,EBP:-3
 39135 push EAX
 39137 mov ECX,3
// setThreadExitPoint(...)
 39140 call 95402
 39143 add ESP,3
 39146 rstack EAX,EBP:2
// switchToProcessAndRun arg #1 (float proc_h)
 39150 push EAX
 39152 mov ECX,1
// switchToProcessAndRun(...)
 39155 call 360
 39158 add ESP,1
threadExitPos:
 39161 nop 
// lastProcess=0
 39162 mov #257,0
// printf arg #1 (char* format)
 39166 push 39192
 39169 mov ECX,1
// printf(...)
 39172 call 21851
 39175 add ESP,1
// printf arg #1 (char* format)
 39178 push 39230
 39181 mov ECX,1
// printf(...)
 39184 call 21851
 39187 add ESP,1
__1681:
 39190 leave 
 39191 ret 
__1685:
 39192 db "program complete
",0
__1684:
 39210 db "running program...
",0
__1686:
 39230 db "process_run() end
",0
__1683:
 39249 db "process_run() begin
",0
dbg_checkPagemap:
// dbg_checkPagemap(v_pagemap)
 39270 enter 3
__1688:
 39273 rstack EAX,EBP:2
// vector_size arg #1 (void* self)
 39277 push EAX
 39279 mov ECX,1
// vector_size(...)
 39282 call 33515
 39285 add ESP,1
 39288 sstack EBP:-1,EAX
 39292 rstack EAX,EBP:-1
 39296 div EAX,2
 39299 mov EBX,EAX
 39301 add EBX,-1
 39304 sstack EBP:-2,EBX
 39308 rstack EAX,EBP:-2
 39312 mul EAX,129
 39315 mov EBX,EAX
 39317 add EBX,-1
 39320 sstack EBP:-3,EBX
 39324 rstack EAX,EBP:-3
// printf arg #3 (unknown)
 39328 push EAX
 39330 rstack EAX,EBP:-2
// printf arg #2 (unknown)
 39334 push EAX
// printf arg #1 (char* format)
 39336 push 39350
 39339 mov ECX,3
// printf(...)
 39342 call 21851
 39345 add ESP,3
__1687:
 39348 leave 
 39349 ret 
__1689:
 39350 db "pagemap size is def + %d, max adr = %d
",0
dbg_checkRunlevel:
// dbg_checkRunlevel(v_pagemap,name,addr,expected)
 39390 enter 9
__1691:
 39393 rstack EAX,EBP:2
// vector_size arg #1 (void* self)
 39397 push EAX
 39399 mov ECX,1
// vector_size(...)
 39402 call 33515
 39405 add ESP,1
 39408 rstack EAX,EBP:-1
 39412 div EAX,2
 39415 mov EBX,EAX
 39417 add EBX,-1
 39420 sstack EBP:-2,EBX
 39424 rstack EAX,EBP:-2
 39428 mul EAX,129
 39431 mov EBX,EAX
 39433 add EBX,-1
 39436 sstack EBP:-3,EBX
 39440 rstack EAX,EBP:2
// vector_array arg #1 (void* self)
 39444 push EAX
 39446 mov ECX,1
// vector_array(...)
 39449 call 35451
 39452 add ESP,1
 39455 sstack EBP:-4,EAX
 39459 rstack EAX,EBP:4
// printf arg #3 (unknown)
 39463 push EAX
 39465 rstack EAX,EBP:3
// printf arg #2 (unknown)
 39469 push EAX
// printf arg #1 (char* format)
 39471 push 39796
 39474 mov ECX,3
// printf(...)
 39477 call 21851
 39480 add ESP,3
__1694:
 39483 rstack EAX,EBP:4
 39487 rstack EBX,EBP:-3
 39491 sub EBX,EAX
 39493 mov EAX,EBX
 39495 neg EAX
 39497 fsgn EAX,EAX
 39499 max EAX,0
// if (addr>maxadr)
 39502 cmp 0,EAX
 39505 jge 39532
 39508 rstack EAX,EBP:-3
// printf arg #3 (unknown)
 39512 push EAX
 39514 rstack EAX,EBP:4
// printf arg #2 (unknown)
 39518 push EAX
// printf arg #1 (char* format)
 39520 push 39825
 39523 mov ECX,3
// printf(...)
 39526 call 21851
 39529 add ESP,3
__1695:
__1693:
 39532 rstack EAX,EBP:4
// toPage arg #1 (float addr)
 39536 push EAX
 39538 mov ECX,1
// toPage(...)
 39541 call 38079
 39544 add ESP,1
 39547 sstack EBP:-5,EAX
 39551 rstack EAX,EBP:-5
 39555 add EAX,1
 39558 mov EBX,EAX
 39560 mul EBX,2
 39563 sstack EBP:-6,EBX
 39567 rstack EAX,EBP:-6
// vector_get arg #3 (float pos)
 39571 push EAX
// vector_get arg #2 (void* element)
 39573 push 0
 39576 rstack EAX,EBP:2
// vector_get arg #1 (void* self)
 39580 push EAX
 39582 mov ECX,3
// vector_get(...)
 39585 call 33598
 39588 add ESP,3
 39591 sstack EBP:-7,EAX
 39595 rstack EAX,EBP:-6
 39599 add EAX,1
 39602 mov EBX,EAX
// vector_get arg #3 (float pos)
 39604 push EBX
// vector_get arg #2 (void* element)
 39606 push 0
 39609 rstack EAX,EBP:2
// vector_get arg #1 (void* self)
 39613 push EAX
 39615 mov ECX,3
// vector_get(...)
 39618 call 33598
 39621 add ESP,3
 39624 sstack EBP:-8,EAX
 39628 mov EAX,SS:ESP
 39631 add EAX,-7
// getPageRunlevel arg #1 (float page)
 39634 push EAX
 39636 mov ECX,1
// getPageRunlevel(...)
 39639 call 37789
 39642 add ESP,1
 39645 sstack EBP:-9,EAX
 39649 rstack EAX,EBP:-8
// printf arg #3 (unknown)
 39653 push EAX
 39655 rstack EAX,EBP:-7
// printf arg #2 (unknown)
 39659 push EAX
// printf arg #1 (char* format)
 39661 push 39750
 39664 mov ECX,3
// printf(...)
 39667 call 21851
 39670 add ESP,3
 39673 rstack EAX,EBP:-9
// printf arg #2 (unknown)
 39677 push EAX
// printf arg #1 (char* format)
 39679 push 39817
 39682 mov ECX,2
// printf(...)
 39685 call 21851
 39688 add ESP,2
__1700:
 39691 rstack EAX,EBP:-9
 39695 rstack EBX,EBP:5
 39699 sub EBX,EAX
 39701 mov EAX,EBX
 39703 fabs EAX,EAX
 39705 fsgn EAX,EAX
 39707 lneg EAX
// if (rl==expected)
 39709 cmp 0,EAX
 39712 jge 39730
// printf arg #1 (char* format)
 39715 push 39764
 39718 mov ECX,1
// printf(...)
 39721 call 21851
 39724 add ESP,1
 39727 jmp 39748
__1703:
__1701:
__1705:
 39730 rstack EAX,EBP:5
// printf arg #2 (unknown)
 39734 push EAX
// printf arg #1 (char* format)
 39736 push 39773
 39739 mov ECX,2
// printf(...)
 39742 call 21851
 39745 add ESP,2
__1704:
__1699:
__1690:
 39748 leave 
 39749 ret 
__1697:
 39750 db "page [%d,%d]
",0
__1702:
 39764 db ", good.
",0
__1706:
 39773 db ", but %d was expected
",0
__1692:
 39796 db "checking [%s] @ %d:
",0
__1698:
 39817 db "rl = %d",0
__1696:
 39825 db "warning: adr > max
(%d > %d)
",0
process_setup_pagetable:
// process_setup_pagetable(proc)
 39855 enter 26
__1708:
// printf arg #1 (char* format)
 39858 push 40595
 39861 mov ECX,1
// printf(...)
 39864 call 21851
 39867 add ESP,1
 39870 rstack EAX,EBP:2
// process_h_get_pagemap arg #1 (float this)
 39874 push EAX
 39876 mov ECX,1
// process_h_get_pagemap(...)
 39879 call 25375
 39882 add ESP,1
 39885 sstack EBP:-1,EAX
 39889 sstack EBP:-2,61440
 39894 rstack EAX,EBP:-2
 39898 div EAX,128
 39901 mov EBX,EAX
// floor arg #1 (float A)
 39903 push EBX
 39905 mov ECX,1
// floor(...)
 39908 call 31069
 39911 add ESP,1
 39914 sstack EBP:-3,EAX
 39918 rstack EAX,EBP:-3
 39922 mul EAX,2
 39925 mov EBX,EAX
 39927 sstack EBP:-4,EBX
 39931 sstack EBP:-5,1
 39936 sstack EBP:-6,224
 39941 sstack EBP:-7,0
 39946 sstack EBP:-8,1
 39951 sstack EBP:-9,1
 39956 sstack EBP:-10,0
 39961 sstack EBP:-11,0
 39966 sstack EBP:-12,192
 39971 sstack EBP:-13,1
 39976 sstack EBP:-14,2
 39981 sstack EBP:-15,0
 39986 sstack EBP:-16,224
 39991 sstack EBP:-17,0
 39996 sstack EBP:-18,64
 40001 sstack EBP:-19,0
 40006 sstack EBP:-20,64
 40011 sstack EBP:-21,1
 40016 sstack EBP:-22,128
 40021 rstack EAX,EBP:-4
// vector_resize arg #2 (float newsize)
 40025 push EAX
 40027 rstack EAX,EBP:-1
// vector_resize arg #1 (void* self)
 40031 push EAX
 40033 mov ECX,2
// vector_resize(...)
 40036 call 35271
 40039 add ESP,2
 40042 rstack EAX,EBP:-1
// vector_array arg #1 (void* self)
 40046 push EAX
 40048 mov ECX,1
// vector_array(...)
 40051 call 35451
 40054 add ESP,1
 40057 sstack EBP:-23,EAX
 40061 rstack EAX,EBP:-5
 40065 push EAX
 40067 rstack EAX,EBP:-6
 40071 push EAX
 40073 push 0
 40076 push 0
 40079 push -1
 40082 rstack EAX,EBP:-23
 40086 push EAX
 40088 mov ECX,6
// mapPages(...)
 40091 call 40628
 40094 add ESP,6
 40097 rstack EAX,EBP:-7
 40101 push EAX
 40103 rstack EAX,EBP:-8
 40107 push EAX
 40109 push 0
 40112 push 0
 40115 push 0
 40118 rstack EAX,EBP:-23
 40122 push EAX
 40124 mov ECX,6
// mapPages(...)
 40127 call 40628
 40130 add ESP,6
 40133 rstack EAX,EBP:-9
 40137 push EAX
 40139 rstack EAX,EBP:-10
 40143 push EAX
 40145 push 1
 40148 push 1
 40151 push 1
 40154 rstack EAX,EBP:-23
 40158 push EAX
 40160 mov ECX,6
// mapPages(...)
 40163 call 40628
 40166 add ESP,6
 40169 rstack EAX,EBP:-11
 40173 push EAX
 40175 rstack EAX,EBP:-12
 40179 push EAX
 40181 push 2
 40184 push 8
 40187 push 2
 40190 rstack EAX,EBP:-23
 40194 push EAX
 40196 mov ECX,6
// mapPages(...)
 40199 call 40628
 40202 add ESP,6
 40205 rstack EAX,EBP:-17
 40209 push EAX
 40211 rstack EAX,EBP:-18
 40215 push EAX
 40217 push 10
 40220 push 11
 40223 push 10
 40226 rstack EAX,EBP:-23
 40230 push EAX
 40232 mov ECX,6
// mapPages(...)
 40235 call 40628
 40238 add ESP,6
// floor arg #1 (float A)
 40241 push 78.125
 40244 mov ECX,1
// floor(...)
 40247 call 31069
 40250 add ESP,1
 40253 sstack EBP:-24,EAX
 40257 rstack EAX,EBP:-3
 40261 add EAX,-1
 40264 mov EBX,EAX
 40266 sstack EBP:-25,EBX
 40270 rstack EAX,EBP:-15
 40274 push EAX
 40276 rstack EAX,EBP:-16
 40280 push EAX
 40282 rstack EAX,EBP:-24
 40286 push EAX
 40288 rstack EAX,EBP:-25
 40292 push EAX
 40294 rstack EAX,EBP:-24
 40298 push EAX
 40300 rstack EAX,EBP:-23
 40304 push EAX
 40306 mov ECX,6
// mapPages(...)
 40309 call 40628
 40312 add ESP,6
// floor arg #1 (float A)
 40315 push 728.078125
 40318 mov ECX,1
// floor(...)
 40321 call 31069
 40324 add ESP,1
// Istart=floor(pg_int_handlers/128)
 40327 sstack EBP:-24,EAX
// floor arg #1 (float A)
 40331 push 744.921875
 40334 mov ECX,1
// floor(...)
 40337 call 31069
 40340 add ESP,1
// Iend=floor(pg_int_handlers_end/128)
 40343 sstack EBP:-25,EAX
 40347 rstack EAX,EBP:-19
 40351 push EAX
 40353 rstack EAX,EBP:-20
 40357 push EAX
 40359 rstack EAX,EBP:-24
 40363 push EAX
 40365 rstack EAX,EBP:-25
 40369 push EAX
 40371 rstack EAX,EBP:-24
 40375 push EAX
 40377 rstack EAX,EBP:-23
 40381 push EAX
 40383 mov ECX,6
// mapPages(...)
 40386 call 40628
 40389 add ESP,6
// floor arg #1 (float A)
 40392 push 605.4921875
 40395 mov ECX,1
// floor(...)
 40398 call 31069
 40401 add ESP,1
// Istart=floor(stack_buffer/128)
 40404 sstack EBP:-24,EAX
// floor arg #1 (float A)
 40408 push 705.4921875
 40411 mov ECX,1
// floor(...)
 40414 call 31069
 40417 add ESP,1
// Iend=floor(stack_buffer_end/128)
 40420 sstack EBP:-25,EAX
 40424 rstack EAX,EBP:-21
 40428 push EAX
 40430 rstack EAX,EBP:-22
 40434 push EAX
 40436 rstack EAX,EBP:-24
 40440 push EAX
 40442 rstack EAX,EBP:-25
 40446 push EAX
 40448 rstack EAX,EBP:-24
 40452 push EAX
 40454 rstack EAX,EBP:-23
 40458 push EAX
 40460 mov ECX,6
// mapPages(...)
 40463 call 40628
 40466 add ESP,6
// process_h_set_free_pages_start arg #2 (float val)
 40469 push 16
 40472 rstack EAX,EBP:2
// process_h_set_free_pages_start arg #1 (float this)
 40476 push EAX
 40478 mov ECX,2
// process_h_set_free_pages_start(...)
 40481 call 25433
 40484 add ESP,2
// floor arg #1 (float A)
 40487 push 78.125
 40490 mov ECX,1
// floor(...)
 40493 call 31069
 40496 add ESP,1
 40499 sstack EBP:-26,EAX
 40503 rstack EAX,EBP:-26
// process_h_set_free_pages_end arg #2 (float val)
 40507 push EAX
 40509 rstack EAX,EBP:2
// process_h_set_free_pages_end arg #1 (float this)
 40513 push EAX
 40515 mov ECX,2
// process_h_set_free_pages_end(...)
 40518 call 25453
 40521 add ESP,2
// printf arg #1 (char* format)
 40524 push 40581
 40527 mov ECX,1
// printf(...)
 40530 call 21851
 40533 add ESP,1
// printf arg #1 (char* format)
 40536 push 40550
 40539 mov ECX,1
// printf(...)
 40542 call 21851
 40545 add ESP,1
__1707:
 40548 leave 
 40549 ret 
__1711:
 40550 db "process_setup_pagetable() end
",0
__1710:
 40581 db "pages mapped
",0
__1709:
 40595 db "process_setup_pagetable() begin
",0
mapPages:
// mapPages(map,idx_from,idx_to,phys_page,flags,runlevel)
 40628 enter 3
__1713:
 40631 rstack EAX,EBP:3
 40635 neg EAX
 40637 mov EBX,EAX
 40639 rstack EAX,EBP:5
 40643 add EAX,EBX
 40645 mov EBX,EAX
 40647 sstack EBP:-2,EBX
 40651 rstack EAX,EBP:3
// init loop
 40655 sstack EBP:-1,EAX
__1715:
 40659 rstack EAX,EBP:-1
 40663 rstack EBX,EBP:4
 40667 sub EBX,EAX
 40669 mov EAX,EBX
 40671 fsgn EAX,EAX
 40673 inc EAX
// condition
 40675 max EAX,0
 40678 cmp 0,EAX
 40681 jz 40752
 40684 rstack EAX,EBP:-2
 40688 rstack EBX,EBP:-1
 40692 add EBX,EAX
 40694 mov EAX,EBX
 40696 sstack EBP:-3,EAX
 40700 rstack EAX,EBP:7
// mapPage arg #5 (float runlevel)
 40704 push EAX
 40706 rstack EAX,EBP:6
// mapPage arg #4 (float flags)
 40710 push EAX
 40712 rstack EAX,EBP:-3
// mapPage arg #3 (float phys)
 40716 push EAX
 40718 rstack EAX,EBP:-1
// mapPage arg #2 (float virt)
 40722 push EAX
 40724 rstack EAX,EBP:2
// mapPage arg #1 (float PT)
 40728 push EAX
 40730 mov ECX,5
// mapPage(...)
 40733 call 38154
 40736 add ESP,5
 40739 rstack EAX,EBP:-1
// loop step
 40743 inc EAX
 40745 sstack EBP:-1,EAX
 40749 jmp 40659
__1714:
__1712:
 40752 leave 
 40753 ret 
mapPagesAlloc:
// mapPagesAlloc(map,idx_from,idx_to,flags,runlevel)
 40754 enter 5
__1717:
// printf arg #1 (char* format)
 40757 push 40989
 40760 mov ECX,1
// printf(...)
 40763 call 21851
 40766 add ESP,1
 40769 rstack EAX,EBP:3
// init loop
 40773 sstack EBP:-1,EAX
__1720:
 40777 rstack EAX,EBP:-1
 40781 rstack EBX,EBP:4
 40785 sub EBX,EAX
 40787 mov EAX,EBX
 40789 fsgn EAX,EAX
 40791 inc EAX
// condition
 40793 max EAX,0
 40796 cmp 0,EAX
 40799 jz 40952
 40802 mov ECX,0
// palloc(...)
 40805 call 25719
 40808 sstack EBP:-2,EAX
 40812 rstack EAX,EBP:-2
 40816 div EAX,128
 40819 mov EBX,EAX
// floor arg #1 (float A)
 40821 push EBX
 40823 mov ECX,1
// floor(...)
 40826 call 31069
 40829 add ESP,1
 40832 sstack EBP:-3,EAX
 40836 rstack EAX,EBP:3
 40840 neg EAX
 40842 mov EBX,EAX
 40844 rstack EAX,EBP:4
 40848 add EAX,EBX
 40850 mov EBX,EAX
 40852 sstack EBP:-4,EBX
 40856 rstack EAX,EBP:3
 40860 neg EAX
 40862 mov EBX,EAX
 40864 rstack EAX,EBP:-1
 40868 add EAX,EBX
 40870 mov EBX,EAX
 40872 sstack EBP:-5,EBX
 40876 rstack EAX,EBP:-4
// printf arg #3 (unknown)
 40880 push EAX
 40882 rstack EAX,EBP:-5
// printf arg #2 (unknown)
 40886 push EAX
// printf arg #1 (char* format)
 40888 push 40966
 40891 mov ECX,3
// printf(...)
 40894 call 21851
 40897 add ESP,3
 40900 rstack EAX,EBP:6
// mapPage arg #5 (float runlevel)
 40904 push EAX
 40906 rstack EAX,EBP:5
// mapPage arg #4 (float flags)
 40910 push EAX
 40912 rstack EAX,EBP:-3
// mapPage arg #3 (float phys)
 40916 push EAX
 40918 rstack EAX,EBP:-1
// mapPage arg #2 (float virt)
 40922 push EAX
 40924 rstack EAX,EBP:2
// mapPage arg #1 (float PT)
 40928 push EAX
 40930 mov ECX,5
// mapPage(...)
 40933 call 38154
 40936 add ESP,5
 40939 rstack EAX,EBP:-1
// loop step
 40943 inc EAX
 40945 sstack EBP:-1,EAX
 40949 jmp 40777
__1719:
// printf arg #1 (char* format)
 40952 push 40982
 40955 mov ECX,1
// printf(...)
 40958 call 21851
 40961 add ESP,1
__1716:
 40964 leave 
 40965 ret 
__1721:
 40966 db "[%d out of %d]",0
__1722:
 40982 db "done 
",0
__1718:
 40989 db "mapPagesAlloc()
",0
readProgramInfo:
// readProgramInfo(mem)
 41006 enter 5
__1724:
// printf arg #1 (char* format)
 41009 push 41316
 41012 mov ECX,1
// printf(...)
 41015 call 21851
 41018 add ESP,1
 41021 sstack EBP:-1,0
 41026 mov EAX,SS:ESP
 41029 add EAX,-1
 41032 push EAX
 41034 push 10
 41037 rstack EAX,EBP:2
 41041 push EAX
 41043 mov ECX,3
// findJmp(...)
 41046 call 95480
 41049 add ESP,3
 41052 sstack EBP:-2,EAX
 41056 sstack EBP:-3,0
__1727:
 41061 rstack EAX,EBP:-2
 41065 mov EBX,-1
 41068 sub EBX,EAX
 41070 fabs EBX,EBX
 41072 fsgn EBX,EBX
// if (offs!=-1)
 41074 cmp 0,EBX
 41077 jge 41141
 41080 rstack EAX,EBP:-2
// printf arg #3 (unknown)
 41084 push EAX
 41086 rstack EAX,EBP:-1
// printf arg #2 (unknown)
 41090 push EAX
// printf arg #1 (char* format)
 41092 push 41341
 41095 mov ECX,3
// printf(...)
 41098 call 21851
 41101 add ESP,3
__1731:
 41104 rstack EAX,EBP:-2
 41108 mov EBX,0
 41111 sub EBX,EAX
 41113 fabs EBX,EBX
 41115 fsgn EBX,EBX
 41117 lneg EBX
// if (offs==0)
 41119 cmp 0,EBX
 41122 jge 41138
 41125 rstack EAX,EBP:-2
 41129 add EAX,3
 41132 mov EBX,EAX
// offs_programsize=offs+3
 41134 sstack EBP:-3,EBX
__1732:
__1730:
 41138 jmp 41153
__1733:
__1728:
__1735:
// printf arg #1 (char* format)
 41141 push 41387
 41144 mov ECX,1
// printf(...)
 41147 call 21851
 41150 add ESP,1
__1734:
__1726:
 41153 rstack EAX,EBP:-3
 41157 rstack EBX,EBP:2
 41161 add EBX,EAX
 41163 mov EAX,EBX
 41165 sstack EBP:-4,#EAX
 41169 rstack EAX,EBP:-4
// printf arg #3 (unknown)
 41173 push EAX
 41175 rstack EAX,EBP:-3
// printf arg #2 (unknown)
 41179 push EAX
// printf arg #1 (char* format)
 41181 push 41292
 41184 mov ECX,3
// printf(...)
 41187 call 21851
 41190 add ESP,3
// malloc arg #1 (float n)
 41193 push #38547
 41196 mov ECX,1
// malloc(...)
 41199 call 29334
 41202 add ESP,1
 41205 sstack EBP:-5,EAX
 41209 rstack EAX,EBP:2
// proginfo_set_addr arg #2 (float val)
 41213 push EAX
 41215 rstack EAX,EBP:-5
// proginfo_set_addr arg #1 (float this)
 41219 push EAX
 41221 mov ECX,2
// proginfo_set_addr(...)
 41224 call 38655
 41227 add ESP,2
 41230 rstack EAX,EBP:-4
// proginfo_set_size arg #2 (float val)
 41234 push EAX
 41236 rstack EAX,EBP:-5
// proginfo_set_size arg #1 (float this)
 41240 push EAX
 41242 mov ECX,2
// proginfo_set_size(...)
 41245 call 38675
 41248 add ESP,2
 41251 rstack EAX,EBP:-1
// proginfo_set_entry arg #2 (float val)
 41255 push EAX
 41257 rstack EAX,EBP:-5
// proginfo_set_entry arg #1 (float this)
 41261 push EAX
 41263 mov ECX,2
// proginfo_set_entry(...)
 41266 call 38695
 41269 add ESP,2
// printf arg #1 (char* format)
 41272 push 41364
 41275 mov ECX,1
// printf(...)
 41278 call 21851
 41281 add ESP,1
 41284 rstack EAX,EBP:-5
 41288 leave 
 41289 ret 
__1723:
 41290 leave 
 41291 ret 
__1737:
 41292 db "programsize at %d = %d
",0
__1725:
 41316 db "readProgramInfo() begin
",0
__1729:
 41341 db "found jmp to %d at %d
",0
__1738:
 41364 db "readProgramInfo() end
",0
__1736:
 41387 db "no jmp found
",0
process_insert_program:
// process_insert_program(proc,dest_addr,src_addr,size)
 41401 enter 20
__1740:
// printf arg #1 (char* format)
 41404 push 42238
 41407 mov ECX,1
// printf(...)
 41410 call 21851
 41413 add ESP,1
// printf arg #1 (char* format)
 41416 push 42575
 41419 mov ECX,1
// printf(...)
 41422 call 21851
 41425 add ESP,1
 41428 sstack EBP:-1,850
 41433 rstack EAX,EBP:2
// process_h_get_pagemap arg #1 (float this)
 41437 push EAX
 41439 mov ECX,1
// process_h_get_pagemap(...)
 41442 call 25375
 41445 add ESP,1
 41448 sstack EBP:-2,EAX
 41452 rstack EAX,EBP:5
 41456 div EAX,128
 41459 mov EBX,EAX
// floor arg #1 (float A)
 41461 push EBX
 41463 mov ECX,1
// floor(...)
 41466 call 31069
 41469 add ESP,1
 41472 add EAX,-15
 41475 sstack EBP:-3,EAX
 41479 rstack EAX,EBP:2
// process_h_get_free_pages_start arg #1 (float this)
 41483 push EAX
 41485 mov ECX,1
// process_h_get_free_pages_start(...)
 41488 call 25321
 41491 add ESP,1
 41494 sstack EBP:-4,EAX
__1744:
 41498 rstack EAX,EBP:-4
 41502 mov EBX,-1
 41505 sub EBX,EAX
 41507 fabs EBX,EBX
 41509 fsgn EBX,EBX
 41511 lneg EBX
// if (pstart==-1)
 41513 cmp 0,EBX
 41516 jge 41542
 41519 rstack EAX,EBP:-1
// printf arg #2 (unknown)
 41523 push EAX
// printf arg #1 (char* format)
 41525 push 42389
 41528 mov ECX,2
// printf(...)
 41531 call 21851
 41534 add ESP,2
 41537 mov EAX,0
 41540 leave 
 41541 ret 
__1745:
__1743:
 41542 rstack EAX,EBP:2
// process_h_get_free_pages_end arg #1 (float this)
 41546 push EAX
 41548 mov ECX,1
// process_h_get_free_pages_end(...)
 41551 call 25339
 41554 add ESP,1
 41557 sstack EBP:-5,EAX
 41561 rstack EAX,EBP:-4
 41565 neg EAX
 41567 mov EBX,EAX
 41569 rstack EAX,EBP:-5
 41573 add EAX,EBX
 41575 mov EBX,EAX
 41577 sstack EBP:-6,EBX
 41581 rstack EAX,EBP:3
 41585 div EAX,128
 41588 mov EBX,EAX
// floor arg #1 (float A)
 41590 push EBX
 41592 mov ECX,1
// floor(...)
 41595 call 31069
 41598 add ESP,1
 41601 sstack EBP:-7,EAX
 41605 rstack EAX,EBP:-3
 41609 rstack EBX,EBP:-7
 41613 add EBX,EAX
 41615 mov EAX,EBX
 41617 sstack EBP:-8,EAX
__1748:
 41621 rstack EAX,EBP:-7
 41625 rstack EBX,EBP:-4
 41629 sub EBX,EAX
 41631 mov EAX,EBX
 41633 fsgn EAX,EAX
 41635 max EAX,0
// if (pdest_start<pstart)
 41638 cmp 0,EAX
 41641 jge 41679
 41644 rstack EAX,EBP:-4
// printf arg #4 (unknown)
 41648 push EAX
 41650 rstack EAX,EBP:-7
// printf arg #3 (unknown)
 41654 push EAX
 41656 rstack EAX,EBP:-1
// printf arg #2 (unknown)
 41660 push EAX
// printf arg #1 (char* format)
 41662 push 42300
 41665 mov ECX,4
// printf(...)
 41668 call 21851
 41671 add ESP,4
 41674 mov EAX,0
 41677 leave 
 41678 ret 
__1749:
__1747:
__1752:
 41679 rstack EAX,EBP:-8
 41683 rstack EBX,EBP:-5
 41687 sub EBX,EAX
 41689 mov EAX,EBX
 41691 neg EAX
 41693 fsgn EAX,EAX
 41695 max EAX,0
// if (pdest_end>pend)
 41698 cmp 0,EAX
 41701 jge 41739
 41704 rstack EAX,EBP:-5
// printf arg #4 (unknown)
 41708 push EAX
 41710 rstack EAX,EBP:-8
// printf arg #3 (unknown)
 41714 push EAX
 41716 rstack EAX,EBP:-1
// printf arg #2 (unknown)
 41720 push EAX
// printf arg #1 (char* format)
 41722 push 42497
 41725 mov ECX,4
// printf(...)
 41728 call 21851
 41731 add ESP,4
 41734 mov EAX,0
 41737 leave 
 41738 ret 
__1753:
__1751:
 41739 sstack EBP:-9,1
 41744 sstack EBP:-10,2
 41749 rstack EAX,EBP:-2
// vector_array arg #1 (void* self)
 41753 push EAX
 41755 mov ECX,1
// vector_array(...)
 41758 call 35451
 41761 add ESP,1
 41764 sstack EBP:-11,EAX
 41768 rstack EAX,EBP:-9
// mapPagesAlloc arg #5 (float runlevel)
 41772 push EAX
 41774 rstack EAX,EBP:-10
// mapPagesAlloc arg #4 (float flags)
 41778 push EAX
 41780 rstack EAX,EBP:-8
// mapPagesAlloc arg #3 (float idx_to)
 41784 push EAX
 41786 rstack EAX,EBP:-7
// mapPagesAlloc arg #2 (float idx_from)
 41790 push EAX
 41792 rstack EAX,EBP:-11
// mapPagesAlloc arg #1 (float map)
 41796 push EAX
 41798 mov ECX,5
// mapPagesAlloc(...)
 41801 call 40754
 41804 add ESP,5
 41807 rstack EAX,EBP:-8
// printf arg #3 (unknown)
 41811 push EAX
 41813 rstack EAX,EBP:-7
// printf arg #2 (unknown)
 41817 push EAX
// printf arg #1 (char* format)
 41819 push 42463
 41822 mov ECX,3
// printf(...)
 41825 call 21851
 41828 add ESP,3
 41831 rstack EAX,EBP:-7
// init loop
 41835 sstack EBP:-12,EAX
__1757:
 41839 rstack EAX,EBP:-12
 41843 rstack EBX,EBP:-8
 41847 sub EBX,EAX
 41849 mov EAX,EBX
 41851 fsgn EAX,EAX
// condition
 41853 max EAX,0
 41856 cmp 0,EAX
 41859 jz 42061
 41862 rstack EAX,EBP:-12
 41866 add EAX,1
 41869 mov EBX,EAX
 41871 mul EBX,2
 41874 rstack EAX,EBP:-11
 41878 add EAX,EBX
 41880 mov EBX,EAX
 41882 sstack EBP:-13,EBX
 41886 rstack EAX,EBP:-13
// getPageMapping arg #1 (float page)
 41890 push EAX
 41892 mov ECX,1
// getPageMapping(...)
 41895 call 37851
 41898 add ESP,1
 41901 sstack EBP:-14,EAX
 41905 rstack EAX,EBP:-14
 41909 mul EAX,128
 41912 mov EBX,EAX
 41914 sstack EBP:-15,EBX
 41918 rstack EAX,EBP:-12
 41922 mov EBX,128
 41925 mul EBX,EAX
 41927 rstack EAX,EBP:4
 41931 add EAX,EBX
 41933 mov EBX,EAX
 41935 sstack EBP:-16,EBX
 41939 rstack EAX,EBP:-7
 41943 neg EAX
 41945 mov EBX,EAX
 41947 rstack EAX,EBP:-8
 41951 add EAX,EBX
 41953 mov EBX,EAX
 41955 sstack EBP:-17,EBX
 41959 rstack EAX,EBP:-7
 41963 neg EAX
 41965 mov EBX,EAX
 41967 rstack EAX,EBP:-12
 41971 add EAX,EBX
 41973 mov EBX,EAX
 41975 sstack EBP:-18,EBX
 41979 rstack EAX,EBP:-17
// printf arg #3 (unknown)
 41983 push EAX
 41985 rstack EAX,EBP:-18
// printf arg #2 (unknown)
 41989 push EAX
// printf arg #1 (char* format)
 41991 push 40966
 41994 mov ECX,3
// printf(...)
 41997 call 21851
 42000 add ESP,3
 42003 rstack EAX,EBP:-15
 42007 sstack EBP:-19,EAX
 42011 rstack EAX,EBP:-19
 42015 add EAX,127
 42018 mov EBX,EAX
 42020 sstack EBP:-20,EBX
// memcpy arg #3 (float n)
 42024 push 128
 42027 rstack EAX,EBP:-16
// memcpy arg #2 (void* src)
 42031 push EAX
 42033 rstack EAX,EBP:-15
// memcpy arg #1 (void* dest)
 42037 push EAX
 42039 mov ECX,3
// memcpy(...)
 42042 call 10355
 42045 add ESP,3
 42048 rstack EAX,EBP:-12
// loop step
 42052 inc EAX
 42054 sstack EBP:-12,EAX
 42058 jmp 41839
__1756:
__1759:
 42061 rstack EAX,EBP:-8
 42065 rstack EBX,EBP:-5
 42069 sub EBX,EAX
 42071 mov EAX,EBX
 42073 fsgn EAX,EAX
 42075 max EAX,0
// if (pdest_end<pend)
 42078 cmp 0,EAX
 42081 jge 42151
 42084 rstack EAX,EBP:-8
 42088 add EAX,1
 42091 mov EBX,EAX
// pstart=pdest_end+1
 42093 sstack EBP:-4,EBX
 42097 rstack EAX,EBP:-4
// process_h_set_free_pages_start arg #1 (float this)
 42101 push EAX
 42103 mov ECX,1
// process_h_set_free_pages_start(...)
 42106 call 25433
 42109 add ESP,1
 42112 rstack EAX,EBP:-4
 42116 neg EAX
 42118 mov EBX,EAX
 42120 rstack EAX,EBP:-5
 42124 add EAX,EBX
 42126 mov EBX,EAX
// printf arg #3 (unknown)
 42128 push EBX
 42130 rstack EAX,EBP:-4
// printf arg #2 (unknown)
 42134 push EAX
// printf arg #1 (char* format)
 42136 push 42206
 42139 mov ECX,3
// printf(...)
 42142 call 21851
 42145 add ESP,3
 42148 jmp 42175
__1762:
__1760:
__1764:
// printf arg #1 (char* format)
 42151 push 42447
 42154 mov ECX,1
// printf(...)
 42157 call 21851
 42160 add ESP,1
// process_h_set_free_pages_start arg #1 (float this)
 42163 push -1
 42166 mov ECX,1
// process_h_set_free_pages_start(...)
 42169 call 25433
 42172 add ESP,1
__1763:
__1758:
// printf arg #1 (char* format)
 42175 push 42383
 42178 mov ECX,1
// printf(...)
 42181 call 21851
 42184 add ESP,1
// printf arg #1 (char* format)
 42187 push 42270
 42190 mov ECX,1
// printf(...)
 42193 call 21851
 42196 add ESP,1
 42199 mov EAX,1
 42202 leave 
 42203 ret 
__1739:
 42204 leave 
 42205 ret 
__1761:
 42206 db "next free page is %d (%d left)
",0
__1741:
 42238 db "process_insert_program() begin
",0
__1767:
 42270 db "process_insert_program() end
",0
__1750:
 42300 db "%mError: can't insert program: first needed page is %d, but first free page is %d
",0
__1766:
 42383 db "done
",0
__1746:
 42389 db "%mError: there are no free virtual pages in this process
",0
__1765:
 42447 db "used all pages
",0
__1755:
 42463 db "pdest_start = %d, pdest_end = %d
",0
__1754:
 42497 db "%mError: can't insert program: last need page is %d, bu last free page is %d
",0
__1742:
 42575 db "copying program...
",0
libmarker17:
 42595 db 0
typeof_args:
 42596 db "args",0
sizeof_args:
 42601 db 3
sizeof_arg_element:
 42602 db 2
args_str_arg:
 42603 db "arg",0
args_str_flag:
 42607 db "flag",0
args_constructor:
// args_constructor(this)
 42612 enter 2
__1769:
 42615 rstack EAX,EBP:2
 42619 add EAX,0
 42622 mov EBX,EAX
// this[0]=typeof_args
 42624 mov #EBX,42596
// malloc arg #1 (float n)
 42627 push #32206
 42630 mov ECX,1
// malloc(...)
 42633 call 29334
 42636 add ESP,1
 42639 sstack EBP:-1,EAX
// vector_constructor arg #2 (float element_size)
 42643 push #42602
 42646 rstack EAX,EBP:-1
// vector_constructor arg #1 (void* self)
 42650 push EAX
 42652 mov ECX,2
// vector_constructor(...)
 42655 call 32207
 42658 add ESP,2
 42661 rstack EAX,EBP:-1
 42665 rstack EBX,EBP:2
 42669 add EBX,1
 42672 mov ECX,EBX
// this[1]=v_args
 42674 mov #ECX,EAX
// malloc arg #1 (float n)
 42676 push #32206
 42679 mov ECX,1
// malloc(...)
 42682 call 29334
 42685 add ESP,1
 42688 sstack EBP:-2,EAX
// vector_constructor arg #2 (float element_size)
 42692 push 1
 42695 rstack EAX,EBP:-2
// vector_constructor arg #1 (void* self)
 42699 push EAX
 42701 mov ECX,2
// vector_constructor(...)
 42704 call 32207
 42707 add ESP,2
 42710 rstack EAX,EBP:-2
 42714 rstack EBX,EBP:2
 42718 add EBX,2
 42721 mov ECX,EBX
// this[2]=v_strings
 42723 mov #ECX,EAX
 42725 mov EAX,0
 42728 add EAX,42844
// args_buff[0]=0
 42731 mov #EAX,0
 42734 mov EAX,1
 42737 add EAX,42844
// args_buff[1]=0
 42740 mov #EAX,0
__1768:
 42743 leave 
 42744 ret 
is_flag:
// is_flag(str)
 42745 enter 1
__1771:
// strncmp arg #3 (float n)
 42748 push 1
// strncmp arg #2 (char* dest)
 42751 push 42792
 42754 rstack EAX,EBP:2
// strncmp arg #1 (char* src)
 42758 push EAX
 42760 mov ECX,3
// strncmp(...)
 42763 call 10866
 42766 add ESP,3
 42769 mov EBX,0
 42772 sub EBX,EAX
 42774 fabs EBX,EBX
 42776 fsgn EBX,EBX
 42778 lneg EBX
 42780 sstack EBP:-1,EBX
 42784 rstack EAX,EBP:-1
 42788 leave 
 42789 ret 
__1770:
 42790 leave 
 42791 ret 
__1772:
 42792 db "-",0
is_long_flag:
// is_long_flag(str)
 42794 enter 1
__1774:
// strncmp arg #3 (float n)
 42797 push 2
// strncmp arg #2 (char* dest)
 42800 push 42841
 42803 rstack EAX,EBP:2
// strncmp arg #1 (char* src)
 42807 push EAX
 42809 mov ECX,3
// strncmp(...)
 42812 call 10866
 42815 add ESP,3
 42818 mov EBX,0
 42821 sub EBX,EAX
 42823 fabs EBX,EBX
 42825 fsgn EBX,EBX
 42827 lneg EBX
 42829 sstack EBP:-1,EBX
 42833 rstack EAX,EBP:-1
 42837 leave 
 42838 ret 
__1773:
 42839 leave 
 42840 ret 
__1775:
 42841 db "--",0
args_buff:
 42844 alloc 2
args_str_buff:
 42846 alloc 2
args_debug_printX:
// args_debug_printX(this,buff)
 42848 enter 6
__1777:
// assert_arity arg #2 (float num_args)
 42851 push 2
// assert_arity arg #1 (float ecx_here)
 42854 push ECX
 42856 mov ECX,2
// assert_arity(...)
 42859 call 10245
 42862 add ESP,2
// assert_type arg #2 (float t)
 42865 push 42596
 42868 rstack EAX,EBP:2
// assert_type arg #1 (float self)
 42872 push EAX
 42874 mov ECX,2
// assert_type(...)
 42877 call 10123
 42880 add ESP,2
 42883 rstack EAX,EBP:2
 42887 add EAX,1
 42890 mov EBX,EAX
 42892 sstack EBP:-1,#EBX
 42896 rstack EAX,EBP:2
 42900 add EAX,2
 42903 mov EBX,EAX
 42905 sstack EBP:-2,#EBX
 42909 rstack EAX,EBP:3
 42913 add EAX,0
 42916 mov EBX,EAX
 42918 sstack EBP:-3,#EBX
 42922 rstack EAX,EBP:3
 42926 add EAX,1
 42929 mov EBX,EAX
 42931 sstack EBP:-4,#EBX
 42935 rstack EAX,EBP:-4
// vector_get arg #3 (float pos)
 42939 push EAX
// vector_get arg #2 (void* element)
 42941 push 0
 42944 rstack EAX,EBP:-2
// vector_get arg #1 (void* self)
 42948 push EAX
 42950 mov ECX,3
// vector_get(...)
 42953 call 33598
 42956 add ESP,3
 42959 sstack EBP:-5,EAX
 42963 sstack EBP:-6,0
__1779:
 42968 rstack EAX,EBP:-3
 42972 mov EBX,1
 42975 sub EBX,EAX
 42977 fabs EBX,EBX
 42979 fsgn EBX,EBX
 42981 lneg EBX
// if (a_type==1)
 42983 cmp 0,EBX
 42986 jge 42994
// type_str=args_str_arg
 42989 sstack EBP:-6,42603
__1780:
__1778:
__1782:
 42994 rstack EAX,EBP:-3
 42998 mov EBX,2
 43001 sub EBX,EAX
 43003 fabs EBX,EBX
 43005 fsgn EBX,EBX
 43007 lneg EBX
// if (a_type==2)
 43009 cmp 0,EBX
 43012 jge 43020
// type_str=args_str_flag
 43015 sstack EBP:-6,42607
__1783:
__1781:
 43020 rstack EAX,EBP:-5
// printf arg #6 (unknown)
 43024 push EAX
 43026 rstack EAX,EBP:-4
// printf arg #5 (unknown)
 43030 push EAX
 43032 rstack EAX,EBP:-6
// printf arg #4 (unknown)
 43036 push EAX
 43038 rstack EAX,EBP:-3
// printf arg #3 (unknown)
 43042 push EAX
// printf arg #2 (unknown)
 43044 push 990
// printf arg #1 (char* format)
 43047 push 43061
 43050 mov ECX,6
// printf(...)
 43053 call 21851
 43056 add ESP,6
__1776:
 43059 leave 
 43060 ret 
__1784:
 43061 db "%m  type %d [%s]
  str %d [%s]
",0
args_debug_printBuff:
// args_debug_printBuff(this)
 43093 enter -0
__1786:
// assert_arity arg #2 (float num_args)
 43096 push 1
// assert_arity arg #1 (float ecx_here)
 43099 push ECX
 43101 mov ECX,2
// assert_arity(...)
 43104 call 10245
 43107 add ESP,2
// assert_type arg #2 (float t)
 43110 push 42596
 43113 rstack EAX,EBP:2
// assert_type arg #1 (float self)
 43117 push EAX
 43119 mov ECX,2
// assert_type(...)
 43122 call 10123
 43125 add ESP,2
// args_debug_printX arg #2 (float buff)
 43128 push 42844
 43131 rstack EAX,EBP:2
// args_debug_printX arg #1 (float this)
 43135 push EAX
 43137 mov ECX,2
// args_debug_printX(...)
 43140 call 42848
 43143 add ESP,2
__1785:
 43146 leave 
 43147 ret 
args_debug_printVX:
// args_debug_printVX(this,idx)
 43148 enter 2
__1788:
// assert_arity arg #2 (float num_args)
 43151 push 2
// assert_arity arg #1 (float ecx_here)
 43154 push ECX
 43156 mov ECX,2
// assert_arity(...)
 43159 call 10245
 43162 add ESP,2
// assert_type arg #2 (float t)
 43165 push 42596
 43168 rstack EAX,EBP:2
// assert_type arg #1 (float self)
 43172 push EAX
 43174 mov ECX,2
// assert_type(...)
 43177 call 10123
 43180 add ESP,2
 43183 rstack EAX,EBP:2
 43187 add EAX,1
 43190 mov EBX,EAX
 43192 sstack EBP:-1,#EBX
 43196 rstack EAX,EBP:3
// printf arg #3 (unknown)
 43200 push EAX
// printf arg #2 (unknown)
 43202 push 970
// printf arg #1 (char* format)
 43205 push 43265
 43208 mov ECX,3
// printf(...)
 43211 call 21851
 43214 add ESP,3
 43217 rstack EAX,EBP:3
// vector_get_ref arg #2 (float pos)
 43221 push EAX
 43223 rstack EAX,EBP:-1
// vector_get_ref arg #1 (void* self)
 43227 push EAX
 43229 mov ECX,2
// vector_get_ref(...)
 43232 call 33851
 43235 add ESP,2
 43238 sstack EBP:-2,EAX
 43242 rstack EAX,EBP:-2
// args_debug_printX arg #2 (float buff)
 43246 push EAX
 43248 rstack EAX,EBP:2
// args_debug_printX arg #1 (float this)
 43252 push EAX
 43254 mov ECX,2
// args_debug_printX(...)
 43257 call 42848
 43260 add ESP,2
__1787:
 43263 leave 
 43264 ret 
__1789:
 43265 db "%mV[%d]
",0
args_debug_printV:
// args_debug_printV(this)
 43274 enter 3
__1791:
// assert_arity arg #2 (float num_args)
 43277 push 1
// assert_arity arg #1 (float ecx_here)
 43280 push ECX
 43282 mov ECX,2
// assert_arity(...)
 43285 call 10245
 43288 add ESP,2
// assert_type arg #2 (float t)
 43291 push 42596
 43294 rstack EAX,EBP:2
// assert_type arg #1 (float self)
 43298 push EAX
 43300 mov ECX,2
// assert_type(...)
 43303 call 10123
 43306 add ESP,2
 43309 rstack EAX,EBP:2
 43313 add EAX,1
 43316 mov EBX,EAX
 43318 sstack EBP:-1,#EBX
 43322 rstack EAX,EBP:-1
// vector_size arg #1 (void* self)
 43326 push EAX
 43328 mov ECX,1
// vector_size(...)
 43331 call 33515
 43334 add ESP,1
 43337 sstack EBP:-2,EAX
// init loop
 43341 sstack EBP:-3,0
__1793:
 43346 rstack EAX,EBP:-3
 43350 rstack EBX,EBP:-2
 43354 sub EBX,EAX
 43356 mov EAX,EBX
 43358 fsgn EAX,EAX
// condition
 43360 max EAX,0
 43363 cmp 0,EAX
 43366 jz 43403
 43369 rstack EAX,EBP:-3
// args_debug_printVX arg #2 (float idx)
 43373 push EAX
 43375 rstack EAX,EBP:2
// args_debug_printVX arg #1 (float this)
 43379 push EAX
 43381 mov ECX,2
// args_debug_printVX(...)
 43384 call 43148
 43387 add ESP,2
 43390 rstack EAX,EBP:-3
// loop step
 43394 inc EAX
 43396 sstack EBP:-3,EAX
 43400 jmp 43346
__1792:
__1790:
 43403 leave 
 43404 ret 
args_add_x:
// args_add_x(this,str,type)
 43405 enter 3
__1795:
// assert_arity arg #2 (float num_args)
 43408 push 3
// assert_arity arg #1 (float ecx_here)
 43411 push ECX
 43413 mov ECX,2
// assert_arity(...)
 43416 call 10245
 43419 add ESP,2
// assert_type arg #2 (float t)
 43422 push 42596
 43425 rstack EAX,EBP:2
// assert_type arg #1 (float self)
 43429 push EAX
 43431 mov ECX,2
// assert_type(...)
 43434 call 10123
 43437 add ESP,2
 43440 rstack EAX,EBP:2
 43444 add EAX,1
 43447 mov EBX,EAX
 43449 sstack EBP:-1,#EBX
 43453 rstack EAX,EBP:2
 43457 add EAX,2
 43460 mov EBX,EAX
 43462 sstack EBP:-2,#EBX
 43466 rstack EAX,EBP:-2
// vector_size arg #1 (void* self)
 43470 push EAX
 43472 mov ECX,1
// vector_size(...)
 43475 call 33515
 43478 add ESP,1
 43481 sstack EBP:-3,EAX
 43485 rstack EAX,EBP:3
// vector_push arg #2 (void* element)
 43489 push EAX
 43491 rstack EAX,EBP:-2
// vector_push arg #1 (void* self)
 43495 push EAX
 43497 mov ECX,2
// vector_push(...)
 43500 call 32926
 43503 add ESP,2
 43506 rstack EAX,EBP:4
 43510 mov EBX,0
 43513 add EBX,42844
// args_buff[0]=type
 43516 mov #EBX,EAX
 43518 rstack EAX,EBP:-3
 43522 mov EBX,1
 43525 add EBX,42844
// args_buff[1]=idx
 43528 mov #EBX,EAX
// vector_push arg #2 (void* element)
 43530 push 42844
 43533 rstack EAX,EBP:-1
// vector_push arg #1 (void* self)
 43537 push EAX
 43539 mov ECX,2
// vector_push(...)
 43542 call 32926
 43545 add ESP,2
__1794:
 43548 leave 
 43549 ret 
args_collect:
// args_collect(this,argc,argv)
 43550 enter 5
__1797:
// assert_arity arg #2 (float num_args)
 43553 push 3
// assert_arity arg #1 (float ecx_here)
 43556 push ECX
 43558 mov ECX,2
// assert_arity(...)
 43561 call 10245
 43564 add ESP,2
// assert_type arg #2 (float t)
 43567 push 42596
 43570 rstack EAX,EBP:2
// assert_type arg #1 (float self)
 43574 push EAX
 43576 mov ECX,2
// assert_type(...)
 43579 call 10123
 43582 add ESP,2
// init loop
 43585 sstack EBP:-1,0
__1799:
 43590 rstack EAX,EBP:-1
 43594 rstack EBX,EBP:3
 43598 sub EBX,EAX
 43600 mov EAX,EBX
 43602 fsgn EAX,EAX
// condition
 43604 max EAX,0
 43607 cmp 0,EAX
 43610 jz 43931
 43613 rstack EAX,EBP:-1
 43617 rstack EBX,EBP:4
 43621 add EBX,EAX
 43623 mov EAX,EBX
 43625 sstack EBP:-2,#EAX
__1801:
 43629 rstack EAX,EBP:-2
// is_long_flag arg #1 (float str)
 43633 push EAX
 43635 mov ECX,1
// is_long_flag(...)
 43638 call 42794
 43641 add ESP,1
// if (is_long_flag(str))
 43644 cmp 0,EAX
 43647 jge 43709
 43650 rstack EAX,EBP:-2
 43654 add EAX,2
 43657 mov EBX,EAX
// str=str+2
 43659 sstack EBP:-2,EBX
 43663 rstack EAX,EBP:-2
// stralloc arg #1 (float S)
 43667 push EAX
 43669 mov ECX,1
// stralloc(...)
 43672 call 17199
 43675 add ESP,1
// str=stralloc(str)
 43678 sstack EBP:-2,EAX
// args_add_x arg #3 (float type)
 43682 push 2
 43685 rstack EAX,EBP:-2
// args_add_x arg #2 (float str)
 43689 push EAX
 43691 rstack EAX,EBP:2
// args_add_x arg #1 (float this)
 43695 push EAX
 43697 mov ECX,3
// args_add_x(...)
 43700 call 43405
 43703 add ESP,3
 43706 jmp 43918
__1803:
__1802:
__1805:
__1807:
 43709 rstack EAX,EBP:-2
// is_flag arg #1 (float str)
 43713 push EAX
 43715 mov ECX,1
// is_flag(...)
 43718 call 42745
 43721 add ESP,1
// if (is_flag(str))
 43724 cmp 0,EAX
 43727 jge 43875
 43730 rstack EAX,EBP:-2
 43734 add EAX,1
 43737 mov EBX,EAX
// str=str+1
 43739 sstack EBP:-2,EBX
 43743 rstack EAX,EBP:-2
// strlen arg #1 (char* str)
 43747 push EAX
 43749 mov ECX,1
// strlen(...)
 43752 call 11121
 43755 add ESP,1
 43758 sstack EBP:-3,EAX
// init loop
 43762 sstack EBP:-4,0
__1810:
 43767 rstack EAX,EBP:-4
 43771 rstack EBX,EBP:-3
 43775 sub EBX,EAX
 43777 mov EAX,EBX
 43779 fsgn EAX,EAX
// condition
 43781 max EAX,0
 43784 cmp 0,EAX
 43787 jz 43872
 43790 rstack EAX,EBP:-4
 43794 rstack EBX,EBP:-2
 43798 add EBX,EAX
 43800 mov EAX,EBX
 43802 mov EBX,0
 43805 add EBX,42846
// args_str_buff[0]=str[J]
 43808 mov #EBX,#EAX
 43810 mov EAX,1
 43813 add EAX,42846
// args_str_buff[1]=0
 43816 mov #EAX,0
// stralloc arg #1 (float S)
 43819 push 42846
 43822 mov ECX,1
// stralloc(...)
 43825 call 17199
 43828 add ESP,1
 43831 sstack EBP:-5,EAX
// args_add_x arg #3 (float type)
 43835 push 2
 43838 rstack EAX,EBP:-5
// args_add_x arg #2 (float str)
 43842 push EAX
 43844 rstack EAX,EBP:2
// args_add_x arg #1 (float this)
 43848 push EAX
 43850 mov ECX,3
// args_add_x(...)
 43853 call 43405
 43856 add ESP,3
 43859 rstack EAX,EBP:-4
// loop step
 43863 inc EAX
 43865 sstack EBP:-4,EAX
 43869 jmp 43767
__1809:
 43872 jmp 43918
__1811:
__1808:
__1813:
 43875 rstack EAX,EBP:-2
// stralloc arg #1 (float S)
 43879 push EAX
 43881 mov ECX,1
// stralloc(...)
 43884 call 17199
 43887 add ESP,1
// str=stralloc(str)
 43890 sstack EBP:-2,EAX
// args_add_x arg #3 (float type)
 43894 push 1
 43897 rstack EAX,EBP:-2
// args_add_x arg #2 (float str)
 43901 push EAX
 43903 rstack EAX,EBP:2
// args_add_x arg #1 (float this)
 43907 push EAX
 43909 mov ECX,3
// args_add_x(...)
 43912 call 43405
 43915 add ESP,3
__1812:
__1806:
__1804:
__1800:
 43918 rstack EAX,EBP:-1
// loop step
 43922 inc EAX
 43924 sstack EBP:-1,EAX
 43928 jmp 43590
__1798:
__1796:
 43931 leave 
 43932 ret 
args_helper_getX_t:
// args_helper_getX_t(this,type)
 43933 enter 4
__1815:
// assert_arity arg #2 (float num_args)
 43936 push 2
// assert_arity arg #1 (float ecx_here)
 43939 push ECX
 43941 mov ECX,2
// assert_arity(...)
 43944 call 10245
 43947 add ESP,2
// assert_type arg #2 (float t)
 43950 push 42596
 43953 rstack EAX,EBP:2
// assert_type arg #1 (float self)
 43957 push EAX
 43959 mov ECX,2
// assert_type(...)
 43962 call 10123
 43965 add ESP,2
 43968 rstack EAX,EBP:2
 43972 add EAX,1
 43975 mov EBX,EAX
 43977 sstack EBP:-1,#EBX
 43981 rstack EAX,EBP:2
 43985 add EAX,2
 43988 mov EBX,EAX
 43990 sstack EBP:-2,#EBX
 43994 rstack EAX,EBP:-1
// vector_size arg #1 (void* self)
 43998 push EAX
 44000 mov ECX,1
// vector_size(...)
 44003 call 33515
 44006 add ESP,1
 44009 sstack EBP:-4,EAX
// init loop
 44013 sstack EBP:-3,0
__1817:
 44018 rstack EAX,EBP:-3
 44022 rstack EBX,EBP:-4
 44026 sub EBX,EAX
 44028 mov EAX,EBX
 44030 fsgn EAX,EAX
// condition
 44032 max EAX,0
 44035 cmp 0,EAX
 44038 jz 44110
 44041 rstack EAX,EBP:-3
// vector_get arg #3 (float pos)
 44045 push EAX
// vector_get arg #2 (void* element)
 44047 push 42844
 44050 rstack EAX,EBP:-1
// vector_get arg #1 (void* self)
 44054 push EAX
 44056 mov ECX,3
// vector_get(...)
 44059 call 33598
 44062 add ESP,3
__1819:
 44065 mov EAX,0
 44068 add EAX,42844
 44071 rstack EBX,EBP:3
 44075 sub EBX,#EAX
 44077 mov EAX,EBX
 44079 fabs EAX,EAX
 44081 fsgn EAX,EAX
 44083 lneg EAX
// if (args_buff[0]==type)
 44085 cmp 0,EAX
 44088 jge 44097
 44091 rstack EAX,EBP:-3
 44095 leave 
 44096 ret 
__1820:
__1818:
 44097 rstack EAX,EBP:-3
// loop step
 44101 inc EAX
 44103 sstack EBP:-3,EAX
 44107 jmp 44018
__1816:
 44110 mov EAX,-1
 44113 leave 
 44114 ret 
__1814:
 44115 leave 
 44116 ret 
args_helper_getX_ts:
// args_helper_getX_ts(this,type,str)
 44117 enter 6
__1822:
// assert_arity arg #2 (float num_args)
 44120 push 3
// assert_arity arg #1 (float ecx_here)
 44123 push ECX
 44125 mov ECX,2
// assert_arity(...)
 44128 call 10245
 44131 add ESP,2
// assert_type arg #2 (float t)
 44134 push 42596
 44137 rstack EAX,EBP:2
// assert_type arg #1 (float self)
 44141 push EAX
 44143 mov ECX,2
// assert_type(...)
 44146 call 10123
 44149 add ESP,2
 44152 rstack EAX,EBP:2
 44156 add EAX,1
 44159 mov EBX,EAX
 44161 sstack EBP:-1,#EBX
 44165 rstack EAX,EBP:2
 44169 add EAX,2
 44172 mov EBX,EAX
 44174 sstack EBP:-2,#EBX
 44178 rstack EAX,EBP:-1
// vector_size arg #1 (void* self)
 44182 push EAX
 44184 mov ECX,1
// vector_size(...)
 44187 call 33515
 44190 add ESP,1
 44193 sstack EBP:-4,EAX
// init loop
 44197 sstack EBP:-3,0
__1824:
 44202 rstack EAX,EBP:-3
 44206 rstack EBX,EBP:-4
 44210 sub EBX,EAX
 44212 mov EAX,EBX
 44214 fsgn EAX,EAX
// condition
 44216 max EAX,0
 44219 cmp 0,EAX
 44222 jz 44370
 44225 rstack EAX,EBP:-3
// vector_get arg #3 (float pos)
 44229 push EAX
// vector_get arg #2 (void* element)
 44231 push 42844
 44234 rstack EAX,EBP:-1
// vector_get arg #1 (void* self)
 44238 push EAX
 44240 mov ECX,3
// vector_get(...)
 44243 call 33598
 44246 add ESP,3
__1826:
 44249 mov EAX,0
 44252 add EAX,42844
 44255 rstack EBX,EBP:3
 44259 sub EBX,#EAX
 44261 mov EAX,EBX
 44263 fabs EAX,EAX
 44265 fsgn EAX,EAX
 44267 lneg EAX
// if (args_buff[0]==type)
 44269 cmp 0,EAX
 44272 jge 44357
 44275 mov EAX,1
 44278 add EAX,42844
 44281 sstack EBP:-5,#EAX
 44285 rstack EAX,EBP:-5
// vector_get arg #3 (float pos)
 44289 push EAX
// vector_get arg #2 (void* element)
 44291 push 0
 44294 rstack EAX,EBP:-2
// vector_get arg #1 (void* self)
 44298 push EAX
 44300 mov ECX,3
// vector_get(...)
 44303 call 33598
 44306 add ESP,3
 44309 sstack EBP:-6,EAX
__1829:
 44313 rstack EAX,EBP:4
// strcmp arg #2 (char* dest)
 44317 push EAX
 44319 rstack EAX,EBP:-6
// strcmp arg #1 (char* src)
 44323 push EAX
 44325 mov ECX,2
// strcmp(...)
 44328 call 10763
 44331 add ESP,2
 44334 mov EBX,0
 44337 sub EBX,EAX
 44339 fabs EBX,EBX
 44341 fsgn EBX,EBX
 44343 lneg EBX
// if (strcmp(str2,str)==0)
 44345 cmp 0,EBX
 44348 jge 44357
 44351 rstack EAX,EBP:-3
 44355 leave 
 44356 ret 
__1830:
__1828:
__1827:
__1825:
 44357 rstack EAX,EBP:-3
// loop step
 44361 inc EAX
 44363 sstack EBP:-3,EAX
 44367 jmp 44202
__1823:
 44370 mov EAX,-1
 44373 leave 
 44374 ret 
__1821:
 44375 leave 
 44376 ret 
args_hasFlag:
// args_hasFlag(this,flag_str)
 44377 enter 1
__1832:
// assert_arity arg #2 (float num_args)
 44380 push 2
// assert_arity arg #1 (float ecx_here)
 44383 push ECX
 44385 mov ECX,2
// assert_arity(...)
 44388 call 10245
 44391 add ESP,2
// assert_type arg #2 (float t)
 44394 push 42596
 44397 rstack EAX,EBP:2
// assert_type arg #1 (float self)
 44401 push EAX
 44403 mov ECX,2
// assert_type(...)
 44406 call 10123
 44409 add ESP,2
 44412 rstack EAX,EBP:3
// args_helper_getX_ts arg #3 (float str)
 44416 push EAX
// args_helper_getX_ts arg #2 (float type)
 44418 push 2
 44421 rstack EAX,EBP:2
// args_helper_getX_ts arg #1 (float this)
 44425 push EAX
 44427 mov ECX,3
// args_helper_getX_ts(...)
 44430 call 44117
 44433 add ESP,3
 44436 sstack EBP:-1,EAX
 44440 rstack EAX,EBP:-1
 44444 mov EBX,-1
 44447 sub EBX,EAX
 44449 fabs EBX,EBX
 44451 fsgn EBX,EBX
 44453 mov EAX,EBX
 44455 leave 
 44456 ret 
__1831:
 44457 leave 
 44458 ret 
args_num:
// args_num(this)
 44459 enter 4
__1834:
// assert_arity arg #2 (float num_args)
 44462 push 1
// assert_arity arg #1 (float ecx_here)
 44465 push ECX
 44467 mov ECX,2
// assert_arity(...)
 44470 call 10245
 44473 add ESP,2
// assert_type arg #2 (float t)
 44476 push 42596
 44479 rstack EAX,EBP:2
// assert_type arg #1 (float self)
 44483 push EAX
 44485 mov ECX,2
// assert_type(...)
 44488 call 10123
 44491 add ESP,2
 44494 sstack EBP:-1,0
 44499 rstack EAX,EBP:2
 44503 add EAX,1
 44506 mov EBX,EAX
 44508 sstack EBP:-2,#EBX
 44512 rstack EAX,EBP:-2
// vector_size arg #1 (void* self)
 44516 push EAX
 44518 mov ECX,1
// vector_size(...)
 44521 call 33515
 44524 add ESP,1
 44527 sstack EBP:-3,EAX
// init loop
 44531 sstack EBP:-4,0
__1836:
 44536 rstack EAX,EBP:-4
 44540 rstack EBX,EBP:-3
 44544 sub EBX,EAX
 44546 mov EAX,EBX
 44548 fsgn EAX,EAX
// condition
 44550 max EAX,0
 44553 cmp 0,EAX
 44556 jz 44629
 44559 rstack EAX,EBP:-4
// vector_get arg #3 (float pos)
 44563 push EAX
// vector_get arg #2 (void* element)
 44565 push 42844
 44568 rstack EAX,EBP:-2
// vector_get arg #1 (void* self)
 44572 push EAX
 44574 mov ECX,3
// vector_get(...)
 44577 call 33598
 44580 add ESP,3
__1838:
 44583 mov EAX,0
 44586 add EAX,42844
 44589 mov EBX,1
 44592 sub EBX,#EAX
 44594 fabs EBX,EBX
 44596 fsgn EBX,EBX
 44598 lneg EBX
// if (args_buff[0]==1)
 44600 cmp 0,EBX
 44603 jge 44616
 44606 rstack EAX,EBP:-1
// res++
 44610 inc EAX
 44612 sstack EBP:-1,EAX
__1839:
__1837:
 44616 rstack EAX,EBP:-4
// loop step
 44620 inc EAX
 44622 sstack EBP:-4,EAX
 44626 jmp 44536
__1835:
 44629 rstack EAX,EBP:-1
 44633 leave 
 44634 ret 
__1833:
 44635 leave 
 44636 ret 
args_numFlags:
// args_numFlags(this)
 44637 enter 4
__1841:
// assert_arity arg #2 (float num_args)
 44640 push 1
// assert_arity arg #1 (float ecx_here)
 44643 push ECX
 44645 mov ECX,2
// assert_arity(...)
 44648 call 10245
 44651 add ESP,2
// assert_type arg #2 (float t)
 44654 push 42596
 44657 rstack EAX,EBP:2
// assert_type arg #1 (float self)
 44661 push EAX
 44663 mov ECX,2
// assert_type(...)
 44666 call 10123
 44669 add ESP,2
 44672 sstack EBP:-1,0
 44677 rstack EAX,EBP:2
 44681 add EAX,1
 44684 mov EBX,EAX
 44686 sstack EBP:-2,#EBX
 44690 rstack EAX,EBP:-2
// vector_size arg #1 (void* self)
 44694 push EAX
 44696 mov ECX,1
// vector_size(...)
 44699 call 33515
 44702 add ESP,1
 44705 sstack EBP:-3,EAX
// init loop
 44709 sstack EBP:-4,0
__1843:
 44714 rstack EAX,EBP:-4
 44718 rstack EBX,EBP:-3
 44722 sub EBX,EAX
 44724 mov EAX,EBX
 44726 fsgn EAX,EAX
// condition
 44728 max EAX,0
 44731 cmp 0,EAX
 44734 jz 44807
 44737 rstack EAX,EBP:-4
// vector_get arg #3 (float pos)
 44741 push EAX
// vector_get arg #2 (void* element)
 44743 push 42844
 44746 rstack EAX,EBP:-2
// vector_get arg #1 (void* self)
 44750 push EAX
 44752 mov ECX,3
// vector_get(...)
 44755 call 33598
 44758 add ESP,3
__1845:
 44761 mov EAX,0
 44764 add EAX,42844
 44767 mov EBX,2
 44770 sub EBX,#EAX
 44772 fabs EBX,EBX
 44774 fsgn EBX,EBX
 44776 lneg EBX
// if (args_buff[0]==2)
 44778 cmp 0,EBX
 44781 jge 44794
 44784 rstack EAX,EBP:-1
// res++
 44788 inc EAX
 44790 sstack EBP:-1,EAX
__1846:
__1844:
 44794 rstack EAX,EBP:-4
// loop step
 44798 inc EAX
 44800 sstack EBP:-4,EAX
 44804 jmp 44714
__1842:
 44807 rstack EAX,EBP:-1
 44811 leave 
 44812 ret 
__1840:
 44813 leave 
 44814 ret 
args_popArg:
// args_popArg(this)
 44815 enter 5
__1848:
// assert_arity arg #2 (float num_args)
 44818 push 1
// assert_arity arg #1 (float ecx_here)
 44821 push ECX
 44823 mov ECX,2
// assert_arity(...)
 44826 call 10245
 44829 add ESP,2
// assert_type arg #2 (float t)
 44832 push 42596
 44835 rstack EAX,EBP:2
// assert_type arg #1 (float self)
 44839 push EAX
 44841 mov ECX,2
// assert_type(...)
 44844 call 10123
 44847 add ESP,2
// args_helper_getX_t arg #2 (float type)
 44850 push 1
 44853 rstack EAX,EBP:2
// args_helper_getX_t arg #1 (float this)
 44857 push EAX
 44859 mov ECX,2
// args_helper_getX_t(...)
 44862 call 43933
 44865 add ESP,2
 44868 sstack EBP:-1,EAX
__1850:
 44872 rstack EAX,EBP:-1
 44876 mov EBX,-1
 44879 sub EBX,EAX
 44881 fabs EBX,EBX
 44883 fsgn EBX,EBX
// if (idx!=-1)
 44885 cmp 0,EBX
 44888 jge 44982
 44891 rstack EAX,EBP:2
 44895 add EAX,1
 44898 mov EBX,EAX
 44900 sstack EBP:-2,#EBX
 44904 rstack EAX,EBP:2
 44908 add EAX,2
 44911 mov EBX,EAX
 44913 sstack EBP:-3,#EBX
 44917 mov EAX,1
 44920 add EAX,42844
 44923 sstack EBP:-4,#EAX
 44927 rstack EAX,EBP:-4
// vector_get arg #3 (float pos)
 44931 push EAX
// vector_get arg #2 (void* element)
 44933 push 0
 44936 rstack EAX,EBP:-3
// vector_get arg #1 (void* self)
 44940 push EAX
 44942 mov ECX,3
// vector_get(...)
 44945 call 33598
 44948 add ESP,3
 44951 sstack EBP:-5,EAX
 44955 rstack EAX,EBP:-1
// vector_remove arg #2 (float pos)
 44959 push EAX
 44961 rstack EAX,EBP:-2
// vector_remove arg #1 (void* self)
 44965 push EAX
 44967 mov ECX,2
// vector_remove(...)
 44970 call 34733
 44973 add ESP,2
 44976 rstack EAX,EBP:-5
 44980 leave 
 44981 ret 
__1851:
__1849:
 44982 mov EAX,0
 44985 leave 
 44986 ret 
__1847:
 44987 leave 
 44988 ret 
args_helper_popX:
// args_helper_popX(this,idx)
 44989 enter 4
__1853:
// assert_arity arg #2 (float num_args)
 44992 push 2
// assert_arity arg #1 (float ecx_here)
 44995 push ECX
 44997 mov ECX,2
// assert_arity(...)
 45000 call 10245
 45003 add ESP,2
// assert_type arg #2 (float t)
 45006 push 42596
 45009 rstack EAX,EBP:2
// assert_type arg #1 (float self)
 45013 push EAX
 45015 mov ECX,2
// assert_type(...)
 45018 call 10123
 45021 add ESP,2
 45024 rstack EAX,EBP:2
 45028 add EAX,1
 45031 mov EBX,EAX
 45033 sstack EBP:-1,#EBX
 45037 rstack EAX,EBP:2
 45041 add EAX,2
 45044 mov EBX,EAX
 45046 sstack EBP:-2,#EBX
 45050 rstack EAX,EBP:3
// vector_get arg #3 (float pos)
 45054 push EAX
// vector_get arg #2 (void* element)
 45056 push 42844
 45059 rstack EAX,EBP:-1
// vector_get arg #1 (void* self)
 45063 push EAX
 45065 mov ECX,3
// vector_get(...)
 45068 call 33598
 45071 add ESP,3
 45074 mov EAX,1
 45077 add EAX,42844
 45080 sstack EBP:-3,#EAX
 45084 rstack EAX,EBP:-3
// vector_get arg #3 (float pos)
 45088 push EAX
// vector_get arg #2 (void* element)
 45090 push 0
 45093 rstack EAX,EBP:-2
// vector_get arg #1 (void* self)
 45097 push EAX
 45099 mov ECX,3
// vector_get(...)
 45102 call 33598
 45105 add ESP,3
 45108 sstack EBP:-4,EAX
 45112 rstack EAX,EBP:3
// vector_remove arg #2 (float pos)
 45116 push EAX
 45118 rstack EAX,EBP:-1
// vector_remove arg #1 (void* self)
 45122 push EAX
 45124 mov ECX,2
// vector_remove(...)
 45127 call 34733
 45130 add ESP,2
 45133 rstack EAX,EBP:-4
 45137 leave 
 45138 ret 
__1852:
 45139 leave 
 45140 ret 
args_popFlag:
// args_popFlag(this)
 45141 enter 2
__1855:
// assert_arity arg #2 (float num_args)
 45144 push 1
// assert_arity arg #1 (float ecx_here)
 45147 push ECX
 45149 mov ECX,2
// assert_arity(...)
 45152 call 10245
 45155 add ESP,2
// assert_type arg #2 (float t)
 45158 push 42596
 45161 rstack EAX,EBP:2
// assert_type arg #1 (float self)
 45165 push EAX
 45167 mov ECX,2
// assert_type(...)
 45170 call 10123
 45173 add ESP,2
// args_helper_getX_t arg #2 (float type)
 45176 push 2
 45179 rstack EAX,EBP:2
// args_helper_getX_t arg #1 (float this)
 45183 push EAX
 45185 mov ECX,2
// args_helper_getX_t(...)
 45188 call 43933
 45191 add ESP,2
 45194 sstack EBP:-1,EAX
__1857:
 45198 rstack EAX,EBP:-1
 45202 mov EBX,-1
 45205 sub EBX,EAX
 45207 fabs EBX,EBX
 45209 fsgn EBX,EBX
// if (idx!=-1)
 45211 cmp 0,EBX
 45214 jge 45248
 45217 rstack EAX,EBP:-1
// args_helper_popX arg #2 (float idx)
 45221 push EAX
 45223 rstack EAX,EBP:2
// args_helper_popX arg #1 (float this)
 45227 push EAX
 45229 mov ECX,2
// args_helper_popX(...)
 45232 call 44989
 45235 add ESP,2
 45238 sstack EBP:-2,EAX
 45242 rstack EAX,EBP:-2
 45246 leave 
 45247 ret 
__1858:
__1856:
 45248 mov EAX,0
 45251 leave 
 45252 ret 
__1854:
 45253 leave 
 45254 ret 
args_popFlag_s:
// args_popFlag_s(this,str)
 45255 enter 2
__1860:
// assert_arity arg #2 (float num_args)
 45258 push 2
// assert_arity arg #1 (float ecx_here)
 45261 push ECX
 45263 mov ECX,2
// assert_arity(...)
 45266 call 10245
 45269 add ESP,2
// assert_type arg #2 (float t)
 45272 push 42596
 45275 rstack EAX,EBP:2
// assert_type arg #1 (float self)
 45279 push EAX
 45281 mov ECX,2
// assert_type(...)
 45284 call 10123
 45287 add ESP,2
 45290 rstack EAX,EBP:3
// args_helper_getX_ts arg #3 (float str)
 45294 push EAX
// args_helper_getX_ts arg #2 (float type)
 45296 push 2
 45299 rstack EAX,EBP:2
// args_helper_getX_ts arg #1 (float this)
 45303 push EAX
 45305 mov ECX,3
// args_helper_getX_ts(...)
 45308 call 44117
 45311 add ESP,3
 45314 sstack EBP:-1,EAX
__1862:
 45318 rstack EAX,EBP:-1
 45322 mov EBX,-1
 45325 sub EBX,EAX
 45327 fabs EBX,EBX
 45329 fsgn EBX,EBX
// if (idx!=-1)
 45331 cmp 0,EBX
 45334 jge 45377
 45337 rstack EAX,EBP:-1
// args_helper_popX arg #2 (float idx)
 45341 push EAX
 45343 rstack EAX,EBP:2
// args_helper_popX arg #1 (float this)
 45347 push EAX
 45349 mov ECX,2
// args_helper_popX(...)
 45352 call 44989
 45355 add ESP,2
 45358 sstack EBP:-2,EAX
__1865:
 45362 rstack EAX,EBP:-2
// if (res)
 45366 cmp 0,EAX
 45369 jge 45377
 45372 mov EAX,1
 45375 leave 
 45376 ret 
__1866:
__1864:
__1863:
__1861:
 45377 mov EAX,0
 45380 leave 
 45381 ret 
__1859:
 45382 leave 
 45383 ret 
args_popFlagParam_s:
// args_popFlagParam_s(this,str,p_res)
 45384 enter 5
__1868:
// assert_arity arg #2 (float num_args)
 45387 push 3
// assert_arity arg #1 (float ecx_here)
 45390 push ECX
 45392 mov ECX,2
// assert_arity(...)
 45395 call 10245
 45398 add ESP,2
// assert_type arg #2 (float t)
 45401 push 42596
 45404 rstack EAX,EBP:2
// assert_type arg #1 (float self)
 45408 push EAX
 45410 mov ECX,2
// assert_type(...)
 45413 call 10123
 45416 add ESP,2
 45419 rstack EAX,EBP:3
// args_helper_getX_ts arg #3 (float str)
 45423 push EAX
// args_helper_getX_ts arg #2 (float type)
 45425 push 2
 45428 rstack EAX,EBP:2
// args_helper_getX_ts arg #1 (float this)
 45432 push EAX
 45434 mov ECX,3
// args_helper_getX_ts(...)
 45437 call 44117
 45440 add ESP,3
 45443 sstack EBP:-1,EAX
__1870:
 45447 rstack EAX,EBP:-1
 45451 mov EBX,-1
 45454 sub EBX,EAX
 45456 fabs EBX,EBX
 45458 fsgn EBX,EBX
// if (idx!=-1)
 45460 cmp 0,EBX
 45463 jge 45689
 45466 rstack EAX,EBP:-1
// args_helper_popX arg #2 (float idx)
 45470 push EAX
 45472 rstack EAX,EBP:2
// args_helper_popX arg #1 (float this)
 45476 push EAX
 45478 mov ECX,2
// args_helper_popX(...)
 45481 call 44989
 45484 add ESP,2
 45487 sstack EBP:-2,0
 45492 sstack EBP:-3,0
 45497 rstack EAX,EBP:2
 45501 add EAX,1
 45504 mov EBX,EAX
 45506 sstack EBP:-4,#EBX
 45510 rstack EAX,EBP:-4
// vector_size arg #1 (void* self)
 45514 push EAX
 45516 mov ECX,1
// vector_size(...)
 45519 call 33515
 45522 add ESP,1
 45525 sstack EBP:-5,EAX
__1873:
 45529 rstack EAX,EBP:-1
 45533 rstack EBX,EBP:-5
 45537 sub EBX,EAX
 45539 mov EAX,EBX
 45541 fsgn EAX,EAX
 45543 max EAX,0
// if (idx<size)
 45546 cmp 0,EAX
 45549 jge 45629
 45552 rstack EAX,EBP:-1
// vector_get arg #3 (float pos)
 45556 push EAX
// vector_get arg #2 (void* element)
 45558 push 42844
 45561 rstack EAX,EBP:-4
// vector_get arg #1 (void* self)
 45565 push EAX
 45567 mov ECX,3
// vector_get(...)
 45570 call 33598
 45573 add ESP,3
__1876:
 45576 mov EAX,0
 45579 add EAX,42844
 45582 mov EBX,1
 45585 sub EBX,#EAX
 45587 fabs EBX,EBX
 45589 fsgn EBX,EBX
 45591 lneg EBX
// if (args_buff[0]==1)
 45593 cmp 0,EBX
 45596 jge 45629
// hasParam=1
 45599 sstack EBP:-2,1
 45604 rstack EAX,EBP:-1
// args_helper_popX arg #2 (float idx)
 45608 push EAX
 45610 rstack EAX,EBP:2
// args_helper_popX arg #1 (float this)
 45614 push EAX
 45616 mov ECX,2
// args_helper_popX(...)
 45619 call 44989
 45622 add ESP,2
// str2=args_helper_popX(this,idx)
 45625 sstack EBP:-3,EAX
__1877:
__1875:
__1874:
__1872:
__1879:
 45629 rstack EAX,EBP:-2
// if (hasParam)
 45633 cmp 0,EAX
 45636 jge 45667
__1882:
 45639 rstack EAX,EBP:4
// if (p_res)
 45643 cmp 0,EAX
 45646 jge 45659
 45649 rstack EAX,EBP:-3
 45653 rstack EBX,EBP:4
// *p_res=str2
 45657 mov #EBX,EAX
__1883:
__1881:
 45659 mov EAX,2
 45662 leave 
 45663 ret 
 45664 jmp 45689
__1884:
__1880:
__1886:
__1888:
 45667 rstack EAX,EBP:4
// if (p_res)
 45671 cmp 0,EAX
 45674 jge 45684
 45677 rstack EAX,EBP:4
// *p_res=0
 45681 mov #EAX,0
__1889:
__1887:
 45684 mov EAX,1
 45687 leave 
 45688 ret 
__1885:
__1878:
__1871:
__1869:
 45689 mov EAX,0
 45692 leave 
 45693 ret 
__1867:
 45694 leave 
 45695 ret 
args_new:
// args_new()
 45696 enter 1
__1891:
// malloc arg #1 (float n)
 45699 push #42601
 45702 mov ECX,1
// malloc(...)
 45705 call 29334
 45708 add ESP,1
 45711 sstack EBP:-1,EAX
 45715 rstack EAX,EBP:-1
// args_constructor arg #1 (float this)
 45719 push EAX
 45721 mov ECX,1
// args_constructor(...)
 45724 call 42612
 45727 add ESP,1
 45730 rstack EAX,EBP:-1
 45734 leave 
 45735 ret 
__1890:
 45736 leave 
 45737 ret 
libmarker18:
 45738 db 0
typeof_shell2:
 45739 db "shell2",0
sizeof_shell2:
 45746 db 180
sizeof_shell2_text:
 45747 db 80
sizeof_shell2_cd:
 45748 db 80
init_shell2:
// init_shell2()
 45749 enter 1
__1893:
// malloc arg #1 (float n)
 45752 push #45746
 45755 mov ECX,1
// malloc(...)
 45758 call 29334
 45761 add ESP,1
 45764 sstack EBP:-1,EAX
 45768 rstack EAX,EBP:-1
 45772 push EAX
 45774 mov ECX,1
// shell2_constructor(...)
 45777 call 45791
 45780 add ESP,1
 45783 rstack EAX,EBP:-1
 45787 leave 
 45788 ret 
__1892:
 45789 leave 
 45790 ret 
shell2_constructor:
// shell2_constructor(self)
 45791 enter 2
__1895:
 45794 rstack EAX,EBP:2
 45798 add EAX,0
 45801 mov EBX,EAX
// self[0]=typeof_shell2
 45803 mov #EBX,45739
 45806 rstack EAX,EBP:2
 45810 add EAX,1
 45813 mov EBX,EAX
// self[1]=0
 45815 mov #EBX,0
// malloc arg #1 (float n)
 45818 push #32206
 45821 mov ECX,1
// malloc(...)
 45824 call 29334
 45827 add ESP,1
 45830 sstack EBP:-1,EAX
// vector_constructor arg #2 (float element_size)
 45834 push 10
 45837 rstack EAX,EBP:-1
// vector_constructor arg #1 (void* self)
 45841 push EAX
 45843 mov ECX,2
// vector_constructor(...)
 45846 call 32207
 45849 add ESP,2
 45852 rstack EAX,EBP:-1
 45856 rstack EBX,EBP:2
 45860 add EBX,2
 45863 mov ECX,EBX
// self[2]=V
 45865 mov #ECX,EAX
 45867 rstack EAX,EBP:2
 45871 add EAX,3
 45874 mov EBX,EAX
// self[3]=0
 45876 mov #EBX,0
 45879 rstack EAX,EBP:2
 45883 add EAX,4
 45886 mov EBX,EAX
// self[4]=0
 45888 mov #EBX,0
// malloc arg #1 (float n)
 45891 push #32206
 45894 mov ECX,1
// malloc(...)
 45897 call 29334
 45900 add ESP,1
 45903 sstack EBP:-2,EAX
// vector_constructor arg #2 (float element_size)
 45907 push 4
 45910 rstack EAX,EBP:-2
// vector_constructor arg #1 (void* self)
 45914 push EAX
 45916 mov ECX,2
// vector_constructor(...)
 45919 call 32207
 45922 add ESP,2
 45925 rstack EAX,EBP:-2
 45929 rstack EBX,EBP:2
 45933 add EBX,5
 45936 mov ECX,EBX
// self[5]=V2
 45938 mov #ECX,EAX
 45940 rstack EAX,EBP:2
 45944 add EAX,10
 45947 mov EBX,EAX
// self[10]=0
 45949 mov #EBX,0
 45952 rstack EAX,EBP:2
 45956 add EAX,100
 45959 mov EBX,EAX
// self[100]=0
 45961 mov #EBX,0
 45964 push 46737
 45967 push 47107
 45970 push 46859
 45973 push 49153
 45976 rstack EAX,EBP:2
 45980 push EAX
 45982 mov ECX,5
// shell2_add_command(...)
 45985 call 47639
 45988 add ESP,5
 45991 push 0
 45994 push 46819
 45997 push 47127
 46000 push 49674
 46003 rstack EAX,EBP:2
 46007 push EAX
 46009 mov ECX,5
// shell2_add_command(...)
 46012 call 47639
 46015 add ESP,5
 46018 push 0
 46021 push 47131
 46024 push 47397
 46027 push 49700
 46030 rstack EAX,EBP:2
 46034 push EAX
 46036 mov ECX,5
// shell2_add_command(...)
 46039 call 47639
 46042 add ESP,5
 46045 push 46511
 46048 push 46979
 46051 push 46832
 46054 push 50363
 46057 rstack EAX,EBP:2
 46061 push EAX
 46063 mov ECX,5
// shell2_add_command(...)
 46066 call 47639
 46069 add ESP,5
 46072 push 47205
 46075 push 46607
 46078 push 46943
 46081 push 64377
 46084 rstack EAX,EBP:2
 46088 push EAX
 46090 mov ECX,5
// shell2_add_command(...)
 46093 call 47639
 46096 add ESP,5
 46099 push 0
 46102 push 46705
 46105 push 47244
 46108 push 64688
 46111 rstack EAX,EBP:2
 46115 push EAX
 46117 mov ECX,5
// shell2_add_command(...)
 46120 call 47639
 46123 add ESP,5
 46126 push 47371
 46129 push 46676
 46132 push 46498
 46135 push 65167
 46138 rstack EAX,EBP:2
 46142 push EAX
 46144 mov ECX,5
// shell2_add_command(...)
 46147 call 47639
 46150 add ESP,5
 46153 push 0
 46156 push 46479
 46159 push 47247
 46162 push 65556
 46165 rstack EAX,EBP:2
 46169 push EAX
 46171 mov ECX,5
// shell2_add_command(...)
 46174 call 47639
 46177 add ESP,5
 46180 push 46647
 46183 push 46864
 46186 push 47196
 46189 push 66831
 46192 rstack EAX,EBP:2
 46196 push EAX
 46198 mov ECX,5
// shell2_add_command(...)
 46201 call 47639
 46204 add ESP,5
 46207 push 47339
 46210 push 46588
 46213 push 46505
 46216 push 67593
 46219 rstack EAX,EBP:2
 46223 push EAX
 46225 mov ECX,5
// shell2_add_command(...)
 46228 call 47639
 46231 add ESP,5
 46234 push 46542
 46237 push 46959
 46240 push 46537
 46243 push 68012
 46246 rstack EAX,EBP:2
 46250 push EAX
 46252 mov ECX,5
// shell2_add_command(...)
 46255 call 47639
 46258 add ESP,5
 46261 push 46627
 46264 push 47177
 46267 push 46699
 46270 push 66587
 46273 rstack EAX,EBP:2
 46277 push EAX
 46279 mov ECX,5
// shell2_add_command(...)
 46282 call 47639
 46285 add ESP,5
 46288 push 47147
 46291 push 47061
 46294 push 46694
 46297 push 71016
 46300 rstack EAX,EBP:2
 46304 push EAX
 46306 mov ECX,5
// shell2_add_command(...)
 46309 call 47639
 46312 add ESP,5
 46315 push 47021
 46318 push 47001
 46321 push 46998
 46324 push 69469
 46327 rstack EAX,EBP:2
 46331 push EAX
 46333 mov ECX,5
// shell2_add_command(...)
 46336 call 47639
 46339 add ESP,5
 46342 push 0
 46345 push 47083
 46348 push 46759
 46351 push 66782
 46354 rstack EAX,EBP:2
 46358 push EAX
 46360 mov ECX,5
// shell2_add_command(...)
 46363 call 47639
 46366 add ESP,5
 46369 push 0
 46372 push 46722
 46375 push 46949
 46378 push 73115
 46381 rstack EAX,EBP:2
 46385 push EAX
 46387 mov ECX,5
// shell2_add_command(...)
 46390 call 47639
 46393 add ESP,5
 46396 push 46904
 46399 push 46886
 46402 push 47200
 46405 push 71718
 46408 rstack EAX,EBP:2
 46412 push EAX
 46414 mov ECX,5
// shell2_add_command(...)
 46417 call 47639
 46420 add ESP,5
 46423 push 47251
 46426 push 46839
 46429 push 46939
 46432 push 72205
 46435 rstack EAX,EBP:2
 46439 push EAX
 46441 mov ECX,5
// shell2_add_command(...)
 46444 call 47639
 46447 add ESP,5
 46450 push 46763
 46453 push 46568
 46456 push 46810
 46459 push 73201
 46462 rstack EAX,EBP:2
 46466 push EAX
 46468 mov ECX,5
// shell2_add_command(...)
 46471 call 47639
 46474 add ESP,5
__1894:
 46477 leave 
 46478 ret 
__1915:
 46479 db "lists current dirs",0
__1911:
 46498 db "format",0
__1919:
 46505 db "write",0
__1905:
 46511 db "usage: device [list/info]",0
__1922:
 46537 db "read",0
__1924:
 46542 db "usage: read [-f filename]",0
__1945:
 46568 db "test arg collection",0
__1920:
 46588 db "write text to file",0
__1907:
 46607 db "assign drive letter",0
__1927:
 46627 db "usage: mkdir [name]",0
__1918:
 46647 db "usage: mem [from] [numBytes]",0
__1912:
 46676 db "installs lightfs3",0
__1928:
 46694 db "diag",0
__1925:
 46699 db "mkdir",0
__1910:
 46705 db "change directory",0
__1937:
 46722 db "test overstack",0
__1898:
 46737 db "usage: help (command)",0
__1934:
 46759 db "del",0
__1946:
 46763 db "usage: testArgs -h -lr arg1 arg2 --yay -d derp",0
__1944:
 46810 db "testArgs",0
__1900:
 46819 db "clear screen",0
__1903:
 46832 db "device",0
__1942:
 46839 db "run executable file",0
__1896:
 46859 db "help",0
__1917:
 46864 db "disp. memory contents",0
__1939:
 46886 db "write dev to file",0
__1940:
 46904 db "usage: dump [deviceNum] [filename]",0
__1941:
 46939 db "run",0
__1906:
 46943 db "mount",0
__1936:
 46949 db "overstack",0
__1923:
 46959 db "read text from file",0
__1904:
 46979 db "enumerates devices",0
__1931:
 46998 db "fs",0
__1932:
 47001 db "filesystem settings",0
__1933:
 47021 db "usage: fs [blocks/cache [on/off/reset]]",0
__1929:
 47061 db "run system diagnostic",0
__1935:
 47083 db "delete a file or folder",0
__1897:
 47107 db "helps with commands",0
__1899:
 47127 db "cls",0
__1902:
 47131 db "print a message",0
__1930:
 47147 db "usage: diag [stack/heap/disk]",0
__1926:
 47177 db "create a directory",0
__1916:
 47196 db "mem",0
__1938:
 47200 db "dump",0
__1908:
 47205 db "usage: mount [deviceNum] [driveLetter]",0
__1909:
 47244 db "cd",0
__1914:
 47247 db "dir",0
__1943:
 47251 db "usage: run [-ilr][filename]
-i -- init app PT template
-l -- load only
-r also start it",0
__1921:
 47339 db "usage: write [-f filename] text",0
__1913:
 47371 db "usage: format [deviceNum]",0
__1901:
 47397 db "echo",0
shell2_open:
// shell2_open(self)
 47402 enter 1
__1948:
// assert_type arg #2 (float t)
 47405 push 45739
 47408 rstack EAX,EBP:2
// assert_type arg #1 (float self)
 47412 push EAX
 47414 mov ECX,2
// assert_type(...)
 47417 call 10123
 47420 add ESP,2
 47423 mov ECX,0
// screen_clear(...)
 47426 call 18064
// setPrintCursor arg #2 (float y)
 47429 push 0
// setPrintCursor arg #1 (float x)
 47432 push 0
 47435 mov ECX,2
// setPrintCursor(...)
 47438 call 17304
 47441 add ESP,2
 47444 rstack EAX,EBP:2
// printf arg #2 (unknown)
 47448 push EAX
// printf arg #1 (char* format)
 47450 push 47603
 47453 mov ECX,2
// printf(...)
 47456 call 21851
 47459 add ESP,2
 47462 sstack EBP:-1,0
 47467 mov EAX,SS:ESP
 47470 add EAX,-1
// EBcb_device_bind_addr arg #4 (float res)
 47473 push EAX
// EBcb_device_bind_addr arg #3 (float user)
 47475 push 1
// EBcb_device_bind_addr arg #2 (float type)
 47478 push 15
// EBcb_device_bind_addr arg #1 (float this)
 47481 push 77224
 47484 mov ECX,4
// EBcb_device_bind_addr(...)
 47487 call 21203
 47490 add ESP,4
__1951:
 47493 rstack EAX,EBP:-1
 47497 lneg EAX
 47499 mov EBX,EAX
// if (!EB_Kb)
 47501 cmp 0,EBX
 47504 jge 47521
// printf arg #1 (char* format)
 47507 push 47615
 47510 mov ECX,1
// printf(...)
 47513 call 21851
 47516 add ESP,1
 47519 leave 
 47520 ret 
__1952:
__1950:
 47521 rstack EAX,EBP:-1
// printf arg #2 (unknown)
 47525 push EAX
// printf arg #1 (char* format)
 47527 push 47581
 47530 mov ECX,2
// printf(...)
 47533 call 21851
 47536 add ESP,2
 47539 rstack EAX,EBP:-1
// setKeyboard arg #1 (float ptr)
 47543 push EAX
 47545 mov ECX,1
// setKeyboard(...)
 47548 call 36604
 47551 add ESP,1
__1956:
// if (1
 47554 cmp 0,1
 47558 jz 47579
 47561 rstack EAX,EBP:2
 47565 push EAX
 47567 mov ECX,1
// shell2_waitInput(...)
 47570 call 47914
 47573 add ESP,1
 47576 jmp 47554
__1955:
__1947:
 47579 leave 
 47580 ret 
__1954:
 47581 db "found keyboard at %d
",0
__1949:
 47603 db "shell = %d
",0
__1953:
 47615 db "no keyboard, quitting.
",0
shell2_add_command:
// shell2_add_command(self,func,str_cmd,str_desc,str_help)
 47639 enter 5
__1958:
// assert_type arg #2 (float t)
 47642 push 45739
 47645 rstack EAX,EBP:2
// assert_type arg #1 (float self)
 47649 push EAX
 47651 mov ECX,2
// assert_type(...)
 47654 call 10123
 47657 add ESP,2
 47660 rstack EAX,EBP:3
// entry[0]=func
 47664 sstack EBP:-4,EAX
 47668 rstack EAX,EBP:4
// entry[1]=str_cmd
 47672 sstack EBP:-3,EAX
 47676 rstack EAX,EBP:5
// entry[2]=str_desc
 47680 sstack EBP:-2,EAX
 47684 rstack EAX,EBP:6
// entry[3]=str_help
 47688 sstack EBP:-1,EAX
 47692 rstack EAX,EBP:2
 47696 add EAX,5
 47699 mov EBX,EAX
 47701 sstack EBP:-5,#EBX
 47705 mov EAX,SS:ESP
 47708 add EAX,-4
// vector_push arg #2 (void* element)
 47711 push EAX
 47713 rstack EAX,EBP:-5
// vector_push arg #1 (void* self)
 47717 push EAX
 47719 mov ECX,2
// vector_push(...)
 47722 call 32926
 47725 add ESP,2
__1957:
 47728 leave 
 47729 ret 
shell2_lookup_command:
// shell2_lookup_command(self,str_cmd,entry)
 47730 enter 4
__1960:
// assert_type arg #2 (float t)
 47733 push 45739
 47736 rstack EAX,EBP:2
// assert_type arg #1 (float self)
 47740 push EAX
 47742 mov ECX,2
// assert_type(...)
 47745 call 10123
 47748 add ESP,2
 47751 rstack EAX,EBP:2
 47755 add EAX,5
 47758 mov EBX,EAX
 47760 sstack EBP:-1,#EBX
 47764 rstack EAX,EBP:-1
// vector_size arg #1 (void* self)
 47768 push EAX
 47770 mov ECX,1
// vector_size(...)
 47773 call 33515
 47776 add ESP,1
 47779 sstack EBP:-2,EAX
// init loop
 47783 sstack EBP:-3,0
__1962:
 47788 rstack EAX,EBP:-3
 47792 rstack EBX,EBP:-2
 47796 sub EBX,EAX
 47798 mov EAX,EBX
 47800 fsgn EAX,EAX
// condition
 47802 max EAX,0
 47805 cmp 0,EAX
 47808 jz 47907
 47811 rstack EAX,EBP:-3
// vector_get arg #3 (float pos)
 47815 push EAX
 47817 rstack EAX,EBP:4
// vector_get arg #2 (void* element)
 47821 push EAX
 47823 rstack EAX,EBP:-1
// vector_get arg #1 (void* self)
 47827 push EAX
 47829 mov ECX,3
// vector_get(...)
 47832 call 33598
 47835 add ESP,3
 47838 rstack EAX,EBP:4
 47842 add EAX,1
 47845 mov EBX,EAX
 47847 sstack EBP:-4,#EBX
__1964:
 47851 rstack EAX,EBP:3
// strcmp arg #2 (char* dest)
 47855 push EAX
 47857 rstack EAX,EBP:-4
// strcmp arg #1 (char* src)
 47861 push EAX
 47863 mov ECX,2
// strcmp(...)
 47866 call 10763
 47869 add ESP,2
 47872 mov EBX,0
 47875 sub EBX,EAX
 47877 fabs EBX,EBX
 47879 fsgn EBX,EBX
 47881 lneg EBX
// if (strcmp(e_str,str_cmd)==0)
 47883 cmp 0,EBX
 47886 jge 47894
 47889 mov EAX,1
 47892 leave 
 47893 ret 
__1965:
__1963:
 47894 rstack EAX,EBP:-3
// loop step
 47898 inc EAX
 47900 sstack EBP:-3,EAX
 47904 jmp 47788
__1961:
 47907 mov EAX,0
 47910 leave 
 47911 ret 
__1959:
 47912 leave 
 47913 ret 
shell2_waitInput:
// shell2_waitInput(self)
 47914 enter 2
__1967:
// assert_type arg #2 (float t)
 47917 push 45739
 47920 rstack EAX,EBP:2
// assert_type arg #1 (float self)
 47924 push EAX
 47926 mov ECX,2
// assert_type(...)
 47929 call 10123
 47932 add ESP,2
 47935 rstack EAX,EBP:2
 47939 push EAX
 47941 mov ECX,1
// shell2_print_prompt(...)
 47944 call 48030
 47947 add ESP,1
 47950 mov ECX,0
// screen_cursor_enable(...)
 47953 call 18078
__1969:
// if (1
 47956 cmp 0,1
 47960 jz 48028
// screen_set_cursor_pos_xy arg #2 (float y)
 47963 push #76903
// screen_set_cursor_pos_xy arg #1 (float x)
 47966 push #76902
 47969 mov ECX,2
// screen_set_cursor_pos_xy(...)
 47972 call 18128
 47975 add ESP,2
 47978 mov ECX,0
// waitKey(...)
 47981 call 36736
 47984 sstack EBP:-1,EAX
 47988 rstack EAX,EBP:-1
 47992 push EAX
 47994 rstack EAX,EBP:2
 47998 push EAX
 48000 mov ECX,2
// shell2_process_key(...)
 48003 call 48125
 48006 add ESP,2
 48009 sstack EBP:-2,EAX
__1971:
 48013 rstack EAX,EBP:-2
// if (R)
 48017 cmp 0,EAX
 48020 jge 48025
 48023 leave 
 48024 ret 
__1972:
__1970:
 48025 jmp 47956
__1968:
__1966:
 48028 leave 
 48029 ret 
shell2_print_prompt:
// shell2_print_prompt(self)
 48030 enter 2
__1974:
// assert_type arg #2 (float t)
 48033 push 45739
 48036 rstack EAX,EBP:2
// assert_type arg #1 (float self)
 48040 push EAX
 48042 mov ECX,2
// assert_type(...)
 48045 call 10123
 48048 add ESP,2
 48051 rstack EAX,EBP:2
 48055 add EAX,100
 48058 mov EBX,EAX
 48060 sstack EBP:-1,EBX
 48064 rstack EAX,EBP:2
 48068 add EAX,4
 48071 mov EBX,EAX
 48073 sstack EBP:-2,#EBX
__1976:
 48077 rstack EAX,EBP:-2
// if (cd_len)
 48081 cmp 0,EAX
 48084 jge 48105
 48087 rstack EAX,EBP:-1
// printf arg #2 (unknown)
 48091 push EAX
// printf arg #1 (char* format)
 48093 push 48119
 48096 mov ECX,2
// printf(...)
 48099 call 21851
 48102 add ESP,2
__1977:
__1975:
// printf arg #1 (char* format)
 48105 push 48122
 48108 mov ECX,1
// printf(...)
 48111 call 21851
 48114 add ESP,1
__1973:
 48117 leave 
 48118 ret 
__1978:
 48119 db "%s",0
__1979:
 48122 db "> ",0
shell2_process_key:
// shell2_process_key(self,K)
 48125 enter 2
__1981:
// assert_type arg #2 (float t)
 48128 push 45739
 48131 rstack EAX,EBP:2
// assert_type arg #1 (float self)
 48135 push EAX
 48137 mov ECX,2
// assert_type(...)
 48140 call 10123
 48143 add ESP,2
__1983:
 48146 rstack EAX,EBP:3
 48150 mov EBX,10
 48153 sub EBX,EAX
 48155 fabs EBX,EBX
 48157 fsgn EBX,EBX
 48159 lneg EBX
// if (K==10)
 48161 cmp 0,EBX
 48164 jge 48237
 48167 mov ECX,0
// screen_cursor_disable(...)
 48170 call 18092
// printf arg #1 (char* format)
 48173 push 26727
 48176 mov ECX,1
// printf(...)
 48179 call 21851
 48182 add ESP,1
 48185 rstack EAX,EBP:2
 48189 push EAX
 48191 mov ECX,1
// shell2_process_command(...)
 48194 call 48485
 48197 add ESP,1
// text_len=0
 48200 sstack EBP:-1,0
 48205 rstack EAX,EBP:-2
 48209 add EAX,0
 48212 mov EBX,EAX
// text_ptr[0]=0
 48214 mov #EBX,0
 48217 rstack EAX,EBP:-1
 48221 rstack EBX,EBP:2
 48225 add EBX,1
 48228 mov ECX,EBX
// self[1]=text_len
 48230 mov #ECX,EAX
 48232 mov EAX,1
 48235 leave 
 48236 ret 
__1984:
__1982:
__1986:
 48237 rstack EAX,EBP:3
 48241 mov EBX,127
 48244 sub EBX,EAX
 48246 fabs EBX,EBX
 48248 fsgn EBX,EBX
 48250 lneg EBX
// if (K==127)
 48252 cmp 0,EBX
 48255 jge 48352
 48258 rstack EAX,EBP:2
 48262 add EAX,1
 48265 mov EBX,EAX
// text_len=self[1]
 48267 sstack EBP:-1,#EBX
 48271 rstack EAX,EBP:2
 48275 add EAX,10
 48278 mov EBX,EAX
// text_ptr=self+10
 48280 sstack EBP:-2,EBX
__1989:
 48284 rstack EAX,EBP:-1
 48288 mov EBX,0
 48291 sub EBX,EAX
 48293 neg EBX
 48295 fsgn EBX,EBX
 48297 max EBX,0
// if (text_len>0)
 48300 cmp 0,EBX
 48303 jge 48337
 48306 rstack EAX,EBP:-1
// text_len--
 48310 dec EAX
 48312 sstack EBP:-1,EAX
 48316 rstack EAX,EBP:-1
 48320 rstack EBX,EBP:-2
 48324 add EBX,EAX
 48326 mov EAX,EBX
// text_ptr[text_len]=0
 48328 mov #EAX,0
 48331 mov ECX,0
// screenEraseChar(...)
 48334 call 17975
__1990:
__1988:
 48337 rstack EAX,EBP:-1
 48341 rstack EBX,EBP:2
 48345 add EBX,1
 48348 mov ECX,EBX
// self[1]=text_len
 48350 mov #ECX,EAX
__1987:
__1985:
__1992:
 48352 rstack EAX,EBP:3
// isPrint1 arg #1 (char c)
 48356 push EAX
 48358 mov ECX,1
// isPrint1(...)
 48361 call 36616
 48364 add ESP,1
// if (isPrint1(K))
 48367 cmp 0,EAX
 48370 jge 48475
 48373 rstack EAX,EBP:3
// printf arg #2 (unknown)
 48377 push EAX
// printf arg #1 (char* format)
 48379 push 48482
 48382 mov ECX,2
// printf(...)
 48385 call 21851
 48388 add ESP,2
 48391 rstack EAX,EBP:2
 48395 add EAX,1
 48398 mov EBX,EAX
// text_len=self[1]
 48400 sstack EBP:-1,#EBX
 48404 rstack EAX,EBP:2
 48408 add EAX,10
 48411 mov EBX,EAX
// text_ptr=self+10
 48413 sstack EBP:-2,EBX
 48417 rstack EAX,EBP:3
 48421 rstack EBX,EBP:-1
 48425 rstack ECX,EBP:-2
 48429 add ECX,EBX
 48431 mov EBX,ECX
// text_ptr[text_len]=K
 48433 mov #EBX,EAX
 48435 rstack EAX,EBP:-1
// text_len++
 48439 inc EAX
 48441 sstack EBP:-1,EAX
 48445 rstack EAX,EBP:-1
 48449 rstack EBX,EBP:-2
 48453 add EBX,EAX
 48455 mov EAX,EBX
// text_ptr[text_len]=0
 48457 mov #EAX,0
 48460 rstack EAX,EBP:-1
 48464 rstack EBX,EBP:2
 48468 add EBX,1
 48471 mov ECX,EBX
// self[1]=text_len
 48473 mov #ECX,EAX
__1993:
__1991:
 48475 mov EAX,0
 48478 leave 
 48479 ret 
__1980:
 48480 leave 
 48481 ret 
__1994:
 48482 db "%c",0
shell2_process_command:
// shell2_process_command(self)
 48485 enter 128
__1996:
// assert_type arg #2 (float t)
 48488 push 45739
 48491 rstack EAX,EBP:2
// assert_type arg #1 (float self)
 48495 push EAX
 48497 mov ECX,2
// assert_type(...)
 48500 call 10123
 48503 add ESP,2
 48506 rstack EAX,EBP:2
 48510 add EAX,10
 48513 mov EBX,EAX
 48515 sstack EBP:-1,EBX
 48519 rstack EAX,EBP:-1
// strcpy arg #2 (char* src)
 48523 push EAX
 48525 mov EAX,SS:ESP
 48528 add EAX,-121
// strcpy arg #1 (char* dest)
 48531 push EAX
 48533 mov ECX,2
// strcpy(...)
 48536 call 10963
 48539 add ESP,2
// explode arg #2 (char* del)
 48542 push 28672
 48545 mov EAX,SS:ESP
 48548 add EAX,-121
// explode arg #1 (char* str)
 48551 push EAX
 48553 mov ECX,2
// explode(...)
 48556 call 11982
 48559 add ESP,2
 48562 sstack EBP:-122,EAX
 48566 rstack EAX,EBP:-122
// strlen arg #1 (char* str)
 48570 push EAX
 48572 mov ECX,1
// strlen(...)
 48575 call 11121
 48578 add ESP,1
 48581 sstack EBP:-123,EAX
__1998:
 48585 mov EAX,SS:ESP
 48588 add EAX,-127
// shell2_lookup_command arg #3 (float entry)
 48591 push EAX
 48593 rstack EAX,EBP:-122
 48597 add EAX,0
 48600 mov EBX,EAX
// shell2_lookup_command arg #2 (float str_cmd)
 48602 push #EBX
 48604 rstack EAX,EBP:2
// shell2_lookup_command arg #1 (float self)
 48608 push EAX
 48610 mov ECX,3
// shell2_lookup_command(...)
 48613 call 47730
 48616 add ESP,3
// if (shell2_lookup_command(self,argv[0],cmd_entry))
 48619 cmp 0,EAX
 48622 jge 48666
 48625 rstack EAX,EBP:-127
 48629 sstack EBP:-128,EAX
 48633 rstack EAX,EBP:-122
 48637 push EAX
 48639 rstack EAX,EBP:-123
 48643 push EAX
 48645 rstack EAX,EBP:2
 48649 push EAX
 48651 mov ECX,3
 48654 rstack EAX,EBP:-128
// cmd_func(...)
 48658 call EAX
 48660 add ESP,3
 48663 jmp 48681
__2000:
__1999:
__2002:
// printf arg #2 (unknown)
 48666 push 822
// printf arg #1 (char* format)
 48669 push 48683
 48672 mov ECX,2
// printf(...)
 48675 call 21851
 48678 add ESP,2
__2001:
__1997:
__1995:
 48681 leave 
 48682 ret 
__2003:
 48683 db "%mcommand not found
",0
shell2_associate_fs3_with_letter:
// shell2_associate_fs3_with_letter(self,fs3,letter)
 48704 enter 12
__2005:
// assert_type arg #2 (float t)
 48707 push 45739
 48710 rstack EAX,EBP:2
// assert_type arg #1 (float self)
 48714 push EAX
 48716 mov ECX,2
// assert_type(...)
 48719 call 10123
 48722 add ESP,2
 48725 mov EAX,SS:ESP
 48728 add EAX,-10
 48731 add EAX,1
 48734 sstack EBP:-11,EAX
 48738 rstack EAX,EBP:3
// entry[0]=fs3
 48742 sstack EBP:-10,EAX
// strncpy arg #3 (float n)
 48746 push 8
 48749 rstack EAX,EBP:4
// strncpy arg #2 (char* src)
 48753 push EAX
 48755 rstack EAX,EBP:-11
// strncpy arg #1 (char* dest)
 48759 push EAX
 48761 mov ECX,3
// strncpy(...)
 48764 call 11009
 48767 add ESP,3
 48770 rstack EAX,EBP:2
 48774 add EAX,2
 48777 mov EBX,EAX
 48779 sstack EBP:-12,#EBX
 48783 mov EAX,SS:ESP
 48786 add EAX,-10
// vector_push arg #2 (void* element)
 48789 push EAX
 48791 rstack EAX,EBP:-12
// vector_push arg #1 (void* self)
 48795 push EAX
 48797 mov ECX,2
// vector_push(...)
 48800 call 32926
 48803 add ESP,2
__2004:
 48806 leave 
 48807 ret 
shell2_set_fs_by_drive_letter:
// shell2_set_fs_by_drive_letter(self,letter)
 48808 enter 14
__2007:
// assert_type arg #2 (float t)
 48811 push 45739
 48814 rstack EAX,EBP:2
// assert_type arg #1 (float self)
 48818 push EAX
 48820 mov ECX,2
// assert_type(...)
 48823 call 10123
 48826 add ESP,2
 48829 rstack EAX,EBP:2
 48833 add EAX,3
 48836 mov EBX,EAX
// self[3]=0
 48838 mov #EBX,0
 48841 rstack EAX,EBP:2
 48845 add EAX,2
 48848 mov EBX,EAX
 48850 sstack EBP:-1,#EBX
 48854 rstack EAX,EBP:-1
// vector_size arg #1 (void* self)
 48858 push EAX
 48860 mov ECX,1
// vector_size(...)
 48863 call 33515
 48866 add ESP,1
 48869 sstack EBP:-2,EAX
// init loop
 48873 sstack EBP:-3,0
__2009:
 48878 rstack EAX,EBP:-3
 48882 rstack EBX,EBP:-2
 48886 sub EBX,EAX
 48888 mov EAX,EBX
 48890 fsgn EAX,EAX
// condition
 48892 max EAX,0
 48895 cmp 0,EAX
 48898 jz 49014
 48901 mov EAX,SS:ESP
 48904 add EAX,-13
 48907 add EAX,1
 48910 sstack EBP:-14,EAX
 48914 rstack EAX,EBP:-3
// vector_get arg #3 (float pos)
 48918 push EAX
 48920 mov EAX,SS:ESP
 48923 add EAX,-13
// vector_get arg #2 (void* element)
 48926 push EAX
 48928 rstack EAX,EBP:-1
// vector_get arg #1 (void* self)
 48932 push EAX
 48934 mov ECX,3
// vector_get(...)
 48937 call 33598
 48940 add ESP,3
__2011:
 48943 rstack EAX,EBP:-14
// strcmp arg #2 (char* dest)
 48947 push EAX
 48949 rstack EAX,EBP:3
// strcmp arg #1 (char* src)
 48953 push EAX
 48955 mov ECX,2
// strcmp(...)
 48958 call 10763
 48961 add ESP,2
 48964 mov EBX,0
 48967 sub EBX,EAX
 48969 fabs EBX,EBX
 48971 fsgn EBX,EBX
 48973 lneg EBX
// if (strcmp(letter,e_letter)==0)
 48975 cmp 0,EBX
 48978 jge 49001
 48981 rstack EAX,EBP:-13
 48985 rstack EBX,EBP:2
 48989 add EBX,3
 48992 mov ECX,EBX
// self[3]=entry[0]
 48994 mov #ECX,EAX
 48996 mov EAX,1
 48999 leave 
 49000 ret 
__2012:
__2010:
 49001 rstack EAX,EBP:-3
// loop step
 49005 inc EAX
 49007 sstack EBP:-3,EAX
 49011 jmp 48878
__2008:
 49014 rstack EAX,EBP:3
// printf arg #2 (unknown)
 49018 push EAX
// printf arg #1 (char* format)
 49020 push 49039
 49023 mov ECX,2
// printf(...)
 49026 call 21851
 49029 add ESP,2
 49032 mov EAX,0
 49035 leave 
 49036 ret 
__2006:
 49037 leave 
 49038 ret 
__2013:
 49039 db "fs not found for letter %s
",0
shell2_set_cd:
// shell2_set_cd(self,dir)
 49067 enter 1
__2015:
// assert_type arg #2 (float t)
 49070 push 45739
 49073 rstack EAX,EBP:2
// assert_type arg #1 (float self)
 49077 push EAX
 49079 mov ECX,2
// assert_type(...)
 49082 call 10123
 49085 add ESP,2
 49088 rstack EAX,EBP:2
 49092 add EAX,100
 49095 mov EBX,EAX
 49097 sstack EBP:-1,EBX
// strncpy arg #3 (float n)
 49101 push #45748
 49104 rstack EAX,EBP:3
// strncpy arg #2 (char* src)
 49108 push EAX
 49110 rstack EAX,EBP:-1
// strncpy arg #1 (char* dest)
 49114 push EAX
 49116 mov ECX,3
// strncpy(...)
 49119 call 11009
 49122 add ESP,3
 49125 rstack EAX,EBP:-1
// strlen arg #1 (char* str)
 49129 push EAX
 49131 mov ECX,1
// strlen(...)
 49134 call 11121
 49137 add ESP,1
 49140 rstack EBX,EBP:2
 49144 add EBX,4
 49147 mov ECX,EBX
// self[4]=strlen(cd_str)
 49149 mov #ECX,EAX
__2014:
 49151 leave 
 49152 ret 
cmdHelp:
// cmdHelp(shell,argc,argv)
 49153 enter 9
__2017:
// assert_type arg #2 (float t)
 49156 push 45739
 49159 rstack EAX,EBP:2
// assert_type arg #1 (float self)
 49163 push EAX
 49165 mov ECX,2
// assert_type(...)
 49168 call 10123
 49171 add ESP,2
__2019:
 49174 rstack EAX,EBP:3
 49178 mov EBX,1
 49181 sub EBX,EAX
 49183 neg EBX
 49185 fsgn EBX,EBX
 49187 max EBX,0
// if (argc>1)
 49190 cmp 0,EBX
 49193 jge 49225
 49196 rstack EAX,EBP:4
 49200 add EAX,1
 49203 mov EBX,EAX
 49205 push #EBX
 49207 rstack EAX,EBP:2
 49211 push EAX
 49213 mov ECX,2
// cmdHelp2(...)
 49216 call 49409
 49219 add ESP,2
 49222 jmp 49401
__2021:
__2020:
__2023:
 49225 rstack EAX,EBP:2
 49229 add EAX,5
 49232 mov EBX,EAX
 49234 sstack EBP:-1,#EBX
 49238 rstack EAX,EBP:-1
// vector_size arg #1 (void* self)
 49242 push EAX
 49244 mov ECX,1
// vector_size(...)
 49247 call 33515
 49250 add ESP,1
 49253 sstack EBP:-2,EAX
// init loop
 49257 sstack EBP:-3,0
__2025:
 49262 rstack EAX,EBP:-3
 49266 rstack EBX,EBP:-2
 49270 sub EBX,EAX
 49272 mov EAX,EBX
 49274 fsgn EAX,EAX
// condition
 49276 max EAX,0
 49279 cmp 0,EAX
 49282 jz 49401
 49285 rstack EAX,EBP:-3
// vector_get arg #3 (float pos)
 49289 push EAX
 49291 mov EAX,SS:ESP
 49294 add EAX,-7
// vector_get arg #2 (void* element)
 49297 push EAX
 49299 rstack EAX,EBP:-1
// vector_get arg #1 (void* self)
 49303 push EAX
 49305 mov ECX,3
// vector_get(...)
 49308 call 33598
 49311 add ESP,3
 49314 rstack EAX,EBP:-6
 49318 sstack EBP:-8,EAX
 49322 rstack EAX,EBP:-5
 49326 sstack EBP:-9,EAX
 49330 rstack EAX,EBP:-8
// printf arg #2 (unknown)
 49334 push EAX
// printf arg #1 (char* format)
 49336 push 48119
 49339 mov ECX,2
// printf(...)
 49342 call 21851
 49345 add ESP,2
__2027:
 49348 rstack EAX,EBP:-9
// if (e_desc)
 49352 cmp 0,EAX
 49355 jge 49376
 49358 rstack EAX,EBP:-9
// printf arg #2 (unknown)
 49362 push EAX
// printf arg #1 (char* format)
 49364 push 49403
 49367 mov ECX,2
// printf(...)
 49370 call 21851
 49373 add ESP,2
__2028:
__2026:
// printf arg #1 (char* format)
 49376 push 26727
 49379 mov ECX,1
// printf(...)
 49382 call 21851
 49385 add ESP,1
 49388 rstack EAX,EBP:-3
// loop step
 49392 inc EAX
 49394 sstack EBP:-3,EAX
 49398 jmp 49262
__2024:
__2022:
__2018:
__2016:
 49401 leave 
 49402 ret 
__2029:
 49403 db " - %s",0
cmdHelp2:
// cmdHelp2(shell,str_cmd)
 49409 enter 9
__2031:
// assert_type arg #2 (float t)
 49412 push 45739
 49415 rstack EAX,EBP:2
// assert_type arg #1 (float self)
 49419 push EAX
 49421 mov ECX,2
// assert_type(...)
 49424 call 10123
 49427 add ESP,2
 49430 rstack EAX,EBP:2
 49434 add EAX,5
 49437 mov EBX,EAX
 49439 sstack EBP:-1,#EBX
 49443 rstack EAX,EBP:-1
// vector_size arg #1 (void* self)
 49447 push EAX
 49449 mov ECX,1
// vector_size(...)
 49452 call 33515
 49455 add ESP,1
 49458 sstack EBP:-2,EAX
// init loop
 49462 sstack EBP:-3,0
__2033:
 49467 rstack EAX,EBP:-3
 49471 rstack EBX,EBP:-2
 49475 sub EBX,EAX
 49477 mov EAX,EBX
 49479 fsgn EAX,EAX
// condition
 49481 max EAX,0
 49484 cmp 0,EAX
 49487 jz 49629
 49490 rstack EAX,EBP:-3
// vector_get arg #3 (float pos)
 49494 push EAX
 49496 mov EAX,SS:ESP
 49499 add EAX,-7
// vector_get arg #2 (void* element)
 49502 push EAX
 49504 rstack EAX,EBP:-1
// vector_get arg #1 (void* self)
 49508 push EAX
 49510 mov ECX,3
// vector_get(...)
 49513 call 33598
 49516 add ESP,3
 49519 rstack EAX,EBP:-6
 49523 sstack EBP:-8,EAX
__2035:
 49527 rstack EAX,EBP:3
// strcmp arg #2 (char* dest)
 49531 push EAX
 49533 rstack EAX,EBP:-8
// strcmp arg #1 (char* src)
 49537 push EAX
 49539 mov ECX,2
// strcmp(...)
 49542 call 10763
 49545 add ESP,2
 49548 mov EBX,0
 49551 sub EBX,EAX
 49553 fabs EBX,EBX
 49555 fsgn EBX,EBX
 49557 lneg EBX
// if (strcmp(e_str,str_cmd)==0)
 49559 cmp 0,EBX
 49562 jge 49616
 49565 rstack EAX,EBP:-4
 49569 sstack EBP:-9,EAX
__2038:
 49573 rstack EAX,EBP:-9
// if (e_help)
 49577 cmp 0,EAX
 49580 jge 49604
 49583 rstack EAX,EBP:-9
// printf arg #2 (unknown)
 49587 push EAX
// printf arg #1 (char* format)
 49589 push 49631
 49592 mov ECX,2
// printf(...)
 49595 call 21851
 49598 add ESP,2
 49601 jmp 49616
__2041:
__2039:
__2043:
// printf arg #1 (char* format)
 49604 push 49635
 49607 mov ECX,1
// printf(...)
 49610 call 21851
 49613 add ESP,1
__2042:
__2037:
__2036:
__2034:
 49616 rstack EAX,EBP:-3
// loop step
 49620 inc EAX
 49622 sstack EBP:-3,EAX
 49626 jmp 49467
__2032:
__2030:
 49629 leave 
 49630 ret 
__2040:
 49631 db "%s
",0
__2044:
 49635 db "no help is available for this command
",0
cmdCls:
// cmdCls(shell)
 49674 enter -0
__2046:
 49677 mov ECX,0
// screen_clear(...)
 49680 call 18064
// setPrintCursor arg #2 (float y)
 49683 push 0
// setPrintCursor arg #1 (float x)
 49686 push 0
 49689 mov ECX,2
// setPrintCursor(...)
 49692 call 17304
 49695 add ESP,2
__2045:
 49698 leave 
 49699 ret 
cmdEcho:
// cmdEcho(shell,argc,argv)
 49700 enter 1
__2048:
// init loop
 49703 sstack EBP:-1,1
__2050:
 49708 rstack EAX,EBP:-1
 49712 rstack EBX,EBP:3
 49716 sub EBX,EAX
 49718 mov EAX,EBX
 49720 fsgn EAX,EAX
// condition
 49722 max EAX,0
 49725 cmp 0,EAX
 49728 jz 49770
 49731 rstack EAX,EBP:-1
 49735 rstack EBX,EBP:4
 49739 add EBX,EAX
 49741 mov EAX,EBX
// printf arg #2 (unknown)
 49743 push #EAX
// printf arg #1 (char* format)
 49745 push 49784
 49748 mov ECX,2
// printf(...)
 49751 call 21851
 49754 add ESP,2
 49757 rstack EAX,EBP:-1
// loop step
 49761 inc EAX
 49763 sstack EBP:-1,EAX
 49767 jmp 49708
__2049:
// printf arg #1 (char* format)
 49770 push 26727
 49773 mov ECX,1
// printf(...)
 49776 call 21851
 49779 add ESP,1
__2047:
 49782 leave 
 49783 ret 
__2051:
 49784 db "%s ",0
printBytemap:
// printBytemap(ptr,sizeX,sizeY)
 49788 enter 18
__2053:
 49791 sstack EBP:-1,0
 49796 sstack EBP:-2,999999
 49801 sstack EBP:-3,90090
 49806 sstack EBP:-4,929929
 49811 sstack EBP:-5,808808
 49816 sstack EBP:-6,9009
 49821 sstack EBP:-7,900900
 49826 rstack EAX,EBP:-1
 49830 sstack EBP:-8,EAX
 49834 rstack EAX,EBP:-2
 49838 sstack EBP:-9,EAX
 49842 rstack EAX,EBP:-3
 49846 sstack EBP:-10,EAX
 49850 rstack EAX,EBP:-4
 49854 sstack EBP:-11,EAX
 49858 rstack EAX,EBP:-5
 49862 sstack EBP:-12,EAX
 49866 rstack EAX,EBP:-6
 49870 sstack EBP:-13,EAX
// init loop
 49874 sstack EBP:-15,0
__2055:
 49879 rstack EAX,EBP:-15
 49883 rstack EBX,EBP:3
 49887 add EBX,2
 49890 mov ECX,EBX
 49892 sub ECX,EAX
 49894 fsgn ECX,ECX
// condition
 49896 max ECX,0
 49899 cmp 0,ECX
 49902 jz 49930
// printf arg #1 (char* format)
 49905 push 50355
 49908 mov ECX,1
// printf(...)
 49911 call 21851
 49914 add ESP,1
 49917 rstack EAX,EBP:-15
// loop step
 49921 inc EAX
 49923 sstack EBP:-15,EAX
 49927 jmp 49879
__2054:
// printf arg #1 (char* format)
 49930 push 26727
 49933 mov ECX,1
// printf(...)
 49936 call 21851
 49939 add ESP,1
// init loop
 49942 sstack EBP:-14,0
__2058:
 49947 rstack EAX,EBP:-14
 49951 rstack EBX,EBP:4
 49955 sub EBX,EAX
 49957 mov EAX,EBX
 49959 fsgn EAX,EAX
// condition
 49961 max EAX,0
 49964 cmp 0,EAX
 49967 jz 50285
// printf arg #1 (char* format)
 49970 push 50357
 49973 mov ECX,1
// printf(...)
 49976 call 21851
 49979 add ESP,1
// init loop
 49982 sstack EBP:-15,0
__2061:
 49987 rstack EAX,EBP:-15
 49991 rstack EBX,EBP:3
 49995 sub EBX,EAX
 49997 mov EAX,EBX
 49999 fsgn EAX,EAX
// condition
 50001 max EAX,0
 50004 cmp 0,EAX
 50007 jz 50248
 50010 rstack EAX,EBP:2
 50014 mov EBX,EAX
 50016 inc EAX
 50018 sstack EBP:2,EAX
 50022 sstack EBP:-16,#EBX
 50026 rstack EAX,EBP:-16
// floor arg #1 (float A)
 50030 push EAX
 50032 mov ECX,1
// floor(...)
 50035 call 31069
 50038 add ESP,1
 50041 neg EAX
 50043 rstack EBX,EBP:-16
 50047 add EBX,EAX
 50049 mov EAX,EBX
 50051 sstack EBP:-17,EAX
 50055 rstack EAX,EBP:-7
 50059 sstack EBP:-18,EAX
__2063:
 50063 rstack EAX,EBP:-16
 50067 mov EBX,0
 50070 sub EBX,EAX
 50072 fabs EBX,EBX
 50074 fsgn EBX,EBX
 50076 lneg EBX
// if (byte==0)
 50078 cmp 0,EBX
 50081 jge 50095
 50084 rstack EAX,EBP:-8
// col=col_zero
 50088 sstack EBP:-18,EAX
 50092 jmp 50217
__2065:
__2064:
__2067:
__2069:
 50095 rstack EAX,EBP:-17
// if (fl)
 50099 cmp 0,EAX
 50102 jge 50147
__2072:
 50105 rstack EAX,EBP:-16
 50109 mov EBX,10000
 50112 sub EBX,EAX
 50114 fsgn EBX,EBX
 50116 max EBX,0
// if (byte<10000)
 50119 cmp 0,EBX
 50122 jge 50136
 50125 rstack EAX,EBP:-11
// col=col_num_float_low
 50129 sstack EBP:-18,EAX
 50133 jmp 50144
__2074:
__2073:
__2076:
 50136 rstack EAX,EBP:-12
// col=col_num_float_high
 50140 sstack EBP:-18,EAX
__2075:
__2071:
 50144 jmp 50217
__2077:
__2070:
__2079:
__2081:
 50147 rstack EAX,EBP:-16
 50151 mov EBX,0
 50154 sub EBX,EAX
 50156 fsgn EBX,EBX
 50158 max EBX,0
// if (byte<0)
 50161 cmp 0,EBX
 50164 jge 50178
 50167 rstack EAX,EBP:-10
// col=col_num_negative
 50171 sstack EBP:-18,EAX
 50175 jmp 50217
__2083:
__2082:
__2085:
__2087:
 50178 rstack EAX,EBP:-16
 50182 mov EBX,10000
 50185 sub EBX,EAX
 50187 fsgn EBX,EBX
 50189 max EBX,0
// if (byte<10000)
 50192 cmp 0,EBX
 50195 jge 50209
 50198 rstack EAX,EBP:-9
// col=col_num_low
 50202 sstack EBP:-18,EAX
 50206 jmp 50217
__2089:
__2088:
__2091:
 50209 rstack EAX,EBP:-13
// col=col_num_high
 50213 sstack EBP:-18,EAX
__2090:
__2086:
__2084:
__2080:
__2078:
__2068:
__2066:
__2062:
 50217 rstack EAX,EBP:-18
// printf arg #2 (unknown)
 50221 push EAX
// printf arg #1 (char* format)
 50223 push 50359
 50226 mov ECX,2
// printf(...)
 50229 call 21851
 50232 add ESP,2
 50235 rstack EAX,EBP:-15
// loop step
 50239 inc EAX
 50241 sstack EBP:-15,EAX
 50245 jmp 49987
__2060:
// printf arg #1 (char* format)
 50248 push 50357
 50251 mov ECX,1
// printf(...)
 50254 call 21851
 50257 add ESP,1
// printf arg #1 (char* format)
 50260 push 26727
 50263 mov ECX,1
// printf(...)
 50266 call 21851
 50269 add ESP,1
 50272 rstack EAX,EBP:-14
// loop step
 50276 inc EAX
 50278 sstack EBP:-14,EAX
 50282 jmp 49947
__2057:
// init loop
 50285 sstack EBP:-15,0
__2094:
 50290 rstack EAX,EBP:-15
 50294 rstack EBX,EBP:3
 50298 add EBX,2
 50301 mov ECX,EBX
 50303 sub ECX,EAX
 50305 fsgn ECX,ECX
// condition
 50307 max ECX,0
 50310 cmp 0,ECX
 50313 jz 50341
// printf arg #1 (char* format)
 50316 push 50355
 50319 mov ECX,1
// printf(...)
 50322 call 21851
 50325 add ESP,1
 50328 rstack EAX,EBP:-15
// loop step
 50332 inc EAX
 50334 sstack EBP:-15,EAX
 50338 jmp 50290
__2093:
// printf arg #1 (char* format)
 50341 push 26727
 50344 mov ECX,1
// printf(...)
 50347 call 21851
 50350 add ESP,1
__2052:
 50353 leave 
 50354 ret 
__2056:
 50355 db "_",0
__2059:
 50357 db "|",0
__2092:
 50359 db "%m ",0
cmdDevice:
// cmdDevice(shell,argc,argv)
 50363 enter 7
__2096:
__2098:
 50366 rstack EAX,EBP:3
 50370 mov EBX,1
 50373 sub EBX,EAX
 50375 neg EBX
 50377 fsgn EBX,EBX
 50379 max EBX,0
// if (argc>1)
 50382 cmp 0,EBX
 50385 jge 50859
__2102:
// strcmp arg #2 (char* dest)
 50388 push 50926
 50391 rstack EAX,EBP:4
 50395 add EAX,1
 50398 mov EBX,EAX
// strcmp arg #1 (char* src)
 50400 push #EBX
 50402 mov ECX,2
// strcmp(...)
 50405 call 10763
 50408 add ESP,2
 50411 mov EBX,0
 50414 sub EBX,EAX
 50416 fabs EBX,EBX
 50418 fsgn EBX,EBX
 50420 lneg EBX
// if (strcmp(argv[1],"list")==0)
 50422 cmp 0,EBX
 50425 jge 50562
// printf arg #1 (char* format)
 50428 push 50907
 50431 mov ECX,1
// printf(...)
 50434 call 21851
 50437 add ESP,1
// init loop
 50440 sstack EBP:-7,0
__2106:
 50445 rstack EAX,EBP:-7
 50449 mov EBX,9
 50452 sub EBX,EAX
 50454 fsgn EBX,EBX
// condition
 50456 max EBX,0
 50459 cmp 0,EBX
 50462 jz 50562
 50465 rstack EAX,EBP:-7
// EBcb_get_entry arg #2 (float num)
 50469 push EAX
// EBcb_get_entry arg #1 (float this)
 50471 push 77224
 50474 mov ECX,2
// EBcb_get_entry(...)
 50477 call 19880
 50480 add ESP,2
// devEntry=EBcb_get_entry(EBcb_1,I)
 50483 sstack EBP:-2,EAX
 50487 rstack EAX,EBP:-2
// EBcb_entry_get_type arg #1 (float this)
 50491 push EAX
 50493 mov ECX,1
// EBcb_entry_get_type(...)
 50496 call 19700
 50499 add ESP,1
// devType=EBcb_entry_get_type(devEntry)
 50502 sstack EBP:-3,EAX
 50506 rstack EAX,EBP:-3
// udhTypeToString arg #1 (float type)
 50510 push EAX
 50512 mov ECX,1
// udhTypeToString(...)
 50515 call 19057
 50518 add ESP,1
// typeString=udhTypeToString(devType)
 50521 sstack EBP:-4,EAX
 50525 rstack EAX,EBP:-4
// printf arg #3 (unknown)
 50529 push EAX
 50531 rstack EAX,EBP:-7
// printf arg #2 (unknown)
 50535 push EAX
// printf arg #1 (char* format)
 50537 push 50931
 50540 mov ECX,3
// printf(...)
 50543 call 21851
 50546 add ESP,3
 50549 rstack EAX,EBP:-7
// loop step
 50553 inc EAX
 50555 sstack EBP:-7,EAX
 50559 jmp 50445
__2105:
__2103:
__2101:
__2110:
// strcmp arg #2 (char* dest)
 50562 push 50902
 50565 rstack EAX,EBP:4
 50569 add EAX,1
 50572 mov EBX,EAX
// strcmp arg #1 (char* src)
 50574 push #EBX
 50576 mov ECX,2
// strcmp(...)
 50579 call 10763
 50582 add ESP,2
 50585 mov EBX,0
 50588 sub EBX,EAX
 50590 fabs EBX,EBX
 50592 fsgn EBX,EBX
 50594 lneg EBX
// if (strcmp(argv[1],"info")==0)
 50596 cmp 0,EBX
 50599 jge 50856
__2113:
 50602 rstack EAX,EBP:3
 50606 mov EBX,2
 50609 sub EBX,EAX
 50611 neg EBX
 50613 fsgn EBX,EBX
 50615 max EBX,0
// if (argc>2)
 50618 cmp 0,EBX
 50621 jge 50830
 50624 rstack EAX,EBP:4
 50628 add EAX,2
 50631 mov EBX,EAX
// str2num arg #1 (char* str)
 50633 push #EBX
 50635 mov ECX,1
// str2num(...)
 50638 call 12270
 50641 add ESP,1
// devNum=str2num(argv[2])
 50644 sstack EBP:-1,EAX
 50648 rstack EAX,EBP:-1
// EBcb_get_entry arg #2 (float num)
 50652 push EAX
// EBcb_get_entry arg #1 (float this)
 50654 push 77224
 50657 mov ECX,2
// EBcb_get_entry(...)
 50660 call 19880
 50663 add ESP,2
// devEntry=EBcb_get_entry(EBcb_1,devNum)
 50666 sstack EBP:-2,EAX
 50670 rstack EAX,EBP:-2
// EBcb_entry_get_type arg #1 (float this)
 50674 push EAX
 50676 mov ECX,1
// EBcb_entry_get_type(...)
 50679 call 19700
 50682 add ESP,1
// devType=EBcb_entry_get_type(devEntry)
 50685 sstack EBP:-3,EAX
 50689 rstack EAX,EBP:-3
// udhTypeToString arg #1 (float type)
 50693 push EAX
 50695 mov ECX,1
// udhTypeToString(...)
 50698 call 19057
 50701 add ESP,1
// typeString=udhTypeToString(devType)
 50704 sstack EBP:-4,EAX
 50708 rstack EAX,EBP:-2
// EBcb_entry_get_addr arg #1 (float this)
 50712 push EAX
 50714 mov ECX,1
// EBcb_entry_get_addr(...)
 50717 call 19736
 50720 add ESP,1
// devAddr=EBcb_entry_get_addr(devEntry)
 50723 sstack EBP:-5,EAX
 50727 rstack EAX,EBP:-2
// EBcb_entry_get_size arg #1 (float this)
 50731 push EAX
 50733 mov ECX,1
// EBcb_entry_get_size(...)
 50736 call 19718
 50739 add ESP,1
// devSize=EBcb_entry_get_size(devEntry)
 50742 sstack EBP:-6,EAX
 50746 rstack EAX,EBP:-4
// printf arg #3 (unknown)
 50750 push EAX
 50752 rstack EAX,EBP:-1
// printf arg #2 (unknown)
 50756 push EAX
// printf arg #1 (char* format)
 50758 push 50931
 50761 mov ECX,3
// printf(...)
 50764 call 21851
 50767 add ESP,3
 50770 rstack EAX,EBP:-6
// printf arg #3 (unknown)
 50774 push EAX
 50776 rstack EAX,EBP:-5
// printf arg #2 (unknown)
 50780 push EAX
// printf arg #1 (char* format)
 50782 push 50887
 50785 mov ECX,3
// printf(...)
 50788 call 21851
 50791 add ESP,3
// printf arg #1 (char* format)
 50794 push 50917
 50797 mov ECX,1
// printf(...)
 50800 call 21851
 50803 add ESP,1
// printBytemap arg #3 (float sizeY)
 50806 push 5
// printBytemap arg #2 (float sizeX)
 50809 push 20
 50812 rstack EAX,EBP:-5
// printBytemap arg #1 (float ptr)
 50816 push EAX
 50818 mov ECX,3
// printBytemap(...)
 50821 call 49788
 50824 add ESP,3
 50827 jmp 50856
__2117:
__2114:
__2119:
 50830 rstack EAX,EBP:4
 50834 add EAX,0
 50837 mov EBX,EAX
// cmdHelp2 arg #2 (float str_cmd)
 50839 push #EBX
 50841 rstack EAX,EBP:2
// cmdHelp2 arg #1 (float shell)
 50845 push EAX
 50847 mov ECX,2
// cmdHelp2(...)
 50850 call 49409
 50853 add ESP,2
__2118:
__2112:
__2111:
__2109:
 50856 jmp 50885
__2120:
__2099:
__2122:
 50859 rstack EAX,EBP:4
 50863 add EAX,0
 50866 mov EBX,EAX
// cmdHelp2 arg #2 (float str_cmd)
 50868 push #EBX
 50870 rstack EAX,EBP:2
// cmdHelp2 arg #1 (float shell)
 50874 push EAX
 50876 mov ECX,2
// cmdHelp2(...)
 50879 call 49409
 50882 add ESP,2
__2121:
__2097:
__2095:
 50885 leave 
 50886 ret 
__2115:
 50887 db "@ %d, size %d
",0
__2108:
 50902 db "info",0
__2104:
 50907 db "devices:
",0
__2116:
 50917 db "memory:
",0
__2100:
 50926 db "list",0
__2107:
 50931 db "dev %d: %s
",0
fs_marker1:
 50943 db 0
typeof_file_handle:
 50944 db "file_handle",0
check_canary:
// check_canary(this,canary)
 50956 enter -0
__2124:
 50959 rstack EAX,EBP:3
// assert_type arg #2 (float t)
 50963 push EAX
 50965 rstack EAX,EBP:2
// assert_type arg #1 (float self)
 50969 push EAX
 50971 mov ECX,2
// assert_type(...)
 50974 call 10123
 50977 add ESP,2
__2123:
 50980 leave 
 50981 ret 
sizeof_file_handle:
 50982 db 3
file_handle_constructor:
// file_handle_constructor(this)
 50983 enter -0
__2126:
 50986 rstack EAX,EBP:2
 50990 add EAX,0
 50993 mov EBX,EAX
// this[0]=typeof_file_handle
 50995 mov #EBX,50944
 50998 rstack EAX,EBP:2
 51002 add EAX,1
 51005 mov EBX,EAX
// this[1]=0
 51007 mov #EBX,0
 51010 rstack EAX,EBP:2
 51014 add EAX,2
 51017 mov EBX,EAX
// this[2]=0
 51019 mov #EBX,0
__2125:
 51022 leave 
 51023 ret 
file_handle_copy_constructor:
// file_handle_copy_constructor(this,that)
 51024 enter -0
__2128:
 51027 rstack EAX,EBP:3
 51031 add EAX,0
 51034 mov EBX,EAX
 51036 rstack EAX,EBP:2
 51040 add EAX,0
 51043 mov ECX,EAX
// this[0]=that[0]
 51045 mov #ECX,#EBX
 51047 rstack EAX,EBP:3
 51051 add EAX,1
 51054 mov EBX,EAX
 51056 rstack EAX,EBP:2
 51060 add EAX,1
 51063 mov ECX,EAX
// this[1]=that[1]
 51065 mov #ECX,#EBX
 51067 rstack EAX,EBP:3
 51071 add EAX,2
 51074 mov EBX,EAX
 51076 rstack EAX,EBP:2
 51080 add EAX,2
 51083 mov ECX,EAX
// this[2]=that[2]
 51085 mov #ECX,#EBX
// check_canary arg #2 (float canary)
 51087 push 50944
 51090 rstack EAX,EBP:2
// check_canary arg #1 (float this)
 51094 push EAX
 51096 mov ECX,2
// check_canary(...)
 51099 call 50956
 51102 add ESP,2
__2127:
 51105 leave 
 51106 ret 
file_handle_destructor:
// file_handle_destructor(this)
 51107 enter -0
__2130:
// check_canary arg #2 (float canary)
 51110 push 50944
 51113 rstack EAX,EBP:2
// check_canary arg #1 (float this)
 51117 push EAX
 51119 mov ECX,2
// check_canary(...)
 51122 call 50956
 51125 add ESP,2
__2129:
 51128 leave 
 51129 ret 
file_handle_get_canary:
// file_handle_get_canary(this)
 51130 enter -0
__2132:
// check_canary arg #2 (float canary)
 51133 push 50944
 51136 rstack EAX,EBP:2
// check_canary arg #1 (float this)
 51140 push EAX
 51142 mov ECX,2
// check_canary(...)
 51145 call 50956
 51148 add ESP,2
 51151 rstack EAX,EBP:2
 51155 add EAX,0
 51158 mov EBX,EAX
 51160 mov EAX,#EBX
 51162 leave 
 51163 ret 
__2131:
 51164 leave 
 51165 ret 
file_handle_get_rw_ptr:
// file_handle_get_rw_ptr(this)
 51166 enter -0
__2134:
// check_canary arg #2 (float canary)
 51169 push 50944
 51172 rstack EAX,EBP:2
// check_canary arg #1 (float this)
 51176 push EAX
 51178 mov ECX,2
// check_canary(...)
 51181 call 50956
 51184 add ESP,2
 51187 rstack EAX,EBP:2
 51191 add EAX,1
 51194 mov EBX,EAX
 51196 mov EAX,#EBX
 51198 leave 
 51199 ret 
__2133:
 51200 leave 
 51201 ret 
file_handle_get_imp:
// file_handle_get_imp(this)
 51202 enter -0
__2136:
// check_canary arg #2 (float canary)
 51205 push 50944
 51208 rstack EAX,EBP:2
// check_canary arg #1 (float this)
 51212 push EAX
 51214 mov ECX,2
// check_canary(...)
 51217 call 50956
 51220 add ESP,2
 51223 rstack EAX,EBP:2
 51227 add EAX,2
 51230 mov EBX,EAX
 51232 mov EAX,#EBX
 51234 leave 
 51235 ret 
__2135:
 51236 leave 
 51237 ret 
file_handle_set_canary:
// file_handle_set_canary(this,N)
 51238 enter -0
__2138:
// check_canary arg #2 (float canary)
 51241 push 50944
 51244 rstack EAX,EBP:2
// check_canary arg #1 (float this)
 51248 push EAX
 51250 mov ECX,2
// check_canary(...)
 51253 call 50956
 51256 add ESP,2
 51259 rstack EAX,EBP:3
 51263 rstack EBX,EBP:2
 51267 add EBX,0
 51270 mov ECX,EBX
// this[0]=N
 51272 mov #ECX,EAX
__2137:
 51274 leave 
 51275 ret 
file_handle_set_rw_ptr:
// file_handle_set_rw_ptr(this,N)
 51276 enter -0
__2140:
// check_canary arg #2 (float canary)
 51279 push 50944
 51282 rstack EAX,EBP:2
// check_canary arg #1 (float this)
 51286 push EAX
 51288 mov ECX,2
// check_canary(...)
 51291 call 50956
 51294 add ESP,2
 51297 rstack EAX,EBP:3
 51301 rstack EBX,EBP:2
 51305 add EBX,1
 51308 mov ECX,EBX
// this[1]=N
 51310 mov #ECX,EAX
__2139:
 51312 leave 
 51313 ret 
file_handle_set_imp:
// file_handle_set_imp(this,N)
 51314 enter -0
__2142:
// check_canary arg #2 (float canary)
 51317 push 50944
 51320 rstack EAX,EBP:2
// check_canary arg #1 (float this)
 51324 push EAX
 51326 mov ECX,2
// check_canary(...)
 51329 call 50956
 51332 add ESP,2
 51335 rstack EAX,EBP:3
 51339 rstack EBX,EBP:2
 51343 add EBX,2
 51346 mov ECX,EBX
// this[2]=N
 51348 mov #ECX,EAX
__2141:
 51350 leave 
 51351 ret 
translate_fopen_mode:
// translate_fopen_mode(mode,read,write,keepdata,from,newfile)
 51352 enter -0
__2144:
__2147:
// strcmp arg #2 (char* dest)
 51355 push 51831
 51358 rstack EAX,EBP:2
// strcmp arg #1 (char* src)
 51362 push EAX
 51364 mov ECX,2
// strcmp(...)
 51367 call 10763
 51370 add ESP,2
 51373 mov EBX,0
 51376 sub EBX,EAX
 51378 fabs EBX,EBX
 51380 fsgn EBX,EBX
 51382 lneg EBX
// if (strcmp(mode,"r")==0)
 51384 cmp 0,EBX
 51387 jge 51427
 51390 rstack EAX,EBP:3
// *read=1
 51394 mov #EAX,1
 51397 rstack EAX,EBP:4
// *write=0
 51401 mov #EAX,0
 51404 rstack EAX,EBP:5
// *keepdata=1
 51408 mov #EAX,1
 51411 rstack EAX,EBP:6
// *from=0
 51415 mov #EAX,0
 51418 rstack EAX,EBP:7
// *newfile=0
 51422 mov #EAX,0
 51425 leave 
 51426 ret 
__2148:
__2146:
__2151:
// strcmp arg #2 (char* dest)
 51427 push 51829
 51430 rstack EAX,EBP:2
// strcmp arg #1 (char* src)
 51434 push EAX
 51436 mov ECX,2
// strcmp(...)
 51439 call 10763
 51442 add ESP,2
 51445 mov EBX,0
 51448 sub EBX,EAX
 51450 fabs EBX,EBX
 51452 fsgn EBX,EBX
 51454 lneg EBX
// if (strcmp(mode,"w")==0)
 51456 cmp 0,EBX
 51459 jge 51499
 51462 rstack EAX,EBP:3
// *read=0
 51466 mov #EAX,0
 51469 rstack EAX,EBP:4
// *write=1
 51473 mov #EAX,1
 51476 rstack EAX,EBP:5
// *keepdata=0
 51480 mov #EAX,0
 51483 rstack EAX,EBP:6
// *from=0
 51487 mov #EAX,0
 51490 rstack EAX,EBP:7
// *newfile=1
 51494 mov #EAX,1
 51497 leave 
 51498 ret 
__2152:
__2150:
__2155:
// strcmp arg #2 (char* dest)
 51499 push 51838
 51502 rstack EAX,EBP:2
// strcmp arg #1 (char* src)
 51506 push EAX
 51508 mov ECX,2
// strcmp(...)
 51511 call 10763
 51514 add ESP,2
 51517 mov EBX,0
 51520 sub EBX,EAX
 51522 fabs EBX,EBX
 51524 fsgn EBX,EBX
 51526 lneg EBX
// if (strcmp(mode,"r+")==0)
 51528 cmp 0,EBX
 51531 jge 51571
 51534 rstack EAX,EBP:3
// *read=1
 51538 mov #EAX,1
 51541 rstack EAX,EBP:4
// *write=1
 51545 mov #EAX,1
 51548 rstack EAX,EBP:5
// *keepdata=1
 51552 mov #EAX,1
 51555 rstack EAX,EBP:6
// *from=0
 51559 mov #EAX,0
 51562 rstack EAX,EBP:7
// *newfile=0
 51566 mov #EAX,0
 51569 leave 
 51570 ret 
__2156:
__2154:
__2159:
// strcmp arg #2 (char* dest)
 51571 push 51835
 51574 rstack EAX,EBP:2
// strcmp arg #1 (char* src)
 51578 push EAX
 51580 mov ECX,2
// strcmp(...)
 51583 call 10763
 51586 add ESP,2
 51589 mov EBX,0
 51592 sub EBX,EAX
 51594 fabs EBX,EBX
 51596 fsgn EBX,EBX
 51598 lneg EBX
// if (strcmp(mode,"w+")==0)
 51600 cmp 0,EBX
 51603 jge 51643
 51606 rstack EAX,EBP:3
// *read=1
 51610 mov #EAX,1
 51613 rstack EAX,EBP:4
// *write=1
 51617 mov #EAX,1
 51620 rstack EAX,EBP:5
// *keepdata=0
 51624 mov #EAX,0
 51627 rstack EAX,EBP:6
// *from=0
 51631 mov #EAX,0
 51634 rstack EAX,EBP:7
// *newfile=1
 51638 mov #EAX,1
 51641 leave 
 51642 ret 
__2160:
__2158:
__2163:
// strcmp arg #2 (char* dest)
 51643 push 51833
 51646 rstack EAX,EBP:2
// strcmp arg #1 (char* src)
 51650 push EAX
 51652 mov ECX,2
// strcmp(...)
 51655 call 10763
 51658 add ESP,2
 51661 mov EBX,0
 51664 sub EBX,EAX
 51666 fabs EBX,EBX
 51668 fsgn EBX,EBX
 51670 lneg EBX
// if (strcmp(mode,"a")==0)
 51672 cmp 0,EBX
 51675 jge 51715
 51678 rstack EAX,EBP:3
// *read=0
 51682 mov #EAX,0
 51685 rstack EAX,EBP:4
// *write=1
 51689 mov #EAX,1
 51692 rstack EAX,EBP:5
// *keepdata=1
 51696 mov #EAX,1
 51699 rstack EAX,EBP:6
// *from=1
 51703 mov #EAX,1
 51706 rstack EAX,EBP:7
// *newfile=1
 51710 mov #EAX,1
 51713 leave 
 51714 ret 
__2164:
__2162:
__2167:
// strcmp arg #2 (char* dest)
 51715 push 51826
 51718 rstack EAX,EBP:2
// strcmp arg #1 (char* src)
 51722 push EAX
 51724 mov ECX,2
// strcmp(...)
 51727 call 10763
 51730 add ESP,2
 51733 mov EBX,0
 51736 sub EBX,EAX
 51738 fabs EBX,EBX
 51740 fsgn EBX,EBX
 51742 lneg EBX
// if (strcmp(mode,"a+")==0)
 51744 cmp 0,EBX
 51747 jge 51787
 51750 rstack EAX,EBP:3
// *read=1
 51754 mov #EAX,1
 51757 rstack EAX,EBP:4
// *write=1
 51761 mov #EAX,1
 51764 rstack EAX,EBP:5
// *keepdata=1
 51768 mov #EAX,1
 51771 rstack EAX,EBP:6
// *from=1
 51775 mov #EAX,1
 51778 rstack EAX,EBP:7
// *newfile=1
 51782 mov #EAX,1
 51785 leave 
 51786 ret 
__2168:
__2166:
 51787 rstack EAX,EBP:3
// *read=0
 51791 mov #EAX,0
 51794 rstack EAX,EBP:4
// *write=0
 51798 mov #EAX,0
 51801 rstack EAX,EBP:5
// *keepdata=0
 51805 mov #EAX,0
 51808 rstack EAX,EBP:6
// *from=0
 51812 mov #EAX,0
 51815 rstack EAX,EBP:7
// *newfile=0
 51819 mov #EAX,0
 51822 leave 
 51823 ret 
__2143:
 51824 leave 
 51825 ret 
__2165:
 51826 db "a+",0
__2149:
 51829 db "w",0
__2145:
 51831 db "r",0
__2161:
 51833 db "a",0
__2157:
 51835 db "w+",0
__2153:
 51838 db "r+",0
filepath_legal:
// filepath_legal(filename)
 51841 enter 2
__2170:
 51844 sstack EBP:-1,0
__2172:
 51849 rstack EAX,EBP:-1
 51853 rstack EBX,EBP:2
 51857 add EBX,EAX
 51859 mov EAX,EBX
 51861 mov EBX,0
 51864 sub EBX,#EAX
 51866 fabs EBX,EBX
 51868 fsgn EBX,EBX
// if (filename[I]!=0
 51870 cmp 0,EBX
 51873 jz 51946
 51876 rstack EAX,EBP:-1
 51880 rstack EBX,EBP:2
 51884 add EBX,EAX
 51886 mov EAX,EBX
 51888 sstack EBP:-2,#EAX
 51892 rstack EAX,EBP:-1
// I++
 51896 inc EAX
 51898 sstack EBP:-1,EAX
__2174:
 51902 rstack EAX,EBP:-2
 51906 mov EBX,47
 51909 sub EBX,EAX
 51911 fabs EBX,EBX
 51913 fsgn EBX,EBX
 51915 rstack EAX,EBP:-2
// isAlpha arg #1 (char C)
 51919 push EAX
 51921 mov ECX,1
// isAlpha(...)
 51924 call 15387
 51927 add ESP,1
 51930 and EAX,EBX
// if (isalpha(C)&&(C!='/'))
 51932 cmp 0,EAX
 51935 jge 51943
 51938 mov EAX,0
 51941 leave 
 51942 ret 
__2175:
__2173:
 51943 jmp 51849
__2171:
 51946 mov EAX,1
 51949 leave 
 51950 ret 
__2169:
 51951 leave 
 51952 ret 
filepath_abs:
// filepath_abs(current_path,filename)
 51953 enter 3
__2177:
__2179:
 51956 rstack EAX,EBP:2
 51960 lneg EAX
 51962 mov EBX,EAX
// if (!current_path)
 51964 cmp 0,EBX
 51967 jge 51987
// printf arg #1 (char* format)
 51970 push 52189
 51973 mov ECX,1
// printf(...)
 51976 call 21851
 51979 add ESP,1
 51982 mov EAX,0
 51985 leave 
 51986 ret 
__2180:
__2178:
__2183:
 51987 rstack EAX,EBP:3
 51991 lneg EAX
 51993 mov EBX,EAX
// if (!filename)
 51995 cmp 0,EBX
 51998 jge 52018
// printf arg #1 (char* format)
 52001 push 52172
 52004 mov ECX,1
// printf(...)
 52007 call 21851
 52010 add ESP,1
 52013 mov EAX,0
 52016 leave 
 52017 ret 
__2184:
__2182:
// cstr_find_first_of arg #2 (char C)
 52018 push 58
 52021 rstack EAX,EBP:3
// cstr_find_first_of arg #1 (char* S)
 52025 push EAX
 52027 mov ECX,2
// cstr_find_first_of(...)
 52030 call 16712
 52033 add ESP,2
 52036 sstack EBP:-1,EAX
__2187:
 52040 rstack EAX,EBP:-1
 52044 mov EBX,-1
 52047 sub EBX,EAX
 52049 fabs EBX,EBX
 52051 fsgn EBX,EBX
// if (I!=-1)
 52053 cmp 0,EBX
 52056 jge 52065
 52059 rstack EAX,EBP:3
 52063 leave 
 52064 ret 
__2188:
__2186:
__2190:
 52065 rstack EAX,EBP:3
 52069 add EAX,0
 52072 mov EBX,EAX
 52074 mov EAX,47
 52077 sub EAX,#EBX
 52079 fabs EAX,EAX
 52081 fsgn EAX,EAX
 52083 lneg EAX
// if (filename[0]=='/')
 52085 cmp 0,EAX
 52088 jge 52097
 52091 rstack EAX,EBP:3
 52095 leave 
 52096 ret 
__2191:
__2189:
 52097 rstack EAX,EBP:3
// concat arg #2 (unknown)
 52101 push EAX
 52103 rstack EAX,EBP:2
// concat arg #1 (unknown)
 52107 push EAX
 52109 mov ECX,2
// concat(...)
 52112 call 16186
 52115 add ESP,2
 52118 sstack EBP:-2,EAX
 52122 rstack EAX,EBP:-2
// strlen arg #1 (char* str)
 52126 push EAX
 52128 mov ECX,1
// strlen(...)
 52131 call 11121
 52134 add ESP,1
 52137 sstack EBP:-3,EAX
// stack_return arg #3 (float num_args)
 52141 push 2
 52144 rstack EAX,EBP:-3
 52148 add EAX,1
 52151 mov EBX,EAX
// stack_return arg #2 (float size)
 52153 push EBX
 52155 rstack EAX,EBP:-2
// stack_return arg #1 (float ptr)
 52159 push EAX
 52161 mov ECX,3
// stack_return(...)
 52164 call 11897
 52167 add ESP,3
__2176:
 52170 leave 
 52171 ret 
__2185:
 52172 db "filename is null",0
__2181:
 52189 db "current_path is null",0
filepath_decimate:
// filepath_decimate(filename,folders,name,is_abs)
 52210 enter 5
__2193:
 52213 rstack EAX,EBP:3
// *folders=0
 52217 mov #EAX,0
 52220 rstack EAX,EBP:4
// *name=0
 52224 mov #EAX,0
 52227 rstack EAX,EBP:5
// *is_abs=0
 52231 mov #EAX,0
 52234 rstack EAX,EBP:2
// strlen arg #1 (char* str)
 52238 push EAX
 52240 mov ECX,1
// strlen(...)
 52243 call 11121
 52246 add ESP,1
 52249 sstack EBP:-1,EAX
 52253 sstack EBP:-2,1
 52258 rstack EAX,EBP:-1
 52262 mov EBX,12
 52265 add EBX,EAX
// malloc arg #1 (float n)
 52267 push EBX
 52269 mov ECX,1
// malloc(...)
 52272 call 29334
 52275 add ESP,1
 52278 sstack EBP:-3,EAX
 52282 rstack EAX,EBP:2
// strcpy arg #2 (char* src)
 52286 push EAX
 52288 rstack EAX,EBP:-3
 52292 add EAX,11
 52295 mov EBX,EAX
// strcpy arg #1 (char* dest)
 52297 push EBX
 52299 mov ECX,2
// strcpy(...)
 52302 call 10963
 52305 add ESP,2
 52308 rstack EAX,EBP:-3
 52312 add EAX,11
 52315 mov EBX,EAX
// filename=dir_arr+11
 52317 sstack EBP:2,EBX
 52321 sstack EBP:-4,0
__2195:
 52326 rstack EAX,EBP:-1
 52330 add EAX,-1
 52333 mov EBX,EAX
 52335 rstack EAX,EBP:2
 52339 add EAX,EBX
 52341 mov EBX,EAX
 52343 mov EAX,47
 52346 sub EAX,#EBX
 52348 fabs EAX,EAX
 52350 fsgn EAX,EAX
 52352 lneg EAX
// if (filename[len-1]=='/')
 52354 cmp 0,EAX
 52357 jge 52385
// is_file=0
 52360 sstack EBP:-2,0
 52365 rstack EAX,EBP:-1
 52369 add EAX,-1
 52372 mov EBX,EAX
 52374 rstack EAX,EBP:2
 52378 add EAX,EBX
 52380 mov EBX,EAX
// filename[len-1]=0
 52382 mov #EBX,0
__2196:
__2194:
__2198:
 52385 rstack EAX,EBP:2
 52389 add EAX,0
 52392 mov EBX,EAX
 52394 mov EAX,47
 52397 sub EAX,#EBX
 52399 fabs EAX,EAX
 52401 fsgn EAX,EAX
 52403 lneg EAX
// if (filename[0]=='/')
 52405 cmp 0,EAX
 52408 jge 52428
 52411 rstack EAX,EBP:5
// *is_abs=1
 52415 mov #EAX,1
 52418 rstack EAX,EBP:2
// filename++
 52422 inc EAX
 52424 sstack EBP:2,EAX
__2199:
__2197:
 52428 sstack EBP:-5,0
fp_dec_loop:
// cstr_find_first_of arg #2 (char C)
 52433 push 47
 52436 rstack EAX,EBP:2
// cstr_find_first_of arg #1 (char* S)
 52440 push EAX
 52442 mov ECX,2
// cstr_find_first_of(...)
 52445 call 16712
 52448 add ESP,2
// I=cstr_find_first_of(filename,'/')
 52451 sstack EBP:-5,EAX
__2201:
 52455 rstack EAX,EBP:-5
 52459 mov EBX,-1
 52462 sub EBX,EAX
 52464 fabs EBX,EBX
 52466 fsgn EBX,EBX
 52468 lneg EBX
// if (I==-1)
 52470 cmp 0,EBX
 52473 jge 52555
__2204:
 52476 rstack EAX,EBP:-2
// if (is_file)
 52480 cmp 0,EAX
 52483 jge 52499
 52486 rstack EAX,EBP:2
 52490 rstack EBX,EBP:4
// *name=filename
 52494 mov #EBX,EAX
 52496 jmp 52537
__2206:
__2205:
__2208:
 52499 rstack EAX,EBP:2
 52503 rstack EBX,EBP:-4
 52507 rstack ECX,EBP:-3
 52511 add ECX,EBX
 52513 mov EBX,ECX
// dir_arr[dir_arr_I]=filename
 52515 mov #EBX,EAX
 52517 rstack EAX,EBP:-4
// dir_arr_I++
 52521 inc EAX
 52523 sstack EBP:-4,EAX
 52527 rstack EAX,EBP:-5
// I++
 52531 inc EAX
 52533 sstack EBP:-5,EAX
__2207:
__2203:
 52537 rstack EAX,EBP:-4
 52541 rstack EBX,EBP:-3
 52545 add EBX,EAX
 52547 mov EAX,EBX
// dir_arr[dir_arr_I]=0
 52549 mov #EAX,0
 52552 jmp 52622
__2209:
__2202:
__2211:
 52555 rstack EAX,EBP:-5
 52559 rstack EBX,EBP:2
 52563 add EBX,EAX
 52565 mov EAX,EBX
// filename[I]=0
 52567 mov #EAX,0
 52570 rstack EAX,EBP:2
 52574 rstack EBX,EBP:-4
 52578 rstack ECX,EBP:-3
 52582 add ECX,EBX
 52584 mov EBX,ECX
// dir_arr[dir_arr_I]=filename
 52586 mov #EBX,EAX
 52588 rstack EAX,EBP:-4
// dir_arr_I++
 52592 inc EAX
 52594 sstack EBP:-4,EAX
 52598 rstack EAX,EBP:-5
 52602 add EAX,1
 52605 mov EBX,EAX
 52607 rstack EAX,EBP:2
 52611 add EAX,EBX
 52613 mov EBX,EAX
// filename=filename+I+1
 52615 sstack EBP:2,EBX
 52619 jmp 52433
__2210:
__2200:
 52622 rstack EAX,EBP:-3
 52626 rstack EBX,EBP:3
// *folders=dir_arr
 52630 mov #EBX,EAX
__2192:
 52632 leave 
 52633 ret 
filepath_extension:
// filepath_extension(filename)
 52634 enter 1
__2213:
// cstr_find_last_of arg #2 (char C)
 52637 push 46
 52640 rstack EAX,EBP:2
// cstr_find_last_of arg #1 (char* S)
 52644 push EAX
 52646 mov ECX,2
// cstr_find_last_of(...)
 52649 call 16821
 52652 add ESP,2
 52655 sstack EBP:-1,EAX
__2215:
 52659 rstack EAX,EBP:-1
 52663 mov EBX,-1
 52666 sub EBX,EAX
 52668 fabs EBX,EBX
 52670 fsgn EBX,EBX
 52672 lneg EBX
// if (I==-1)
 52674 cmp 0,EBX
 52677 jge 52688
 52680 mov EAX,0
 52683 leave 
 52684 ret 
 52685 jmp 52709
__2217:
__2216:
__2219:
 52688 rstack EAX,EBP:-1
 52692 add EAX,1
 52695 mov EBX,EAX
 52697 rstack EAX,EBP:2
 52701 add EAX,EBX
 52703 mov EBX,EAX
 52705 mov EAX,EBX
 52707 leave 
 52708 ret 
__2218:
__2214:
__2212:
 52709 leave 
 52710 ret 
filepath_base:
// filepath_base(filename)
 52711 enter 4
__2221:
 52714 mov EAX,SS:ESP
 52717 add EAX,-3
// filepath_decimate arg #4 (float* is_abs)
 52720 push EAX
 52722 mov EAX,SS:ESP
 52725 add EAX,-2
// filepath_decimate arg #3 (char* name)
 52728 push EAX
 52730 mov EAX,SS:ESP
 52733 add EAX,-1
// filepath_decimate arg #2 (float* folders)
 52736 push EAX
 52738 rstack EAX,EBP:2
// filepath_decimate arg #1 (char* filename)
 52742 push EAX
 52744 mov ECX,4
// filepath_decimate(...)
 52747 call 52210
 52750 add ESP,4
// cstr_find_last_of arg #2 (char C)
 52753 push 46
 52756 rstack EAX,EBP:-2
// cstr_find_last_of arg #1 (char* S)
 52760 push EAX
 52762 mov ECX,2
// cstr_find_last_of(...)
 52765 call 16821
 52768 add ESP,2
 52771 sstack EBP:-4,EAX
__2223:
 52775 rstack EAX,EBP:-4
 52779 mov EBX,-1
 52782 sub EBX,EAX
 52784 fabs EBX,EBX
 52786 fsgn EBX,EBX
 52788 lneg EBX
// if (I==-1)
 52790 cmp 0,EBX
 52793 jge 52805
 52796 rstack EAX,EBP:-2
 52800 leave 
 52801 ret 
 52802 jmp 52826
__2225:
__2224:
__2227:
 52805 rstack EAX,EBP:-4
 52809 rstack EBX,EBP:-2
 52813 add EBX,EAX
 52815 mov EAX,EBX
// name[I]=0
 52817 mov #EAX,0
 52820 rstack EAX,EBP:-2
 52824 leave 
 52825 ret 
__2226:
__2222:
__2220:
 52826 leave 
 52827 ret 
filepath_drive:
// filepath_drive(filename,driveletter)
 52828 enter 1
__2229:
// cstr_find_first_of arg #2 (char C)
 52831 push 47
 52834 rstack EAX,EBP:2
// cstr_find_first_of arg #1 (char* S)
 52838 push EAX
 52840 mov ECX,2
// cstr_find_first_of(...)
 52843 call 16712
 52846 add ESP,2
 52849 sstack EBP:-1,EAX
__2231:
 52853 rstack EAX,EBP:-1
 52857 mov EBX,1
 52860 sub EBX,EAX
 52862 neg EBX
 52864 fsgn EBX,EBX
 52866 inc EBX
 52868 max EBX,0
 52871 rstack EAX,EBP:-1
 52875 mov ECX,-1
 52878 sub ECX,EAX
 52880 fabs ECX,ECX
 52882 fsgn ECX,ECX
 52884 and ECX,EBX
// if ((I!=-1)&&(I>=1))
 52886 cmp 0,ECX
 52889 jge 52989
 52892 rstack EAX,EBP:-1
 52896 add EAX,-1
 52899 mov EBX,EAX
// I=I-1
 52901 sstack EBP:-1,EBX
__2234:
 52905 rstack EAX,EBP:-1
 52909 rstack EBX,EBP:2
 52913 add EBX,EAX
 52915 mov EAX,EBX
 52917 mov EBX,58
 52920 sub EBX,#EAX
 52922 fabs EBX,EBX
 52924 fsgn EBX,EBX
 52926 lneg EBX
// if (filename[I]==':')
 52928 cmp 0,EBX
 52931 jge 52981
 52934 rstack EAX,EBP:3
 52938 add EAX,0
 52941 mov EBX,EAX
// driveletter[0]=0
 52943 mov #EBX,0
 52946 rstack EAX,EBP:-1
// strncpy arg #3 (float n)
 52950 push EAX
 52952 rstack EAX,EBP:2
// strncpy arg #2 (char* src)
 52956 push EAX
 52958 rstack EAX,EBP:3
// strncpy arg #1 (char* dest)
 52962 push EAX
 52964 mov ECX,3
// strncpy(...)
 52967 call 11009
 52970 add ESP,3
 52973 mov EAX,1
 52976 leave 
 52977 ret 
 52978 jmp 52986
__2236:
__2235:
__2238:
 52981 mov EAX,0
 52984 leave 
 52985 ret 
__2237:
__2233:
 52986 jmp 52994
__2239:
__2232:
__2241:
 52989 mov EAX,0
 52992 leave 
 52993 ret 
__2240:
__2230:
__2228:
 52994 leave 
 52995 ret 
filepath_no_drive:
// filepath_no_drive(filename)
 52996 enter 1
__2243:
// cstr_find_first_of arg #2 (char C)
 52999 push 58
 53002 rstack EAX,EBP:2
// cstr_find_first_of arg #1 (char* S)
 53006 push EAX
 53008 mov ECX,2
// cstr_find_first_of(...)
 53011 call 16712
 53014 add ESP,2
 53017 sstack EBP:-1,EAX
__2245:
 53021 rstack EAX,EBP:-1
 53025 mov EBX,-1
 53028 sub EBX,EAX
 53030 fabs EBX,EBX
 53032 fsgn EBX,EBX
// if (I!=-1)
 53034 cmp 0,EBX
 53037 jge 53061
 53040 rstack EAX,EBP:-1
 53044 add EAX,1
 53047 mov EBX,EAX
 53049 rstack EAX,EBP:2
 53053 add EAX,EBX
 53055 mov EBX,EAX
// filename=filename+I+1
 53057 sstack EBP:2,EBX
__2246:
__2244:
 53061 rstack EAX,EBP:2
 53065 leave 
 53066 ret 
__2242:
 53067 leave 
 53068 ret 
fs_marker2:
 53069 db 0
typeof_fs3:
 53070 db "fs3_cb",0
sizeof_fs3:
 53077 db 5
init_fs3:
// init_fs3()
 53078 enter 1
__2248:
// malloc arg #1 (float n)
 53081 push #53077
 53084 mov ECX,1
// malloc(...)
 53087 call 29334
 53090 add ESP,1
 53093 sstack EBP:-1,EAX
 53097 rstack EAX,EBP:-1
 53101 add EAX,0
 53104 mov EBX,EAX
// fs3[0]=typeof_fs3
 53106 mov #EBX,53070
 53109 rstack EAX,EBP:-1
 53113 add EAX,1
 53116 mov EBX,EAX
// fs3[1]=0
 53118 mov #EBX,0
 53121 rstack EAX,EBP:-1
 53125 add EAX,2
 53128 mov EBX,EAX
// fs3[2]=0
 53130 mov #EBX,0
 53133 rstack EAX,EBP:-1
 53137 add EAX,3
 53140 mov EBX,EAX
// fs3[3]=0
 53142 mov #EBX,0
 53145 rstack EAX,EBP:-1
 53149 add EAX,4
 53152 mov EBX,EAX
// fs3[4]=0
 53154 mov #EBX,0
 53157 rstack EAX,EBP:-1
 53161 push EAX
 53163 mov ECX,1
// fs3_init_file_table(...)
 53166 call 63284
 53169 add ESP,1
 53172 rstack EAX,EBP:-1
 53176 leave 
 53177 ret 
__2247:
 53178 leave 
 53179 ret 
str_lightfs3:
 53180 db "lightfs3",0
fs3_disk_format:
// fs3_disk_format(fs3,disk_addr,disk_size,block_size)
 53189 enter 27
__2250:
// assert_type arg #2 (float t)
 53192 push 53070
 53195 rstack EAX,EBP:2
// assert_type arg #1 (float self)
 53199 push EAX
 53201 mov ECX,2
// assert_type(...)
 53204 call 10123
 53207 add ESP,2
 53210 rstack EAX,EBP:3
 53214 rstack EBX,EBP:2
 53218 add EBX,1
 53221 mov ECX,EBX
// fs3[1]=disk_addr
 53223 mov #ECX,EAX
 53225 rstack EAX,EBP:4
 53229 rstack EBX,EBP:2
 53233 add EBX,2
 53236 mov ECX,EBX
// fs3[2]=disk_size
 53238 mov #ECX,EAX
 53240 sstack EBP:-21,2
 53245 rstack EAX,EBP:-21
 53249 rstack EBX,EBP:5
 53253 add EBX,EAX
 53255 mov EAX,EBX
 53257 rstack EBX,EBP:4
 53261 add EBX,-20
 53264 mov ECX,EBX
 53266 div ECX,EAX
 53268 sstack EBP:-22,ECX
 53272 rstack EAX,EBP:-22
// floor arg #1 (float A)
 53276 push EAX
 53278 mov ECX,1
// floor(...)
 53281 call 31069
 53284 add ESP,1
// num_blocks=floor(num_blocks)
 53287 sstack EBP:-22,EAX
 53291 sstack EBP:-23,20
 53296 rstack EAX,EBP:-21
 53300 rstack EBX,EBP:-22
 53304 mul EBX,EAX
 53306 mov EAX,EBX
 53308 sstack EBP:-24,EAX
 53312 rstack EAX,EBP:-24
 53316 rstack EBX,EBP:-23
 53320 add EBX,EAX
 53322 mov EAX,EBX
 53324 sstack EBP:-25,EAX
 53328 sstack EBP:-26,2
// strlen arg #1 (char* str)
 53333 push 53180
 53336 mov ECX,1
// strlen(...)
 53339 call 11121
 53342 add ESP,1
 53345 sstack EBP:-27,EAX
 53349 rstack EAX,EBP:-27
 53353 add EAX,1
 53356 mov EBX,EAX
// memcpy arg #3 (float n)
 53358 push EBX
// memcpy arg #2 (void* src)
 53360 push 53180
 53363 mov EAX,SS:ESP
 53366 add EAX,-20
// memcpy arg #1 (void* dest)
 53369 push EAX
 53371 mov ECX,3
// memcpy(...)
 53374 call 10355
 53377 add ESP,3
 53380 rstack EAX,EBP:4
// fs_header[11]=disk_size
 53384 sstack EBP:-9,EAX
 53388 rstack EAX,EBP:5
// fs_header[12]=block_size
 53392 sstack EBP:-8,EAX
 53396 rstack EAX,EBP:-22
// fs_header[13]=num_blocks
 53400 sstack EBP:-7,EAX
 53404 rstack EAX,EBP:-23
// fs_header[14]=dptr_block_map
 53408 sstack EBP:-6,EAX
 53412 rstack EAX,EBP:-25
// fs_header[15]=dptr_file_blocks
 53416 sstack EBP:-5,EAX
 53420 rstack EAX,EBP:-26
// fs_header[16]=max_file_index
 53424 sstack EBP:-4,EAX
 53428 push 20
 53431 mov EAX,SS:ESP
 53434 add EAX,-20
 53437 push EAX
 53439 push 0
 53442 rstack EAX,EBP:2
 53446 push EAX
 53448 mov ECX,4
// fs3_low_write(...)
 53451 call 54766
 53454 add ESP,4
 53457 rstack EAX,EBP:-24
 53461 push EAX
 53463 rstack EAX,EBP:-23
 53467 push EAX
 53469 rstack EAX,EBP:2
 53473 push EAX
 53475 mov ECX,3
// fs3_low_write_0(...)
 53478 call 54855
 53481 add ESP,3
 53484 rstack EAX,EBP:2
 53488 push EAX
 53490 mov ECX,1
// fs3_create_root_dir(...)
 53493 call 53707
 53496 add ESP,1
__2249:
 53499 leave 
 53500 ret 
fs3_load_fs_descriptor:
// fs3_load_fs_descriptor(fs3,devAdr)
 53501 enter 11
__2252:
// assert_type arg #2 (float t)
 53504 push 53070
 53507 rstack EAX,EBP:2
// assert_type arg #1 (float self)
 53511 push EAX
 53513 mov ECX,2
// assert_type(...)
 53516 call 10123
 53519 add ESP,2
 53522 rstack EAX,EBP:3
 53526 rstack EBX,EBP:2
 53530 add EBX,1
 53533 mov ECX,EBX
// fs3[1]=devAdr
 53535 mov #ECX,EAX
 53537 push 1
 53540 mov EAX,SS:ESP
 53543 add EAX,-1
 53546 push EAX
 53548 push 11
 53551 rstack EAX,EBP:2
 53555 push EAX
 53557 mov ECX,4
// fs3_low_read(...)
 53560 call 54677
 53563 add ESP,4
 53566 rstack EAX,EBP:-1
 53570 rstack EBX,EBP:2
 53574 add EBX,2
 53577 mov ECX,EBX
// fs3[2]=size
 53579 mov #ECX,EAX
 53581 push 10
 53584 mov EAX,SS:ESP
 53587 add EAX,-11
 53590 push EAX
 53592 push 0
 53595 rstack EAX,EBP:2
 53599 push EAX
 53601 mov ECX,4
// fs3_low_read(...)
 53604 call 54677
 53607 add ESP,4
__2255:
// strcmp arg #2 (char* dest)
 53610 push 53698
 53613 mov EAX,SS:ESP
 53616 add EAX,-11
// strcmp arg #1 (char* src)
 53619 push EAX
 53621 mov ECX,2
// strcmp(...)
 53624 call 10763
 53627 add ESP,2
 53630 mov EBX,0
 53633 sub EBX,EAX
 53635 fabs EBX,EBX
 53637 fsgn EBX,EBX
// if (strcmp(buff,"lightfs3")!=0)
 53639 cmp 0,EBX
 53642 jge 53665
// printf arg #2 (unknown)
 53645 push 811
// printf arg #1 (char* format)
 53648 push 53672
 53651 mov ECX,2
// printf(...)
 53654 call 21851
 53657 add ESP,2
 53660 mov EAX,0
 53663 leave 
 53664 ret 
__2256:
__2254:
 53665 mov EAX,1
 53668 leave 
 53669 ret 
__2251:
 53670 leave 
 53671 ret 
__2257:
 53672 db "%mnot a lightfs3 volume!
",0
__2253:
 53698 db "lightfs3",0
fs3_create_root_dir:
// fs3_create_root_dir(fs3)
 53707 enter 3
__2259:
// assert_type arg #2 (float t)
 53710 push 53070
 53713 rstack EAX,EBP:2
// assert_type arg #1 (float self)
 53717 push EAX
 53719 mov ECX,2
// assert_type(...)
 53722 call 10123
 53725 add ESP,2
// header[0]=0
 53728 sstack EBP:-2,0
// header[1]=0
 53733 sstack EBP:-1,0
 53738 push 1
 53741 push 2
 53744 rstack EAX,EBP:2
 53748 push EAX
 53750 mov ECX,3
// fs3_open_file_index(...)
 53753 call 58024
 53756 add ESP,3
 53759 sstack EBP:-3,EAX
 53763 rstack EAX,EBP:-3
 53767 push EAX
 53769 push 2
 53772 mov EAX,SS:ESP
 53775 add EAX,-2
 53778 push EAX
 53780 mov ECX,3
// fwrite(...)
 53783 call 61481
 53786 add ESP,3
 53789 rstack EAX,EBP:-3
 53793 push EAX
 53795 mov ECX,1
// fclose(...)
 53798 call 62389
 53801 add ESP,1
__2258:
 53804 leave 
 53805 ret 
fs_marker3:
 53806 db 0
fs3_find_first_file_block:
// fs3_find_first_file_block(fs3,file_index,fblock)
 53807 enter 5
__2261:
// assert_type arg #2 (float t)
 53810 push 53070
 53813 rstack EAX,EBP:2
// assert_type arg #1 (float self)
 53817 push EAX
 53819 mov ECX,2
// assert_type(...)
 53822 call 10123
 53825 add ESP,2
 53828 push 1
 53831 mov EAX,SS:ESP
 53834 add EAX,-1
 53837 push EAX
 53839 push 14
 53842 rstack EAX,EBP:2
 53846 push EAX
 53848 mov ECX,4
// fs3_low_read(...)
 53851 call 54677
 53854 add ESP,4
 53857 push 1
 53860 mov EAX,SS:ESP
 53863 add EAX,-2
 53866 push EAX
 53868 push 13
 53871 rstack EAX,EBP:2
 53875 push EAX
 53877 mov ECX,4
// fs3_low_read(...)
 53880 call 54677
 53883 add ESP,4
// init loop
 53886 sstack EBP:-3,0
__2263:
 53891 rstack EAX,EBP:-3
 53895 rstack EBX,EBP:-2
 53899 sub EBX,EAX
 53901 mov EAX,EBX
 53903 fsgn EAX,EAX
// condition
 53905 max EAX,0
 53908 cmp 0,EAX
 53911 jz 54021
 53914 rstack EAX,EBP:-3
 53918 mov EBX,2
 53921 mul EBX,EAX
 53923 rstack EAX,EBP:-1
 53927 add EAX,EBX
 53929 mov EBX,EAX
 53931 sstack EBP:-4,EBX
 53935 push 2
 53938 rstack EAX,EBP:4
 53942 push EAX
 53944 rstack EAX,EBP:-4
 53948 push EAX
 53950 rstack EAX,EBP:2
 53954 push EAX
 53956 mov ECX,4
// fs3_low_read(...)
 53959 call 54677
 53962 add ESP,4
 53965 rstack EAX,EBP:4
 53969 add EAX,0
 53972 mov EBX,EAX
 53974 sstack EBP:-5,#EBX
__2265:
 53978 rstack EAX,EBP:-5
 53982 rstack EBX,EBP:3
 53986 sub EBX,EAX
 53988 mov EAX,EBX
 53990 fabs EAX,EAX
 53992 fsgn EAX,EAX
 53994 lneg EAX
// if (fb_index==file_index)
 53996 cmp 0,EAX
 53999 jge 54008
 54002 rstack EAX,EBP:-3
 54006 leave 
 54007 ret 
__2266:
__2264:
 54008 rstack EAX,EBP:-3
// loop step
 54012 inc EAX
 54014 sstack EBP:-3,EAX
 54018 jmp 53891
__2262:
 54021 mov EAX,-1
 54024 leave 
 54025 ret 
__2260:
 54026 leave 
 54027 ret 
fs3_get_max_file_index:
// fs3_get_max_file_index(fs3)
 54028 enter 1
__2268:
// assert_type arg #2 (float t)
 54031 push 53070
 54034 rstack EAX,EBP:2
// assert_type arg #1 (float self)
 54038 push EAX
 54040 mov ECX,2
// assert_type(...)
 54043 call 10123
 54046 add ESP,2
 54049 push 1
 54052 mov EAX,SS:ESP
 54055 add EAX,-1
 54058 push EAX
 54060 push 16
 54063 rstack EAX,EBP:2
 54067 push EAX
 54069 mov ECX,4
// fs3_low_read(...)
 54072 call 54677
 54075 add ESP,4
 54078 rstack EAX,EBP:-1
 54082 leave 
 54083 ret 
__2267:
 54084 leave 
 54085 ret 
fs3_set_max_file_index:
// fs3_set_max_file_index(fs3,file_index)
 54086 enter -0
__2270:
// assert_type arg #2 (float t)
 54089 push 53070
 54092 rstack EAX,EBP:2
// assert_type arg #1 (float self)
 54096 push EAX
 54098 mov ECX,2
// assert_type(...)
 54101 call 10123
 54104 add ESP,2
 54107 push 1
 54110 mov EAX,SS:ESP
 54113 add EAX,3
 54116 push EAX
 54118 push 16
 54121 rstack EAX,EBP:2
 54125 push EAX
 54127 mov ECX,4
// fs3_low_write(...)
 54130 call 54766
 54133 add ESP,4
__2269:
 54136 leave 
 54137 ret 
fs3_get_block_map:
// fs3_get_block_map(fs3)
 54138 enter 1
__2272:
// assert_type arg #2 (float t)
 54141 push 53070
 54144 rstack EAX,EBP:2
// assert_type arg #1 (float self)
 54148 push EAX
 54150 mov ECX,2
// assert_type(...)
 54153 call 10123
 54156 add ESP,2
 54159 push 1
 54162 mov EAX,SS:ESP
 54165 add EAX,-1
 54168 push EAX
 54170 push 14
 54173 rstack EAX,EBP:2
 54177 push EAX
 54179 mov ECX,4
// fs3_low_read(...)
 54182 call 54677
 54185 add ESP,4
 54188 rstack EAX,EBP:-1
 54192 leave 
 54193 ret 
__2271:
 54194 leave 
 54195 ret 
fs3_get_block_size:
// fs3_get_block_size(fs3)
 54196 enter 1
__2274:
// assert_type arg #2 (float t)
 54199 push 53070
 54202 rstack EAX,EBP:2
// assert_type arg #1 (float self)
 54206 push EAX
 54208 mov ECX,2
// assert_type(...)
 54211 call 10123
 54214 add ESP,2
 54217 push 1
 54220 mov EAX,SS:ESP
 54223 add EAX,-1
 54226 push EAX
 54228 push 12
 54231 rstack EAX,EBP:2
 54235 push EAX
 54237 mov ECX,4
// fs3_low_read(...)
 54240 call 54677
 54243 add ESP,4
 54246 rstack EAX,EBP:-1
 54250 leave 
 54251 ret 
__2273:
 54252 leave 
 54253 ret 
fs3_get_fblocks:
// fs3_get_fblocks(fs3)
 54254 enter 1
__2276:
// assert_type arg #2 (float t)
 54257 push 53070
 54260 rstack EAX,EBP:2
// assert_type arg #1 (float self)
 54264 push EAX
 54266 mov ECX,2
// assert_type(...)
 54269 call 10123
 54272 add ESP,2
 54275 push 1
 54278 mov EAX,SS:ESP
 54281 add EAX,-1
 54284 push EAX
 54286 push 15
 54289 rstack EAX,EBP:2
 54293 push EAX
 54295 mov ECX,4
// fs3_low_read(...)
 54298 call 54677
 54301 add ESP,4
 54304 rstack EAX,EBP:-1
 54308 leave 
 54309 ret 
__2275:
 54310 leave 
 54311 ret 
fs3_low_new:
// fs3_low_new(fs3,file_idx)
 54312 enter 7
__2278:
// assert_type arg #2 (float t)
 54315 push 53070
 54318 rstack EAX,EBP:2
// assert_type arg #1 (float self)
 54322 push EAX
 54324 mov ECX,2
// assert_type(...)
 54327 call 10123
 54330 add ESP,2
 54333 push 1
 54336 mov EAX,SS:ESP
 54339 add EAX,-1
 54342 push EAX
 54344 push 14
 54347 rstack EAX,EBP:2
 54351 push EAX
 54353 mov ECX,4
// fs3_low_read(...)
 54356 call 54677
 54359 add ESP,4
 54362 push 1
 54365 mov EAX,SS:ESP
 54368 add EAX,-2
 54371 push EAX
 54373 push 13
 54376 rstack EAX,EBP:2
 54380 push EAX
 54382 mov ECX,4
// fs3_low_read(...)
 54385 call 54677
 54388 add ESP,4
// init loop
 54391 sstack EBP:-3,0
__2280:
 54396 rstack EAX,EBP:-3
 54400 rstack EBX,EBP:-2
 54404 sub EBX,EAX
 54406 mov EAX,EBX
 54408 fsgn EAX,EAX
// condition
 54410 max EAX,0
 54413 cmp 0,EAX
 54416 jz 54565
 54419 rstack EAX,EBP:-3
 54423 mov EBX,2
 54426 mul EBX,EAX
 54428 rstack EAX,EBP:-1
 54432 add EAX,EBX
 54434 mov EBX,EAX
 54436 sstack EBP:-6,EBX
 54440 push 2
 54443 mov EAX,SS:ESP
 54446 add EAX,-5
 54449 push EAX
 54451 rstack EAX,EBP:-6
 54455 push EAX
 54457 rstack EAX,EBP:2
 54461 push EAX
 54463 mov ECX,4
// fs3_low_read(...)
 54466 call 54677
 54469 add ESP,4
 54472 rstack EAX,EBP:-5
 54476 sstack EBP:-7,EAX
__2282:
 54480 rstack EAX,EBP:-7
 54484 mov EBX,0
 54487 sub EBX,EAX
 54489 fabs EBX,EBX
 54491 fsgn EBX,EBX
 54493 lneg EBX
// if (fb_index==0)
 54495 cmp 0,EBX
 54498 jge 54552
 54501 rstack EAX,EBP:3
// fblock[0]=file_idx
 54505 sstack EBP:-5,EAX
// fblock[1]=-1
 54509 sstack EBP:-4,-1
 54514 push 2
 54517 mov EAX,SS:ESP
 54520 add EAX,-5
 54523 push EAX
 54525 rstack EAX,EBP:-6
 54529 push EAX
 54531 rstack EAX,EBP:2
 54535 push EAX
 54537 mov ECX,4
// fs3_low_write(...)
 54540 call 54766
 54543 add ESP,4
 54546 rstack EAX,EBP:-3
 54550 leave 
 54551 ret 
__2283:
__2281:
 54552 rstack EAX,EBP:-3
// loop step
 54556 inc EAX
 54558 sstack EBP:-3,EAX
 54562 jmp 54396
__2279:
 54565 mov EAX,-1
 54568 leave 
 54569 ret 
__2277:
 54570 leave 
 54571 ret 
fs3_get_disk_adr:
// fs3_get_disk_adr(fs3,block_num,ptr)
 54572 enter 3
__2285:
// assert_type arg #2 (float t)
 54575 push 53070
 54578 rstack EAX,EBP:2
// assert_type arg #1 (float self)
 54582 push EAX
 54584 mov ECX,2
// assert_type(...)
 54587 call 10123
 54590 add ESP,2
 54593 rstack EAX,EBP:2
// fs3_get_fblocks arg #1 (float fs3)
 54597 push EAX
 54599 mov ECX,1
// fs3_get_fblocks(...)
 54602 call 54254
 54605 add ESP,1
 54608 sstack EBP:-1,EAX
 54612 rstack EAX,EBP:2
// fs3_get_block_size arg #1 (float fs3)
 54616 push EAX
 54618 mov ECX,1
// fs3_get_block_size(...)
 54621 call 54196
 54624 add ESP,1
 54627 sstack EBP:-2,EAX
 54631 rstack EAX,EBP:-2
 54635 rstack EBX,EBP:4
 54639 mod EBX,EAX
 54641 mov EAX,EBX
 54643 rstack EBX,EBP:3
 54647 rstack ECX,EBP:-2
 54651 mul ECX,EBX
 54653 mov EBX,ECX
 54655 add EBX,EAX
 54657 rstack EAX,EBP:-1
 54661 add EAX,EBX
 54663 mov EBX,EAX
 54665 sstack EBP:-3,EBX
 54669 rstack EAX,EBP:-3
 54673 leave 
 54674 ret 
__2284:
 54675 leave 
 54676 ret 
fs3_low_read:
// fs3_low_read(fs3,disk_ptr,to,size)
 54677 enter 3
__2287:
// assert_type arg #2 (float t)
 54680 push 53070
 54683 rstack EAX,EBP:2
// assert_type arg #1 (float self)
 54687 push EAX
 54689 mov ECX,2
// assert_type(...)
 54692 call 10123
 54695 add ESP,2
 54698 rstack EAX,EBP:2
 54702 add EAX,1
 54705 mov EBX,EAX
 54707 sstack EBP:-1,#EBX
 54711 rstack EAX,EBP:3
 54715 rstack EBX,EBP:-1
 54719 add EBX,EAX
 54721 mov EAX,EBX
 54723 sstack EBP:-2,EAX
 54727 sstack EBP:-3,119
 54732 rstack EAX,EBP:5
// memcpy arg #3 (float n)
 54736 push EAX
 54738 rstack EAX,EBP:-2
// memcpy arg #2 (void* src)
 54742 push EAX
 54744 rstack EAX,EBP:4
// memcpy arg #1 (void* dest)
 54748 push EAX
 54750 mov ECX,3
// memcpy(...)
 54753 call 10355
 54756 add ESP,3
 54759 mov EAX,1
 54762 leave 
 54763 ret 
__2286:
 54764 leave 
 54765 ret 
fs3_low_write:
// fs3_low_write(fs3,disk_ptr,from,size)
 54766 enter 3
__2289:
// assert_type arg #2 (float t)
 54769 push 53070
 54772 rstack EAX,EBP:2
// assert_type arg #1 (float self)
 54776 push EAX
 54778 mov ECX,2
// assert_type(...)
 54781 call 10123
 54784 add ESP,2
 54787 sstack EBP:-1,505
 54792 rstack EAX,EBP:2
 54796 add EAX,1
 54799 mov EBX,EAX
 54801 sstack EBP:-2,#EBX
 54805 rstack EAX,EBP:3
 54809 rstack EBX,EBP:-2
 54813 add EBX,EAX
 54815 mov EAX,EBX
 54817 sstack EBP:-3,EAX
 54821 rstack EAX,EBP:5
// memcpy arg #3 (float n)
 54825 push EAX
 54827 rstack EAX,EBP:4
// memcpy arg #2 (void* src)
 54831 push EAX
 54833 rstack EAX,EBP:-3
// memcpy arg #1 (void* dest)
 54837 push EAX
 54839 mov ECX,3
// memcpy(...)
 54842 call 10355
 54845 add ESP,3
 54848 mov EAX,1
 54851 leave 
 54852 ret 
__2288:
 54853 leave 
 54854 ret 
fs3_low_write_0:
// fs3_low_write_0(fs3,disk_ptr,count)
 54855 enter 3
__2291:
// assert_type arg #2 (float t)
 54858 push 53070
 54861 rstack EAX,EBP:2
// assert_type arg #1 (float self)
 54865 push EAX
 54867 mov ECX,2
// assert_type(...)
 54870 call 10123
 54873 add ESP,2
 54876 rstack EAX,EBP:2
 54880 add EAX,1
 54883 mov EBX,EAX
 54885 sstack EBP:-1,#EBX
 54889 rstack EAX,EBP:3
 54893 rstack EBX,EBP:-1
 54897 add EBX,EAX
 54899 mov EAX,EBX
 54901 sstack EBP:-2,EAX
// init loop
 54905 sstack EBP:-3,0
__2293:
 54910 rstack EAX,EBP:-3
 54914 rstack EBX,EBP:4
 54918 sub EBX,EAX
 54920 mov EAX,EBX
 54922 fsgn EAX,EAX
// condition
 54924 max EAX,0
 54927 cmp 0,EAX
 54930 jz 54961
 54933 rstack EAX,EBP:-3
 54937 rstack EBX,EBP:-2
 54941 add EBX,EAX
 54943 mov EAX,EBX
// abs_ptr[I]=0
 54945 mov #EAX,0
 54948 rstack EAX,EBP:-3
// loop step
 54952 inc EAX
 54954 sstack EBP:-3,EAX
 54958 jmp 54910
__2292:
 54961 mov EAX,1
 54964 leave 
 54965 ret 
__2290:
 54966 leave 
 54967 ret 
fs3_erase_block_chain:
// fs3_erase_block_chain(fs3,block_id)
 54968 enter 7
__2295:
__2297:
 54971 rstack EAX,EBP:3
 54975 mov EBX,0
 54978 sub EBX,EAX
 54980 fabs EBX,EBX
 54982 fsgn EBX,EBX
 54984 lneg EBX
// if (block_id==0)
 54986 cmp 0,EBX
 54989 jge 54997
 54992 mov EAX,0
 54995 leave 
 54996 ret 
__2298:
__2296:
// assert_type arg #2 (float t)
 54997 push 53070
 55000 rstack EAX,EBP:2
// assert_type arg #1 (float self)
 55004 push EAX
 55006 mov ECX,2
// assert_type(...)
 55009 call 10123
 55012 add ESP,2
// fs3_low_read arg #4 (float size)
 55015 push 1
 55018 mov EAX,SS:ESP
 55021 add EAX,-1
// fs3_low_read arg #3 (float to)
 55024 push EAX
// fs3_low_read arg #2 (float disk_ptr)
 55026 push 13
 55029 rstack EAX,EBP:2
// fs3_low_read arg #1 (float fs3)
 55033 push EAX
 55035 mov ECX,4
// fs3_low_read(...)
 55038 call 54677
 55041 add ESP,4
// fs3_low_read arg #4 (float size)
 55044 push 1
 55047 mov EAX,SS:ESP
 55050 add EAX,-2
// fs3_low_read arg #3 (float to)
 55053 push EAX
// fs3_low_read arg #2 (float disk_ptr)
 55055 push 14
 55058 rstack EAX,EBP:2
// fs3_low_read arg #1 (float fs3)
 55062 push EAX
 55064 mov ECX,4
// fs3_low_read(...)
 55067 call 54677
 55070 add ESP,4
 55073 rstack EAX,EBP:-1
 55077 mul EAX,2
 55080 mov EBX,EAX
 55082 sstack EBP:-3,EBX
 55086 rstack EAX,EBP:-3
// malloc arg #1 (float n)
 55090 push EAX
 55092 mov ECX,1
// malloc(...)
 55095 call 29334
 55098 add ESP,1
 55101 sstack EBP:-4,EAX
 55105 rstack EAX,EBP:-3
// fs3_low_read arg #4 (float size)
 55109 push EAX
 55111 rstack EAX,EBP:-4
// fs3_low_read arg #3 (float to)
 55115 push EAX
 55117 rstack EAX,EBP:-2
// fs3_low_read arg #2 (float disk_ptr)
 55121 push EAX
 55123 rstack EAX,EBP:2
// fs3_low_read arg #1 (float fs3)
 55127 push EAX
 55129 mov ECX,4
// fs3_low_read(...)
 55132 call 54677
 55135 add ESP,4
__2300:
 55138 rstack EAX,EBP:3
 55142 rstack EBX,EBP:-1
 55146 add EBX,-1
 55149 mov ECX,EBX
 55151 sub ECX,EAX
 55153 fsgn ECX,ECX
 55155 max ECX,0
 55158 rstack EAX,EBP:3
 55162 mov EBX,-1
 55165 sub EBX,EAX
 55167 neg EBX
 55169 fsgn EBX,EBX
 55171 max EBX,0
 55174 and EBX,ECX
// if ((block_id>-1)&&(block_id<(num_blocks-1)))
 55176 cmp 0,EBX
 55179 jge 55187
 55182 mov EAX,0
 55185 leave 
 55186 ret 
__2301:
__2299:
__2303:
 55187 rstack EAX,EBP:3
 55191 rstack EBX,EBP:-1
 55195 add EBX,-1
 55198 mov ECX,EBX
 55200 sub ECX,EAX
 55202 fsgn ECX,ECX
 55204 max ECX,0
 55207 rstack EAX,EBP:3
 55211 mov EBX,-1
 55214 sub EBX,EAX
 55216 neg EBX
 55218 fsgn EBX,EBX
 55220 max EBX,0
 55223 and EBX,ECX
// if ((block_id>-1)&&(block_id<(num_blocks-1))
 55225 cmp 0,EBX
 55228 jz 55313
 55231 rstack EAX,EBP:3
 55235 mul EAX,2
 55238 mov EBX,EAX
 55240 rstack EAX,EBP:-4
 55244 add EAX,EBX
 55246 mov EBX,EAX
// B=blockmap+block_id*2
 55248 sstack EBP:-5,EBX
 55252 rstack EAX,EBP:-5
 55256 add EAX,0
 55259 mov EBX,EAX
// Buser=B[0]
 55261 sstack EBP:-6,#EBX
 55265 rstack EAX,EBP:-5
 55269 add EAX,1
 55272 mov EBX,EAX
// Bnext=B[1]
 55274 sstack EBP:-7,#EBX
 55278 rstack EAX,EBP:-5
 55282 add EAX,0
 55285 mov EBX,EAX
// B[0]=0
 55287 mov #EBX,0
 55290 rstack EAX,EBP:-5
 55294 add EAX,1
 55297 mov EBX,EAX
// B[1]=-1
 55299 mov #EBX,-1
 55302 rstack EAX,EBP:-7
// block_id=Bnext
 55306 sstack EBP:3,EAX
 55310 jmp 55187
__2302:
 55313 rstack EAX,EBP:-3
// fs3_low_write arg #4 (float size)
 55317 push EAX
 55319 rstack EAX,EBP:-4
// fs3_low_write arg #3 (float from)
 55323 push EAX
 55325 rstack EAX,EBP:-2
// fs3_low_write arg #2 (float disk_ptr)
 55329 push EAX
 55331 rstack EAX,EBP:2
// fs3_low_write arg #1 (float fs3)
 55335 push EAX
 55337 mov ECX,4
// fs3_low_write(...)
 55340 call 54766
 55343 add ESP,4
__2294:
 55346 leave 
 55347 ret 
fs_marker4:
 55348 db 0
fs3_entry_size:
 55349 db 40
fs3_name_size:
 55350 db 32
fs3_make_dir_entry:
// fs3_make_dir_entry(buff,file_index,type,size,cap,name)
 55351 enter 1
__2305:
 55354 rstack EAX,EBP:3
 55358 rstack EBX,EBP:2
 55362 add EBX,0
 55365 mov ECX,EBX
// buff[0]=file_index
 55367 mov #ECX,EAX
 55369 rstack EAX,EBP:4
 55373 rstack EBX,EBP:2
 55377 add EBX,1
 55380 mov ECX,EBX
// buff[1]=type
 55382 mov #ECX,EAX
 55384 rstack EAX,EBP:5
 55388 rstack EBX,EBP:2
 55392 add EBX,2
 55395 mov ECX,EBX
// buff[2]=size
 55397 mov #ECX,EAX
 55399 rstack EAX,EBP:6
 55403 rstack EBX,EBP:2
 55407 add EBX,3
 55410 mov ECX,EBX
// buff[3]=cap
 55412 mov #ECX,EAX
 55414 rstack EAX,EBP:7
// strlen arg #1 (char* str)
 55418 push EAX
 55420 mov ECX,1
// strlen(...)
 55423 call 11121
 55426 add ESP,1
 55429 sstack EBP:-1,EAX
__2307:
 55433 rstack EAX,EBP:-1
 55437 mov EBX,#55350
 55440 sub EBX,EAX
 55442 neg EBX
 55444 fsgn EBX,EBX
 55446 inc EBX
 55448 max EBX,0
// if (len>=fs3_name_size)
 55451 cmp 0,EBX
 55454 jge 55467
 55457 mov EAX,#55350
 55460 add EAX,-1
// len=fs3_name_size-1
 55463 sstack EBP:-1,EAX
__2308:
__2306:
 55467 rstack EAX,EBP:-1
// strncpy arg #3 (float n)
 55471 push EAX
 55473 rstack EAX,EBP:7
// strncpy arg #2 (char* src)
 55477 push EAX
 55479 rstack EAX,EBP:2
 55483 add EAX,4
 55486 mov EBX,EAX
// strncpy arg #1 (char* dest)
 55488 push EBX
 55490 mov ECX,3
// strncpy(...)
 55493 call 11009
 55496 add ESP,3
__2304:
 55499 leave 
 55500 ret 
fs3_dir_add_entry:
// fs3_dir_add_entry(fs3,fh_dir,entry)
 55501 enter 3
__2310:
// assert_type arg #2 (float t)
 55504 push 53070
 55507 rstack EAX,EBP:2
// assert_type arg #1 (float self)
 55511 push EAX
 55513 mov ECX,2
// assert_type(...)
 55516 call 10123
 55519 add ESP,2
 55522 push 0
 55525 push 0
 55528 rstack EAX,EBP:3
 55532 push EAX
 55534 mov ECX,3
// fseek(...)
 55537 call 61103
 55540 add ESP,3
 55543 rstack EAX,EBP:3
 55547 push EAX
 55549 push 1
 55552 mov EAX,SS:ESP
 55555 add EAX,-1
 55558 push EAX
 55560 mov ECX,3
// fread(...)
 55563 call 61307
 55566 add ESP,3
 55569 rstack EAX,EBP:-1
 55573 mul EAX,#55349
 55576 mov EBX,EAX
 55578 mov EAX,1
 55581 add EAX,EBX
 55583 sstack EBP:-2,EAX
 55587 push 0
 55590 rstack EAX,EBP:-2
 55594 push EAX
 55596 rstack EAX,EBP:3
 55600 push EAX
 55602 mov ECX,3
// fseek(...)
 55605 call 61103
 55608 add ESP,3
 55611 rstack EAX,EBP:3
 55615 push EAX
 55617 push #55349
 55620 rstack EAX,EBP:4
 55624 push EAX
 55626 mov ECX,3
// fwrite(...)
 55629 call 61481
 55632 add ESP,3
 55635 rstack EAX,EBP:-1
// n_entries++
 55639 inc EAX
 55641 sstack EBP:-1,EAX
 55645 push 0
 55648 push 0
 55651 rstack EAX,EBP:3
 55655 push EAX
 55657 mov ECX,3
// fseek(...)
 55660 call 61103
 55663 add ESP,3
 55666 rstack EAX,EBP:3
 55670 push EAX
 55672 push 1
 55675 mov EAX,SS:ESP
 55678 add EAX,-1
 55681 push EAX
 55683 mov ECX,3
// fwrite(...)
 55686 call 61481
 55689 add ESP,3
 55692 push 0
 55695 push 0
 55698 rstack EAX,EBP:3
 55702 push EAX
 55704 mov ECX,3
// fseek(...)
 55707 call 61103
 55710 add ESP,3
 55713 rstack EAX,EBP:3
 55717 push EAX
 55719 push 1
 55722 mov EAX,SS:ESP
 55725 add EAX,-3
 55728 push EAX
 55730 mov ECX,3
// fread(...)
 55733 call 61307
 55736 add ESP,3
 55739 mov EAX,1
 55742 leave 
 55743 ret 
__2309:
 55744 leave 
 55745 ret 
fs3_new_abs:
// fs3_new_abs(self,fh_dir,name,type)
 55746 enter 43
__2312:
// assert_type arg #2 (float t)
 55749 push 53070
 55752 rstack EAX,EBP:2
// assert_type arg #1 (float self)
 55756 push EAX
 55758 mov ECX,2
// assert_type(...)
 55761 call 10123
 55764 add ESP,2
 55767 rstack EAX,EBP:2
// fs3_get_max_file_index arg #1 (float fs3)
 55771 push EAX
 55773 mov ECX,1
// fs3_get_max_file_index(...)
 55776 call 54028
 55779 add ESP,1
 55782 sstack EBP:-1,EAX
__2314:
 55786 rstack EAX,EBP:-1
 55790 mov EBX,-1
 55793 sub EBX,EAX
 55795 fabs EBX,EBX
 55797 fsgn EBX,EBX
 55799 lneg EBX
// if (file_index==-1)
 55801 cmp 0,EBX
 55804 jge 55812
 55807 mov EAX,-1
 55810 leave 
 55811 ret 
__2315:
__2313:
 55812 rstack EAX,EBP:-1
// file_index++
 55816 inc EAX
 55818 sstack EBP:-1,EAX
 55822 rstack EAX,EBP:-1
// fs3_low_new arg #2 (float file_idx)
 55826 push EAX
 55828 rstack EAX,EBP:2
// fs3_low_new arg #1 (float fs3)
 55832 push EAX
 55834 mov ECX,2
// fs3_low_new(...)
 55837 call 54312
 55840 add ESP,2
 55843 sstack EBP:-2,EAX
__2317:
 55847 rstack EAX,EBP:-2
 55851 mov EBX,-1
 55854 sub EBX,EAX
 55856 fabs EBX,EBX
 55858 fsgn EBX,EBX
 55860 lneg EBX
// if (hasBlock==-1)
 55862 cmp 0,EBX
 55865 jge 55873
 55868 mov EAX,-1
 55871 leave 
 55872 ret 
__2318:
__2316:
 55873 rstack EAX,EBP:-1
// fs3_set_max_file_index arg #2 (float file_index)
 55877 push EAX
 55879 rstack EAX,EBP:2
// fs3_set_max_file_index arg #1 (float fs3)
 55883 push EAX
 55885 mov ECX,2
// fs3_set_max_file_index(...)
 55888 call 54086
 55891 add ESP,2
 55894 rstack EAX,EBP:4
// fs3_make_dir_entry arg #6 (float name)
 55898 push EAX
// fs3_make_dir_entry arg #5 (float cap)
 55900 push 0
// fs3_make_dir_entry arg #4 (float size)
 55903 push 0
// fs3_make_dir_entry arg #3 (float type)
 55906 push 0
 55909 rstack EAX,EBP:-1
// fs3_make_dir_entry arg #2 (float file_index)
 55913 push EAX
 55915 mov EAX,SS:ESP
 55918 add EAX,-42
// fs3_make_dir_entry arg #1 (float buff)
 55921 push EAX
 55923 mov ECX,6
// fs3_make_dir_entry(...)
 55926 call 55351
 55929 add ESP,6
 55932 sstack EBP:-43,EAX
__2320:
 55936 rstack EAX,EBP:-43
 55940 lneg EAX
 55942 mov EBX,EAX
// if (!res)
 55944 cmp 0,EBX
 55947 jge 55955
 55950 mov EAX,-1
 55953 leave 
 55954 ret 
__2321:
__2319:
 55955 mov EAX,SS:ESP
 55958 add EAX,-42
// fs3_dir_add_entry arg #3 (float entry)
 55961 push EAX
 55963 rstack EAX,EBP:3
// fs3_dir_add_entry arg #2 (float fh_dir)
 55967 push EAX
 55969 rstack EAX,EBP:2
// fs3_dir_add_entry arg #1 (float fs3)
 55973 push EAX
 55975 mov ECX,3
// fs3_dir_add_entry(...)
 55978 call 55501
 55981 add ESP,3
// res=fs3_dir_add_entry(self,fh_dir,buff)
 55984 sstack EBP:-43,EAX
__2323:
 55988 rstack EAX,EBP:-43
 55992 lneg EAX
 55994 mov EBX,EAX
// if (!res)
 55996 cmp 0,EBX
 55999 jge 56007
 56002 mov EAX,-1
 56005 leave 
 56006 ret 
__2324:
__2322:
 56007 rstack EAX,EBP:-1
 56011 leave 
 56012 ret 
__2311:
 56013 leave 
 56014 ret 
fs3_dir_read_entry:
// fs3_dir_read_entry(fs3,fh_dir,I,buff)
 56015 enter 1
__2326:
// assert_type arg #2 (float t)
 56018 push 53070
 56021 rstack EAX,EBP:2
// assert_type arg #1 (float self)
 56025 push EAX
 56027 mov ECX,2
// assert_type(...)
 56030 call 10123
 56033 add ESP,2
// assert_type arg #2 (float t)
 56036 push 50944
 56039 rstack EAX,EBP:3
// assert_type arg #1 (float self)
 56043 push EAX
 56045 mov ECX,2
// assert_type(...)
 56048 call 10123
 56051 add ESP,2
 56054 rstack EAX,EBP:4
 56058 push EAX
 56060 rstack EAX,EBP:3
 56064 push EAX
 56066 rstack EAX,EBP:2
 56070 push EAX
 56072 mov ECX,3
// fs3_dir_get_entry_ptr(...)
 56075 call 56258
 56078 add ESP,3
 56081 sstack EBP:-1,EAX
__2328:
 56085 rstack EAX,EBP:-1
 56089 mov EBX,-1
 56092 sub EBX,EAX
 56094 fabs EBX,EBX
 56096 fsgn EBX,EBX
// if (fptr_entry!=-1)
 56098 cmp 0,EBX
 56101 jge 56157
 56104 push 0
 56107 rstack EAX,EBP:-1
 56111 push EAX
 56113 rstack EAX,EBP:3
 56117 push EAX
 56119 mov ECX,3
// fseek(...)
 56122 call 61103
 56125 add ESP,3
 56128 rstack EAX,EBP:3
 56132 push EAX
 56134 push #55349
 56137 rstack EAX,EBP:5
 56141 push EAX
 56143 mov ECX,3
// fread(...)
 56146 call 61307
 56149 add ESP,3
 56152 mov EAX,1
 56155 leave 
 56156 ret 
__2329:
__2327:
 56157 mov EAX,0
 56160 leave 
 56161 ret 
__2325:
 56162 leave 
 56163 ret 
fs3_dir_get_num_entries:
// fs3_dir_get_num_entries(fs3,fh_dir)
 56164 enter 1
__2331:
// assert_type arg #2 (float t)
 56167 push 53070
 56170 rstack EAX,EBP:2
// assert_type arg #1 (float self)
 56174 push EAX
 56176 mov ECX,2
// assert_type(...)
 56179 call 10123
 56182 add ESP,2
// assert_type arg #2 (float t)
 56185 push 50944
 56188 rstack EAX,EBP:3
// assert_type arg #1 (float self)
 56192 push EAX
 56194 mov ECX,2
// assert_type(...)
 56197 call 10123
 56200 add ESP,2
 56203 push 0
 56206 push 0
 56209 rstack EAX,EBP:3
 56213 push EAX
 56215 mov ECX,3
// fseek(...)
 56218 call 61103
 56221 add ESP,3
 56224 rstack EAX,EBP:3
 56228 push EAX
 56230 push 1
 56233 mov EAX,SS:ESP
 56236 add EAX,-1
 56239 push EAX
 56241 mov ECX,3
// fread(...)
 56244 call 61307
 56247 add ESP,3
 56250 rstack EAX,EBP:-1
 56254 leave 
 56255 ret 
__2330:
 56256 leave 
 56257 ret 
fs3_dir_get_entry_ptr:
// fs3_dir_get_entry_ptr(fs3,fh_dir,I)
 56258 enter 2
__2333:
// assert_type arg #2 (float t)
 56261 push 53070
 56264 rstack EAX,EBP:2
// assert_type arg #1 (float self)
 56268 push EAX
 56270 mov ECX,2
// assert_type(...)
 56273 call 10123
 56276 add ESP,2
// assert_type arg #2 (float t)
 56279 push 50944
 56282 rstack EAX,EBP:3
// assert_type arg #1 (float self)
 56286 push EAX
 56288 mov ECX,2
// assert_type(...)
 56291 call 10123
 56294 add ESP,2
 56297 rstack EAX,EBP:3
// fs3_dir_get_num_entries arg #2 (float fh_dir)
 56301 push EAX
 56303 rstack EAX,EBP:2
// fs3_dir_get_num_entries arg #1 (float fs3)
 56307 push EAX
 56309 mov ECX,2
// fs3_dir_get_num_entries(...)
 56312 call 56164
 56315 add ESP,2
 56318 sstack EBP:-1,EAX
__2335:
 56322 rstack EAX,EBP:4
 56326 rstack EBX,EBP:-1
 56330 sub EBX,EAX
 56332 mov EAX,EBX
 56334 neg EAX
 56336 fsgn EAX,EAX
 56338 inc EAX
 56340 max EAX,0
// if (I>=n_entries)
 56343 cmp 0,EAX
 56346 jge 56354
 56349 mov EAX,-1
 56352 leave 
 56353 ret 
__2336:
__2334:
 56354 rstack EAX,EBP:4
 56358 mul EAX,#55349
 56361 mov EBX,EAX
 56363 mov EAX,1
 56366 add EAX,EBX
 56368 sstack EBP:-2,EAX
 56372 rstack EAX,EBP:-2
 56376 leave 
 56377 ret 
__2332:
 56378 leave 
 56379 ret 
fs3_dir_erase_entry:
// fs3_dir_erase_entry(fs3,fh_dir,entry_id)
 56380 enter 8
__2338:
// assert_type arg #2 (float t)
 56383 push 53070
 56386 rstack EAX,EBP:2
// assert_type arg #1 (float self)
 56390 push EAX
 56392 mov ECX,2
// assert_type(...)
 56395 call 10123
 56398 add ESP,2
// assert_type arg #2 (float t)
 56401 push 50944
 56404 rstack EAX,EBP:3
// assert_type arg #1 (float self)
 56408 push EAX
 56410 mov ECX,2
// assert_type(...)
 56413 call 10123
 56416 add ESP,2
 56419 rstack EAX,EBP:3
// fs3_dir_get_num_entries arg #2 (float fh_dir)
 56423 push EAX
 56425 rstack EAX,EBP:2
// fs3_dir_get_num_entries arg #1 (float fs3)
 56429 push EAX
 56431 mov ECX,2
// fs3_dir_get_num_entries(...)
 56434 call 56164
 56437 add ESP,2
 56440 sstack EBP:-1,EAX
__2340:
 56444 rstack EAX,EBP:4
 56448 rstack EBX,EBP:-1
 56452 sub EBX,EAX
 56454 mov EAX,EBX
 56456 neg EAX
 56458 fsgn EAX,EAX
 56460 inc EAX
 56462 max EAX,0
// if (entry_id>=n_entries)
 56465 cmp 0,EAX
 56468 jge 56476
 56471 mov EAX,-1
 56474 leave 
 56475 ret 
__2341:
__2339:
 56476 rstack EAX,EBP:4
 56480 mul EAX,#55349
 56483 mov EBX,EAX
 56485 mov EAX,1
 56488 add EAX,EBX
 56490 sstack EBP:-2,EAX
 56494 rstack EAX,EBP:-2
 56498 add EAX,#55349
 56501 mov EBX,EAX
 56503 sstack EBP:-3,EBX
 56507 rstack EAX,EBP:-2
 56511 neg EAX
 56513 mov EBX,EAX
 56515 add EBX,-1
 56518 rstack EAX,EBP:-1
 56522 add EAX,EBX
 56524 mov EBX,EAX
 56526 sstack EBP:-4,EBX
 56530 rstack EAX,EBP:-4
 56534 mul EAX,#55349
 56537 mov EBX,EAX
 56539 sstack EBP:-5,EBX
 56543 rstack EAX,EBP:-5
// malloc arg #1 (float n)
 56547 push EAX
 56549 mov ECX,1
// malloc(...)
 56552 call 29334
 56555 add ESP,1
 56558 sstack EBP:-6,EAX
 56562 push 0
 56565 rstack EAX,EBP:-3
 56569 push EAX
 56571 rstack EAX,EBP:3
 56575 push EAX
 56577 mov ECX,3
// fseek(...)
 56580 call 61103
 56583 add ESP,3
 56586 rstack EAX,EBP:3
 56590 push EAX
 56592 rstack EAX,EBP:-5
 56596 push EAX
 56598 rstack EAX,EBP:-6
 56602 push EAX
 56604 mov ECX,3
// fread(...)
 56607 call 61307
 56610 add ESP,3
 56613 push 0
 56616 rstack EAX,EBP:-2
 56620 push EAX
 56622 rstack EAX,EBP:3
 56626 push EAX
 56628 mov ECX,3
// fseek(...)
 56631 call 61103
 56634 add ESP,3
 56637 rstack EAX,EBP:3
 56641 push EAX
 56643 rstack EAX,EBP:-5
 56647 push EAX
 56649 rstack EAX,EBP:-6
 56653 push EAX
 56655 mov ECX,3
// fwrite(...)
 56658 call 61481
 56661 add ESP,3
 56664 rstack EAX,EBP:-1
// n_entries--
 56668 dec EAX
 56670 sstack EBP:-1,EAX
 56674 rstack EAX,EBP:-1
 56678 add EAX,-1
 56681 mov EBX,EAX
 56683 mul EBX,#55349
 56686 mov EAX,1
 56689 add EAX,EBX
 56691 sstack EBP:-7,EAX
 56695 push 0
 56698 rstack EAX,EBP:-7
 56702 push EAX
 56704 rstack EAX,EBP:3
 56708 push EAX
 56710 mov ECX,3
// fseek(...)
 56713 call 61103
 56716 add ESP,3
 56719 sstack EBP:-8,0
 56724 rstack EAX,EBP:3
 56728 push EAX
 56730 push 1
 56733 mov EAX,SS:ESP
 56736 add EAX,-8
 56739 push EAX
 56741 mov ECX,3
// fwrite(...)
 56744 call 61481
 56747 add ESP,3
 56750 push 0
 56753 push 0
 56756 rstack EAX,EBP:3
 56760 push EAX
 56762 mov ECX,3
// fseek(...)
 56765 call 61103
 56768 add ESP,3
 56771 rstack EAX,EBP:3
 56775 push EAX
 56777 push 1
 56780 mov EAX,SS:ESP
 56783 add EAX,-1
 56786 push EAX
 56788 mov ECX,3
// fwrite(...)
 56791 call 61481
 56794 add ESP,3
__2337:
 56797 leave 
 56798 ret 
fs3_dir_get_filename:
// fs3_dir_get_filename(fs3,fh_dir,I,res_str)
 56799 enter 2
__2343:
// assert_type arg #2 (float t)
 56802 push 53070
 56805 rstack EAX,EBP:2
// assert_type arg #1 (float self)
 56809 push EAX
 56811 mov ECX,2
// assert_type(...)
 56814 call 10123
 56817 add ESP,2
// assert_type arg #2 (float t)
 56820 push 50944
 56823 rstack EAX,EBP:3
// assert_type arg #1 (float self)
 56827 push EAX
 56829 mov ECX,2
// assert_type(...)
 56832 call 10123
 56835 add ESP,2
 56838 rstack EAX,EBP:4
// fs3_dir_get_entry_ptr arg #3 (float I)
 56842 push EAX
 56844 rstack EAX,EBP:3
// fs3_dir_get_entry_ptr arg #2 (float fh_dir)
 56848 push EAX
 56850 rstack EAX,EBP:2
// fs3_dir_get_entry_ptr arg #1 (float fs3)
 56854 push EAX
 56856 mov ECX,3
// fs3_dir_get_entry_ptr(...)
 56859 call 56258
 56862 add ESP,3
 56865 sstack EBP:-1,EAX
__2345:
 56869 rstack EAX,EBP:-1
 56873 mov EBX,-1
 56876 sub EBX,EAX
 56878 fabs EBX,EBX
 56880 fsgn EBX,EBX
 56882 lneg EBX
// if (dptr_entry==-1)
 56884 cmp 0,EBX
 56887 jge 56895
 56890 mov EAX,0
 56893 leave 
 56894 ret 
__2346:
__2344:
 56895 rstack EAX,EBP:-1
 56899 add EAX,4
 56902 mov EBX,EAX
 56904 sstack EBP:-2,EBX
 56908 push 0
 56911 rstack EAX,EBP:-2
 56915 push EAX
 56917 rstack EAX,EBP:3
 56921 push EAX
 56923 mov ECX,3
// fseek(...)
 56926 call 61103
 56929 add ESP,3
 56932 rstack EAX,EBP:3
 56936 push EAX
 56938 push #55350
 56941 rstack EAX,EBP:5
 56945 push EAX
 56947 mov ECX,3
// fread(...)
 56950 call 61307
 56953 add ESP,3
 56956 mov EAX,1
 56959 leave 
 56960 ret 
__2342:
 56961 leave 
 56962 ret 
fs3_print_file_handle:
// fs3_print_file_handle(fs3,file_handle)
 56963 enter 3
__2348:
 56966 rstack EAX,EBP:3
// printf arg #2 (unknown)
 56970 push EAX
// printf arg #1 (char* format)
 56972 push 57112
 56975 mov ECX,2
// printf(...)
 56978 call 21851
 56981 add ESP,2
 56984 rstack EAX,EBP:3
// file_handle_get_imp arg #1 (float this)
 56988 push EAX
 56990 mov ECX,1
// file_handle_get_imp(...)
 56993 call 51202
 56996 add ESP,1
 56999 sstack EBP:-1,EAX
 57003 rstack EAX,EBP:-1
// printf arg #2 (unknown)
 57007 push EAX
// printf arg #1 (char* format)
 57009 push 57103
 57012 mov ECX,2
// printf(...)
 57015 call 21851
 57018 add ESP,2
// assert_type arg #2 (float t)
 57021 push 60177
 57024 rstack EAX,EBP:-1
// assert_type arg #1 (float self)
 57028 push EAX
 57030 mov ECX,2
// assert_type(...)
 57033 call 10123
 57036 add ESP,2
 57039 rstack EAX,EBP:-1
 57043 add EAX,4
 57046 mov EBX,EAX
 57048 sstack EBP:-2,#EBX
 57052 rstack EAX,EBP:-2
// printf arg #2 (unknown)
 57056 push EAX
// printf arg #1 (char* format)
 57058 push 57129
 57061 mov ECX,2
// printf(...)
 57064 call 21851
 57067 add ESP,2
 57070 rstack EAX,EBP:-1
 57074 add EAX,5
 57077 mov EBX,EAX
 57079 sstack EBP:-3,#EBX
 57083 rstack EAX,EBP:-3
// printf arg #2 (unknown)
 57087 push EAX
// printf arg #1 (char* format)
 57089 push 57145
 57092 mov ECX,2
// printf(...)
 57095 call 21851
 57098 add ESP,2
__2347:
 57101 leave 
 57102 ret 
__2350:
 57103 db "imp: %d
",0
__2349:
 57112 db "file_handle: %d
",0
__2351:
 57129 db "file_index: %d
",0
__2352:
 57145 db "block: %d
",0
fs3_print_entry:
// fs3_print_entry(fs3,fh_dir,I)
 57156 enter 7
__2354:
// malloc arg #1 (float n)
 57159 push #55349
 57162 mov ECX,1
// malloc(...)
 57165 call 29334
 57168 add ESP,1
 57171 sstack EBP:-1,EAX
 57175 rstack EAX,EBP:4
// fs3_dir_get_entry_ptr arg #3 (float I)
 57179 push EAX
 57181 rstack EAX,EBP:3
// fs3_dir_get_entry_ptr arg #2 (float fh_dir)
 57185 push EAX
 57187 rstack EAX,EBP:2
// fs3_dir_get_entry_ptr arg #1 (float fs3)
 57191 push EAX
 57193 mov ECX,3
// fs3_dir_get_entry_ptr(...)
 57196 call 56258
 57199 add ESP,3
 57202 sstack EBP:-2,EAX
__2356:
 57206 rstack EAX,EBP:-2
 57210 mov EBX,-1
 57213 sub EBX,EAX
 57215 fabs EBX,EBX
 57217 fsgn EBX,EBX
 57219 lneg EBX
// if (dptr_entry==-1)
 57221 cmp 0,EBX
 57224 jge 57232
 57227 mov EAX,-1
 57230 leave 
 57231 ret 
__2357:
__2355:
 57232 push 0
 57235 rstack EAX,EBP:-2
 57239 push EAX
 57241 rstack EAX,EBP:3
 57245 push EAX
 57247 mov ECX,3
// fseek(...)
 57250 call 61103
 57253 add ESP,3
 57256 rstack EAX,EBP:3
 57260 push EAX
 57262 push #55349
 57265 rstack EAX,EBP:-1
 57269 push EAX
 57271 mov ECX,3
// fread(...)
 57274 call 61307
 57277 add ESP,3
 57280 rstack EAX,EBP:-1
 57284 add EAX,0
 57287 mov EBX,EAX
 57289 sstack EBP:-3,#EBX
 57293 rstack EAX,EBP:-1
 57297 add EAX,1
 57300 mov EBX,EAX
 57302 sstack EBP:-4,#EBX
 57306 rstack EAX,EBP:-1
 57310 add EAX,2
 57313 mov EBX,EAX
 57315 sstack EBP:-5,#EBX
 57319 rstack EAX,EBP:-1
 57323 add EAX,3
 57326 mov EBX,EAX
 57328 sstack EBP:-6,#EBX
 57332 rstack EAX,EBP:-1
 57336 add EAX,4
 57339 mov EBX,EAX
 57341 sstack EBP:-7,EBX
// printf arg #1 (char* format)
 57345 push 57586
 57348 mov ECX,1
// printf(...)
 57351 call 21851
 57354 add ESP,1
 57357 rstack EAX,EBP:3
// fs3_print_file_handle arg #2 (float file_handle)
 57361 push EAX
 57363 rstack EAX,EBP:2
// fs3_print_file_handle arg #1 (float fs3)
 57367 push EAX
 57369 mov ECX,2
// fs3_print_file_handle(...)
 57372 call 56963
 57375 add ESP,2
 57378 rstack EAX,EBP:4
// printf arg #3 (unknown)
 57382 push EAX
 57384 rstack EAX,EBP:3
// printf arg #2 (unknown)
 57388 push EAX
// printf arg #1 (char* format)
 57390 push 57545
 57393 mov ECX,3
// printf(...)
 57396 call 21851
 57399 add ESP,3
 57402 rstack EAX,EBP:-3
// printf arg #2 (unknown)
 57406 push EAX
// printf arg #1 (char* format)
 57408 push 57494
 57411 mov ECX,2
// printf(...)
 57414 call 21851
 57417 add ESP,2
 57420 rstack EAX,EBP:-4
// printf arg #2 (unknown)
 57424 push EAX
// printf arg #1 (char* format)
 57426 push 57599
 57429 mov ECX,2
// printf(...)
 57432 call 21851
 57435 add ESP,2
 57438 rstack EAX,EBP:-5
// printf arg #2 (unknown)
 57442 push EAX
// printf arg #1 (char* format)
 57444 push 57534
 57447 mov ECX,2
// printf(...)
 57450 call 21851
 57453 add ESP,2
 57456 rstack EAX,EBP:-6
// printf arg #2 (unknown)
 57460 push EAX
// printf arg #1 (char* format)
 57462 push 57511
 57465 mov ECX,2
// printf(...)
 57468 call 21851
 57471 add ESP,2
 57474 rstack EAX,EBP:-7
// printf arg #2 (unknown)
 57478 push EAX
// printf arg #1 (char* format)
 57480 push 57521
 57483 mov ECX,2
// printf(...)
 57486 call 21851
 57489 add ESP,2
__2353:
 57492 leave 
 57493 ret 
__2360:
 57494 db "file_index = %d
",0
__2363:
 57511 db "cap = %d
",0
__2364:
 57521 db "name = [%s]
",0
__2362:
 57534 db "size = %d
",0
__2359:
 57545 db "fs3 entry:
fh_dir = %d
entry index = %d
",0
__2358:
 57586 db "fs3 fh_dir:
",0
__2361:
 57599 db "type = %d
",0
fs3_dir_get_filesize:
// fs3_dir_get_filesize(fs3,fh_dir,I)
 57610 enter 3
__2366:
// assert_type arg #2 (float t)
 57613 push 53070
 57616 rstack EAX,EBP:2
// assert_type arg #1 (float self)
 57620 push EAX
 57622 mov ECX,2
// assert_type(...)
 57625 call 10123
 57628 add ESP,2
// assert_type arg #2 (float t)
 57631 push 50944
 57634 rstack EAX,EBP:3
// assert_type arg #1 (float self)
 57638 push EAX
 57640 mov ECX,2
// assert_type(...)
 57643 call 10123
 57646 add ESP,2
 57649 sstack EBP:-1,-1
 57654 rstack EAX,EBP:4
// fs3_dir_get_entry_ptr arg #3 (float I)
 57658 push EAX
 57660 rstack EAX,EBP:3
// fs3_dir_get_entry_ptr arg #2 (float fh_dir)
 57664 push EAX
 57666 rstack EAX,EBP:2
// fs3_dir_get_entry_ptr arg #1 (float fs3)
 57670 push EAX
 57672 mov ECX,3
// fs3_dir_get_entry_ptr(...)
 57675 call 56258
 57678 add ESP,3
 57681 sstack EBP:-2,EAX
__2368:
 57685 rstack EAX,EBP:-2
 57689 mov EBX,-1
 57692 sub EBX,EAX
 57694 fabs EBX,EBX
 57696 fsgn EBX,EBX
 57698 lneg EBX
// if (dptr_entry==-1)
 57700 cmp 0,EBX
 57703 jge 57711
 57706 mov EAX,-1
 57709 leave 
 57710 ret 
__2369:
__2367:
 57711 rstack EAX,EBP:-2
 57715 add EAX,2
 57718 mov EBX,EAX
 57720 sstack EBP:-3,EBX
 57724 push 0
 57727 rstack EAX,EBP:-3
 57731 push EAX
 57733 rstack EAX,EBP:3
 57737 push EAX
 57739 mov ECX,3
// fseek(...)
 57742 call 61103
 57745 add ESP,3
 57748 rstack EAX,EBP:3
 57752 push EAX
 57754 push 1
 57757 mov EAX,SS:ESP
 57760 add EAX,-1
 57763 push EAX
 57765 mov ECX,3
// fread(...)
 57768 call 61307
 57771 add ESP,3
 57774 rstack EAX,EBP:-1
 57778 leave 
 57779 ret 
__2365:
 57780 leave 
 57781 ret 
fs3_dir_find_fidx:
// fs3_dir_find_fidx(fs3,fh_dir,file_index)
 57782 enter 5
__2371:
// assert_type arg #2 (float t)
 57785 push 53070
 57788 rstack EAX,EBP:2
// assert_type arg #1 (float self)
 57792 push EAX
 57794 mov ECX,2
// assert_type(...)
 57797 call 10123
 57800 add ESP,2
// assert_type arg #2 (float t)
 57803 push 50944
 57806 rstack EAX,EBP:3
// assert_type arg #1 (float self)
 57810 push EAX
 57812 mov ECX,2
// assert_type(...)
 57815 call 10123
 57818 add ESP,2
 57821 rstack EAX,EBP:3
// fs3_dir_get_num_entries arg #2 (float fh_dir)
 57825 push EAX
 57827 rstack EAX,EBP:2
// fs3_dir_get_num_entries arg #1 (float fs3)
 57831 push EAX
 57833 mov ECX,2
// fs3_dir_get_num_entries(...)
 57836 call 56164
 57839 add ESP,2
 57842 sstack EBP:-1,EAX
// init loop
 57846 sstack EBP:-2,0
__2373:
 57851 rstack EAX,EBP:-2
 57855 rstack EBX,EBP:-1
 57859 sub EBX,EAX
 57861 mov EAX,EBX
 57863 fsgn EAX,EAX
// condition
 57865 max EAX,0
 57868 cmp 0,EAX
 57871 jz 58016
 57874 rstack EAX,EBP:-2
// fs3_dir_get_entry_ptr arg #3 (float I)
 57878 push EAX
 57880 rstack EAX,EBP:3
// fs3_dir_get_entry_ptr arg #2 (float fh_dir)
 57884 push EAX
 57886 rstack EAX,EBP:2
// fs3_dir_get_entry_ptr arg #1 (float fs3)
 57890 push EAX
 57892 mov ECX,3
// fs3_dir_get_entry_ptr(...)
 57895 call 56258
 57898 add ESP,3
 57901 sstack EBP:-3,EAX
 57905 rstack EAX,EBP:-3
 57909 add EAX,0
 57912 mov EBX,EAX
 57914 sstack EBP:-4,EBX
 57918 sstack EBP:-5,0
 57923 push 0
 57926 rstack EAX,EBP:-4
 57930 push EAX
 57932 rstack EAX,EBP:3
 57936 push EAX
 57938 mov ECX,3
// fseek(...)
 57941 call 61103
 57944 add ESP,3
 57947 rstack EAX,EBP:3
 57951 push EAX
 57953 push 1
 57956 mov EAX,SS:ESP
 57959 add EAX,-5
 57962 push EAX
 57964 mov ECX,3
// fread(...)
 57967 call 61307
 57970 add ESP,3
__2375:
 57973 rstack EAX,EBP:-5
 57977 rstack EBX,EBP:4
 57981 sub EBX,EAX
 57983 mov EAX,EBX
 57985 fabs EAX,EAX
 57987 fsgn EAX,EAX
 57989 lneg EAX
// if (e_fidx==file_index)
 57991 cmp 0,EAX
 57994 jge 58003
 57997 rstack EAX,EBP:-2
 58001 leave 
 58002 ret 
__2376:
__2374:
 58003 rstack EAX,EBP:-2
// loop step
 58007 inc EAX
 58009 sstack EBP:-2,EAX
 58013 jmp 57851
__2372:
 58016 mov EAX,-1
 58019 leave 
 58020 ret 
__2370:
 58021 leave 
 58022 ret 
fs_marker5:
 58023 db 0
fs3_open_file_index:
// fs3_open_file_index(fs3,file_index,new_allowed)
 58024 enter 4
__2378:
// assert_type arg #2 (float t)
 58027 push 53070
 58030 rstack EAX,EBP:2
// assert_type arg #1 (float self)
 58034 push EAX
 58036 mov ECX,2
// assert_type(...)
 58039 call 10123
 58042 add ESP,2
// malloc arg #1 (float n)
 58045 push 2
 58048 mov ECX,1
// malloc(...)
 58051 call 29334
 58054 add ESP,1
 58057 sstack EBP:-1,EAX
 58061 rstack EAX,EBP:-1
// fs3_find_first_file_block arg #3 (float fblock)
 58065 push EAX
 58067 rstack EAX,EBP:3
// fs3_find_first_file_block arg #2 (float file_index)
 58071 push EAX
 58073 rstack EAX,EBP:2
// fs3_find_first_file_block arg #1 (float fs3)
 58077 push EAX
 58079 mov ECX,3
// fs3_find_first_file_block(...)
 58082 call 53807
 58085 add ESP,3
 58088 sstack EBP:-2,EAX
__2380:
 58092 rstack EAX,EBP:-2
 58096 mov EBX,-1
 58099 sub EBX,EAX
 58101 fabs EBX,EBX
 58103 fsgn EBX,EBX
 58105 lneg EBX
// if (block_num==-1)
 58107 cmp 0,EBX
 58110 jge 58148
__2383:
 58113 rstack EAX,EBP:4
// if (new_allowed)
 58117 cmp 0,EAX
 58120 jge 58148
 58123 rstack EAX,EBP:3
// fs3_low_new arg #2 (float file_idx)
 58127 push EAX
 58129 rstack EAX,EBP:2
// fs3_low_new arg #1 (float fs3)
 58133 push EAX
 58135 mov ECX,2
// fs3_low_new(...)
 58138 call 54312
 58141 add ESP,2
// block_num=fs3_low_new(fs3,file_index)
 58144 sstack EBP:-2,EAX
__2384:
__2382:
__2381:
__2379:
__2386:
 58148 rstack EAX,EBP:-2
 58152 mov EBX,-1
 58155 sub EBX,EAX
 58157 fabs EBX,EBX
 58159 fsgn EBX,EBX
// if (block_num!=-1)
 58161 cmp 0,EBX
 58164 jge 58322
// malloc arg #1 (float n)
 58167 push #50982
 58170 mov ECX,1
// malloc(...)
 58173 call 29334
 58176 add ESP,1
 58179 sstack EBP:-3,EAX
 58183 rstack EAX,EBP:-3
// file_handle_constructor arg #1 (float this)
 58187 push EAX
 58189 mov ECX,1
// file_handle_constructor(...)
 58192 call 50983
 58195 add ESP,1
// malloc arg #1 (float n)
 58198 push #60193
 58201 mov ECX,1
// malloc(...)
 58204 call 29334
 58207 add ESP,1
 58210 sstack EBP:-4,EAX
 58214 push 0
 58217 rstack EAX,EBP:-2
 58221 push EAX
 58223 rstack EAX,EBP:3
 58227 push EAX
 58229 rstack EAX,EBP:2
 58233 push EAX
 58235 rstack EAX,EBP:-4
 58239 push EAX
 58241 mov ECX,5
// fs3_fh_constructor(...)
 58244 call 60194
 58247 add ESP,5
 58250 rstack EAX,EBP:-4
// file_handle_set_imp arg #2 (float N)
 58254 push EAX
 58256 rstack EAX,EBP:-3
// file_handle_set_imp arg #1 (float this)
 58260 push EAX
 58262 mov ECX,2
// file_handle_set_imp(...)
 58265 call 51314
 58268 add ESP,2
 58271 rstack EAX,EBP:-1
// free arg #1 (float* ptr)
 58275 push EAX
 58277 mov ECX,1
// free(...)
 58280 call 29828
 58283 add ESP,1
 58286 rstack EAX,EBP:-3
 58290 push EAX
 58292 rstack EAX,EBP:3
 58296 push EAX
 58298 rstack EAX,EBP:2
 58302 push EAX
 58304 mov ECX,3
// fs3_add_file_to_FT(...)
 58307 call 63356
 58310 add ESP,3
 58313 rstack EAX,EBP:-3
 58317 leave 
 58318 ret 
 58319 jmp 58342
__2388:
__2387:
__2390:
 58322 rstack EAX,EBP:-1
// free arg #1 (float* ptr)
 58326 push EAX
 58328 mov ECX,1
// free(...)
 58331 call 29828
 58334 add ESP,1
 58337 mov EAX,0
 58340 leave 
 58341 ret 
__2389:
__2385:
__2377:
 58342 leave 
 58343 ret 
fs3_open_or_lookup_file_index:
// fs3_open_or_lookup_file_index(fs3,file_index,new_allowed)
 58344 enter 1
__2392:
 58347 rstack EAX,EBP:3
 58351 push EAX
 58353 rstack EAX,EBP:2
 58357 push EAX
 58359 mov ECX,2
// fs3_FT_get_file(...)
 58362 call 63463
 58365 add ESP,2
 58368 sstack EBP:-1,EAX
__2394:
 58372 rstack EAX,EBP:-1
 58376 lneg EAX
 58378 mov EBX,EAX
// if (!res)
 58380 cmp 0,EBX
 58383 jge 58417
 58386 rstack EAX,EBP:4
// fs3_open_file_index arg #3 (float new_allowed)
 58390 push EAX
 58392 rstack EAX,EBP:3
// fs3_open_file_index arg #2 (float file_index)
 58396 push EAX
 58398 rstack EAX,EBP:2
// fs3_open_file_index arg #1 (float fs3)
 58402 push EAX
 58404 mov ECX,3
// fs3_open_file_index(...)
 58407 call 58024
 58410 add ESP,3
// res=fs3_open_file_index(fs3,file_index,new_allowed)
 58413 sstack EBP:-1,EAX
__2395:
__2393:
 58417 rstack EAX,EBP:-1
 58421 leave 
 58422 ret 
__2391:
 58423 leave 
 58424 ret 
fs3_open_root_dir:
// fs3_open_root_dir(fs3)
 58425 enter 1
__2397:
// fs3_open_file_index arg #3 (float new_allowed)
 58428 push 0
// fs3_open_file_index arg #2 (float file_index)
 58431 push 2
 58434 rstack EAX,EBP:2
// fs3_open_file_index arg #1 (float fs3)
 58438 push EAX
 58440 mov ECX,3
// fs3_open_file_index(...)
 58443 call 58024
 58446 add ESP,3
 58449 sstack EBP:-1,EAX
__2399:
 58453 rstack EAX,EBP:-1
 58457 lneg EAX
 58459 mov EBX,EAX
// if (!fh)
 58461 cmp 0,EBX
 58464 jge 58467
__2400:
__2398:
 58467 rstack EAX,EBP:-1
 58471 leave 
 58472 ret 
__2396:
 58473 leave 
 58474 ret 
fs3_find_file:
// fs3_find_file(fs3,filename,new_allowed,ret_backlink)
 58475 enter 2
__2402:
 58478 rstack EAX,EBP:2
// fs3_open_root_dir arg #1 (float fs3)
 58482 push EAX
 58484 mov ECX,1
// fs3_open_root_dir(...)
 58487 call 58425
 58490 add ESP,1
 58493 sstack EBP:-1,EAX
 58497 rstack EAX,EBP:5
 58501 push EAX
 58503 rstack EAX,EBP:4
 58507 push EAX
 58509 rstack EAX,EBP:-1
 58513 push EAX
 58515 rstack EAX,EBP:3
 58519 push EAX
 58521 rstack EAX,EBP:2
 58525 push EAX
 58527 mov ECX,5
// fs3_find_file_helper(...)
 58530 call 58569
 58533 add ESP,5
 58536 sstack EBP:-2,EAX
__2404:
 58540 rstack EAX,EBP:-2
 58544 mov EBX,-1
 58547 sub EBX,EAX
 58549 fabs EBX,EBX
 58551 fsgn EBX,EBX
 58553 lneg EBX
// if (res==-1)
 58555 cmp 0,EBX
 58558 jge 58561
__2405:
__2403:
 58561 rstack EAX,EBP:-2
 58565 leave 
 58566 ret 
__2401:
 58567 leave 
 58568 ret 
fs3_find_file_helper:
// fs3_find_file_helper(fs3,filename,fh_dir,new_allowed,ret_backlink)
 58569 enter 13
__2407:
// assert_arity arg #2 (float num_args)
 58572 push 5
// assert_arity arg #1 (float ecx_here)
 58575 push ECX
 58577 mov ECX,2
// assert_arity(...)
 58580 call 10245
 58583 add ESP,2
// assert_type arg #2 (float t)
 58586 push 53070
 58589 rstack EAX,EBP:2
// assert_type arg #1 (float self)
 58593 push EAX
 58595 mov ECX,2
// assert_type(...)
 58598 call 10123
 58601 add ESP,2
// assert_type arg #2 (float t)
 58604 push 50944
 58607 rstack EAX,EBP:4
// assert_type arg #1 (float self)
 58611 push EAX
 58613 mov ECX,2
// assert_type(...)
 58616 call 10123
 58619 add ESP,2
 58622 sstack EBP:-1,-1
 58627 rstack EAX,EBP:6
// *ret_backlink=-1
 58631 mov #EAX,-1
__2410:
// strcmp arg #2 (char* dest)
 58634 push 59238
 58637 rstack EAX,EBP:3
// strcmp arg #1 (char* src)
 58641 push EAX
 58643 mov ECX,2
// strcmp(...)
 58646 call 10763
 58649 add ESP,2
 58652 mov EBX,0
 58655 sub EBX,EAX
 58657 fabs EBX,EBX
 58659 fsgn EBX,EBX
 58661 lneg EBX
// if (strcmp(filename,"/")==0)
 58663 cmp 0,EBX
 58666 jge 58677
// res=2
 58669 sstack EBP:-1,2
 58674 jmp 59230
__2411:
__2409:
 58677 mov EAX,SS:ESP
 58680 add EAX,-4
// filepath_decimate arg #4 (float* is_abs)
 58683 push EAX
 58685 mov EAX,SS:ESP
 58688 add EAX,-3
// filepath_decimate arg #3 (char* name)
 58691 push EAX
 58693 mov EAX,SS:ESP
 58696 add EAX,-2
// filepath_decimate arg #2 (float* folders)
 58699 push EAX
 58701 rstack EAX,EBP:3
// filepath_decimate arg #1 (char* filename)
 58705 push EAX
 58707 mov ECX,4
// filepath_decimate(...)
 58710 call 52210
 58713 add ESP,4
 58716 rstack EAX,EBP:-2
// strlen arg #1 (char* str)
 58720 push EAX
 58722 mov ECX,1
// strlen(...)
 58725 call 11121
 58728 add ESP,1
 58731 sstack EBP:-5,EAX
__2413:
 58735 rstack EAX,EBP:-3
 58739 mov EBX,0
 58742 sub EBX,EAX
 58744 fabs EBX,EBX
 58746 fsgn EBX,EBX
 58748 lneg EBX
// if (name==0)
 58750 cmp 0,EBX
 58753 jge 58787
 58756 rstack EAX,EBP:-5
 58760 add EAX,-1
 58763 mov EBX,EAX
 58765 rstack EAX,EBP:-2
 58769 add EAX,EBX
 58771 mov EBX,EAX
// name=folders[num_folders-1]
 58773 sstack EBP:-3,#EBX
 58777 rstack EAX,EBP:-5
// num_folders--
 58781 dec EAX
 58783 sstack EBP:-5,EAX
__2414:
__2412:
__2416:
 58787 rstack EAX,EBP:-5
// if (num_folders)
 58791 cmp 0,EAX
 58794 jge 59063
 58797 rstack EAX,EBP:-2
 58801 add EAX,0
 58804 mov EBX,EAX
// strlen arg #1 (char* str)
 58806 push #EBX
 58808 mov ECX,1
// strlen(...)
 58811 call 11121
 58814 add ESP,1
 58817 sstack EBP:-10,EAX
 58821 rstack EAX,EBP:-2
 58825 add EAX,0
 58828 mov EBX,EAX
 58830 sstack EBP:-11,#EBX
 58834 rstack EAX,EBP:-10
 58838 add EAX,1
 58841 mov EBX,EAX
 58843 rstack EAX,EBP:3
 58847 add EAX,EBX
 58849 mov EBX,EAX
 58851 sstack EBP:-12,EBX
 58855 rstack EAX,EBP:4
 58859 push EAX
 58861 rstack EAX,EBP:-11
 58865 push EAX
 58867 rstack EAX,EBP:2
 58871 push EAX
 58873 mov ECX,3
// fs3_find_file_in_folder(...)
 58876 call 59535
 58879 add ESP,3
// folder_index=fs3_find_file_in_folder(fs3,first_folder,fh_dir)
 58882 sstack EBP:-6,EAX
 58886 rstack EAX,EBP:-6
 58890 rstack EBX,EBP:6
// *ret_backlink=folder_index
 58894 mov #EBX,EAX
__2419:
 58896 rstack EAX,EBP:-6
 58900 mov EBX,-1
 58903 sub EBX,EAX
 58905 fabs EBX,EBX
 58907 fsgn EBX,EBX
 58909 lneg EBX
// if (folder_index==-1)
 58911 cmp 0,EBX
 58914 jge 58925
// res=-1
 58917 sstack EBP:-1,-1
 58922 jmp 59230
__2420:
__2418:
// fs3_open_file_index arg #3 (float new_allowed)
 58925 push 0
 58928 rstack EAX,EBP:-6
// fs3_open_file_index arg #2 (float file_index)
 58932 push EAX
 58934 rstack EAX,EBP:2
// fs3_open_file_index arg #1 (float fs3)
 58938 push EAX
 58940 mov ECX,3
// fs3_open_file_index(...)
 58943 call 58024
 58946 add ESP,3
// fh_dir2=fs3_open_file_index(fs3,folder_index,0)
 58949 sstack EBP:-7,EAX
__2422:
 58953 rstack EAX,EBP:-7
 58957 mov EBX,0
 58960 sub EBX,EAX
 58962 fabs EBX,EBX
 58964 fsgn EBX,EBX
 58966 lneg EBX
// if (fh_dir2==0)
 58968 cmp 0,EBX
 58971 jge 58985
// res=-1
 58974 sstack EBP:-1,-1
 58979 jmp 59230
 58982 jmp 58985
__2424:
__2423:
__2426:
__2425:
__2421:
 58985 rstack EAX,EBP:6
// fs3_find_file_helper arg #5 (float ret_backlink)
 58989 push EAX
 58991 rstack EAX,EBP:5
// fs3_find_file_helper arg #4 (float new_allowed)
 58995 push EAX
 58997 rstack EAX,EBP:-7
// fs3_find_file_helper arg #3 (float fh_dir)
 59001 push EAX
 59003 rstack EAX,EBP:-12
// fs3_find_file_helper arg #2 (float filename)
 59007 push EAX
 59009 rstack EAX,EBP:2
// fs3_find_file_helper arg #1 (float fs3)
 59013 push EAX
 59015 mov ECX,5
// fs3_find_file_helper(...)
 59018 call 58569
 59021 add ESP,5
// file_index=fs3_find_file_helper(fs3,path_rest,fh_dir2,new_allowed,ret_backlink)
 59024 sstack EBP:-8,EAX
__2428:
 59028 rstack EAX,EBP:-8
 59032 mov EBX,-1
 59035 sub EBX,EAX
 59037 fabs EBX,EBX
 59039 fsgn EBX,EBX
 59041 lneg EBX
// if (file_index==-1)
 59043 cmp 0,EBX
 59046 jge 59049
__2429:
__2427:
 59049 rstack EAX,EBP:-8
// res=file_index
 59053 sstack EBP:-1,EAX
 59057 jmp 59230
 59060 jmp 59230
__2430:
__2417:
__2432:
 59063 rstack EAX,EBP:4
 59067 push EAX
 59069 rstack EAX,EBP:-3
 59073 push EAX
 59075 rstack EAX,EBP:2
 59079 push EAX
 59081 mov ECX,3
// fs3_find_file_in_folder(...)
 59084 call 59535
 59087 add ESP,3
// file_index=fs3_find_file_in_folder(fs3,name,fh_dir)
 59090 sstack EBP:-8,EAX
__2434:
 59094 rstack EAX,EBP:-8
 59098 mov EBX,-1
 59101 sub EBX,EAX
 59103 fabs EBX,EBX
 59105 fsgn EBX,EBX
 59107 lneg EBX
// if (file_index==-1)
 59109 cmp 0,EBX
 59112 jge 59177
__2437:
 59115 rstack EAX,EBP:5
// if (new_allowed)
 59119 cmp 0,EAX
 59122 jge 59156
 59125 rstack EAX,EBP:-3
// fs3_new_abs arg #3 (float name)
 59129 push EAX
 59131 rstack EAX,EBP:4
// fs3_new_abs arg #2 (float fh_dir)
 59135 push EAX
 59137 rstack EAX,EBP:2
// fs3_new_abs arg #1 (float self)
 59141 push EAX
 59143 mov ECX,3
// fs3_new_abs(...)
 59146 call 55746
 59149 add ESP,3
// file_index=fs3_new_abs(fs3,fh_dir,name)
 59152 sstack EBP:-8,EAX
__2438:
__2436:
__2440:
 59156 rstack EAX,EBP:-8
 59160 mov EBX,-1
 59163 sub EBX,EAX
 59165 fabs EBX,EBX
 59167 fsgn EBX,EBX
 59169 lneg EBX
// if (file_index==-1)
 59171 cmp 0,EBX
 59174 jge 59177
__2441:
__2439:
__2435:
__2433:
 59177 rstack EAX,EBP:4
// file_handle_get_imp arg #1 (float this)
 59181 push EAX
 59183 mov ECX,1
// file_handle_get_imp(...)
 59186 call 51202
 59189 add ESP,1
 59192 sstack EBP:-13,EAX
 59196 rstack EAX,EBP:-13
 59200 add EAX,4
 59203 mov EBX,EAX
// folder_index=fh_imp[4]
 59205 sstack EBP:-6,#EBX
 59209 rstack EAX,EBP:-6
 59213 rstack EBX,EBP:6
// *ret_backlink=folder_index
 59217 mov #EBX,EAX
 59219 rstack EAX,EBP:-8
// res=file_index
 59223 sstack EBP:-1,EAX
 59227 jmp 59230
__2431:
__2415:
fs3_ffh_end:
 59230 rstack EAX,EBP:-1
 59234 leave 
 59235 ret 
__2406:
 59236 leave 
 59237 ret 
__2408:
 59238 db "/",0
fs3_find_entry_in_folder:
// fs3_find_entry_in_folder(fs3,filename,fh_dir)
 59240 enter 45
__2443:
// assert_type arg #2 (float t)
 59243 push 53070
 59246 rstack EAX,EBP:2
// assert_type arg #1 (float self)
 59250 push EAX
 59252 mov ECX,2
// assert_type(...)
 59255 call 10123
 59258 add ESP,2
 59261 sstack EBP:-2,-1
 59266 push 0
 59269 push 0
 59272 rstack EAX,EBP:4
 59276 push EAX
 59278 mov ECX,3
// fseek(...)
 59281 call 61103
 59284 add ESP,3
// res=fseek(fh_dir,0,0)
 59287 sstack EBP:-1,EAX
__2445:
 59291 rstack EAX,EBP:-1
 59295 lneg EAX
 59297 mov EBX,EAX
// if (!res)
 59299 cmp 0,EBX
 59302 jge 59305
__2446:
__2444:
 59305 rstack EAX,EBP:4
 59309 push EAX
 59311 push 1
 59314 mov EAX,SS:ESP
 59317 add EAX,-2
 59320 push EAX
 59322 mov ECX,3
// fread(...)
 59325 call 61307
 59328 add ESP,3
// res=fread(&num_entries,1,fh_dir)
 59331 sstack EBP:-1,EAX
__2448:
 59335 rstack EAX,EBP:-1
 59339 lneg EAX
 59341 mov EBX,EAX
// if (!res)
 59343 cmp 0,EBX
 59346 jge 59349
__2449:
__2447:
// init loop
 59349 sstack EBP:-3,0
__2451:
 59354 rstack EAX,EBP:-3
 59358 rstack EBX,EBP:-2
 59362 sub EBX,EAX
 59364 mov EAX,EBX
 59366 fsgn EAX,EAX
// condition
 59368 max EAX,0
 59371 cmp 0,EAX
 59374 jz 59528
 59377 rstack EAX,EBP:-3
// fs3_dir_get_entry_ptr arg #3 (float I)
 59381 push EAX
 59383 rstack EAX,EBP:4
// fs3_dir_get_entry_ptr arg #2 (float fh_dir)
 59387 push EAX
 59389 rstack EAX,EBP:2
// fs3_dir_get_entry_ptr arg #1 (float fs3)
 59393 push EAX
 59395 mov ECX,3
// fs3_dir_get_entry_ptr(...)
 59398 call 56258
 59401 add ESP,3
 59404 sstack EBP:-4,EAX
 59408 push 0
 59411 rstack EAX,EBP:-4
 59415 push EAX
 59417 rstack EAX,EBP:4
 59421 push EAX
 59423 mov ECX,3
// fseek(...)
 59426 call 61103
 59429 add ESP,3
 59432 rstack EAX,EBP:4
 59436 push EAX
 59438 push 40
 59441 mov EAX,SS:ESP
 59444 add EAX,-44
 59447 push EAX
 59449 mov ECX,3
// fread(...)
 59452 call 61307
 59455 add ESP,3
 59458 mov EAX,SS:ESP
 59461 add EAX,-44
 59464 add EAX,4
 59467 sstack EBP:-45,EAX
__2453:
 59471 rstack EAX,EBP:3
// strcmp arg #2 (char* dest)
 59475 push EAX
 59477 rstack EAX,EBP:-45
// strcmp arg #1 (char* src)
 59481 push EAX
 59483 mov ECX,2
// strcmp(...)
 59486 call 10763
 59489 add ESP,2
 59492 mov EBX,0
 59495 sub EBX,EAX
 59497 fabs EBX,EBX
 59499 fsgn EBX,EBX
 59501 lneg EBX
// if (strcmp(e_name,filename)==0)
 59503 cmp 0,EBX
 59506 jge 59515
 59509 rstack EAX,EBP:-3
 59513 leave 
 59514 ret 
__2454:
__2452:
 59515 rstack EAX,EBP:-3
// loop step
 59519 inc EAX
 59521 sstack EBP:-3,EAX
 59525 jmp 59354
__2450:
 59528 mov EAX,-1
 59531 leave 
 59532 ret 
__2442:
 59533 leave 
 59534 ret 
fs3_find_file_in_folder:
// fs3_find_file_in_folder(fs3,filename,fh_dir)
 59535 enter 4
__2456:
// assert_type arg #2 (float t)
 59538 push 53070
 59541 rstack EAX,EBP:2
// assert_type arg #1 (float self)
 59545 push EAX
 59547 mov ECX,2
// assert_type(...)
 59550 call 10123
 59553 add ESP,2
 59556 rstack EAX,EBP:4
// fs3_find_entry_in_folder arg #3 (float fh_dir)
 59560 push EAX
 59562 rstack EAX,EBP:3
// fs3_find_entry_in_folder arg #2 (float filename)
 59566 push EAX
 59568 rstack EAX,EBP:2
// fs3_find_entry_in_folder arg #1 (float fs3)
 59572 push EAX
 59574 mov ECX,3
// fs3_find_entry_in_folder(...)
 59577 call 59240
 59580 add ESP,3
 59583 sstack EBP:-1,EAX
__2458:
 59587 rstack EAX,EBP:-1
 59591 mov EBX,-1
 59594 sub EBX,EAX
 59596 fabs EBX,EBX
 59598 fsgn EBX,EBX
// if (entry_idx!=-1)
 59600 cmp 0,EBX
 59603 jge 59704
 59606 rstack EAX,EBP:-1
// fs3_dir_get_entry_ptr arg #3 (float I)
 59610 push EAX
 59612 rstack EAX,EBP:4
// fs3_dir_get_entry_ptr arg #2 (float fh_dir)
 59616 push EAX
 59618 rstack EAX,EBP:2
// fs3_dir_get_entry_ptr arg #1 (float fs3)
 59622 push EAX
 59624 mov ECX,3
// fs3_dir_get_entry_ptr(...)
 59627 call 56258
 59630 add ESP,3
 59633 sstack EBP:-2,EAX
 59637 rstack EAX,EBP:-2
 59641 sstack EBP:-3,EAX
 59645 push 0
 59648 rstack EAX,EBP:-3
 59652 push EAX
 59654 rstack EAX,EBP:4
 59658 push EAX
 59660 mov ECX,3
// fseek(...)
 59663 call 61103
 59666 add ESP,3
 59669 rstack EAX,EBP:4
 59673 push EAX
 59675 push 1
 59678 mov EAX,SS:ESP
 59681 add EAX,-4
 59684 push EAX
 59686 mov ECX,3
// fread(...)
 59689 call 61307
 59692 add ESP,3
 59695 rstack EAX,EBP:-4
 59699 leave 
 59700 ret 
 59701 jmp 59709
__2460:
__2459:
__2462:
 59704 mov EAX,-1
 59707 leave 
 59708 ret 
__2461:
__2457:
__2455:
 59709 leave 
 59710 ret 
fs3_from_filepath:
// fs3_from_filepath(shell,filepath)
 59711 enter 12
__2464:
 59714 mov EAX,SS:ESP
 59717 add EAX,-10
// filepath_drive arg #2 (float driveletter)
 59720 push EAX
 59722 rstack EAX,EBP:3
// filepath_drive arg #1 (float filename)
 59726 push EAX
 59728 mov ECX,2
// filepath_drive(...)
 59731 call 52828
 59734 add ESP,2
 59737 sstack EBP:-11,EAX
__2466:
 59741 rstack EAX,EBP:-11
// if (res)
 59745 cmp 0,EAX
 59748 jge 59787
 59751 mov EAX,SS:ESP
 59754 add EAX,-10
 59757 push EAX
 59759 rstack EAX,EBP:2
 59763 push EAX
 59765 mov ECX,2
// shell2_get_fs3(...)
 59768 call 59794
 59771 add ESP,2
 59774 sstack EBP:-12,EAX
 59778 rstack EAX,EBP:-12
 59782 leave 
 59783 ret 
 59784 jmp 59792
__2468:
__2467:
__2470:
 59787 mov EAX,0
 59790 leave 
 59791 ret 
__2469:
__2465:
__2463:
 59792 leave 
 59793 ret 
shell2_get_fs3:
// shell2_get_fs3(shell,letter)
 59794 enter 14
__2472:
// assert_type arg #2 (float t)
 59797 push 45739
 59800 rstack EAX,EBP:2
// assert_type arg #1 (float self)
 59804 push EAX
 59806 mov ECX,2
// assert_type(...)
 59809 call 10123
 59812 add ESP,2
 59815 rstack EAX,EBP:2
 59819 add EAX,2
 59822 mov EBX,EAX
 59824 sstack EBP:-1,#EBX
 59828 rstack EAX,EBP:-1
// vector_size arg #1 (void* self)
 59832 push EAX
 59834 mov ECX,1
// vector_size(...)
 59837 call 33515
 59840 add ESP,1
 59843 sstack EBP:-2,EAX
// init loop
 59847 sstack EBP:-3,0
__2474:
 59852 rstack EAX,EBP:-3
 59856 rstack EBX,EBP:-2
 59860 sub EBX,EAX
 59862 mov EAX,EBX
 59864 fsgn EAX,EAX
// condition
 59866 max EAX,0
 59869 cmp 0,EAX
 59872 jz 59974
 59875 mov EAX,SS:ESP
 59878 add EAX,-13
 59881 add EAX,1
 59884 sstack EBP:-14,EAX
 59888 rstack EAX,EBP:-3
// vector_get arg #3 (float pos)
 59892 push EAX
 59894 mov EAX,SS:ESP
 59897 add EAX,-13
// vector_get arg #2 (void* element)
 59900 push EAX
 59902 rstack EAX,EBP:-1
// vector_get arg #1 (void* self)
 59906 push EAX
 59908 mov ECX,3
// vector_get(...)
 59911 call 33598
 59914 add ESP,3
__2476:
 59917 rstack EAX,EBP:-14
// strcmp arg #2 (char* dest)
 59921 push EAX
 59923 rstack EAX,EBP:3
// strcmp arg #1 (char* src)
 59927 push EAX
 59929 mov ECX,2
// strcmp(...)
 59932 call 10763
 59935 add ESP,2
 59938 mov EBX,0
 59941 sub EBX,EAX
 59943 fabs EBX,EBX
 59945 fsgn EBX,EBX
 59947 lneg EBX
// if (strcmp(letter,e_letter)==0)
 59949 cmp 0,EBX
 59952 jge 59961
 59955 rstack EAX,EBP:-13
 59959 leave 
 59960 ret 
__2477:
__2475:
 59961 rstack EAX,EBP:-3
// loop step
 59965 inc EAX
 59967 sstack EBP:-3,EAX
 59971 jmp 59852
__2473:
 59974 mov EAX,0
 59977 leave 
 59978 ret 
__2471:
 59979 leave 
 59980 ret 
fs3_file_set_backlink:
// fs3_file_set_backlink(fh,backlink,fs3)
 59981 enter 3
__2479:
// assert_type arg #2 (float t)
 59984 push 50944
 59987 rstack EAX,EBP:2
// assert_type arg #1 (float self)
 59991 push EAX
 59993 mov ECX,2
// assert_type(...)
 59996 call 10123
 59999 add ESP,2
// assert_type arg #2 (float t)
 60002 push 53070
 60005 rstack EAX,EBP:4
// assert_type arg #1 (float self)
 60009 push EAX
 60011 mov ECX,2
// assert_type(...)
 60014 call 10123
 60017 add ESP,2
 60020 rstack EAX,EBP:2
// file_handle_get_imp arg #1 (float this)
 60024 push EAX
 60026 mov ECX,1
// file_handle_get_imp(...)
 60029 call 51202
 60032 add ESP,1
 60035 sstack EBP:-1,EAX
 60039 rstack EAX,EBP:3
 60043 rstack EBX,EBP:-1
 60047 add EBX,9
 60050 mov ECX,EBX
// fp_imp[9]=backlink
 60052 mov #ECX,EAX
 60054 rstack EAX,EBP:-1
 60058 add EAX,4
 60061 mov EBX,EAX
 60063 sstack EBP:-2,#EBX
 60067 rstack EAX,EBP:-2
 60071 push EAX
 60073 rstack EAX,EBP:3
 60077 push EAX
 60079 rstack EAX,EBP:4
 60083 push EAX
 60085 mov ECX,3
// fs3_backlink_read_size(...)
 60088 call 64175
 60091 add ESP,3
 60094 sstack EBP:-3,EAX
 60098 rstack EAX,EBP:-3
 60102 rstack EBX,EBP:-1
 60106 add EBX,2
 60109 mov ECX,EBX
// fp_imp[2]=size
 60111 mov #ECX,EAX
__2478:
 60113 leave 
 60114 ret 
fs3_file_get_backlink:
// fs3_file_get_backlink(fh)
 60115 enter 2
__2481:
// assert_type arg #2 (float t)
 60118 push 50944
 60121 rstack EAX,EBP:2
// assert_type arg #1 (float self)
 60125 push EAX
 60127 mov ECX,2
// assert_type(...)
 60130 call 10123
 60133 add ESP,2
 60136 rstack EAX,EBP:2
// file_handle_get_imp arg #1 (float this)
 60140 push EAX
 60142 mov ECX,1
// file_handle_get_imp(...)
 60145 call 51202
 60148 add ESP,1
 60151 sstack EBP:-1,EAX
 60155 rstack EAX,EBP:-1
 60159 add EAX,9
 60162 mov EBX,EAX
 60164 sstack EBP:-2,#EBX
 60168 rstack EAX,EBP:-2
 60172 leave 
 60173 ret 
__2480:
 60174 leave 
 60175 ret 
fs_marker6:
 60176 db 0
typeof_fs3_fh:
 60177 db "fs3_file_handle",0
sizeof_fs3_fh:
 60193 db 43
fs3_fh_constructor:
// fs3_fh_constructor(self,fs3,file_index,fblock,backlink)
 60194 enter -0
__2483:
// assert_arity arg #2 (float num_args)
 60197 push 5
// assert_arity arg #1 (float ecx_here)
 60200 push ECX
 60202 mov ECX,2
// assert_arity(...)
 60205 call 10245
 60208 add ESP,2
 60211 rstack EAX,EBP:2
 60215 add EAX,0
 60218 mov EBX,EAX
// self[0]=typeof_fs3_fh
 60220 mov #EBX,60177
 60223 rstack EAX,EBP:3
 60227 rstack EBX,EBP:2
 60231 add EBX,1
 60234 mov ECX,EBX
// self[1]=fs3
 60236 mov #ECX,EAX
 60238 rstack EAX,EBP:2
 60242 add EAX,2
 60245 mov EBX,EAX
// self[2]=0
 60247 mov #EBX,0
 60250 rstack EAX,EBP:2
 60254 add EAX,3
 60257 mov EBX,EAX
// self[3]=0
 60259 mov #EBX,0
 60262 rstack EAX,EBP:4
 60266 rstack EBX,EBP:2
 60270 add EBX,4
 60273 mov ECX,EBX
// self[4]=file_index
 60275 mov #ECX,EAX
 60277 rstack EAX,EBP:5
 60281 rstack EBX,EBP:2
 60285 add EBX,5
 60288 mov ECX,EBX
// self[5]=fblock
 60290 mov #ECX,EAX
 60292 rstack EAX,EBP:5
 60296 rstack EBX,EBP:2
 60300 add EBX,6
 60303 mov ECX,EBX
// self[6]=fblock
 60305 mov #ECX,EAX
 60307 rstack EAX,EBP:2
 60311 add EAX,7
 60314 mov EBX,EAX
// self[7]=0
 60316 mov #EBX,0
 60319 rstack EAX,EBP:2
 60323 add EAX,8
 60326 mov EBX,EAX
// self[8]=0
 60328 mov #EBX,0
 60331 rstack EAX,EBP:6
 60335 rstack EBX,EBP:2
 60339 add EBX,9
 60342 mov ECX,EBX
// self[9]=backlink
 60344 mov #ECX,EAX
 60346 rstack EAX,EBP:2
 60350 add EAX,10
 60353 mov EBX,EAX
// self[10]=0
 60355 mov #EBX,0
 60358 rstack EAX,EBP:2
 60362 add EAX,11
 60365 mov EBX,EAX
// self[11]=0
 60367 mov #EBX,0
__2482:
 60370 leave 
 60371 ret 
print_file_handle:
// print_file_handle(fh)
 60372 enter 1
__2485:
// assert_type arg #2 (float t)
 60375 push 50944
 60378 rstack EAX,EBP:2
// assert_type arg #1 (float self)
 60382 push EAX
 60384 mov ECX,2
// assert_type(...)
 60387 call 10123
 60390 add ESP,2
 60393 rstack EAX,EBP:2
// printf arg #2 (unknown)
 60397 push EAX
// printf arg #1 (char* format)
 60399 push 57112
 60402 mov ECX,2
// printf(...)
 60405 call 21851
 60408 add ESP,2
 60411 rstack EAX,EBP:2
 60415 add EAX,1
 60418 mov EBX,EAX
// printf arg #2 (unknown)
 60420 push #EBX
// printf arg #1 (char* format)
 60422 push 60922
 60425 mov ECX,2
// printf(...)
 60428 call 21851
 60431 add ESP,2
 60434 rstack EAX,EBP:2
 60438 add EAX,2
 60441 mov EBX,EAX
// printf arg #2 (unknown)
 60443 push #EBX
// printf arg #1 (char* format)
 60445 push 60760
 60448 mov ECX,2
// printf(...)
 60451 call 21851
 60454 add ESP,2
 60457 rstack EAX,EBP:2
// file_handle_get_imp arg #1 (float this)
 60461 push EAX
 60463 mov ECX,1
// file_handle_get_imp(...)
 60466 call 51202
 60469 add ESP,1
 60472 sstack EBP:-1,EAX
 60476 rstack EAX,EBP:-1
 60480 add EAX,1
 60483 mov EBX,EAX
// printf arg #2 (unknown)
 60485 push #EBX
// printf arg #1 (char* format)
 60487 push 60749
 60490 mov ECX,2
// printf(...)
 60493 call 21851
 60496 add ESP,2
 60499 rstack EAX,EBP:-1
 60503 add EAX,2
 60506 mov EBX,EAX
// printf arg #2 (unknown)
 60508 push #EBX
// printf arg #1 (char* format)
 60510 push 60884
 60513 mov ECX,2
// printf(...)
 60516 call 21851
 60519 add ESP,2
 60522 rstack EAX,EBP:-1
 60526 add EAX,3
 60529 mov EBX,EAX
// printf arg #2 (unknown)
 60531 push #EBX
// printf arg #1 (char* format)
 60533 push 60846
 60536 mov ECX,2
// printf(...)
 60539 call 21851
 60542 add ESP,2
 60545 rstack EAX,EBP:-1
 60549 add EAX,4
 60552 mov EBX,EAX
// printf arg #2 (unknown)
 60554 push #EBX
// printf arg #1 (char* format)
 60556 push 60935
 60559 mov ECX,2
// printf(...)
 60562 call 21851
 60565 add ESP,2
 60568 rstack EAX,EBP:-1
 60572 add EAX,5
 60575 mov EBX,EAX
// printf arg #2 (unknown)
 60577 push #EBX
// printf arg #1 (char* format)
 60579 push 60770
 60582 mov ECX,2
// printf(...)
 60585 call 21851
 60588 add ESP,2
 60591 rstack EAX,EBP:-1
 60595 add EAX,6
 60598 mov EBX,EAX
// printf arg #2 (unknown)
 60600 push #EBX
// printf arg #1 (char* format)
 60602 push 60903
 60605 mov ECX,2
// printf(...)
 60608 call 21851
 60611 add ESP,2
 60614 rstack EAX,EBP:-1
 60618 add EAX,7
 60621 mov EBX,EAX
// printf arg #2 (unknown)
 60623 push #EBX
// printf arg #1 (char* format)
 60625 push 60865
 60628 mov ECX,2
// printf(...)
 60631 call 21851
 60634 add ESP,2
 60637 rstack EAX,EBP:-1
 60641 add EAX,8
 60644 mov EBX,EAX
// printf arg #2 (unknown)
 60646 push #EBX
// printf arg #1 (char* format)
 60648 push 60827
 60651 mov ECX,2
// printf(...)
 60654 call 21851
 60657 add ESP,2
 60660 rstack EAX,EBP:-1
 60664 add EAX,9
 60667 mov EBX,EAX
// printf arg #2 (unknown)
 60669 push #EBX
// printf arg #1 (char* format)
 60671 push 60789
 60674 mov ECX,2
// printf(...)
 60677 call 21851
 60680 add ESP,2
 60683 rstack EAX,EBP:-1
 60687 add EAX,10
 60690 mov EBX,EAX
// printf arg #2 (unknown)
 60692 push #EBX
// printf arg #1 (char* format)
 60694 push 60808
 60697 mov ECX,2
// printf(...)
 60700 call 21851
 60703 add ESP,2
 60706 rstack EAX,EBP:-1
 60710 add EAX,11
 60713 mov EBX,EAX
// printf arg #2 (unknown)
 60715 push EBX
// printf arg #1 (char* format)
 60717 push 60731
 60720 mov ECX,2
// printf(...)
 60723 call 21851
 60726 add ESP,2
__2484:
 60729 leave 
 60730 ret 
__2498:
 60731 db "  filename: [%s]
",0
__2488:
 60749 db "  fs3: %d
",0
__2487:
 60760 db " imp: %d
",0
__2492:
 60770 db "  first block: %d
",0
__2496:
 60789 db "  backlink:    %d
",0
__2497:
 60808 db "  reserved 3:  %d
",0
__2495:
 60827 db "  reserved 2:  %d
",0
__2490:
 60846 db "  file cap:    %d
",0
__2494:
 60865 db "  reserved 1:  %d
",0
__2489:
 60884 db "  file size:   %d
",0
__2493:
 60903 db "  cur block:   %d
",0
__2486:
 60922 db " rw ptr: %d
",0
__2491:
 60935 db "  file_index:  %d
",0
fs3_fh_set_filename:
// fs3_fh_set_filename(self,filename)
 60954 enter -0
__2500:
// assert_type arg #2 (float t)
 60957 push 60177
 60960 rstack EAX,EBP:2
// assert_type arg #1 (float self)
 60964 push EAX
 60966 mov ECX,2
// assert_type(...)
 60969 call 10123
 60972 add ESP,2
// strncpy arg #3 (float n)
 60975 push 31
 60978 rstack EAX,EBP:3
// strncpy arg #2 (char* src)
 60982 push EAX
 60984 rstack EAX,EBP:2
 60988 add EAX,11
 60991 mov EBX,EAX
// strncpy arg #1 (char* dest)
 60993 push EBX
 60995 mov ECX,3
// strncpy(...)
 60998 call 11009
 61001 add ESP,3
__2499:
 61004 leave 
 61005 ret 
fs3_fh_get_filename:
// fs3_fh_get_filename(self)
 61006 enter -0
__2502:
// assert_type arg #2 (float t)
 61009 push 60177
 61012 rstack EAX,EBP:2
// assert_type arg #1 (float self)
 61016 push EAX
 61018 mov ECX,2
// assert_type(...)
 61021 call 10123
 61024 add ESP,2
 61027 rstack EAX,EBP:2
 61031 add EAX,11
 61034 mov EBX,EAX
 61036 mov EAX,EBX
 61038 leave 
 61039 ret 
__2501:
 61040 leave 
 61041 ret 
fsize:
// fsize(fp)
 61042 enter 2
__2504:
// assert_type arg #2 (float t)
 61045 push 50944
 61048 rstack EAX,EBP:2
// assert_type arg #1 (float self)
 61052 push EAX
 61054 mov ECX,2
// assert_type(...)
 61057 call 10123
 61060 add ESP,2
 61063 rstack EAX,EBP:2
// file_handle_get_imp arg #1 (float this)
 61067 push EAX
 61069 mov ECX,1
// file_handle_get_imp(...)
 61072 call 51202
 61075 add ESP,1
 61078 sstack EBP:-1,EAX
 61082 rstack EAX,EBP:-1
 61086 add EAX,2
 61089 mov EBX,EAX
 61091 sstack EBP:-2,#EBX
 61095 rstack EAX,EBP:-2
 61099 leave 
 61100 ret 
__2503:
 61101 leave 
 61102 ret 
fseek:
// fseek(fp,offs,whence)
 61103 enter 4
__2506:
// assert_type arg #2 (float t)
 61106 push 50944
 61109 rstack EAX,EBP:2
// assert_type arg #1 (float self)
 61113 push EAX
 61115 mov ECX,2
// assert_type(...)
 61118 call 10123
 61121 add ESP,2
 61124 rstack EAX,EBP:2
// file_handle_get_imp arg #1 (float this)
 61128 push EAX
 61130 mov ECX,1
// file_handle_get_imp(...)
 61133 call 51202
 61136 add ESP,1
 61139 sstack EBP:-1,EAX
 61143 rstack EAX,EBP:2
// file_handle_get_rw_ptr arg #1 (float this)
 61147 push EAX
 61149 mov ECX,1
// file_handle_get_rw_ptr(...)
 61152 call 51166
 61155 add ESP,1
 61158 sstack EBP:-2,EAX
__2508:
 61162 rstack EAX,EBP:4
 61166 mov EBX,0
 61169 sub EBX,EAX
 61171 fabs EBX,EBX
 61173 fsgn EBX,EBX
 61175 lneg EBX
// if (whence==0)
 61177 cmp 0,EBX
 61180 jge 61191
 61183 rstack EAX,EBP:3
// offs_final=offs
 61187 sstack EBP:-3,EAX
__2509:
__2507:
__2511:
 61191 rstack EAX,EBP:4
 61195 mov EBX,1
 61198 sub EBX,EAX
 61200 fabs EBX,EBX
 61202 fsgn EBX,EBX
 61204 lneg EBX
// if (whence==1)
 61206 cmp 0,EBX
 61209 jge 61228
 61212 rstack EAX,EBP:-2
 61216 rstack EBX,EBP:3
 61220 add EBX,EAX
 61222 mov EAX,EBX
// offs_final=offs+rw_ptr_cur
 61224 sstack EBP:-3,EAX
__2512:
__2510:
__2514:
 61228 rstack EAX,EBP:4
 61232 mov EBX,2
 61235 sub EBX,EAX
 61237 fabs EBX,EBX
 61239 fsgn EBX,EBX
 61241 lneg EBX
// if (whence==2)
 61243 cmp 0,EBX
 61246 jge 61278
 61249 rstack EAX,EBP:-1
 61253 add EAX,2
 61256 mov EBX,EAX
 61258 sstack EBP:-4,#EBX
 61262 rstack EAX,EBP:-4
 61266 rstack EBX,EBP:3
 61270 add EBX,EAX
 61272 mov EAX,EBX
// offs_final=offs+size
 61274 sstack EBP:-3,EAX
__2515:
__2513:
 61278 rstack EAX,EBP:-3
// file_handle_set_rw_ptr arg #2 (float N)
 61282 push EAX
 61284 rstack EAX,EBP:2
// file_handle_set_rw_ptr arg #1 (float this)
 61288 push EAX
 61290 mov ECX,2
// file_handle_set_rw_ptr(...)
 61293 call 51276
 61296 add ESP,2
 61299 rstack EAX,EBP:-3
 61303 leave 
 61304 ret 
__2505:
 61305 leave 
 61306 ret 
fread:
// fread(to,size,fp)
 61307 enter 5
__2517:
// assert_type arg #2 (float t)
 61310 push 50944
 61313 rstack EAX,EBP:4
// assert_type arg #1 (float self)
 61317 push EAX
 61319 mov ECX,2
// assert_type(...)
 61322 call 10123
 61325 add ESP,2
 61328 rstack EAX,EBP:4
// file_handle_get_imp arg #1 (float this)
 61332 push EAX
 61334 mov ECX,1
// file_handle_get_imp(...)
 61337 call 51202
 61340 add ESP,1
 61343 sstack EBP:-1,EAX
// assert_type arg #2 (float t)
 61347 push 60177
 61350 rstack EAX,EBP:-1
// assert_type arg #1 (float self)
 61354 push EAX
 61356 mov ECX,2
// assert_type(...)
 61359 call 10123
 61362 add ESP,2
 61365 rstack EAX,EBP:4
// file_handle_get_rw_ptr arg #1 (float this)
 61369 push EAX
 61371 mov ECX,1
// file_handle_get_rw_ptr(...)
 61374 call 51166
 61377 add ESP,1
 61380 sstack EBP:-2,EAX
 61384 rstack EAX,EBP:-1
 61388 add EAX,6
 61391 mov EBX,EAX
 61393 sstack EBP:-3,#EBX
 61397 rstack EAX,EBP:-1
 61401 add EAX,1
 61404 mov EBX,EAX
 61406 sstack EBP:-4,#EBX
 61410 rstack EAX,EBP:-2
// fs3_get_disk_adr arg #3 (float ptr)
 61414 push EAX
 61416 rstack EAX,EBP:-3
// fs3_get_disk_adr arg #2 (float block_num)
 61420 push EAX
 61422 rstack EAX,EBP:-4
// fs3_get_disk_adr arg #1 (float fs3)
 61426 push EAX
 61428 mov ECX,3
// fs3_get_disk_adr(...)
 61431 call 54572
 61434 add ESP,3
 61437 sstack EBP:-5,EAX
 61441 rstack EAX,EBP:3
// fs3_low_read arg #4 (float size)
 61445 push EAX
 61447 rstack EAX,EBP:2
// fs3_low_read arg #3 (float to)
 61451 push EAX
 61453 rstack EAX,EBP:-5
// fs3_low_read arg #2 (float disk_ptr)
 61457 push EAX
 61459 rstack EAX,EBP:-4
// fs3_low_read arg #1 (float fs3)
 61463 push EAX
 61465 mov ECX,4
// fs3_low_read(...)
 61468 call 54677
 61471 add ESP,4
 61474 mov EAX,1
 61477 leave 
 61478 ret 
__2516:
 61479 leave 
 61480 ret 
fwrite:
// fwrite(from,size,fp)
 61481 enter 10
__2519:
// assert_type arg #2 (float t)
 61484 push 50944
 61487 rstack EAX,EBP:4
// assert_type arg #1 (float self)
 61491 push EAX
 61493 mov ECX,2
// assert_type(...)
 61496 call 10123
 61499 add ESP,2
 61502 rstack EAX,EBP:4
// file_handle_get_imp arg #1 (float this)
 61506 push EAX
 61508 mov ECX,1
// file_handle_get_imp(...)
 61511 call 51202
 61514 add ESP,1
 61517 sstack EBP:-1,EAX
// assert_type arg #2 (float t)
 61521 push 60177
 61524 rstack EAX,EBP:-1
// assert_type arg #1 (float self)
 61528 push EAX
 61530 mov ECX,2
// assert_type(...)
 61533 call 10123
 61536 add ESP,2
 61539 rstack EAX,EBP:4
// file_handle_get_rw_ptr arg #1 (float this)
 61543 push EAX
 61545 mov ECX,1
// file_handle_get_rw_ptr(...)
 61548 call 51166
 61551 add ESP,1
 61554 sstack EBP:-2,EAX
 61558 rstack EAX,EBP:-1
 61562 add EAX,6
 61565 mov EBX,EAX
 61567 sstack EBP:-3,#EBX
 61571 rstack EAX,EBP:-1
 61575 add EAX,1
 61578 mov EBX,EAX
 61580 sstack EBP:-4,#EBX
 61584 rstack EAX,EBP:-2
// fs3_get_disk_adr arg #3 (float ptr)
 61588 push EAX
 61590 rstack EAX,EBP:-3
// fs3_get_disk_adr arg #2 (float block_num)
 61594 push EAX
 61596 rstack EAX,EBP:-4
// fs3_get_disk_adr arg #1 (float fs3)
 61600 push EAX
 61602 mov ECX,3
// fs3_get_disk_adr(...)
 61605 call 54572
 61608 add ESP,3
 61611 sstack EBP:-5,EAX
 61615 rstack EAX,EBP:3
// fs3_low_write arg #4 (float size)
 61619 push EAX
 61621 rstack EAX,EBP:2
// fs3_low_write arg #3 (float from)
 61625 push EAX
 61627 rstack EAX,EBP:-5
// fs3_low_write arg #2 (float disk_ptr)
 61631 push EAX
 61633 rstack EAX,EBP:-4
// fs3_low_write arg #1 (float fs3)
 61637 push EAX
 61639 mov ECX,4
// fs3_low_write(...)
 61642 call 54766
 61645 add ESP,4
 61648 sstack EBP:-6,EAX
 61652 rstack EAX,EBP:3
 61656 rstack EBX,EBP:-2
// rw_ptr_cur+=size
 61660 add EBX,EAX
 61662 sstack EBP:-2,EBX
 61666 rstack EAX,EBP:-2
// file_handle_set_rw_ptr arg #2 (float N)
 61670 push EAX
 61672 rstack EAX,EBP:4
// file_handle_set_rw_ptr arg #1 (float this)
 61676 push EAX
 61678 mov ECX,2
// file_handle_set_rw_ptr(...)
 61681 call 51276
 61684 add ESP,2
 61687 rstack EAX,EBP:-1
 61691 add EAX,2
 61694 mov EBX,EAX
 61696 sstack EBP:-7,#EBX
__2521:
 61700 rstack EAX,EBP:-2
 61704 rstack EBX,EBP:-7
 61708 sub EBX,EAX
 61710 mov EAX,EBX
 61712 neg EAX
 61714 fsgn EAX,EAX
 61716 max EAX,0
// if (rw_ptr_cur>filesize)
 61719 cmp 0,EAX
 61722 jge 61833
 61725 rstack EAX,EBP:-2
// filesize=rw_ptr_cur
 61729 sstack EBP:-7,EAX
 61733 rstack EAX,EBP:-7
 61737 rstack EBX,EBP:-1
 61741 add EBX,2
 61744 mov ECX,EBX
// fp_imp[2]=filesize
 61746 mov #ECX,EAX
 61748 rstack EAX,EBP:-1
 61752 add EAX,9
 61755 mov EBX,EAX
 61757 sstack EBP:-8,#EBX
 61761 rstack EAX,EBP:-1
 61765 add EAX,4
 61768 mov EBX,EAX
 61770 sstack EBP:-9,#EBX
 61774 rstack EAX,EBP:-1
 61778 add EAX,11
 61781 mov EBX,EAX
 61783 sstack EBP:-10,EBX
__2524:
 61787 rstack EAX,EBP:-8
// if (backlink)
 61791 cmp 0,EAX
 61794 jge 61833
 61797 rstack EAX,EBP:-7
 61801 push EAX
 61803 rstack EAX,EBP:-9
 61807 push EAX
 61809 rstack EAX,EBP:-8
 61813 push EAX
 61815 rstack EAX,EBP:-4
 61819 push EAX
 61821 mov ECX,4
// fs3_backlink_write_size(...)
 61824 call 63923
 61827 add ESP,4
 61830 jmp 61833
__2526:
__2525:
__2528:
__2527:
__2523:
__2522:
__2520:
 61833 rstack EAX,EBP:-6
 61837 leave 
 61838 ret 
__2518:
 61839 leave 
 61840 ret 
fopen:
// fopen(shell,filepath,mode)
 61841 enter 14
__2530:
// assert_type arg #2 (float t)
 61844 push 45739
 61847 rstack EAX,EBP:2
// assert_type arg #1 (float self)
 61851 push EAX
 61853 mov ECX,2
// assert_type(...)
 61856 call 10123
 61859 add ESP,2
 61862 rstack EAX,EBP:2
 61866 add EAX,100
 61869 mov EBX,EAX
 61871 sstack EBP:-1,EBX
 61875 rstack EAX,EBP:3
// filepath_abs arg #2 (char* filename)
 61879 push EAX
 61881 rstack EAX,EBP:-1
// filepath_abs arg #1 (float current_path)
 61885 push EAX
 61887 mov ECX,2
// filepath_abs(...)
 61890 call 51953
 61893 add ESP,2
 61896 sstack EBP:-2,EAX
__2532:
 61900 rstack EAX,EBP:-2
 61904 lneg EAX
 61906 mov EBX,EAX
// if (!filename)
 61908 cmp 0,EBX
 61911 jge 61919
 61914 mov EAX,0
 61917 leave 
 61918 ret 
__2533:
__2531:
 61919 rstack EAX,EBP:-2
// fs3_from_filepath arg #2 (float filepath)
 61923 push EAX
 61925 rstack EAX,EBP:2
// fs3_from_filepath arg #1 (float shell)
 61929 push EAX
 61931 mov ECX,2
// fs3_from_filepath(...)
 61934 call 59711
 61937 add ESP,2
 61940 sstack EBP:-3,EAX
 61944 rstack EAX,EBP:-2
// filepath_no_drive arg #1 (float filename)
 61948 push EAX
 61950 mov ECX,1
// filepath_no_drive(...)
 61953 call 52996
 61956 add ESP,1
// filename=filepath_no_drive(filename)
 61959 sstack EBP:-2,EAX
 61963 sstack EBP:-4,0
 61968 sstack EBP:-5,0
 61973 sstack EBP:-6,0
 61978 sstack EBP:-7,0
 61983 sstack EBP:-8,0
 61988 mov EAX,SS:ESP
 61991 add EAX,-8
// translate_fopen_mode arg #6 (float* newfile)
 61994 push EAX
 61996 mov EAX,SS:ESP
 61999 add EAX,-7
// translate_fopen_mode arg #5 (float* from)
 62002 push EAX
 62004 mov EAX,SS:ESP
 62007 add EAX,-6
// translate_fopen_mode arg #4 (float* keepdata)
 62010 push EAX
 62012 mov EAX,SS:ESP
 62015 add EAX,-4
// translate_fopen_mode arg #3 (float* write)
 62018 push EAX
 62020 mov EAX,SS:ESP
 62023 add EAX,-5
// translate_fopen_mode arg #2 (float* read)
 62026 push EAX
 62028 rstack EAX,EBP:4
// translate_fopen_mode arg #1 (char* mode)
 62032 push EAX
 62034 mov ECX,6
// translate_fopen_mode(...)
 62037 call 51352
 62040 add ESP,6
 62043 sstack EBP:-9,0
 62048 mov EAX,SS:ESP
 62051 add EAX,-9
// fs3_find_file arg #4 (float ret_backlink)
 62054 push EAX
 62056 rstack EAX,EBP:-8
// fs3_find_file arg #3 (float new_allowed)
 62060 push EAX
 62062 rstack EAX,EBP:-2
// fs3_find_file arg #2 (float filename)
 62066 push EAX
 62068 rstack EAX,EBP:-3
// fs3_find_file arg #1 (float fs3)
 62072 push EAX
 62074 mov ECX,4
// fs3_find_file(...)
 62077 call 58475
 62080 add ESP,4
 62083 sstack EBP:-10,EAX
__2535:
 62087 rstack EAX,EBP:-10
 62091 mov EBX,-1
 62094 sub EBX,EAX
 62096 fabs EBX,EBX
 62098 fsgn EBX,EBX
 62100 lneg EBX
// if (f_index==-1)
 62102 cmp 0,EBX
 62105 jge 62113
 62108 mov EAX,0
 62111 leave 
 62112 ret 
__2536:
__2534:
 62113 sstack EBP:-11,0
 62118 rstack EAX,EBP:-10
 62122 push EAX
 62124 rstack EAX,EBP:-3
 62128 push EAX
 62130 mov ECX,2
// fs3_FT_get_file(...)
 62133 call 63463
 62136 add ESP,2
 62139 sstack EBP:-13,EAX
__2538:
 62143 rstack EAX,EBP:-13
// if (res)
 62147 cmp 0,EAX
 62150 jge 62164
 62153 rstack EAX,EBP:-13
// fh=res
 62157 sstack EBP:-11,EAX
 62161 jmp 62318
__2540:
__2539:
__2542:
 62164 rstack EAX,EBP:-8
// fs3_open_file_index arg #3 (float new_allowed)
 62168 push EAX
 62170 rstack EAX,EBP:-10
// fs3_open_file_index arg #2 (float file_index)
 62174 push EAX
 62176 rstack EAX,EBP:-3
// fs3_open_file_index arg #1 (float fs3)
 62180 push EAX
 62182 mov ECX,3
// fs3_open_file_index(...)
 62185 call 58024
 62188 add ESP,3
// fh=fs3_open_file_index(fs3,f_index,newfile)
 62191 sstack EBP:-11,EAX
__2544:
 62195 rstack EAX,EBP:-11
 62199 lneg EAX
 62201 mov EBX,EAX
// if (!fh)
 62203 cmp 0,EBX
 62206 jge 62214
 62209 mov EAX,0
 62212 leave 
 62213 ret 
__2545:
__2543:
__2547:
 62214 rstack EAX,EBP:-9
// if (backlink)
 62218 cmp 0,EAX
 62221 jge 62254
 62224 rstack EAX,EBP:-3
// fs3_file_set_backlink arg #3 (float fs3)
 62228 push EAX
 62230 rstack EAX,EBP:-9
// fs3_file_set_backlink arg #2 (float backlink)
 62234 push EAX
 62236 rstack EAX,EBP:-11
// fs3_file_set_backlink arg #1 (float fh)
 62240 push EAX
 62242 mov ECX,3
// fs3_file_set_backlink(...)
 62245 call 59981
 62248 add ESP,3
 62251 jmp 62278
__2549:
__2548:
__2551:
__2553:
 62254 rstack EAX,EBP:-10
 62258 mov EBX,2
 62261 sub EBX,EAX
 62263 fabs EBX,EBX
 62265 fsgn EBX,EBX
// if (f_index!=2)
 62267 cmp 0,EBX
 62270 jge 62278
 62273 mov EAX,0
 62276 leave 
 62277 ret 
__2554:
__2552:
__2550:
__2546:
 62278 rstack EAX,EBP:-11
// file_handle_get_imp arg #1 (float this)
 62282 push EAX
 62284 mov ECX,1
// file_handle_get_imp(...)
 62287 call 51202
 62290 add ESP,1
 62293 sstack EBP:-14,EAX
 62297 rstack EAX,EBP:-2
// fs3_fh_set_filename arg #2 (float filename)
 62301 push EAX
 62303 rstack EAX,EBP:-14
// fs3_fh_set_filename arg #1 (float self)
 62307 push EAX
 62309 mov ECX,2
// fs3_fh_set_filename(...)
 62312 call 60954
 62315 add ESP,2
__2541:
__2537:
__2556:
 62318 rstack EAX,EBP:-7
// if (from)
 62322 cmp 0,EAX
 62325 jge 62356
// fseek arg #3 (float whence)
 62328 push 2
// fseek arg #2 (float offs)
 62331 push 0
 62334 rstack EAX,EBP:-11
// fseek arg #1 (float fp)
 62338 push EAX
 62340 mov ECX,3
// fseek(...)
 62343 call 61103
 62346 add ESP,3
// seekpos=fseek(fh,0,2)
 62349 sstack EBP:-12,EAX
 62353 jmp 62381
__2558:
__2557:
__2560:
// fseek arg #3 (float whence)
 62356 push 0
// fseek arg #2 (float offs)
 62359 push 0
 62362 rstack EAX,EBP:-11
// fseek arg #1 (float fp)
 62366 push EAX
 62368 mov ECX,3
// fseek(...)
 62371 call 61103
 62374 add ESP,3
// seekpos=fseek(fh,0,0)
 62377 sstack EBP:-12,EAX
__2559:
__2555:
 62381 rstack EAX,EBP:-11
 62385 leave 
 62386 ret 
__2529:
 62387 leave 
 62388 ret 
fclose:
// fclose(shell,fh)
 62389 enter -0
__2562:
 62392 rstack EAX,EBP:3
 62396 add EAX,0
 62399 mov EBX,EAX
// fh[0]=0
 62401 mov #EBX,0
 62404 mov EAX,1
 62407 leave 
 62408 ret 
__2561:
 62409 leave 
 62410 ret 
fs3_get_parent_dir:
// fs3_get_parent_dir(fs3,fh)
 62411 enter 3
__2564:
// assert_type arg #2 (float t)
 62414 push 50944
 62417 rstack EAX,EBP:3
// assert_type arg #1 (float self)
 62421 push EAX
 62423 mov ECX,2
// assert_type(...)
 62426 call 10123
 62429 add ESP,2
 62432 rstack EAX,EBP:3
// file_handle_get_imp arg #1 (float this)
 62436 push EAX
 62438 mov ECX,1
// file_handle_get_imp(...)
 62441 call 51202
 62444 add ESP,1
 62447 sstack EBP:-1,EAX
 62451 rstack EAX,EBP:-1
 62455 add EAX,9
 62458 mov EBX,EAX
 62460 sstack EBP:-2,#EBX
// fs3_open_or_lookup_file_index arg #3 (float new_allowed)
 62464 push 0
 62467 rstack EAX,EBP:-2
// fs3_open_or_lookup_file_index arg #2 (float file_index)
 62471 push EAX
 62473 rstack EAX,EBP:2
// fs3_open_or_lookup_file_index arg #1 (float fs3)
 62477 push EAX
 62479 mov ECX,3
// fs3_open_or_lookup_file_index(...)
 62482 call 58344
 62485 add ESP,3
 62488 sstack EBP:-3,EAX
 62492 rstack EAX,EBP:-3
 62496 leave 
 62497 ret 
__2563:
 62498 leave 
 62499 ret 
fs3_mkdir:
// fs3_mkdir(shell,filepath)
 62500 enter 12
__2566:
// fopen arg #3 (float mode)
 62503 push 51829
 62506 rstack EAX,EBP:3
// fopen arg #2 (float filepath)
 62510 push EAX
 62512 rstack EAX,EBP:2
// fopen arg #1 (float shell)
 62516 push EAX
 62518 mov ECX,3
// fopen(...)
 62521 call 61841
 62524 add ESP,3
 62527 sstack EBP:-1,EAX
// assert_type arg #2 (float t)
 62531 push 45739
 62534 rstack EAX,EBP:2
// assert_type arg #1 (float self)
 62538 push EAX
 62540 mov ECX,2
// assert_type(...)
 62543 call 10123
 62546 add ESP,2
 62549 rstack EAX,EBP:2
 62553 add EAX,100
 62556 mov EBX,EAX
 62558 sstack EBP:-2,EBX
 62562 rstack EAX,EBP:3
// filepath_abs arg #2 (char* filename)
 62566 push EAX
 62568 rstack EAX,EBP:-2
// filepath_abs arg #1 (float current_path)
 62572 push EAX
 62574 mov ECX,2
// filepath_abs(...)
 62577 call 51953
 62580 add ESP,2
 62583 sstack EBP:-3,EAX
 62587 rstack EAX,EBP:-3
// fs3_from_filepath arg #2 (float filepath)
 62591 push EAX
 62593 rstack EAX,EBP:2
// fs3_from_filepath arg #1 (float shell)
 62597 push EAX
 62599 mov ECX,2
// fs3_from_filepath(...)
 62602 call 59711
 62605 add ESP,2
 62608 sstack EBP:-4,EAX
// assert_type arg #2 (float t)
 62612 push 53070
 62615 rstack EAX,EBP:-4
// assert_type arg #1 (float self)
 62619 push EAX
 62621 mov ECX,2
// assert_type(...)
 62624 call 10123
 62627 add ESP,2
// malloc arg #1 (float n)
 62630 push 2
 62633 mov ECX,1
// malloc(...)
 62636 call 29334
 62639 add ESP,1
 62642 sstack EBP:-5,EAX
 62646 rstack EAX,EBP:-5
 62650 add EAX,0
 62653 mov EBX,EAX
// buff[0]=0
 62655 mov #EBX,0
 62658 rstack EAX,EBP:-5
 62662 add EAX,1
 62665 mov EBX,EAX
// buff[1]=0
 62667 mov #EBX,0
 62670 rstack EAX,EBP:-1
// fwrite arg #3 (float fp)
 62674 push EAX
// fwrite arg #2 (float size)
 62676 push 2
 62679 rstack EAX,EBP:-5
// fwrite arg #1 (float from)
 62683 push EAX
 62685 mov ECX,3
// fwrite(...)
 62688 call 61481
 62691 add ESP,3
 62694 rstack EAX,EBP:-1
// fs3_get_parent_dir arg #2 (float fh)
 62698 push EAX
 62700 rstack EAX,EBP:-4
// fs3_get_parent_dir arg #1 (float fs3)
 62704 push EAX
 62706 mov ECX,2
// fs3_get_parent_dir(...)
 62709 call 62411
 62712 add ESP,2
 62715 sstack EBP:-6,EAX
__2568:
 62719 rstack EAX,EBP:-6
 62723 lneg EAX
 62725 mov EBX,EAX
// if (!fh_dir)
 62727 cmp 0,EBX
 62730 jge 62750
// printf arg #1 (char* format)
 62733 push 62919
 62736 mov ECX,1
// printf(...)
 62739 call 21851
 62742 add ESP,1
 62745 mov EAX,0
 62748 leave 
 62749 ret 
__2569:
__2567:
 62750 rstack EAX,EBP:-1
// file_handle_get_imp arg #1 (float this)
 62754 push EAX
 62756 mov ECX,1
// file_handle_get_imp(...)
 62759 call 51202
 62762 add ESP,1
 62765 sstack EBP:-7,EAX
 62769 rstack EAX,EBP:-7
 62773 add EAX,4
 62776 mov EBX,EAX
 62778 sstack EBP:-8,#EBX
 62782 rstack EAX,EBP:-8
// fs3_dir_find_fidx arg #3 (float file_index)
 62786 push EAX
 62788 rstack EAX,EBP:-6
// fs3_dir_find_fidx arg #2 (float fh_dir)
 62792 push EAX
 62794 rstack EAX,EBP:-4
// fs3_dir_find_fidx arg #1 (float fs3)
 62798 push EAX
 62800 mov ECX,3
// fs3_dir_find_fidx(...)
 62803 call 57782
 62806 add ESP,3
 62809 sstack EBP:-9,EAX
 62813 rstack EAX,EBP:-9
// fs3_dir_get_entry_ptr arg #3 (float I)
 62817 push EAX
 62819 rstack EAX,EBP:-6
// fs3_dir_get_entry_ptr arg #2 (float fh_dir)
 62823 push EAX
 62825 rstack EAX,EBP:-4
// fs3_dir_get_entry_ptr arg #1 (float fs3)
 62829 push EAX
 62831 mov ECX,3
// fs3_dir_get_entry_ptr(...)
 62834 call 56258
 62837 add ESP,3
 62840 sstack EBP:-10,EAX
 62844 rstack EAX,EBP:-10
 62848 add EAX,1
 62851 mov EBX,EAX
 62853 sstack EBP:-11,EBX
 62857 sstack EBP:-12,1
// fseek arg #3 (float whence)
 62862 push 0
 62865 rstack EAX,EBP:-11
// fseek arg #2 (float offs)
 62869 push EAX
 62871 rstack EAX,EBP:-6
// fseek arg #1 (float fp)
 62875 push EAX
 62877 mov ECX,3
// fseek(...)
 62880 call 61103
 62883 add ESP,3
 62886 rstack EAX,EBP:-6
// fwrite arg #3 (float fp)
 62890 push EAX
// fwrite arg #2 (float size)
 62892 push 1
 62895 mov EAX,SS:ESP
 62898 add EAX,-12
// fwrite arg #1 (float from)
 62901 push EAX
 62903 mov ECX,3
// fwrite(...)
 62906 call 61481
 62909 add ESP,3
 62912 mov EAX,1
 62915 leave 
 62916 ret 
__2565:
 62917 leave 
 62918 ret 
__2570:
 62919 db "no parent dir
",0
fs3_delFile:
// fs3_delFile(shell,filepath)
 62934 enter 7
__2572:
// printf arg #1 (char* format)
 62937 push 63255
 62940 mov ECX,1
// printf(...)
 62943 call 21851
 62946 add ESP,1
 62949 mov EAX,0
 62952 leave 
 62953 ret 
// assert_type arg #2 (float t)
 62954 push 45739
 62957 rstack EAX,EBP:2
// assert_type arg #1 (float self)
 62961 push EAX
 62963 mov ECX,2
// assert_type(...)
 62966 call 10123
 62969 add ESP,2
 62972 rstack EAX,EBP:2
 62976 add EAX,3
 62979 mov EBX,EAX
 62981 sstack EBP:-1,#EBX
// assert_type arg #2 (float t)
 62985 push 53070
 62988 rstack EAX,EBP:-1
// assert_type arg #1 (float self)
 62992 push EAX
 62994 mov ECX,2
// assert_type(...)
 62997 call 10123
 63000 add ESP,2
// fopen arg #3 (float mode)
 63003 push 51829
 63006 rstack EAX,EBP:3
// fopen arg #2 (float filepath)
 63010 push EAX
 63012 rstack EAX,EBP:2
// fopen arg #1 (float shell)
 63016 push EAX
 63018 mov ECX,3
// fopen(...)
 63021 call 61841
 63024 add ESP,3
 63027 sstack EBP:-2,EAX
__2575:
 63031 rstack EAX,EBP:-2
 63035 lneg EAX
 63037 mov EBX,EAX
// if (!fh)
 63039 cmp 0,EBX
 63042 jge 63050
 63045 mov EAX,-1
 63048 leave 
 63049 ret 
__2576:
__2574:
 63050 rstack EAX,EBP:-2
// print_file_handle arg #1 (float fh)
 63054 push EAX
 63056 mov ECX,1
// print_file_handle(...)
 63059 call 60372
 63062 add ESP,1
 63065 rstack EAX,EBP:-2
// file_handle_get_imp arg #1 (float this)
 63069 push EAX
 63071 mov ECX,1
// file_handle_get_imp(...)
 63074 call 51202
 63077 add ESP,1
 63080 sstack EBP:-3,EAX
// assert_type arg #2 (float t)
 63084 push 60177
 63087 rstack EAX,EBP:-3
// assert_type arg #1 (float self)
 63091 push EAX
 63093 mov ECX,2
// assert_type(...)
 63096 call 10123
 63099 add ESP,2
 63102 rstack EAX,EBP:-3
 63106 add EAX,5
 63109 mov EBX,EAX
 63111 sstack EBP:-4,#EBX
 63115 rstack EAX,EBP:-4
// fs3_erase_block_chain arg #2 (float block_id)
 63119 push EAX
 63121 rstack EAX,EBP:-1
// fs3_erase_block_chain arg #1 (float fs3)
 63125 push EAX
 63127 mov ECX,2
// fs3_erase_block_chain(...)
 63130 call 54968
 63133 add ESP,2
 63136 rstack EAX,EBP:-3
// fs3_fh_get_filename arg #1 (float self)
 63140 push EAX
 63142 mov ECX,1
// fs3_fh_get_filename(...)
 63145 call 61006
 63148 add ESP,1
 63151 sstack EBP:-5,EAX
 63155 rstack EAX,EBP:-5
// fs3_open_or_lookup_file_index arg #2 (float file_index)
 63159 push EAX
 63161 rstack EAX,EBP:-1
// fs3_open_or_lookup_file_index arg #1 (float fs3)
 63165 push EAX
 63167 mov ECX,2
// fs3_open_or_lookup_file_index(...)
 63170 call 58344
 63173 add ESP,2
 63176 sstack EBP:-6,EAX
 63180 rstack EAX,EBP:-6
// fs3_find_entry_in_folder arg #3 (float fh_dir)
 63184 push EAX
 63186 rstack EAX,EBP:-5
// fs3_find_entry_in_folder arg #2 (float filename)
 63190 push EAX
 63192 rstack EAX,EBP:-1
// fs3_find_entry_in_folder arg #1 (float fs3)
 63196 push EAX
 63198 mov ECX,3
// fs3_find_entry_in_folder(...)
 63201 call 59240
 63204 add ESP,3
 63207 sstack EBP:-7,EAX
 63211 rstack EAX,EBP:-7
// fs3_dir_erase_entry arg #3 (float entry_id)
 63215 push EAX
 63217 rstack EAX,EBP:-6
// fs3_dir_erase_entry arg #2 (float fh_dir)
 63221 push EAX
 63223 rstack EAX,EBP:-1
// fs3_dir_erase_entry arg #1 (float fs3)
 63227 push EAX
 63229 mov ECX,3
// fs3_dir_erase_entry(...)
 63232 call 56380
 63235 add ESP,3
 63238 rstack EAX,EBP:-2
// fclose arg #1 (float shell)
 63242 push EAX
 63244 mov ECX,1
// fclose(...)
 63247 call 62389
 63250 add ESP,1
__2571:
 63253 leave 
 63254 ret 
__2573:
 63255 db "delFile is WIP, do not use
",0
fs_marker7:
 63283 db 0
fs3_init_file_table:
// fs3_init_file_table(fs3)
 63284 enter 1
__2578:
// assert_type arg #2 (float t)
 63287 push 53070
 63290 rstack EAX,EBP:2
// assert_type arg #1 (float self)
 63294 push EAX
 63296 mov ECX,2
// assert_type(...)
 63299 call 10123
 63302 add ESP,2
// malloc arg #1 (float n)
 63305 push #32206
 63308 mov ECX,1
// malloc(...)
 63311 call 29334
 63314 add ESP,1
 63317 sstack EBP:-1,EAX
// vector_constructor arg #2 (float element_size)
 63321 push 2
 63324 rstack EAX,EBP:-1
// vector_constructor arg #1 (void* self)
 63328 push EAX
 63330 mov ECX,2
// vector_constructor(...)
 63333 call 32207
 63336 add ESP,2
 63339 rstack EAX,EBP:-1
 63343 rstack EBX,EBP:2
 63347 add EBX,3
 63350 mov ECX,EBX
// fs3[3]=FT
 63352 mov #ECX,EAX
__2577:
 63354 leave 
 63355 ret 
fs3_add_file_to_FT:
// fs3_add_file_to_FT(fs3,file_index,file_handle)
 63356 enter 4
__2580:
// assert_type arg #2 (float t)
 63359 push 53070
 63362 rstack EAX,EBP:2
// assert_type arg #1 (float self)
 63366 push EAX
 63368 mov ECX,2
// assert_type(...)
 63371 call 10123
 63374 add ESP,2
 63377 rstack EAX,EBP:2
 63381 add EAX,4
 63384 mov EBX,EAX
 63386 sstack EBP:-1,#EBX
__2582:
 63390 rstack EAX,EBP:-1
 63394 lneg EAX
 63396 mov EBX,EAX
// if (!cache_mode)
 63398 cmp 0,EBX
 63401 jge 63409
 63404 mov EAX,0
 63407 leave 
 63408 ret 
__2583:
__2581:
 63409 rstack EAX,EBP:2
 63413 add EAX,3
 63416 mov EBX,EAX
 63418 sstack EBP:-2,#EBX
 63422 rstack EAX,EBP:3
// entry[0]=file_index
 63426 sstack EBP:-4,EAX
 63430 rstack EAX,EBP:4
// entry[1]=file_handle
 63434 sstack EBP:-3,EAX
 63438 mov EAX,SS:ESP
 63441 add EAX,-4
// vector_push arg #2 (void* element)
 63444 push EAX
 63446 rstack EAX,EBP:-2
// vector_push arg #1 (void* self)
 63450 push EAX
 63452 mov ECX,2
// vector_push(...)
 63455 call 32926
 63458 add ESP,2
__2579:
 63461 leave 
 63462 ret 
fs3_FT_get_file:
// fs3_FT_get_file(fs3,file_index)
 63463 enter 6
__2585:
// assert_type arg #2 (float t)
 63466 push 53070
 63469 rstack EAX,EBP:2
// assert_type arg #1 (float self)
 63473 push EAX
 63475 mov ECX,2
// assert_type(...)
 63478 call 10123
 63481 add ESP,2
 63484 rstack EAX,EBP:2
 63488 add EAX,4
 63491 mov EBX,EAX
 63493 sstack EBP:-1,#EBX
__2587:
 63497 rstack EAX,EBP:-1
 63501 lneg EAX
 63503 mov EBX,EAX
// if (!cache_mode)
 63505 cmp 0,EBX
 63508 jge 63516
 63511 mov EAX,0
 63514 leave 
 63515 ret 
__2588:
__2586:
 63516 rstack EAX,EBP:2
 63520 add EAX,3
 63523 mov EBX,EAX
 63525 sstack EBP:-2,#EBX
 63529 rstack EAX,EBP:-2
// vector_size arg #1 (void* self)
 63533 push EAX
 63535 mov ECX,1
// vector_size(...)
 63538 call 33515
 63541 add ESP,1
 63544 sstack EBP:-5,EAX
// init loop
 63548 sstack EBP:-6,0
__2590:
 63553 rstack EAX,EBP:-6
 63557 rstack EBX,EBP:-5
 63561 sub EBX,EAX
 63563 mov EAX,EBX
 63565 fsgn EAX,EAX
// condition
 63567 max EAX,0
 63570 cmp 0,EAX
 63573 jz 63648
 63576 rstack EAX,EBP:-6
// vector_get arg #3 (float pos)
 63580 push EAX
 63582 mov EAX,SS:ESP
 63585 add EAX,-4
// vector_get arg #2 (void* element)
 63588 push EAX
 63590 rstack EAX,EBP:-2
// vector_get arg #1 (void* self)
 63594 push EAX
 63596 mov ECX,3
// vector_get(...)
 63599 call 33598
 63602 add ESP,3
__2592:
 63605 rstack EAX,EBP:-4
 63609 rstack EBX,EBP:3
 63613 sub EBX,EAX
 63615 mov EAX,EBX
 63617 fabs EAX,EAX
 63619 fsgn EAX,EAX
 63621 lneg EAX
// if (entry[0]==file_index)
 63623 cmp 0,EAX
 63626 jge 63635
 63629 rstack EAX,EBP:-3
 63633 leave 
 63634 ret 
__2593:
__2591:
 63635 rstack EAX,EBP:-6
// loop step
 63639 inc EAX
 63641 sstack EBP:-6,EAX
 63645 jmp 63553
__2589:
 63648 mov EAX,0
 63651 leave 
 63652 ret 
__2584:
 63653 leave 
 63654 ret 
fs3_FT_erase_file:
// fs3_FT_erase_file(fs3,file_index,file_handle)
 63655 enter 6
__2595:
// assert_type arg #2 (float t)
 63658 push 53070
 63661 rstack EAX,EBP:2
// assert_type arg #1 (float self)
 63665 push EAX
 63667 mov ECX,2
// assert_type(...)
 63670 call 10123
 63673 add ESP,2
 63676 rstack EAX,EBP:2
 63680 add EAX,4
 63683 mov EBX,EAX
 63685 sstack EBP:-1,#EBX
__2597:
 63689 rstack EAX,EBP:-1
 63693 lneg EAX
 63695 mov EBX,EAX
// if (!cache_mode)
 63697 cmp 0,EBX
 63700 jge 63708
 63703 mov EAX,0
 63706 leave 
 63707 ret 
__2598:
__2596:
 63708 rstack EAX,EBP:2
 63712 add EAX,3
 63715 mov EBX,EAX
 63717 sstack EBP:-2,#EBX
 63721 rstack EAX,EBP:-2
// vector_size arg #1 (void* self)
 63725 push EAX
 63727 mov ECX,1
// vector_size(...)
 63730 call 33515
 63733 add ESP,1
 63736 sstack EBP:-5,EAX
 63740 sstack EBP:-6,0
__2600:
 63745 rstack EAX,EBP:-6
 63749 rstack EBX,EBP:-5
 63753 sub EBX,EAX
 63755 mov EAX,EBX
 63757 fsgn EAX,EAX
 63759 max EAX,0
// if (I<size
 63762 cmp 0,EAX
 63765 jz 63921
 63768 rstack EAX,EBP:-6
// vector_get arg #3 (float pos)
 63772 push EAX
 63774 mov EAX,SS:ESP
 63777 add EAX,-4
// vector_get arg #2 (void* element)
 63780 push EAX
 63782 rstack EAX,EBP:-2
// vector_get arg #1 (void* self)
 63786 push EAX
 63788 mov ECX,3
// vector_get(...)
 63791 call 33598
 63794 add ESP,3
__2602:
 63797 rstack EAX,EBP:-4
 63801 rstack EBX,EBP:3
 63805 sub EBX,EAX
 63807 mov EAX,EBX
 63809 fabs EAX,EAX
 63811 fsgn EAX,EAX
 63813 rstack EBX,EBP:3
 63817 mov ECX,0
 63820 sub ECX,EBX
 63822 fabs ECX,ECX
 63824 fsgn ECX,ECX
 63826 and ECX,EAX
// if ((file_index!=0)&&(entry[0]!=file_index))
 63828 cmp 0,ECX
 63831 jge 63847
 63834 rstack EAX,EBP:-6
// I++
 63838 inc EAX
 63840 sstack EBP:-6,EAX
 63844 jmp 63745
__2603:
__2601:
__2605:
 63847 rstack EAX,EBP:-3
 63851 rstack EBX,EBP:4
 63855 sub EBX,EAX
 63857 mov EAX,EBX
 63859 fabs EAX,EAX
 63861 fsgn EAX,EAX
 63863 rstack EBX,EBP:4
 63867 mov ECX,0
 63870 sub ECX,EBX
 63872 fabs ECX,ECX
 63874 fsgn ECX,ECX
 63876 and ECX,EAX
// if ((file_handle!=0)&&(entry[1]!=file_handle))
 63878 cmp 0,ECX
 63881 jge 63897
 63884 rstack EAX,EBP:-6
// I++
 63888 inc EAX
 63890 sstack EBP:-6,EAX
 63894 jmp 63745
__2606:
__2604:
 63897 rstack EAX,EBP:-6
// vector_remove arg #2 (float pos)
 63901 push EAX
 63903 rstack EAX,EBP:-2
// vector_remove arg #1 (void* self)
 63907 push EAX
 63909 mov ECX,2
// vector_remove(...)
 63912 call 34733
 63915 add ESP,2
 63918 jmp 63745
__2599:
__2594:
 63921 leave 
 63922 ret 
fs3_backlink_write_size:
// fs3_backlink_write_size(fs3,backlink,file_index,size)
 63923 enter 4
__2608:
// assert_type arg #2 (float t)
 63926 push 53070
 63929 rstack EAX,EBP:2
// assert_type arg #1 (float self)
 63933 push EAX
 63935 mov ECX,2
// assert_type(...)
 63938 call 10123
 63941 add ESP,2
// fs3_open_or_lookup_file_index arg #3 (float new_allowed)
 63944 push 0
 63947 rstack EAX,EBP:3
// fs3_open_or_lookup_file_index arg #2 (float file_index)
 63951 push EAX
 63953 rstack EAX,EBP:2
// fs3_open_or_lookup_file_index arg #1 (float fs3)
 63957 push EAX
 63959 mov ECX,3
// fs3_open_or_lookup_file_index(...)
 63962 call 58344
 63965 add ESP,3
 63968 sstack EBP:-1,EAX
 63972 rstack EAX,EBP:4
// fs3_dir_find_fidx arg #3 (float file_index)
 63976 push EAX
 63978 rstack EAX,EBP:-1
// fs3_dir_find_fidx arg #2 (float fh_dir)
 63982 push EAX
 63984 rstack EAX,EBP:2
// fs3_dir_find_fidx arg #1 (float fs3)
 63988 push EAX
 63990 mov ECX,3
// fs3_dir_find_fidx(...)
 63993 call 57782
 63996 add ESP,3
 63999 sstack EBP:-2,EAX
__2610:
 64003 rstack EAX,EBP:-2
 64007 mov EBX,-1
 64010 sub EBX,EAX
 64012 fabs EBX,EBX
 64014 fsgn EBX,EBX
// if (entry_idx!=-1)
 64016 cmp 0,EBX
 64019 jge 64119
 64022 rstack EAX,EBP:-2
// fs3_dir_get_entry_ptr arg #3 (float I)
 64026 push EAX
 64028 rstack EAX,EBP:-1
// fs3_dir_get_entry_ptr arg #2 (float fh_dir)
 64032 push EAX
 64034 rstack EAX,EBP:2
// fs3_dir_get_entry_ptr arg #1 (float fs3)
 64038 push EAX
 64040 mov ECX,3
// fs3_dir_get_entry_ptr(...)
 64043 call 56258
 64046 add ESP,3
 64049 sstack EBP:-3,EAX
 64053 rstack EAX,EBP:-3
 64057 add EAX,2
 64060 mov EBX,EAX
 64062 sstack EBP:-4,EBX
// fseek arg #3 (float whence)
 64066 push 0
 64069 rstack EAX,EBP:-4
// fseek arg #2 (float offs)
 64073 push EAX
 64075 rstack EAX,EBP:-1
// fseek arg #1 (float fp)
 64079 push EAX
 64081 mov ECX,3
// fseek(...)
 64084 call 61103
 64087 add ESP,3
 64090 rstack EAX,EBP:-1
// fwrite arg #3 (float fp)
 64094 push EAX
// fwrite arg #2 (float size)
 64096 push 1
 64099 mov EAX,SS:ESP
 64102 add EAX,5
// fwrite arg #1 (float from)
 64105 push EAX
 64107 mov ECX,3
// fwrite(...)
 64110 call 61481
 64113 add ESP,3
 64116 jmp 64137
__2612:
__2611:
__2614:
 64119 rstack EAX,EBP:4
// printf arg #2 (unknown)
 64123 push EAX
// printf arg #1 (char* format)
 64125 push 64139
 64128 mov ECX,2
// printf(...)
 64131 call 21851
 64134 add ESP,2
__2613:
__2609:
__2607:
 64137 leave 
 64138 ret 
__2615:
 64139 db "backlink_ws: no entry for index %d
",0
fs3_backlink_read_size:
// fs3_backlink_read_size(fs3,backlink,file_index)
 64175 enter 5
__2617:
// assert_type arg #2 (float t)
 64178 push 53070
 64181 rstack EAX,EBP:2
// assert_type arg #1 (float self)
 64185 push EAX
 64187 mov ECX,2
// assert_type(...)
 64190 call 10123
 64193 add ESP,2
// fs3_open_or_lookup_file_index arg #3 (float new_allowed)
 64196 push 0
 64199 rstack EAX,EBP:3
// fs3_open_or_lookup_file_index arg #2 (float file_index)
 64203 push EAX
 64205 rstack EAX,EBP:2
// fs3_open_or_lookup_file_index arg #1 (float fs3)
 64209 push EAX
 64211 mov ECX,3
// fs3_open_or_lookup_file_index(...)
 64214 call 58344
 64217 add ESP,3
 64220 sstack EBP:-2,EAX
 64224 rstack EAX,EBP:4
// fs3_dir_find_fidx arg #3 (float file_index)
 64228 push EAX
 64230 rstack EAX,EBP:-2
// fs3_dir_find_fidx arg #2 (float fh_dir)
 64234 push EAX
 64236 rstack EAX,EBP:2
// fs3_dir_find_fidx arg #1 (float fs3)
 64240 push EAX
 64242 mov ECX,3
// fs3_dir_find_fidx(...)
 64245 call 57782
 64248 add ESP,3
 64251 sstack EBP:-3,EAX
__2619:
 64255 rstack EAX,EBP:-3
 64259 mov EBX,-1
 64262 sub EBX,EAX
 64264 fabs EBX,EBX
 64266 fsgn EBX,EBX
// if (entry_idx!=-1)
 64268 cmp 0,EBX
 64271 jge 64368
 64274 rstack EAX,EBP:-3
// fs3_dir_get_entry_ptr arg #3 (float I)
 64278 push EAX
 64280 rstack EAX,EBP:-2
// fs3_dir_get_entry_ptr arg #2 (float fh_dir)
 64284 push EAX
 64286 rstack EAX,EBP:2
// fs3_dir_get_entry_ptr arg #1 (float fs3)
 64290 push EAX
 64292 mov ECX,3
// fs3_dir_get_entry_ptr(...)
 64295 call 56258
 64298 add ESP,3
 64301 sstack EBP:-4,EAX
 64305 rstack EAX,EBP:-4
 64309 add EAX,2
 64312 mov EBX,EAX
 64314 sstack EBP:-5,EBX
// fseek arg #3 (float whence)
 64318 push 0
 64321 rstack EAX,EBP:-5
// fseek arg #2 (float offs)
 64325 push EAX
 64327 rstack EAX,EBP:-2
// fseek arg #1 (float fp)
 64331 push EAX
 64333 mov ECX,3
// fseek(...)
 64336 call 61103
 64339 add ESP,3
 64342 rstack EAX,EBP:-2
// fread arg #3 (float fp)
 64346 push EAX
// fread arg #2 (float size)
 64348 push 1
 64351 mov EAX,SS:ESP
 64354 add EAX,-1
// fread arg #1 (float to)
 64357 push EAX
 64359 mov ECX,3
// fread(...)
 64362 call 61307
 64365 add ESP,3
__2620:
__2618:
 64368 rstack EAX,EBP:-1
 64372 leave 
 64373 ret 
__2616:
 64374 leave 
 64375 ret 
fs_marker8:
 64376 db 0
cmdMount:
// cmdMount(shell,argc,argv)
 64377 enter 7
__2622:
// assert_type arg #2 (float t)
 64380 push 45739
 64383 rstack EAX,EBP:2
// assert_type arg #1 (float self)
 64387 push EAX
 64389 mov ECX,2
// assert_type(...)
 64392 call 10123
 64395 add ESP,2
__2624:
 64398 rstack EAX,EBP:3
 64402 mov EBX,2
 64405 sub EBX,EAX
 64407 neg EBX
 64409 fsgn EBX,EBX
 64411 max EBX,0
// if (argc>2)
 64414 cmp 0,EBX
 64417 jge 64627
 64420 rstack EAX,EBP:4
 64424 add EAX,1
 64427 mov EBX,EAX
// str2num arg #1 (char* str)
 64429 push #EBX
 64431 mov ECX,1
// str2num(...)
 64434 call 12270
 64437 add ESP,1
 64440 sstack EBP:-1,EAX
 64444 rstack EAX,EBP:-1
// EBcb_get_entry arg #2 (float num)
 64448 push EAX
// EBcb_get_entry arg #1 (float this)
 64450 push 77224
 64453 mov ECX,2
// EBcb_get_entry(...)
 64456 call 19880
 64459 add ESP,2
 64462 sstack EBP:-2,EAX
 64466 rstack EAX,EBP:-2
// EBcb_entry_get_type arg #1 (float this)
 64470 push EAX
 64472 mov ECX,1
// EBcb_entry_get_type(...)
 64475 call 19700
 64478 add ESP,1
 64481 sstack EBP:-3,EAX
 64485 rstack EAX,EBP:-3
// udhTypeToString arg #1 (float type)
 64489 push EAX
 64491 mov ECX,1
// udhTypeToString(...)
 64494 call 19057
 64497 add ESP,1
 64500 sstack EBP:-4,EAX
 64504 rstack EAX,EBP:-2
// EBcb_entry_get_addr arg #1 (float this)
 64508 push EAX
 64510 mov ECX,1
// EBcb_entry_get_addr(...)
 64513 call 19736
 64516 add ESP,1
 64519 sstack EBP:-5,EAX
 64523 rstack EAX,EBP:4
 64527 add EAX,2
 64530 mov EBX,EAX
 64532 sstack EBP:-6,#EBX
 64536 rstack EAX,EBP:-6
// printf arg #4 (unknown)
 64540 push EAX
 64542 rstack EAX,EBP:-4
// printf arg #3 (unknown)
 64546 push EAX
 64548 rstack EAX,EBP:-1
// printf arg #2 (unknown)
 64552 push EAX
// printf arg #1 (char* format)
 64554 push 64655
 64557 mov ECX,4
// printf(...)
 64560 call 21851
 64563 add ESP,4
 64566 mov ECX,0
// init_fs3(...)
 64569 call 53078
 64572 sstack EBP:-7,EAX
 64576 rstack EAX,EBP:-5
// fs3_load_fs_descriptor arg #2 (float devAdr)
 64580 push EAX
 64582 rstack EAX,EBP:-7
// fs3_load_fs_descriptor arg #1 (float fs3)
 64586 push EAX
 64588 mov ECX,2
// fs3_load_fs_descriptor(...)
 64591 call 53501
 64594 add ESP,2
 64597 rstack EAX,EBP:-6
// shell2_associate_fs3_with_letter arg #3 (float letter)
 64601 push EAX
 64603 rstack EAX,EBP:-7
// shell2_associate_fs3_with_letter arg #2 (float fs3)
 64607 push EAX
 64609 rstack EAX,EBP:2
// shell2_associate_fs3_with_letter arg #1 (float self)
 64613 push EAX
 64615 mov ECX,3
// shell2_associate_fs3_with_letter(...)
 64618 call 48704
 64621 add ESP,3
 64624 jmp 64653
__2627:
__2625:
__2629:
 64627 rstack EAX,EBP:4
 64631 add EAX,0
 64634 mov EBX,EAX
// cmdHelp2 arg #2 (float str_cmd)
 64636 push #EBX
 64638 rstack EAX,EBP:2
// cmdHelp2 arg #1 (float shell)
 64642 push EAX
 64644 mov ECX,2
// cmdHelp2(...)
 64647 call 49409
 64650 add ESP,2
__2628:
__2623:
__2621:
 64653 leave 
 64654 ret 
__2626:
 64655 db "mounting device %d
(%s) as %s:/
",0
cmdCD:
// cmdCD(shell,argc,argv)
 64688 enter 5
__2631:
// assert_type arg #2 (float t)
 64691 push 45739
 64694 rstack EAX,EBP:2
// assert_type arg #1 (float self)
 64698 push EAX
 64700 mov ECX,2
// assert_type(...)
 64703 call 10123
 64706 add ESP,2
// malloc arg #1 (float n)
 64709 push 10
 64712 mov ECX,1
// malloc(...)
 64715 call 29334
 64718 add ESP,1
 64721 sstack EBP:-1,EAX
// malloc arg #1 (float n)
 64725 push 10
 64728 mov ECX,1
// malloc(...)
 64731 call 29334
 64734 add ESP,1
 64737 sstack EBP:-2,EAX
// malloc arg #1 (float n)
 64741 push 80
 64744 mov ECX,1
// malloc(...)
 64747 call 29334
 64750 add ESP,1
 64753 sstack EBP:-3,EAX
 64757 rstack EAX,EBP:2
 64761 add EAX,100
 64764 mov EBX,EAX
 64766 sstack EBP:-4,EBX
 64770 rstack EAX,EBP:4
 64774 add EAX,1
 64777 mov EBX,EAX
 64779 sstack EBP:-5,#EBX
__2633:
 64783 rstack EAX,EBP:3
 64787 mov EBX,1
 64790 sub EBX,EAX
 64792 neg EBX
 64794 fsgn EBX,EBX
 64796 max EBX,0
// if (argc>1)
 64799 cmp 0,EBX
 64802 jge 65057
__2636:
 64805 rstack EAX,EBP:-2
// filepath_drive arg #2 (float driveletter)
 64809 push EAX
 64811 rstack EAX,EBP:-5
// filepath_drive arg #1 (float filename)
 64815 push EAX
 64817 mov ECX,2
// filepath_drive(...)
 64820 call 52828
 64823 add ESP,2
// if (filepath_drive(str_arg,new_drivepath))
 64826 cmp 0,EAX
 64829 jge 65000
 64832 rstack EAX,EBP:-1
 64836 add EAX,0
 64839 mov EBX,EAX
// old_drivepath[0]=0
 64841 mov #EBX,0
 64844 rstack EAX,EBP:-1
// filepath_drive arg #2 (float driveletter)
 64848 push EAX
 64850 rstack EAX,EBP:-4
// filepath_drive arg #1 (float filename)
 64854 push EAX
 64856 mov ECX,2
// filepath_drive(...)
 64859 call 52828
 64862 add ESP,2
__2639:
 64865 rstack EAX,EBP:-2
// strcmp arg #2 (char* dest)
 64869 push EAX
 64871 rstack EAX,EBP:-1
// strcmp arg #1 (char* src)
 64875 push EAX
 64877 mov ECX,2
// strcmp(...)
 64880 call 10763
 64883 add ESP,2
 64886 mov EBX,0
 64889 sub EBX,EAX
 64891 fabs EBX,EBX
 64893 fsgn EBX,EBX
// if (strcmp(old_drivepath,new_drivepath)!=0)
 64895 cmp 0,EBX
 64898 jge 64976
__2642:
 64901 rstack EAX,EBP:-2
// shell2_set_fs_by_drive_letter arg #2 (float letter)
 64905 push EAX
 64907 rstack EAX,EBP:2
// shell2_set_fs_by_drive_letter arg #1 (float self)
 64911 push EAX
 64913 mov ECX,2
// shell2_set_fs_by_drive_letter(...)
 64916 call 48808
 64919 add ESP,2
// if (shell2_set_fs_by_drive_letter(shell,new_drivepath))
 64922 cmp 0,EAX
 64925 jge 64952
 64928 rstack EAX,EBP:-5
// shell2_set_cd arg #2 (float dir)
 64932 push EAX
 64934 rstack EAX,EBP:2
// shell2_set_cd arg #1 (float self)
 64938 push EAX
 64940 mov ECX,2
// shell2_set_cd(...)
 64943 call 49067
 64946 add ESP,2
 64949 jmp 64973
__2644:
__2643:
__2646:
 64952 rstack EAX,EBP:-2
// printf arg #2 (unknown)
 64956 push EAX
// printf arg #1 (char* format)
 64958 push 65130
 64961 mov ECX,2
// printf(...)
 64964 call 21851
 64967 add ESP,2
 64970 jmp 65083
__2645:
__2641:
 64973 jmp 64997
__2648:
__2640:
__2650:
 64976 rstack EAX,EBP:-5
// shell2_set_cd arg #2 (float dir)
 64980 push EAX
 64982 rstack EAX,EBP:2
// shell2_set_cd arg #1 (float self)
 64986 push EAX
 64988 mov ECX,2
// shell2_set_cd(...)
 64991 call 49067
 64994 add ESP,2
__2649:
__2638:
 64997 jmp 65054
__2651:
__2637:
__2653:
 65000 rstack EAX,EBP:-5
// snprintf arg #5 (unknown)
 65004 push EAX
 65006 rstack EAX,EBP:-4
// snprintf arg #4 (unknown)
 65010 push EAX
// snprintf arg #3 (float format)
 65012 push 65161
// snprintf arg #2 (float n)
 65015 push 80
 65018 rstack EAX,EBP:-3
// snprintf arg #1 (float buff)
 65022 push EAX
 65024 mov ECX,5
// snprintf(...)
 65027 call 24001
 65030 add ESP,5
 65033 rstack EAX,EBP:-3
// shell2_set_cd arg #2 (float dir)
 65037 push EAX
 65039 rstack EAX,EBP:2
// shell2_set_cd arg #1 (float self)
 65043 push EAX
 65045 mov ECX,2
// shell2_set_cd(...)
 65048 call 49067
 65051 add ESP,2
__2652:
__2635:
 65054 jmp 65083
__2655:
__2634:
__2657:
 65057 rstack EAX,EBP:4
 65061 add EAX,0
 65064 mov EBX,EAX
// cmdHelp2 arg #2 (float str_cmd)
 65066 push #EBX
 65068 rstack EAX,EBP:2
// cmdHelp2 arg #1 (float shell)
 65072 push EAX
 65074 mov ECX,2
// cmdHelp2(...)
 65077 call 49409
 65080 add ESP,2
__2656:
__2632:
cmdCD_end:
 65083 rstack EAX,EBP:-1
// free arg #1 (float* ptr)
 65087 push EAX
 65089 mov ECX,1
// free(...)
 65092 call 29828
 65095 add ESP,1
 65098 rstack EAX,EBP:-2
// free arg #1 (float* ptr)
 65102 push EAX
 65104 mov ECX,1
// free(...)
 65107 call 29828
 65110 add ESP,1
 65113 rstack EAX,EBP:-3
// free arg #1 (float* ptr)
 65117 push EAX
 65119 mov ECX,1
// free(...)
 65122 call 29828
 65125 add ESP,1
__2630:
 65128 leave 
 65129 ret 
__2647:
 65130 db "drive %s not mounted (no fs)!
",0
__2654:
 65161 db "%s%s/",0
cmdFormat:
// cmdFormat(shell,argc,argv)
 65167 enter 8
__2659:
// assert_type arg #2 (float t)
 65170 push 45739
 65173 rstack EAX,EBP:2
// assert_type arg #1 (float self)
 65177 push EAX
 65179 mov ECX,2
// assert_type(...)
 65182 call 10123
 65185 add ESP,2
__2661:
 65188 rstack EAX,EBP:3
 65192 mov EBX,1
 65195 sub EBX,EAX
 65197 neg EBX
 65199 fsgn EBX,EBX
 65201 max EBX,0
// if (argc>1)
 65204 cmp 0,EBX
 65207 jge 65449
 65210 rstack EAX,EBP:4
 65214 add EAX,1
 65217 mov EBX,EAX
// str2num arg #1 (char* str)
 65219 push #EBX
 65221 mov ECX,1
// str2num(...)
 65224 call 12270
 65227 add ESP,1
 65230 sstack EBP:-1,EAX
 65234 rstack EAX,EBP:-1
// EBcb_get_entry arg #2 (float num)
 65238 push EAX
// EBcb_get_entry arg #1 (float this)
 65240 push 77224
 65243 mov ECX,2
// EBcb_get_entry(...)
 65246 call 19880
 65249 add ESP,2
 65252 sstack EBP:-2,EAX
 65256 rstack EAX,EBP:-2
// EBcb_entry_get_type arg #1 (float this)
 65260 push EAX
 65262 mov ECX,1
// EBcb_entry_get_type(...)
 65265 call 19700
 65268 add ESP,1
 65271 sstack EBP:-3,EAX
 65275 rstack EAX,EBP:-3
// udhTypeToString arg #1 (float type)
 65279 push EAX
 65281 mov ECX,1
// udhTypeToString(...)
 65284 call 19057
 65287 add ESP,1
 65290 sstack EBP:-4,EAX
 65294 rstack EAX,EBP:-2
// EBcb_entry_get_addr arg #1 (float this)
 65298 push EAX
 65300 mov ECX,1
// EBcb_entry_get_addr(...)
 65303 call 19736
 65306 add ESP,1
 65309 sstack EBP:-5,EAX
 65313 rstack EAX,EBP:-2
// EBcb_entry_get_size arg #1 (float this)
 65317 push EAX
 65319 mov ECX,1
// EBcb_entry_get_size(...)
 65322 call 19718
 65325 add ESP,1
 65328 sstack EBP:-6,EAX
 65332 sstack EBP:-7,300
 65337 rstack EAX,EBP:-5
// printf arg #4 (unknown)
 65341 push EAX
 65343 rstack EAX,EBP:-4
// printf arg #3 (unknown)
 65347 push EAX
 65349 rstack EAX,EBP:-1
// printf arg #2 (unknown)
 65353 push EAX
// printf arg #1 (char* format)
 65355 push 65512
 65358 mov ECX,4
// printf(...)
 65361 call 21851
 65364 add ESP,4
 65367 rstack EAX,EBP:-6
// printf arg #2 (unknown)
 65371 push EAX
// printf arg #1 (char* format)
 65373 push 65477
 65376 mov ECX,2
// printf(...)
 65379 call 21851
 65382 add ESP,2
 65385 rstack EAX,EBP:-7
// printf arg #2 (unknown)
 65389 push EAX
// printf arg #1 (char* format)
 65391 push 65495
 65394 mov ECX,2
// printf(...)
 65397 call 21851
 65400 add ESP,2
 65403 mov ECX,0
// init_fs3(...)
 65406 call 53078
 65409 sstack EBP:-8,EAX
 65413 rstack EAX,EBP:-7
// fs3_disk_format arg #4 (float block_size)
 65417 push EAX
 65419 rstack EAX,EBP:-6
// fs3_disk_format arg #3 (float disk_size)
 65423 push EAX
 65425 rstack EAX,EBP:-5
// fs3_disk_format arg #2 (float disk_addr)
 65429 push EAX
 65431 rstack EAX,EBP:-8
// fs3_disk_format arg #1 (float fs3)
 65435 push EAX
 65437 mov ECX,4
// fs3_disk_format(...)
 65440 call 53189
 65443 add ESP,4
 65446 jmp 65475
__2666:
__2662:
__2668:
 65449 rstack EAX,EBP:4
 65453 add EAX,0
 65456 mov EBX,EAX
// cmdHelp2 arg #2 (float str_cmd)
 65458 push #EBX
 65460 rstack EAX,EBP:2
// cmdHelp2 arg #1 (float shell)
 65464 push EAX
 65466 mov ECX,2
// cmdHelp2(...)
 65469 call 49409
 65472 add ESP,2
__2667:
__2660:
__2658:
 65475 leave 
 65476 ret 
__2664:
 65477 db "device size = %d
",0
__2665:
 65495 db "block size = %d
",0
__2663:
 65512 db "formatting device %d
(%s) @ %d
as lightfs3
",0
cmdDir:
// cmdDir(shell,argc,argv)
 65556 enter 16
__2670:
// assert_type arg #2 (float t)
 65559 push 45739
 65562 rstack EAX,EBP:2
// assert_type arg #1 (float self)
 65566 push EAX
 65568 mov ECX,2
// assert_type(...)
 65571 call 10123
 65574 add ESP,2
 65577 rstack EAX,EBP:2
 65581 add EAX,3
 65584 mov EBX,EAX
 65586 sstack EBP:-1,#EBX
__2672:
 65590 rstack EAX,EBP:-1
 65594 lneg EAX
 65596 mov EBX,EAX
// if (!fs3)
 65598 cmp 0,EBX
 65601 jge 65618
// printf arg #1 (char* format)
 65604 push 66497
 65607 mov ECX,1
// printf(...)
 65610 call 21851
 65613 add ESP,1
 65616 leave 
 65617 ret 
__2673:
__2671:
// malloc arg #1 (float n)
 65618 push 32
 65621 mov ECX,1
// malloc(...)
 65624 call 29334
 65627 add ESP,1
 65630 sstack EBP:-2,EAX
 65634 rstack EAX,EBP:2
 65638 add EAX,100
 65641 mov EBX,EAX
 65643 sstack EBP:-3,EBX
// fopen arg #3 (float mode)
 65647 push 51831
 65650 rstack EAX,EBP:-3
// fopen arg #2 (float filepath)
 65654 push EAX
 65656 rstack EAX,EBP:2
// fopen arg #1 (float shell)
 65660 push EAX
 65662 mov ECX,3
// fopen(...)
 65665 call 61841
 65668 add ESP,3
 65671 sstack EBP:-4,EAX
__2676:
 65675 rstack EAX,EBP:-4
// if (fh_dir)
 65679 cmp 0,EAX
 65682 jge 65688
 65685 jmp 65705
__2678:
__2677:
__2680:
// printf arg #2 (unknown)
 65688 push 990
// printf arg #1 (char* format)
 65691 push 66461
 65694 mov ECX,2
// printf(...)
 65697 call 21851
 65700 add ESP,2
 65703 leave 
 65704 ret 
__2679:
__2675:
 65705 sstack EBP:-5,0
// malloc arg #1 (float n)
 65710 push 200
 65713 mov ECX,1
// malloc(...)
 65716 call 29334
 65719 add ESP,1
 65722 sstack EBP:-6,EAX
// malloc arg #1 (float n)
 65726 push 10
 65729 mov ECX,1
// malloc(...)
 65732 call 29334
 65735 add ESP,1
 65738 sstack EBP:-7,EAX
// malloc arg #1 (float n)
 65742 push 10
 65745 mov ECX,1
// malloc(...)
 65748 call 29334
 65751 add ESP,1
 65754 sstack EBP:-8,EAX
// malloc arg #1 (float n)
 65758 push #55349
 65761 mov ECX,1
// malloc(...)
 65764 call 29334
 65767 add ESP,1
 65770 sstack EBP:-9,EAX
 65774 sstack EBP:-10,0
__2683:
// if (1
 65779 cmp 0,1
 65783 jz 66059
 65786 rstack EAX,EBP:-2
// fs3_dir_get_filename arg #4 (float res_str)
 65790 push EAX
 65792 rstack EAX,EBP:-5
// fs3_dir_get_filename arg #3 (float I)
 65796 push EAX
 65798 rstack EAX,EBP:-4
// fs3_dir_get_filename arg #2 (float fh_dir)
 65802 push EAX
 65804 rstack EAX,EBP:-1
// fs3_dir_get_filename arg #1 (float fs3)
 65808 push EAX
 65810 mov ECX,4
// fs3_dir_get_filename(...)
 65813 call 56799
 65816 add ESP,4
 65819 sstack EBP:-14,EAX
__2685:
 65823 rstack EAX,EBP:-14
// if (res)
 65827 cmp 0,EAX
 65830 jge 66053
 65833 rstack EAX,EBP:-10
 65837 mul EAX,20
 65840 mov EBX,EAX
 65842 rstack EAX,EBP:-6
 65846 add EAX,EBX
 65848 mov EBX,EAX
// p_filename=filenames+num_files*20
 65850 sstack EBP:-11,EBX
// memcpy arg #3 (float n)
 65854 push 20
 65857 rstack EAX,EBP:-2
// memcpy arg #2 (void* src)
 65861 push EAX
 65863 rstack EAX,EBP:-11
// memcpy arg #1 (void* dest)
 65867 push EAX
 65869 mov ECX,3
// memcpy(...)
 65872 call 10355
 65875 add ESP,3
 65878 rstack EAX,EBP:-11
 65882 add EAX,20
 65885 mov EBX,EAX
// p_filename[20]=0
 65887 mov #EBX,0
 65890 rstack EAX,EBP:-5
// fs3_dir_get_filesize arg #3 (float I)
 65894 push EAX
 65896 rstack EAX,EBP:-4
// fs3_dir_get_filesize arg #2 (float fh_dir)
 65900 push EAX
 65902 rstack EAX,EBP:-1
// fs3_dir_get_filesize arg #1 (float fs3)
 65906 push EAX
 65908 mov ECX,3
// fs3_dir_get_filesize(...)
 65911 call 57610
 65914 add ESP,3
// f_size=fs3_dir_get_filesize(fs3,fh_dir,I)
 65917 sstack EBP:-12,EAX
 65921 rstack EAX,EBP:-9
// fs3_dir_read_entry arg #4 (float buff)
 65925 push EAX
 65927 rstack EAX,EBP:-5
// fs3_dir_read_entry arg #3 (float I)
 65931 push EAX
 65933 rstack EAX,EBP:-4
// fs3_dir_read_entry arg #2 (float fh_dir)
 65937 push EAX
 65939 rstack EAX,EBP:-1
// fs3_dir_read_entry arg #1 (float fs3)
 65943 push EAX
 65945 mov ECX,4
// fs3_dir_read_entry(...)
 65948 call 56015
 65951 add ESP,4
 65954 rstack EAX,EBP:-9
 65958 add EAX,1
 65961 mov EBX,EAX
 65963 sstack EBP:-15,#EBX
 65967 rstack EAX,EBP:-15
 65971 rstack EBX,EBP:-10
 65975 rstack ECX,EBP:-8
 65979 add ECX,EBX
 65981 mov EBX,ECX
// filetypes[num_files]=type
 65983 mov #EBX,EAX
 65985 rstack EAX,EBP:-12
 65989 rstack EBX,EBP:-10
 65993 rstack ECX,EBP:-7
 65997 add ECX,EBX
 65999 mov EBX,ECX
// filesizes[num_files]=f_size
 66001 mov #EBX,EAX
 66003 rstack EAX,EBP:-10
// num_files++
 66007 inc EAX
 66009 sstack EBP:-10,EAX
__2688:
 66013 rstack EAX,EBP:-10
 66017 mov EBX,10
 66020 sub EBX,EAX
 66022 neg EBX
 66024 fsgn EBX,EBX
 66026 inc EBX
 66028 max EBX,0
// if (num_files>=10)
 66031 cmp 0,EBX
 66034 jge 66040
 66037 jmp 66059
__2689:
__2687:
 66040 rstack EAX,EBP:-5
// I++
 66044 inc EAX
 66046 sstack EBP:-5,EAX
 66050 jmp 66056
__2690:
__2686:
__2692:
 66053 jmp 66059
__2691:
__2684:
 66056 jmp 65779
__2682:
cmdDirDerp:
__2694:
 66059 rstack EAX,EBP:-5
 66063 mov EBX,0
 66066 sub EBX,EAX
 66068 fabs EBX,EBX
 66070 fsgn EBX,EBX
 66072 lneg EBX
// if (I==0)
 66074 cmp 0,EBX
 66077 jge 66104
 66080 rstack EAX,EBP:-3
// printf arg #3 (unknown)
 66084 push EAX
// printf arg #2 (unknown)
 66086 push 880
// printf arg #1 (char* format)
 66089 push 66387
 66092 mov ECX,3
// printf(...)
 66095 call 21851
 66098 add ESP,3
 66101 jmp 66340
__2697:
__2695:
__2699:
// printf arg #2 (unknown)
 66104 push 90
// printf arg #1 (char* format)
 66107 push 66558
 66110 mov ECX,2
// printf(...)
 66113 call 21851
 66116 add ESP,2
 66119 rstack EAX,EBP:-3
// printf arg #4 (unknown)
 66123 push EAX
 66125 rstack EAX,EBP:-10
// printf arg #3 (unknown)
 66129 push EAX
// printf arg #2 (unknown)
 66131 push 90
// printf arg #1 (char* format)
 66134 push 66528
 66137 mov ECX,4
// printf(...)
 66140 call 21851
 66143 add ESP,4
// printf arg #2 (unknown)
 66146 push 90
// printf arg #1 (char* format)
 66149 push 66482
 66152 mov ECX,2
// printf(...)
 66155 call 21851
 66158 add ESP,2
// init loop
 66161 sstack EBP:-5,0
__2704:
 66166 rstack EAX,EBP:-5
 66170 rstack EBX,EBP:-10
 66174 sub EBX,EAX
 66176 mov EAX,EBX
 66178 fsgn EAX,EAX
// condition
 66180 max EAX,0
 66183 cmp 0,EAX
 66186 jz 66325
 66189 rstack EAX,EBP:-5
 66193 mul EAX,20
 66196 mov EBX,EAX
 66198 rstack EAX,EBP:-6
 66202 add EAX,EBX
 66204 mov EBX,EAX
// p_filename=filenames+I*20
 66206 sstack EBP:-11,EBX
 66210 rstack EAX,EBP:-5
 66214 rstack EBX,EBP:-7
 66218 add EBX,EAX
 66220 mov EAX,EBX
// f_size=filesizes[I]
 66222 sstack EBP:-12,#EAX
 66226 sstack EBP:-16,90
 66231 rstack EAX,EBP:-5
 66235 rstack EBX,EBP:-8
 66239 add EBX,EAX
 66241 mov EAX,EBX
// f_type=filetypes[I]
 66243 sstack EBP:-13,#EAX
__2706:
 66247 rstack EAX,EBP:-13
 66251 mov EBX,1
 66254 sub EBX,EAX
 66256 fabs EBX,EBX
 66258 fsgn EBX,EBX
 66260 lneg EBX
// if (f_type==1)
 66262 cmp 0,EBX
 66265 jge 66273
// typecol=990
 66268 sstack EBP:-16,990
__2707:
__2705:
 66273 rstack EAX,EBP:-11
// printf arg #6 (unknown)
 66277 push EAX
 66279 rstack EAX,EBP:-16
// printf arg #5 (unknown)
 66283 push EAX
 66285 rstack EAX,EBP:-12
// printf arg #4 (unknown)
 66289 push EAX
 66291 rstack EAX,EBP:-5
// printf arg #3 (unknown)
 66295 push EAX
// printf arg #2 (unknown)
 66297 push 90
// printf arg #1 (char* format)
 66300 push 66445
 66303 mov ECX,6
// printf(...)
 66306 call 21851
 66309 add ESP,6
 66312 rstack EAX,EBP:-5
// loop step
 66316 inc EAX
 66318 sstack EBP:-5,EAX
 66322 jmp 66166
__2703:
// printf arg #2 (unknown)
 66325 push 90
// printf arg #1 (char* format)
 66328 push 66417
 66331 mov ECX,2
// printf(...)
 66334 call 21851
 66337 add ESP,2
__2698:
__2693:
 66340 rstack EAX,EBP:-7
// free arg #1 (float* ptr)
 66344 push EAX
 66346 mov ECX,1
// free(...)
 66349 call 29828
 66352 add ESP,1
 66355 rstack EAX,EBP:-6
// free arg #1 (float* ptr)
 66359 push EAX
 66361 mov ECX,1
// free(...)
 66364 call 29828
 66367 add ESP,1
 66370 rstack EAX,EBP:-2
// free arg #1 (float* ptr)
 66374 push EAX
 66376 mov ECX,1
// free(...)
 66379 call 29828
 66382 add ESP,1
__2669:
 66385 leave 
 66386 ret 
__2696:
 66387 db "%mthere are no files in [%s]
",0
__2709:
 66417 db "%m------------------------
",0
__2708:
 66445 db "%m%d	%d	%m[%s]
",0
__2681:
 66461 db "%mcan't open fh_dir
",0
__2702:
 66482 db "%mn	size	name
",0
__2674:
 66497 db "no filesystem (use mount, cd)
",0
__2701:
 66528 db "%mthere are %d files in [%s]
",0
__2700:
 66558 db "
%m------------------------
",0
cmdMkDir:
// cmdMkDir(shell,argc,argv)
 66587 enter 2
__2711:
// assert_type arg #2 (float t)
 66590 push 45739
 66593 rstack EAX,EBP:2
// assert_type arg #1 (float self)
 66597 push EAX
 66599 mov ECX,2
// assert_type(...)
 66602 call 10123
 66605 add ESP,2
 66608 rstack EAX,EBP:2
 66612 add EAX,3
 66615 mov EBX,EAX
 66617 sstack EBP:-1,#EBX
__2713:
 66621 rstack EAX,EBP:-1
 66625 lneg EAX
 66627 mov EBX,EAX
// if (!fs3)
 66629 cmp 0,EBX
 66632 jge 66649
// printf arg #1 (char* format)
 66635 push 66497
 66638 mov ECX,1
// printf(...)
 66641 call 21851
 66644 add ESP,1
 66647 leave 
 66648 ret 
__2714:
__2712:
__2716:
 66649 rstack EAX,EBP:3
 66653 mov EBX,1
 66656 sub EBX,EAX
 66658 neg EBX
 66660 fsgn EBX,EBX
 66662 max EBX,0
// if (argc>1)
 66665 cmp 0,EBX
 66668 jge 66729
 66671 rstack EAX,EBP:4
 66675 add EAX,1
 66678 mov EBX,EAX
 66680 sstack EBP:-2,#EBX
 66684 rstack EAX,EBP:-2
// printf arg #3 (unknown)
 66688 push EAX
// printf arg #2 (unknown)
 66690 push 90
// printf arg #1 (char* format)
 66693 push 66757
 66696 mov ECX,3
// printf(...)
 66699 call 21851
 66702 add ESP,3
 66705 rstack EAX,EBP:-2
// fs3_mkdir arg #2 (float filepath)
 66709 push EAX
 66711 rstack EAX,EBP:2
// fs3_mkdir arg #1 (float shell)
 66715 push EAX
 66717 mov ECX,2
// fs3_mkdir(...)
 66720 call 62500
 66723 add ESP,2
 66726 jmp 66755
__2719:
__2717:
__2721:
 66729 rstack EAX,EBP:4
 66733 add EAX,0
 66736 mov EBX,EAX
// cmdHelp2 arg #2 (float str_cmd)
 66738 push #EBX
 66740 rstack EAX,EBP:2
// cmdHelp2 arg #1 (float shell)
 66744 push EAX
 66746 mov ECX,2
// cmdHelp2(...)
 66749 call 49409
 66752 add ESP,2
__2720:
__2715:
__2710:
 66755 leave 
 66756 ret 
__2718:
 66757 db "%mmaking directory [%s]
",0
cmdDel:
// cmdDel(shell,argc,argv)
 66782 enter -0
__2723:
// assert_type arg #2 (float t)
 66785 push 45739
 66788 rstack EAX,EBP:2
// assert_type arg #1 (float self)
 66792 push EAX
 66794 mov ECX,2
// assert_type(...)
 66797 call 10123
 66800 add ESP,2
 66803 rstack EAX,EBP:3
 66807 add EAX,1
 66810 mov EBX,EAX
// fs3_delFile arg #2 (float filepath)
 66812 push #EBX
 66814 rstack EAX,EBP:2
// fs3_delFile arg #1 (float shell)
 66818 push EAX
 66820 mov ECX,2
// fs3_delFile(...)
 66823 call 62934
 66826 add ESP,2
__2722:
 66829 leave 
 66830 ret 
cmdMem:
// cmdMem(shell,argc,argv)
 66831 enter 9
__2725:
// assert_type arg #2 (float t)
 66834 push 45739
 66837 rstack EAX,EBP:2
// assert_type arg #1 (float self)
 66841 push EAX
 66843 mov ECX,2
// assert_type(...)
 66846 call 10123
 66849 add ESP,2
__2727:
 66852 rstack EAX,EBP:3
 66856 mov EBX,2
 66859 sub EBX,EAX
 66861 neg EBX
 66863 fsgn EBX,EBX
 66865 max EBX,0
// if (argc>2)
 66868 cmp 0,EBX
 66871 jge 67469
 66874 rstack EAX,EBP:4
 66878 add EAX,1
 66881 mov EBX,EAX
// str2num arg #1 (char* str)
 66883 push #EBX
 66885 mov ECX,1
// str2num(...)
 66888 call 12270
 66891 add ESP,1
 66894 sstack EBP:-1,EAX
 66898 rstack EAX,EBP:4
 66902 add EAX,2
 66905 mov EBX,EAX
// str2num arg #1 (char* str)
 66907 push #EBX
 66909 mov ECX,1
// str2num(...)
 66912 call 12270
 66915 add ESP,1
 66918 sstack EBP:-2,EAX
__2730:
 66922 rstack EAX,EBP:3
 66926 mov EBX,3
 66929 sub EBX,EAX
 66931 neg EBX
 66933 fsgn EBX,EBX
 66935 max EBX,0
// if (argc>3)
 66938 cmp 0,EBX
 66941 jge 67318
__2734:
// strcmp arg #2 (char* dest)
 66944 push 67518
 66947 rstack EAX,EBP:4
 66951 add EAX,3
 66954 mov EBX,EAX
// strcmp arg #1 (char* src)
 66956 push #EBX
 66958 mov ECX,2
// strcmp(...)
 66961 call 10763
 66964 add ESP,2
 66967 mov EBX,0
 66970 sub EBX,EAX
 66972 fabs EBX,EBX
 66974 fsgn EBX,EBX
 66976 lneg EBX
// if (strcmp(argv[3],"-disk")==0)
 66978 cmp 0,EBX
 66981 jge 67093
 66984 rstack EAX,EBP:2
 66988 add EAX,3
 66991 mov EBX,EAX
 66993 sstack EBP:-3,#EBX
__2737:
 66997 rstack EAX,EBP:-3
 67001 lneg EAX
 67003 mov EBX,EAX
// if (!fs3)
 67005 cmp 0,EBX
 67008 jge 67025
// printf arg #1 (char* format)
 67011 push 66497
 67014 mov ECX,1
// printf(...)
 67017 call 21851
 67020 add ESP,1
 67023 leave 
 67024 ret 
__2738:
__2736:
// assert_type arg #2 (float t)
 67025 push 53070
 67028 rstack EAX,EBP:-3
// assert_type arg #1 (float self)
 67032 push EAX
 67034 mov ECX,2
// assert_type(...)
 67037 call 10123
 67040 add ESP,2
 67043 rstack EAX,EBP:-3
 67047 add EAX,1
 67050 mov EBX,EAX
 67052 sstack EBP:-4,#EBX
 67056 rstack EAX,EBP:-4
// printf arg #2 (unknown)
 67060 push EAX
// printf arg #1 (char* format)
 67062 push 67535
 67065 mov ECX,2
// printf(...)
 67068 call 21851
 67071 add ESP,2
 67074 rstack EAX,EBP:-4
 67078 rstack EBX,EBP:-1
 67082 add EBX,EAX
 67084 mov EAX,EBX
// addr_from=addr_from+diskAdr
 67086 sstack EBP:-1,EAX
 67090 jmp 67318
__2740:
__2735:
__2742:
__2745:
// strcmp arg #2 (char* dest)
 67093 push 67590
 67096 rstack EAX,EBP:4
 67100 add EAX,3
 67103 mov EBX,EAX
// strcmp arg #1 (char* src)
 67105 push #EBX
 67107 mov ECX,2
// strcmp(...)
 67110 call 10763
 67113 add ESP,2
 67116 mov EBX,0
 67119 sub EBX,EAX
 67121 fabs EBX,EBX
 67123 fsgn EBX,EBX
 67125 lneg EBX
// if (strcmp(argv[3],"-d")==0)
 67127 cmp 0,EBX
 67130 jge 67292
__2748:
 67133 rstack EAX,EBP:3
 67137 mov EBX,4
 67140 sub EBX,EAX
 67142 neg EBX
 67144 fsgn EBX,EBX
 67146 max EBX,0
// if (argc>4)
 67149 cmp 0,EBX
 67152 jge 67263
 67155 rstack EAX,EBP:4
 67159 add EAX,4
 67162 mov EBX,EAX
// str2num arg #1 (char* str)
 67164 push #EBX
 67166 mov ECX,1
// str2num(...)
 67169 call 12270
 67172 add ESP,1
 67175 sstack EBP:-5,EAX
 67179 rstack EAX,EBP:-5
// EBcb_get_entry arg #2 (float num)
 67183 push EAX
// EBcb_get_entry arg #1 (float this)
 67185 push 77224
 67188 mov ECX,2
// EBcb_get_entry(...)
 67191 call 19880
 67194 add ESP,2
 67197 sstack EBP:-6,EAX
 67201 rstack EAX,EBP:-6
// EBcb_entry_get_addr arg #1 (float this)
 67205 push EAX
 67207 mov ECX,1
// EBcb_entry_get_addr(...)
 67210 call 19736
 67213 add ESP,1
 67216 sstack EBP:-7,EAX
 67220 rstack EAX,EBP:-7
// printf arg #3 (unknown)
 67224 push EAX
 67226 rstack EAX,EBP:-5
// printf arg #2 (unknown)
 67230 push EAX
// printf arg #1 (char* format)
 67232 push 67497
 67235 mov ECX,3
// printf(...)
 67238 call 21851
 67241 add ESP,3
 67244 rstack EAX,EBP:-7
 67248 rstack EBX,EBP:-1
 67252 add EBX,EAX
 67254 mov EAX,EBX
// addr_from=addr_from+devAdr
 67256 sstack EBP:-1,EAX
 67260 jmp 67289
__2751:
__2749:
__2753:
 67263 rstack EAX,EBP:4
 67267 add EAX,0
 67270 mov EBX,EAX
// cmdHelp2 arg #2 (float str_cmd)
 67272 push #EBX
 67274 rstack EAX,EBP:2
// cmdHelp2 arg #1 (float shell)
 67278 push EAX
 67280 mov ECX,2
// cmdHelp2(...)
 67283 call 49409
 67286 add ESP,2
__2752:
__2747:
 67289 jmp 67318
__2754:
__2746:
__2756:
 67292 rstack EAX,EBP:4
 67296 add EAX,0
 67299 mov EBX,EAX
// cmdHelp2 arg #2 (float str_cmd)
 67301 push #EBX
 67303 rstack EAX,EBP:2
// cmdHelp2 arg #1 (float shell)
 67307 push EAX
 67309 mov ECX,2
// cmdHelp2(...)
 67312 call 49409
 67315 add ESP,2
__2755:
__2744:
__2741:
__2733:
__2731:
__2729:
__2758:
 67318 rstack EAX,EBP:-2
 67322 mov EBX,100
 67325 sub EBX,EAX
 67327 neg EBX
 67329 fsgn EBX,EBX
 67331 max EBX,0
// if (num_bytes>100)
 67334 cmp 0,EBX
 67337 jge 67363
// num_bytes=10
 67340 sstack EBP:-2,10
 67345 rstack EAX,EBP:-2
// printf arg #2 (unknown)
 67349 push EAX
// printf arg #1 (char* format)
 67351 push 67554
 67354 mov ECX,2
// printf(...)
 67357 call 21851
 67360 add ESP,2
__2759:
__2757:
__2762:
 67363 rstack EAX,EBP:-2
 67367 mov EBX,EAX
 67369 dec EAX
 67371 sstack EBP:-2,EAX
// if (num_bytes--
 67375 cmp 0,EBX
 67378 jz 67466
 67381 rstack EAX,EBP:-1
 67385 sstack EBP:-8,#EAX
 67389 sstack EBP:-9,32
__2764:
 67394 rstack EAX,EBP:-8
// isPrint arg #1 (char C)
 67398 push EAX
 67400 mov ECX,1
// isPrint(...)
 67403 call 15309
 67406 add ESP,1
// if (isprint(byte))
 67409 cmp 0,EAX
 67412 jge 67423
 67415 rstack EAX,EBP:-8
// bch=byte
 67419 sstack EBP:-9,EAX
__2765:
__2763:
 67423 rstack EAX,EBP:-9
// printf arg #4 (unknown)
 67427 push EAX
 67429 rstack EAX,EBP:-8
// printf arg #3 (unknown)
 67433 push EAX
 67435 rstack EAX,EBP:-1
// printf arg #2 (unknown)
 67439 push EAX
// printf arg #1 (char* format)
 67441 push 67524
 67444 mov ECX,4
// printf(...)
 67447 call 21851
 67450 add ESP,4
 67453 rstack EAX,EBP:-1
// addr_from++
 67457 inc EAX
 67459 sstack EBP:-1,EAX
 67463 jmp 67363
__2761:
 67466 jmp 67495
__2767:
__2728:
__2769:
 67469 rstack EAX,EBP:4
 67473 add EAX,0
 67476 mov EBX,EAX
// cmdHelp2 arg #2 (float str_cmd)
 67478 push #EBX
 67480 rstack EAX,EBP:2
// cmdHelp2 arg #1 (float shell)
 67484 push EAX
 67486 mov ECX,2
// cmdHelp2(...)
 67489 call 49409
 67492 add ESP,2
__2768:
__2726:
__2724:
 67495 leave 
 67496 ret 
__2750:
 67497 db "rel. to dev %d @ %d
",0
__2732:
 67518 db "-disk",0
__2766:
 67524 db "%d:	%d	%c
",0
__2739:
 67535 db "rel. to disk @ %d
",0
__2760:
 67554 db "num_bytes too high, limiting to %d
",0
__2743:
 67590 db "-d",0
cmdWrite:
// cmdWrite(shell,argc,argv)
 67593 enter 6
__2771:
// assert_type arg #2 (float t)
 67596 push 45739
 67599 rstack EAX,EBP:2
// assert_type arg #1 (float self)
 67603 push EAX
 67605 mov ECX,2
// assert_type(...)
 67608 call 10123
 67611 add ESP,2
__2773:
 67614 rstack EAX,EBP:3
 67618 mov EBX,1
 67621 sub EBX,EAX
 67623 neg EBX
 67625 fsgn EBX,EBX
 67627 max EBX,0
// if (argc>1)
 67630 cmp 0,EBX
 67633 jge 67930
__2777:
// strcmp arg #2 (char* dest)
 67636 push 67992
 67639 rstack EAX,EBP:4
 67643 add EAX,1
 67646 mov EBX,EAX
// strcmp arg #1 (char* src)
 67648 push #EBX
 67650 mov ECX,2
// strcmp(...)
 67653 call 10763
 67656 add ESP,2
 67659 mov EBX,0
 67662 sub EBX,EAX
 67664 fabs EBX,EBX
 67666 fsgn EBX,EBX
 67668 lneg EBX
// if (strcmp(argv[1],"-f")==0)
 67670 cmp 0,EBX
 67673 jge 67930
__2780:
 67676 rstack EAX,EBP:3
 67680 mov EBX,2
 67683 sub EBX,EAX
 67685 neg EBX
 67687 fsgn EBX,EBX
 67689 max EBX,0
// if (argc>2)
 67692 cmp 0,EBX
 67695 jge 67930
 67698 rstack EAX,EBP:4
 67702 add EAX,2
 67705 mov EBX,EAX
 67707 sstack EBP:-1,#EBX
// fopen arg #3 (float mode)
 67711 push 51833
 67714 rstack EAX,EBP:-1
// fopen arg #2 (float filepath)
 67718 push EAX
 67720 rstack EAX,EBP:2
// fopen arg #1 (float shell)
 67724 push EAX
 67726 mov ECX,3
// fopen(...)
 67729 call 61841
 67732 add ESP,3
 67735 sstack EBP:-2,EAX
__2783:
 67739 rstack EAX,EBP:-2
 67743 lneg EAX
 67745 mov EBX,EAX
// if (!fh)
 67747 cmp 0,EBX
 67750 jge 67773
// printf arg #1 (char* format)
 67753 push 67995
 67756 mov ECX,1
// printf(...)
 67759 call 21851
 67762 add ESP,1
 67765 mov EAX,0
 67768 leave 
 67769 ret 
 67770 jmp 67788
__2786:
__2784:
__2788:
// printf arg #2 (unknown)
 67773 push 90
// printf arg #1 (char* format)
 67776 push 67963
 67779 mov ECX,2
// printf(...)
 67782 call 21851
 67785 add ESP,2
__2787:
__2782:
// init loop
 67788 sstack EBP:-3,3
__2791:
 67793 rstack EAX,EBP:-3
 67797 rstack EBX,EBP:3
 67801 sub EBX,EAX
 67803 mov EAX,EBX
 67805 fsgn EAX,EAX
// condition
 67807 max EAX,0
 67810 cmp 0,EAX
 67813 jz 67925
 67816 rstack EAX,EBP:-3
 67820 rstack EBX,EBP:4
 67824 add EBX,EAX
 67826 mov EAX,EBX
 67828 sstack EBP:-4,#EAX
 67832 rstack EAX,EBP:-4
// strlen arg #1 (char* str)
 67836 push EAX
 67838 mov ECX,1
// strlen(...)
 67841 call 11121
 67844 add ESP,1
 67847 sstack EBP:-5,EAX
 67851 rstack EAX,EBP:-2
// fwrite arg #3 (float fp)
 67855 push EAX
 67857 rstack EAX,EBP:-5
// fwrite arg #2 (float size)
 67861 push EAX
 67863 rstack EAX,EBP:-4
// fwrite arg #1 (float from)
 67867 push EAX
 67869 mov ECX,3
// fwrite(...)
 67872 call 61481
 67875 add ESP,3
 67878 sstack EBP:-6,EAX
__2793:
 67882 rstack EAX,EBP:-6
// if (res)
 67886 cmp 0,EAX
 67889 jge 67895
 67892 jmp 67912
__2795:
__2794:
__2797:
// printf arg #1 (char* format)
 67895 push 67978
 67898 mov ECX,1
// printf(...)
 67901 call 21851
 67904 add ESP,1
 67907 mov EAX,0
 67910 leave 
 67911 ret 
__2796:
__2792:
 67912 rstack EAX,EBP:-3
// loop step
 67916 inc EAX
 67918 sstack EBP:-3,EAX
 67922 jmp 67793
__2790:
 67925 mov EAX,1
 67928 leave 
 67929 ret 
__2781:
__2779:
__2778:
__2776:
__2774:
__2772:
 67930 rstack EAX,EBP:4
 67934 add EAX,0
 67937 mov EBX,EAX
// cmdHelp2 arg #2 (float str_cmd)
 67939 push #EBX
 67941 rstack EAX,EBP:2
// cmdHelp2 arg #1 (float shell)
 67945 push EAX
 67947 mov ECX,2
// cmdHelp2(...)
 67950 call 49409
 67953 add ESP,2
 67956 mov EAX,0
 67959 leave 
 67960 ret 
__2770:
 67961 leave 
 67962 ret 
__2789:
 67963 db "%mfile opened
",0
__2798:
 67978 db "can't fwrite
",0
__2775:
 67992 db "-f",0
__2785:
 67995 db "can't open file
",0
cmdRead:
// cmdRead(shell,argc,argv)
 68012 enter 5
__2800:
// assert_type arg #2 (float t)
 68015 push 45739
 68018 rstack EAX,EBP:2
// assert_type arg #1 (float self)
 68022 push EAX
 68024 mov ECX,2
// assert_type(...)
 68027 call 10123
 68030 add ESP,2
__2802:
 68033 rstack EAX,EBP:3
 68037 mov EBX,1
 68040 sub EBX,EAX
 68042 neg EBX
 68044 fsgn EBX,EBX
 68046 max EBX,0
// if (argc>1)
 68049 cmp 0,EBX
 68052 jge 68400
__2805:
// strcmp arg #2 (char* dest)
 68055 push 67992
 68058 rstack EAX,EBP:4
 68062 add EAX,1
 68065 mov EBX,EAX
// strcmp arg #1 (char* src)
 68067 push #EBX
 68069 mov ECX,2
// strcmp(...)
 68072 call 10763
 68075 add ESP,2
 68078 mov EBX,0
 68081 sub EBX,EAX
 68083 fabs EBX,EBX
 68085 fsgn EBX,EBX
 68087 lneg EBX
// if (strcmp(argv[1],"-f")==0)
 68089 cmp 0,EBX
 68092 jge 68400
__2808:
 68095 rstack EAX,EBP:3
 68099 mov EBX,2
 68102 sub EBX,EAX
 68104 neg EBX
 68106 fsgn EBX,EBX
 68108 max EBX,0
// if (argc>2)
 68111 cmp 0,EBX
 68114 jge 68400
 68117 rstack EAX,EBP:4
 68121 add EAX,2
 68124 mov EBX,EAX
 68126 sstack EBP:-1,#EBX
 68130 rstack EAX,EBP:-1
// printf arg #2 (unknown)
 68134 push EAX
// printf arg #1 (char* format)
 68136 push 68452
 68139 mov ECX,2
// printf(...)
 68142 call 21851
 68145 add ESP,2
// fopen arg #3 (float mode)
 68148 push 51831
 68151 rstack EAX,EBP:-1
// fopen arg #2 (float filepath)
 68155 push EAX
 68157 rstack EAX,EBP:2
// fopen arg #1 (float shell)
 68161 push EAX
 68163 mov ECX,3
// fopen(...)
 68166 call 61841
 68169 add ESP,3
 68172 sstack EBP:-2,EAX
__2812:
 68176 rstack EAX,EBP:-2
 68180 lneg EAX
 68182 mov EBX,EAX
// if (!fh)
 68184 cmp 0,EBX
 68187 jge 68210
// printf arg #1 (char* format)
 68190 push 67995
 68193 mov ECX,1
// printf(...)
 68196 call 21851
 68199 add ESP,1
 68202 mov EAX,0
 68205 leave 
 68206 ret 
 68207 jmp 68225
__2814:
__2813:
__2816:
// printf arg #2 (unknown)
 68210 push 90
// printf arg #1 (char* format)
 68213 push 67963
 68216 mov ECX,2
// printf(...)
 68219 call 21851
 68222 add ESP,2
__2815:
__2811:
 68225 rstack EAX,EBP:-2
// fsize arg #1 (float fp)
 68229 push EAX
 68231 mov ECX,1
// fsize(...)
 68234 call 61042
 68237 add ESP,1
 68240 sstack EBP:-3,EAX
 68244 rstack EAX,EBP:-3
 68248 add EAX,1
 68251 mov EBX,EAX
// malloc arg #1 (float n)
 68253 push EBX
 68255 mov ECX,1
// malloc(...)
 68258 call 29334
 68261 add ESP,1
 68264 sstack EBP:-4,EAX
 68268 rstack EAX,EBP:-2
// fread arg #3 (float fp)
 68272 push EAX
 68274 rstack EAX,EBP:-3
// fread arg #2 (float size)
 68278 push EAX
 68280 rstack EAX,EBP:-4
// fread arg #1 (float to)
 68284 push EAX
 68286 mov ECX,3
// fread(...)
 68289 call 61307
 68292 add ESP,3
 68295 sstack EBP:-5,EAX
 68299 rstack EAX,EBP:-3
 68303 rstack EBX,EBP:-4
 68307 add EBX,EAX
 68309 mov EAX,EBX
// buff[len]=0
 68311 mov #EAX,0
__2818:
 68314 rstack EAX,EBP:-5
// if (res)
 68318 cmp 0,EAX
 68321 jge 68363
 68324 rstack EAX,EBP:-4
// printf arg #3 (unknown)
 68328 push EAX
// printf arg #2 (unknown)
 68330 push 90
// printf arg #1 (char* format)
 68333 push 68433
 68336 mov ECX,3
// printf(...)
 68339 call 21851
 68342 add ESP,3
 68345 rstack EAX,EBP:-4
// free arg #1 (float* ptr)
 68349 push EAX
 68351 mov ECX,1
// free(...)
 68354 call 29828
 68357 add ESP,1
 68360 jmp 68395
__2821:
__2819:
__2823:
// printf arg #1 (char* format)
 68363 push 68439
 68366 mov ECX,1
// printf(...)
 68369 call 21851
 68372 add ESP,1
 68375 rstack EAX,EBP:-4
// free arg #1 (float* ptr)
 68379 push EAX
 68381 mov ECX,1
// free(...)
 68384 call 29828
 68387 add ESP,1
 68390 mov EAX,0
 68393 leave 
 68394 ret 
__2822:
__2817:
 68395 mov EAX,1
 68398 leave 
 68399 ret 
__2809:
__2807:
__2806:
__2804:
__2803:
__2801:
 68400 rstack EAX,EBP:4
 68404 add EAX,0
 68407 mov EBX,EAX
// cmdHelp2 arg #2 (float str_cmd)
 68409 push #EBX
 68411 rstack EAX,EBP:2
// cmdHelp2 arg #1 (float shell)
 68415 push EAX
 68417 mov ECX,2
// cmdHelp2(...)
 68420 call 49409
 68423 add ESP,2
 68426 mov EAX,0
 68429 leave 
 68430 ret 
__2799:
 68431 leave 
 68432 ret 
__2820:
 68433 db "%m%s
",0
__2824:
 68439 db "can't fread
",0
__2810:
 68452 db "read from file [%s]
",0
countHDD:
// countHDD(fs3,ret_bytes_free,ret_bytes_used,ret_bytes_total,ret_blocks_free,ret_blocks_used,ret_blocks_total)
 68473 enter 15
__2826:
// fs3_low_read arg #4 (float size)
 68476 push 1
 68479 mov EAX,SS:ESP
 68482 add EAX,-1
// fs3_low_read arg #3 (float to)
 68485 push EAX
// fs3_low_read arg #2 (float disk_ptr)
 68487 push 12
 68490 rstack EAX,EBP:2
// fs3_low_read arg #1 (float fs3)
 68494 push EAX
 68496 mov ECX,4
// fs3_low_read(...)
 68499 call 54677
 68502 add ESP,4
// fs3_low_read arg #4 (float size)
 68505 push 1
 68508 mov EAX,SS:ESP
 68511 add EAX,-2
// fs3_low_read arg #3 (float to)
 68514 push EAX
// fs3_low_read arg #2 (float disk_ptr)
 68516 push 13
 68519 rstack EAX,EBP:2
// fs3_low_read arg #1 (float fs3)
 68523 push EAX
 68525 mov ECX,4
// fs3_low_read(...)
 68528 call 54677
 68531 add ESP,4
// fs3_low_read arg #4 (float size)
 68534 push 1
 68537 mov EAX,SS:ESP
 68540 add EAX,-3
// fs3_low_read arg #3 (float to)
 68543 push EAX
// fs3_low_read arg #2 (float disk_ptr)
 68545 push 14
 68548 rstack EAX,EBP:2
// fs3_low_read arg #1 (float fs3)
 68552 push EAX
 68554 mov ECX,4
// fs3_low_read(...)
 68557 call 54677
 68560 add ESP,4
 68563 rstack EAX,EBP:-2
 68567 mul EAX,2
 68570 mov EBX,EAX
 68572 sstack EBP:-4,EBX
 68576 rstack EAX,EBP:-4
// malloc arg #1 (float n)
 68580 push EAX
 68582 mov ECX,1
// malloc(...)
 68585 call 29334
 68588 add ESP,1
 68591 sstack EBP:-5,EAX
 68595 rstack EAX,EBP:-4
// fs3_low_read arg #4 (float size)
 68599 push EAX
 68601 rstack EAX,EBP:-5
// fs3_low_read arg #3 (float to)
 68605 push EAX
 68607 rstack EAX,EBP:-3
// fs3_low_read arg #2 (float disk_ptr)
 68611 push EAX
 68613 rstack EAX,EBP:2
// fs3_low_read arg #1 (float fs3)
 68617 push EAX
 68619 mov ECX,4
// fs3_low_read(...)
 68622 call 54677
 68625 add ESP,4
 68628 sstack EBP:-11,0
 68633 sstack EBP:-12,0
// init loop
 68638 sstack EBP:-10,0
__2828:
 68643 rstack EAX,EBP:-10
 68647 rstack EBX,EBP:-2
 68651 sub EBX,EAX
 68653 mov EAX,EBX
 68655 fsgn EAX,EAX
// condition
 68657 max EAX,0
 68660 cmp 0,EAX
 68663 jz 68757
 68666 rstack EAX,EBP:-10
 68670 mul EAX,2
 68673 mov EBX,EAX
 68675 rstack EAX,EBP:-5
 68679 add EAX,EBX
 68681 mov EBX,EAX
// B=blockmap+I*2
 68683 sstack EBP:-6,EBX
 68687 rstack EAX,EBP:-6
 68691 add EAX,0
 68694 mov EBX,EAX
// Buser=B[0]
 68696 sstack EBP:-7,#EBX
__2830:
 68700 rstack EAX,EBP:-7
 68704 mov EBX,0
 68707 sub EBX,EAX
 68709 fabs EBX,EBX
 68711 fsgn EBX,EBX
 68713 lneg EBX
// if (Buser==0)
 68715 cmp 0,EBX
 68718 jge 68734
 68721 rstack EAX,EBP:-11
// num_free++
 68725 inc EAX
 68727 sstack EBP:-11,EAX
 68731 jmp 68744
__2832:
__2831:
__2834:
 68734 rstack EAX,EBP:-12
// num_used++
 68738 inc EAX
 68740 sstack EBP:-12,EAX
__2833:
__2829:
 68744 rstack EAX,EBP:-10
// loop step
 68748 inc EAX
 68750 sstack EBP:-10,EAX
 68754 jmp 68643
__2827:
 68757 rstack EAX,EBP:-1
 68761 rstack EBX,EBP:-2
 68765 mul EBX,EAX
 68767 mov EAX,EBX
 68769 sstack EBP:-13,EAX
 68773 rstack EAX,EBP:-11
 68777 rstack EBX,EBP:-1
 68781 mul EBX,EAX
 68783 mov EAX,EBX
 68785 sstack EBP:-14,EAX
 68789 rstack EAX,EBP:-14
 68793 neg EAX
 68795 mov EBX,EAX
 68797 rstack EAX,EBP:-13
 68801 add EAX,EBX
 68803 mov EBX,EAX
 68805 sstack EBP:-15,EBX
__2836:
 68809 rstack EAX,EBP:3
// if (ret_bytes_free)
 68813 cmp 0,EAX
 68816 jge 68829
 68819 rstack EAX,EBP:-14
 68823 rstack EBX,EBP:3
// *ret_bytes_free=bytes_free
 68827 mov #EBX,EAX
__2837:
__2835:
__2839:
 68829 rstack EAX,EBP:4
// if (ret_bytes_used)
 68833 cmp 0,EAX
 68836 jge 68849
 68839 rstack EAX,EBP:-15
 68843 rstack EBX,EBP:4
// *ret_bytes_used=bytes_used
 68847 mov #EBX,EAX
__2840:
__2838:
__2842:
 68849 rstack EAX,EBP:5
// if (ret_bytes_total)
 68853 cmp 0,EAX
 68856 jge 68869
 68859 rstack EAX,EBP:-13
 68863 rstack EBX,EBP:5
// *ret_bytes_total=bytes_total
 68867 mov #EBX,EAX
__2843:
__2841:
__2845:
 68869 rstack EAX,EBP:6
// if (ret_blocks_free)
 68873 cmp 0,EAX
 68876 jge 68889
 68879 rstack EAX,EBP:-11
 68883 rstack EBX,EBP:6
// *ret_blocks_free=num_free
 68887 mov #EBX,EAX
__2846:
__2844:
__2848:
 68889 rstack EAX,EBP:7
// if (ret_blocks_used)
 68893 cmp 0,EAX
 68896 jge 68909
 68899 rstack EAX,EBP:-12
 68903 rstack EBX,EBP:7
// *ret_blocks_used=num_used
 68907 mov #EBX,EAX
__2849:
__2847:
__2851:
 68909 rstack EAX,EBP:8
// if (ret_blocks_total)
 68913 cmp 0,EAX
 68916 jge 68929
 68919 rstack EAX,EBP:-2
 68923 rstack EBX,EBP:8
// *ret_blocks_total=num_blocks
 68927 mov #EBX,EAX
__2852:
__2850:
__2825:
 68929 leave 
 68930 ret 
printBlockmap:
// printBlockmap(fs3,from,count)
 68931 enter 10
__2854:
// fs3_low_read arg #4 (float size)
 68934 push 1
 68937 mov EAX,SS:ESP
 68940 add EAX,-1
// fs3_low_read arg #3 (float to)
 68943 push EAX
// fs3_low_read arg #2 (float disk_ptr)
 68945 push 12
 68948 rstack EAX,EBP:2
// fs3_low_read arg #1 (float fs3)
 68952 push EAX
 68954 mov ECX,4
// fs3_low_read(...)
 68957 call 54677
 68960 add ESP,4
// fs3_low_read arg #4 (float size)
 68963 push 1
 68966 mov EAX,SS:ESP
 68969 add EAX,-2
// fs3_low_read arg #3 (float to)
 68972 push EAX
// fs3_low_read arg #2 (float disk_ptr)
 68974 push 13
 68977 rstack EAX,EBP:2
// fs3_low_read arg #1 (float fs3)
 68981 push EAX
 68983 mov ECX,4
// fs3_low_read(...)
 68986 call 54677
 68989 add ESP,4
// fs3_low_read arg #4 (float size)
 68992 push 1
 68995 mov EAX,SS:ESP
 68998 add EAX,-3
// fs3_low_read arg #3 (float to)
 69001 push EAX
// fs3_low_read arg #2 (float disk_ptr)
 69003 push 14
 69006 rstack EAX,EBP:2
// fs3_low_read arg #1 (float fs3)
 69010 push EAX
 69012 mov ECX,4
// fs3_low_read(...)
 69015 call 54677
 69018 add ESP,4
 69021 rstack EAX,EBP:-2
 69025 mul EAX,2
 69028 mov EBX,EAX
 69030 sstack EBP:-4,EBX
 69034 rstack EAX,EBP:-4
// malloc arg #1 (float n)
 69038 push EAX
 69040 mov ECX,1
// malloc(...)
 69043 call 29334
 69046 add ESP,1
 69049 sstack EBP:-5,EAX
 69053 rstack EAX,EBP:-4
// fs3_low_read arg #4 (float size)
 69057 push EAX
 69059 rstack EAX,EBP:-5
// fs3_low_read arg #3 (float to)
 69063 push EAX
 69065 rstack EAX,EBP:-3
// fs3_low_read arg #2 (float disk_ptr)
 69069 push EAX
 69071 rstack EAX,EBP:2
// fs3_low_read arg #1 (float fs3)
 69075 push EAX
 69077 mov ECX,4
// fs3_low_read(...)
 69080 call 54677
 69083 add ESP,4
__2856:
 69086 rstack EAX,EBP:3
 69090 rstack EBX,EBP:-2
 69094 sub EBX,EAX
 69096 mov EAX,EBX
 69098 neg EAX
 69100 fsgn EAX,EAX
 69102 max EAX,0
// if (from>num_blocks)
 69105 cmp 0,EAX
 69108 jge 69124
 69111 rstack EAX,EBP:-2
 69115 add EAX,-1
 69118 mov EBX,EAX
// from=num_blocks-1
 69120 sstack EBP:3,EBX
__2857:
__2855:
__2859:
 69124 rstack EAX,EBP:4
 69128 rstack EBX,EBP:3
 69132 neg EBX
 69134 mov ECX,EBX
 69136 add ECX,-1
 69139 rstack EBX,EBP:-2
 69143 add EBX,ECX
 69145 mov ECX,EBX
 69147 sub ECX,EAX
 69149 neg ECX
 69151 fsgn ECX,ECX
 69153 max ECX,0
// if (count>(num_blocks-from-1))
 69156 cmp 0,ECX
 69159 jge 69182
 69162 rstack EAX,EBP:3
 69166 neg EAX
 69168 mov EBX,EAX
 69170 rstack EAX,EBP:-2
 69174 add EAX,EBX
 69176 mov EBX,EAX
// count=num_blocks-from
 69178 sstack EBP:4,EBX
__2860:
__2858:
__2862:
 69182 rstack EAX,EBP:4
 69186 mov EBX,30
 69189 sub EBX,EAX
 69191 neg EBX
 69193 fsgn EBX,EBX
 69195 max EBX,0
// if (count>30)
 69198 cmp 0,EBX
 69201 jge 69209
// count=30
 69204 sstack EBP:4,30
__2863:
__2861:
// printf arg #1 (char* format)
 69209 push 69434
 69212 mov ECX,1
// printf(...)
 69215 call 21851
 69218 add ESP,1
 69221 rstack EAX,EBP:3
// init loop
 69225 sstack EBP:-10,EAX
__2866:
 69229 rstack EAX,EBP:-10
 69233 rstack EBX,EBP:4
 69237 sub EBX,EAX
 69239 mov EAX,EBX
 69241 fsgn EAX,EAX
// condition
 69243 max EAX,0
 69246 cmp 0,EAX
 69249 jz 69432
 69252 rstack EAX,EBP:-10
 69256 mul EAX,2
 69259 mov EBX,EAX
 69261 rstack EAX,EBP:-5
 69265 add EAX,EBX
 69267 mov EBX,EAX
// B=blockmap+I*2
 69269 sstack EBP:-6,EBX
 69273 rstack EAX,EBP:-6
 69277 add EAX,0
 69280 mov EBX,EAX
// Buser=B[0]
 69282 sstack EBP:-7,#EBX
 69286 rstack EAX,EBP:-6
 69290 add EAX,1
 69293 mov EBX,EAX
// Bnext=B[1]
 69295 sstack EBP:-8,#EBX
// col=900
 69299 sstack EBP:-9,900
__2868:
 69304 rstack EAX,EBP:-7
 69308 mov EBX,0
 69311 sub EBX,EAX
 69313 fabs EBX,EBX
 69315 fsgn EBX,EBX
 69317 lneg EBX
// if (Buser==0)
 69319 cmp 0,EBX
 69322 jge 69330
// col=575
 69325 sstack EBP:-9,575
__2869:
__2867:
__2871:
 69330 rstack EAX,EBP:-7
 69334 mov EBX,1
 69337 sub EBX,EAX
 69339 fabs EBX,EBX
 69341 fsgn EBX,EBX
 69343 lneg EBX
// if (Buser==1)
 69345 cmp 0,EBX
 69348 jge 69356
// col=229
 69351 sstack EBP:-9,229
__2872:
__2870:
__2874:
 69356 rstack EAX,EBP:-7
 69360 mov EBX,1
 69363 sub EBX,EAX
 69365 neg EBX
 69367 fsgn EBX,EBX
 69369 max EBX,0
// if (Buser>1)
 69372 cmp 0,EBX
 69375 jge 69383
// col=755
 69378 sstack EBP:-9,755
__2875:
__2873:
 69383 rstack EAX,EBP:-8
// printf arg #5 (unknown)
 69387 push EAX
 69389 rstack EAX,EBP:-7
// printf arg #4 (unknown)
 69393 push EAX
 69395 rstack EAX,EBP:-10
// printf arg #3 (unknown)
 69399 push EAX
 69401 rstack EAX,EBP:-9
// printf arg #2 (unknown)
 69405 push EAX
// printf arg #1 (char* format)
 69407 push 69451
 69410 mov ECX,5
// printf(...)
 69413 call 21851
 69416 add ESP,5
 69419 rstack EAX,EBP:-10
// loop step
 69423 inc EAX
 69425 sstack EBP:-10,EAX
 69429 jmp 69229
__2865:
__2853:
 69432 leave 
 69433 ret 
__2864:
 69434 db "block	user	next
",0
__2876:
 69451 db "%m%d    %d    %d
",0
cmdFS:
// cmdFS(shell,argc,argv)
 69469 enter 10
__2878:
// assert_type arg #2 (float t)
 69472 push 45739
 69475 rstack EAX,EBP:2
// assert_type arg #1 (float self)
 69479 push EAX
 69481 mov ECX,2
// assert_type(...)
 69484 call 10123
 69487 add ESP,2
 69490 rstack EAX,EBP:2
 69494 add EAX,3
 69497 mov EBX,EAX
 69499 sstack EBP:-1,#EBX
__2880:
 69503 rstack EAX,EBP:-1
 69507 lneg EAX
 69509 mov EBX,EAX
// if (!fs3)
 69511 cmp 0,EBX
 69514 jge 69534
// printf arg #1 (char* format)
 69517 push 70750
 69520 mov ECX,1
// printf(...)
 69523 call 21851
 69526 add ESP,1
 69529 mov EAX,0
 69532 leave 
 69533 ret 
__2881:
__2879:
__2884:
 69534 rstack EAX,EBP:3
 69538 mov EBX,1
 69541 sub EBX,EAX
 69543 neg EBX
 69545 fsgn EBX,EBX
 69547 max EBX,0
// if (argc>1)
 69550 cmp 0,EBX
 69553 jge 70428
__2887:
// strcmp arg #2 (char* dest)
 69556 push 50902
 69559 rstack EAX,EBP:4
 69563 add EAX,1
 69566 mov EBX,EAX
// strcmp arg #1 (char* src)
 69568 push #EBX
 69570 mov ECX,2
// strcmp(...)
 69573 call 10763
 69576 add ESP,2
 69579 mov EBX,0
 69582 sub EBX,EAX
 69584 fabs EBX,EBX
 69586 fsgn EBX,EBX
 69588 lneg EBX
// if (strcmp(argv[1],"info")==0)
 69590 cmp 0,EBX
 69593 jge 69930
// malloc arg #1 (float n)
 69596 push 17
 69599 mov ECX,1
// malloc(...)
 69602 call 29334
 69605 add ESP,1
 69608 sstack EBP:-2,EAX
// fs3_low_read arg #4 (float size)
 69612 push 16
 69615 rstack EAX,EBP:-2
// fs3_low_read arg #3 (float to)
 69619 push EAX
// fs3_low_read arg #2 (float disk_ptr)
 69621 push 0
 69624 rstack EAX,EBP:-1
// fs3_low_read arg #1 (float fs3)
 69628 push EAX
 69630 mov ECX,4
// fs3_low_read(...)
 69633 call 54677
 69636 add ESP,4
 69639 rstack EAX,EBP:-2
// printf arg #2 (unknown)
 69643 push EAX
// printf arg #1 (char* format)
 69645 push 70736
 69648 mov ECX,2
// printf(...)
 69651 call 21851
 69654 add ESP,2
 69657 rstack EAX,EBP:-2
 69661 add EAX,11
 69664 mov EBX,EAX
// printf arg #2 (unknown)
 69666 push #EBX
// printf arg #1 (char* format)
 69668 push 70559
 69671 mov ECX,2
// printf(...)
 69674 call 21851
 69677 add ESP,2
 69680 rstack EAX,EBP:-2
 69684 add EAX,12
 69687 mov EBX,EAX
// printf arg #2 (unknown)
 69689 push #EBX
// printf arg #1 (char* format)
 69691 push 70538
 69694 mov ECX,2
// printf(...)
 69697 call 21851
 69700 add ESP,2
 69703 rstack EAX,EBP:-2
 69707 add EAX,13
 69710 mov EBX,EAX
// printf arg #2 (unknown)
 69712 push #EBX
// printf arg #1 (char* format)
 69714 push 70465
 69717 mov ECX,2
// printf(...)
 69720 call 21851
 69723 add ESP,2
 69726 rstack EAX,EBP:-2
 69730 add EAX,14
 69733 mov EBX,EAX
// printf arg #2 (unknown)
 69735 push #EBX
// printf arg #1 (char* format)
 69737 push 70579
 69740 mov ECX,2
// printf(...)
 69743 call 21851
 69746 add ESP,2
 69749 rstack EAX,EBP:-2
 69753 add EAX,15
 69756 mov EBX,EAX
// printf arg #2 (unknown)
 69758 push #EBX
// printf arg #1 (char* format)
 69760 push 70825
 69763 mov ECX,2
// printf(...)
 69766 call 21851
 69769 add ESP,2
 69772 rstack EAX,EBP:-2
 69776 add EAX,16
 69779 mov EBX,EAX
// printf arg #2 (unknown)
 69781 push #EBX
// printf arg #1 (char* format)
 69783 push 70502
 69786 mov ECX,2
// printf(...)
 69789 call 21851
 69792 add ESP,2
 69795 rstack EAX,EBP:-2
// free arg #1 (float* ptr)
 69799 push EAX
 69801 mov ECX,1
// free(...)
 69804 call 29828
 69807 add ESP,1
 69810 mov EAX,SS:ESP
 69813 add EAX,-5
// countHDD arg #7 (float ret_blocks_total)
 69816 push EAX
 69818 mov EAX,SS:ESP
 69821 add EAX,-4
// countHDD arg #6 (float ret_blocks_used)
 69824 push EAX
 69826 mov EAX,SS:ESP
 69829 add EAX,-3
// countHDD arg #5 (float ret_blocks_free)
 69832 push EAX
 69834 mov EAX,SS:ESP
 69837 add EAX,-8
// countHDD arg #4 (float ret_bytes_total)
 69840 push EAX
 69842 mov EAX,SS:ESP
 69845 add EAX,-7
// countHDD arg #3 (float ret_bytes_used)
 69848 push EAX
 69850 mov EAX,SS:ESP
 69853 add EAX,-6
// countHDD arg #2 (float ret_bytes_free)
 69856 push EAX
 69858 rstack EAX,EBP:-1
// countHDD arg #1 (float fs3)
 69862 push EAX
 69864 mov ECX,7
// countHDD(...)
 69867 call 68473
 69870 add ESP,7
 69873 rstack EAX,EBP:-5
// printf arg #4 (unknown)
 69877 push EAX
 69879 rstack EAX,EBP:-4
// printf arg #3 (unknown)
 69883 push EAX
 69885 rstack EAX,EBP:-3
// printf arg #2 (unknown)
 69889 push EAX
// printf arg #1 (char* format)
 69891 push 70695
 69894 mov ECX,4
// printf(...)
 69897 call 21851
 69900 add ESP,4
 69903 rstack EAX,EBP:-8
// printf arg #3 (unknown)
 69907 push EAX
 69909 rstack EAX,EBP:-6
// printf arg #2 (unknown)
 69913 push EAX
// printf arg #1 (char* format)
 69915 push 70644
 69918 mov ECX,3
// printf(...)
 69921 call 21851
 69924 add ESP,3
 69927 jmp 70425
__2898:
__2888:
__2900:
__2903:
// strcmp arg #2 (char* dest)
 69930 push 70818
 69933 rstack EAX,EBP:4
 69937 add EAX,1
 69940 mov EBX,EAX
// strcmp arg #1 (char* src)
 69942 push #EBX
 69944 mov ECX,2
// strcmp(...)
 69947 call 10763
 69950 add ESP,2
 69953 mov EBX,0
 69956 sub EBX,EAX
 69958 fabs EBX,EBX
 69960 fsgn EBX,EBX
 69962 lneg EBX
// if (strcmp(argv[1],"blocks")==0)
 69964 cmp 0,EBX
 69967 jge 70085
__2906:
 69970 rstack EAX,EBP:3
 69974 mov EBX,3
 69977 sub EBX,EAX
 69979 neg EBX
 69981 fsgn EBX,EBX
 69983 max EBX,0
// if (argc>3)
 69986 cmp 0,EBX
 69989 jge 70070
 69992 rstack EAX,EBP:4
 69996 add EAX,2
 69999 mov EBX,EAX
// str2num arg #1 (char* str)
 70001 push #EBX
 70003 mov ECX,1
// str2num(...)
 70006 call 12270
 70009 add ESP,1
 70012 sstack EBP:-9,EAX
 70016 rstack EAX,EBP:4
 70020 add EAX,3
 70023 mov EBX,EAX
// str2num arg #1 (char* str)
 70025 push #EBX
 70027 mov ECX,1
// str2num(...)
 70030 call 12270
 70033 add ESP,1
 70036 sstack EBP:-10,EAX
 70040 rstack EAX,EBP:-10
// printBlockmap arg #3 (float count)
 70044 push EAX
 70046 rstack EAX,EBP:-9
// printBlockmap arg #2 (float from)
 70050 push EAX
 70052 rstack EAX,EBP:-1
// printBlockmap arg #1 (float fs3)
 70056 push EAX
 70058 mov ECX,3
// printBlockmap(...)
 70061 call 68931
 70064 add ESP,3
 70067 jmp 70082
__2908:
__2907:
__2910:
// printf arg #1 (char* format)
 70070 push 70595
 70073 mov ECX,1
// printf(...)
 70076 call 21851
 70079 add ESP,1
__2909:
__2905:
 70082 jmp 70425
__2912:
__2904:
__2914:
__2917:
// strcmp arg #2 (char* dest)
 70085 push 70459
 70088 rstack EAX,EBP:4
 70092 add EAX,1
 70095 mov EBX,EAX
// strcmp arg #1 (char* src)
 70097 push #EBX
 70099 mov ECX,2
// strcmp(...)
 70102 call 10763
 70105 add ESP,2
 70108 mov EBX,0
 70111 sub EBX,EAX
 70113 fabs EBX,EBX
 70115 fsgn EBX,EBX
 70117 lneg EBX
// if (strcmp(argv[1],"cache")==0)
 70119 cmp 0,EBX
 70122 jge 70399
__2920:
 70125 rstack EAX,EBP:3
 70129 mov EBX,2
 70132 sub EBX,EAX
 70134 neg EBX
 70136 fsgn EBX,EBX
 70138 max EBX,0
// if (argc>2)
 70141 cmp 0,EBX
 70144 jge 70342
__2924:
// strcmp arg #2 (char* dest)
 70147 push 70456
 70150 rstack EAX,EBP:4
 70154 add EAX,2
 70157 mov EBX,EAX
// strcmp arg #1 (char* src)
 70159 push #EBX
 70161 mov ECX,2
// strcmp(...)
 70164 call 10763
 70167 add ESP,2
 70170 mov EBX,0
 70173 sub EBX,EAX
 70175 fabs EBX,EBX
 70177 fsgn EBX,EBX
 70179 lneg EBX
// if (strcmp(argv[2],"on")==0)
 70181 cmp 0,EBX
 70184 jge 70211
 70187 rstack EAX,EBP:-1
 70191 add EAX,4
 70194 mov EBX,EAX
// fs3[4]=1
 70196 mov #EBX,1
// printf arg #1 (char* format)
 70199 push 70518
 70202 mov ECX,1
// printf(...)
 70205 call 21851
 70208 add ESP,1
__2925:
__2923:
__2929:
// strcmp arg #2 (char* dest)
 70211 push 70732
 70214 rstack EAX,EBP:4
 70218 add EAX,2
 70221 mov EBX,EAX
// strcmp arg #1 (char* src)
 70223 push #EBX
 70225 mov ECX,2
// strcmp(...)
 70228 call 10763
 70231 add ESP,2
 70234 mov EBX,0
 70237 sub EBX,EAX
 70239 fabs EBX,EBX
 70241 fsgn EBX,EBX
 70243 lneg EBX
// if (strcmp(argv[2],"off")==0)
 70245 cmp 0,EBX
 70248 jge 70275
 70251 rstack EAX,EBP:-1
 70255 add EAX,4
 70258 mov EBX,EAX
// fs3[4]=0
 70260 mov #EBX,0
// printf arg #1 (char* format)
 70263 push 70481
 70266 mov ECX,1
// printf(...)
 70269 call 21851
 70272 add ESP,1
__2930:
__2928:
__2934:
// strcmp arg #2 (char* dest)
 70275 push 70689
 70278 rstack EAX,EBP:4
 70282 add EAX,2
 70285 mov EBX,EAX
// strcmp arg #1 (char* src)
 70287 push #EBX
 70289 mov ECX,2
// strcmp(...)
 70292 call 10763
 70295 add ESP,2
 70298 mov EBX,0
 70301 sub EBX,EAX
 70303 fabs EBX,EBX
 70305 fsgn EBX,EBX
 70307 lneg EBX
// if (strcmp(argv[2],"reset")==0)
 70309 cmp 0,EBX
 70312 jge 70339
// printf arg #1 (char* format)
 70315 push 70669
 70318 mov ECX,1
// printf(...)
 70321 call 21851
 70324 add ESP,1
// printf arg #1 (char* format)
 70327 push 70627
 70330 mov ECX,1
// printf(...)
 70333 call 21851
 70336 add ESP,1
__2935:
__2933:
 70339 jmp 70396
__2938:
__2921:
__2940:
// printf arg #1 (char* format)
 70342 push 70795
 70345 mov ECX,1
// printf(...)
 70348 call 21851
 70351 add ESP,1
__2943:
 70354 rstack EAX,EBP:-1
 70358 add EAX,4
 70361 mov EBX,EAX
// if (fs3[4])
 70363 cmp 0,#EBX
 70366 jge 70384
// printf arg #1 (char* format)
 70369 push 70575
 70372 mov ECX,1
// printf(...)
 70375 call 21851
 70378 add ESP,1
 70381 jmp 70396
__2946:
__2944:
__2948:
// printf arg #1 (char* format)
 70384 push 70554
 70387 mov ECX,1
// printf(...)
 70390 call 21851
 70393 add ESP,1
__2947:
__2942:
__2939:
__2919:
 70396 jmp 70425
__2950:
__2918:
__2952:
 70399 rstack EAX,EBP:4
 70403 add EAX,0
 70406 mov EBX,EAX
// cmdHelp2 arg #2 (float str_cmd)
 70408 push #EBX
 70410 rstack EAX,EBP:2
// cmdHelp2 arg #1 (float shell)
 70414 push EAX
 70416 mov ECX,2
// cmdHelp2(...)
 70419 call 49409
 70422 add ESP,2
__2951:
__2916:
__2913:
__2902:
__2899:
__2886:
 70425 jmp 70454
__2953:
__2885:
__2955:
 70428 rstack EAX,EBP:4
 70432 add EAX,0
 70435 mov EBX,EAX
// cmdHelp2 arg #2 (float str_cmd)
 70437 push #EBX
 70439 rstack EAX,EBP:2
// cmdHelp2 arg #1 (float shell)
 70443 push EAX
 70445 mov ECX,2
// cmdHelp2(...)
 70448 call 49409
 70451 add ESP,2
__2954:
__2883:
__2877:
 70454 leave 
 70455 ret 
__2922:
 70456 db "on",0
__2915:
 70459 db "cache",0
__2892:
 70465 db "num blocks: %d
",0
__2931:
 70481 db "fs cache turned off
",0
__2895:
 70502 db "max index:  %d
",0
__2926:
 70518 db "fs cache turned on
",0
__2891:
 70538 db "block size: %d
",0
__2949:
 70554 db "OFF
",0
__2890:
 70559 db "total size: %d
",0
__2945:
 70575 db "ON
",0
__2893:
 70579 db "blockmap @: %d
",0
__2911:
 70595 db "usage: fs blocks [from][count]
",0
__2937:
 70627 db "<unimplimented>
",0
__2897:
 70644 db "HDD: %d / %d bytes free
",0
__2936:
 70669 db "fs cache was reset
",0
__2932:
 70689 db "reset",0
__2896:
 70695 db "blocks:
 %d free
 %d used
 %d total
",0
__2927:
 70732 db "off",0
__2889:
 70736 db "format: [%s]
",0
__2882:
 70750 db "filesystem not mounted, use "mount" or "cd"
",0
__2941:
 70795 db "fs cache is currently ",0
__2901:
 70818 db "blocks",0
__2894:
 70825 db "blocks @:   %d
",0
printKbs:
// printKbs(bytes)
 70841 enter -0
__2957:
__2959:
 70844 rstack EAX,EBP:2
 70848 mov EBX,1000000
 70851 sub EBX,EAX
 70853 neg EBX
 70855 fsgn EBX,EBX
 70857 max EBX,0
// if (bytes>1000000)
 70860 cmp 0,EBX
 70863 jge 70908
 70866 rstack EAX,EBP:2
 70870 div EAX,1000000
 70873 mov EBX,EAX
// floor arg #1 (float A)
 70875 push EBX
 70877 mov ECX,1
// floor(...)
 70880 call 31069
 70883 add ESP,1
// bytes=floor(bytes/1000000)
 70886 sstack EBP:2,EAX
 70890 rstack EAX,EBP:2
// printf arg #2 (unknown)
 70894 push EAX
// printf arg #1 (char* format)
 70896 push 70995
 70899 mov ECX,2
// printf(...)
 70902 call 21851
 70905 add ESP,2
__2960:
__2958:
__2963:
 70908 rstack EAX,EBP:2
 70912 mov EBX,1000
 70915 sub EBX,EAX
 70917 neg EBX
 70919 fsgn EBX,EBX
 70921 max EBX,0
// if (bytes>1000)
 70924 cmp 0,EBX
 70927 jge 70975
 70930 rstack EAX,EBP:2
 70934 div EAX,1000
 70937 mov EBX,EAX
// floor arg #1 (float A)
 70939 push EBX
 70941 mov ECX,1
// floor(...)
 70944 call 31069
 70947 add ESP,1
// bytes=floor(bytes/1000)
 70950 sstack EBP:2,EAX
 70954 rstack EAX,EBP:2
// printf arg #2 (unknown)
 70958 push EAX
// printf arg #1 (char* format)
 70960 push 71001
 70963 mov ECX,2
// printf(...)
 70966 call 21851
 70969 add ESP,2
 70972 jmp 70993
__2966:
__2964:
__2968:
 70975 rstack EAX,EBP:2
// printf arg #2 (unknown)
 70979 push EAX
// printf arg #1 (char* format)
 70981 push 71007
 70984 mov ECX,2
// printf(...)
 70987 call 21851
 70990 add ESP,2
__2967:
__2962:
__2956:
 70993 leave 
 70994 ret 
__2961:
 70995 db "%d Mb",0
__2965:
 71001 db "%d kb",0
__2969:
 71007 db "%d bytes",0
cmdDiag:
// cmdDiag(shell,argc,argv)
 71016 enter 9
__2971:
 71019 push 71600
 71022 mov ECX,1
// overstack_fenter(...)
 71025 call 76020
 71028 add ESP,1
 71031 sstack EBP:-1,EAX
// assert_type arg #2 (float t)
 71035 push 45739
 71038 rstack EAX,EBP:2
// assert_type arg #1 (float self)
 71042 push EAX
 71044 mov ECX,2
// assert_type(...)
 71047 call 10123
 71050 add ESP,2
__2974:
 71053 rstack EAX,EBP:3
 71057 mov EBX,1
 71060 sub EBX,EAX
 71062 neg EBX
 71064 fsgn EBX,EBX
 71066 max EBX,0
// if (argc>1)
 71069 cmp 0,EBX
 71072 jge 71507
__2978:
// strcmp arg #2 (char* dest)
 71075 push 71594
 71078 rstack EAX,EBP:4
 71082 add EAX,1
 71085 mov EBX,EAX
// strcmp arg #1 (char* src)
 71087 push #EBX
 71089 mov ECX,2
// strcmp(...)
 71092 call 10763
 71095 add ESP,2
 71098 mov EBX,0
 71101 sub EBX,EAX
 71103 fabs EBX,EBX
 71105 fsgn EBX,EBX
 71107 lneg EBX
// if (strcmp(argv[1],"stack")==0)
 71109 cmp 0,EBX
 71112 jge 71201
// printf arg #1 (char* format)
 71115 push 71576
 71118 mov ECX,1
// printf(...)
 71121 call 21851
 71124 add ESP,1
 71127 mov ECX,0
// kernelSize(...)
 71130 call 96284
 71133 sstack EBP:-2,EAX
 71137 sstack EBP:-3,SS
 71141 sstack EBP:-4,ESP
 71145 rstack EAX,EBP:-4
// printf arg #4 (unknown)
 71149 push EAX
 71151 rstack EAX,EBP:-3
// printf arg #3 (unknown)
 71155 push EAX
 71157 rstack EAX,EBP:-2
// printf arg #2 (unknown)
 71161 push EAX
// printf arg #1 (char* format)
 71163 push 71674
 71166 mov ECX,4
// printf(...)
 71169 call 21851
 71172 add ESP,4
 71175 push 71600
 71178 rstack EAX,EBP:-1
 71182 push EAX
 71184 mov ECX,2
// overstack_fexit(...)
 71187 call 76088
 71190 add ESP,2
 71193 mov EAX,1
 71196 leave 
 71197 ret 
 71198 jmp 71507
__2982:
__2979:
__2984:
__2987:
// strcmp arg #2 (char* dest)
 71201 push 71633
 71204 rstack EAX,EBP:4
 71208 add EAX,1
 71211 mov EBX,EAX
// strcmp arg #1 (char* src)
 71213 push #EBX
 71215 mov ECX,2
// strcmp(...)
 71218 call 10763
 71221 add ESP,2
 71224 mov EBX,0
 71227 sub EBX,EAX
 71229 fabs EBX,EBX
 71231 fsgn EBX,EBX
 71233 lneg EBX
// if (strcmp(argv[1],"heap")==0)
 71235 cmp 0,EBX
 71238 jge 71432
// printf arg #1 (char* format)
 71241 push 71616
 71244 mov ECX,1
// printf(...)
 71247 call 21851
 71250 add ESP,1
 71253 mov ECX,0
// malloc_test(...)
 71256 call 27948
 71259 sstack EBP:-5,EAX
__2991:
 71263 rstack EAX,EBP:-5
 71267 mov EBX,0
 71270 sub EBX,EAX
 71272 fabs EBX,EBX
 71274 fsgn EBX,EBX
 71276 lneg EBX
// if (res==0)
 71278 cmp 0,EBX
 71281 jge 71299
// printf arg #2 (unknown)
 71284 push 90
// printf arg #1 (char* format)
 71287 push 71558
 71290 mov ECX,2
// printf(...)
 71293 call 21851
 71296 add ESP,2
__2992:
__2990:
 71299 mov EAX,SS:ESP
 71302 add EAX,-9
// malloc_count arg #4 (float* usedcount)
 71305 push EAX
 71307 mov EAX,SS:ESP
 71310 add EAX,-8
// malloc_count arg #3 (float* freecount)
 71313 push EAX
 71315 mov EAX,SS:ESP
 71318 add EAX,-7
// malloc_count arg #2 (float* usedsize)
 71321 push EAX
 71323 mov EAX,SS:ESP
 71326 add EAX,-6
// malloc_count arg #1 (float* freesize)
 71329 push EAX
 71331 mov ECX,4
// malloc_count(...)
 71334 call 28288
 71337 add ESP,4
// printf arg #1 (char* format)
 71340 push 71638
 71343 mov ECX,1
// printf(...)
 71346 call 21851
 71349 add ESP,1
 71352 rstack EAX,EBP:-7
// printKbs arg #1 (float bytes)
 71356 push EAX
 71358 mov ECX,1
// printKbs(...)
 71361 call 70841
 71364 add ESP,1
// printf arg #1 (char* format)
 71367 push 71608
 71370 mov ECX,1
// printf(...)
 71373 call 21851
 71376 add ESP,1
 71379 rstack EAX,EBP:-6
// printKbs arg #1 (float bytes)
 71383 push EAX
 71385 mov ECX,1
// printKbs(...)
 71388 call 70841
 71391 add ESP,1
// printf arg #1 (char* format)
 71394 push 71645
 71397 mov ECX,1
// printf(...)
 71400 call 21851
 71403 add ESP,1
 71406 push 71600
 71409 rstack EAX,EBP:-1
 71413 push EAX
 71415 mov ECX,2
// overstack_fexit(...)
 71418 call 76088
 71421 add ESP,2
 71424 mov EAX,1
 71427 leave 
 71428 ret 
 71429 jmp 71507
__2997:
__2988:
__2999:
__3002:
// strcmp arg #2 (char* dest)
 71432 push 71669
 71435 rstack EAX,EBP:4
 71439 add EAX,1
 71442 mov EBX,EAX
// strcmp arg #1 (char* src)
 71444 push #EBX
 71446 mov ECX,2
// strcmp(...)
 71449 call 10763
 71452 add ESP,2
 71455 mov EBX,0
 71458 sub EBX,EAX
 71460 fabs EBX,EBX
 71462 fsgn EBX,EBX
 71464 lneg EBX
// if (strcmp(argv[1],"disk")==0)
 71466 cmp 0,EBX
 71469 jge 71507
// printf arg #1 (char* format)
 71472 push 71652
 71475 mov ECX,1
// printf(...)
 71478 call 21851
 71481 add ESP,1
 71484 push 71600
 71487 rstack EAX,EBP:-1
 71491 push EAX
 71493 mov ECX,2
// overstack_fexit(...)
 71496 call 76088
 71499 add ESP,2
 71502 mov EAX,1
 71505 leave 
 71506 ret 
__3003:
__3001:
__2998:
__2986:
__2983:
__2977:
__2975:
__2973:
 71507 rstack EAX,EBP:4
 71511 add EAX,0
 71514 mov EBX,EAX
// cmdHelp2 arg #2 (float str_cmd)
 71516 push #EBX
 71518 rstack EAX,EBP:2
// cmdHelp2 arg #1 (float shell)
 71522 push EAX
 71524 mov ECX,2
// cmdHelp2(...)
 71527 call 49409
 71530 add ESP,2
 71533 push 71600
 71536 rstack EAX,EBP:-1
 71540 push EAX
 71542 mov ECX,2
// overstack_fexit(...)
 71545 call 76088
 71548 add ESP,2
 71551 mov EAX,0
 71554 leave 
 71555 ret 
__2970:
 71556 leave 
 71557 ret 
__2993:
 71558 db "malloc test %mOK
",0
__2980:
 71576 db "stack diagnostic
",0
__2976:
 71594 db "stack",0
__2972:
 71600 db "cmdDiag",0
__2995:
 71608 db " used, ",0
__2989:
 71616 db "heap diagnostic
",0
__2985:
 71633 db "heap",0
__2994:
 71638 db "heap: ",0
__2996:
 71645 db " free
",0
__3004:
 71652 db "disk diagnostic
",0
__3000:
 71669 db "disk",0
__2981:
 71674 db "code size = %d
stack segment = %d
esp = %d
",0
cmdDump:
// cmdDump(shell,argc,argv)
 71718 enter 7
__3006:
// assert_type arg #2 (float t)
 71721 push 45739
 71724 rstack EAX,EBP:2
// assert_type arg #1 (float self)
 71728 push EAX
 71730 mov ECX,2
// assert_type(...)
 71733 call 10123
 71736 add ESP,2
__3008:
 71739 rstack EAX,EBP:3
 71743 mov EBX,2
 71746 sub EBX,EAX
 71748 neg EBX
 71750 fsgn EBX,EBX
 71752 max EBX,0
// if (argc>2)
 71755 cmp 0,EBX
 71758 jge 72073
 71761 rstack EAX,EBP:4
 71765 add EAX,1
 71768 mov EBX,EAX
// str2num arg #1 (char* str)
 71770 push #EBX
 71772 mov ECX,1
// str2num(...)
 71775 call 12270
 71778 add ESP,1
 71781 sstack EBP:-1,EAX
 71785 rstack EAX,EBP:4
 71789 add EAX,2
 71792 mov EBX,EAX
 71794 sstack EBP:-2,#EBX
 71798 rstack EAX,EBP:-2
// printf arg #3 (unknown)
 71802 push EAX
 71804 rstack EAX,EBP:-1
// printf arg #2 (unknown)
 71808 push EAX
// printf arg #1 (char* format)
 71810 push 72114
 71813 mov ECX,3
// printf(...)
 71816 call 21851
 71819 add ESP,3
 71822 rstack EAX,EBP:-1
// EBcb_get_entry arg #2 (float num)
 71826 push EAX
// EBcb_get_entry arg #1 (float this)
 71828 push 77224
 71831 mov ECX,2
// EBcb_get_entry(...)
 71834 call 19880
 71837 add ESP,2
 71840 sstack EBP:-3,EAX
 71844 rstack EAX,EBP:-3
// EBcb_entry_get_addr arg #1 (float this)
 71848 push EAX
 71850 mov ECX,1
// EBcb_entry_get_addr(...)
 71853 call 19736
 71856 add ESP,1
 71859 sstack EBP:-4,EAX
 71863 rstack EAX,EBP:-4
 71867 add EAX,0
 71870 mov EBX,EAX
 71872 sstack EBP:-5,#EBX
 71876 rstack EAX,EBP:-5
// printf arg #2 (unknown)
 71880 push EAX
// printf arg #1 (char* format)
 71882 push 72189
 71885 mov ECX,2
// printf(...)
 71888 call 21851
 71891 add ESP,2
__3013:
 71894 rstack EAX,EBP:-5
 71898 mov EBX,5000
 71901 sub EBX,EAX
 71903 neg EBX
 71905 fsgn EBX,EBX
 71907 max EBX,0
 71910 rstack EAX,EBP:-5
 71914 mov ECX,0
 71917 sub ECX,EAX
 71919 fsgn ECX,ECX
 71921 max ECX,0
 71924 or ECX,EBX
// if ((psize<0)||(psize>5000))
 71926 cmp 0,ECX
 71929 jge 71949
// printf arg #1 (char* format)
 71932 push 72166
 71935 mov ECX,1
// printf(...)
 71938 call 21851
 71941 add ESP,1
 71944 mov EAX,1
 71947 leave 
 71948 ret 
__3014:
__3012:
// fopen arg #3 (float mode)
 71949 push 51829
 71952 rstack EAX,EBP:-2
// fopen arg #2 (float filepath)
 71956 push EAX
 71958 rstack EAX,EBP:2
// fopen arg #1 (float shell)
 71962 push EAX
 71964 mov ECX,3
// fopen(...)
 71967 call 61841
 71970 add ESP,3
 71973 sstack EBP:-6,EAX
__3017:
 71977 rstack EAX,EBP:-6
// if (fp)
 71981 cmp 0,EAX
 71984 jge 72002
// printf arg #1 (char* format)
 71987 push 72101
 71990 mov ECX,1
// printf(...)
 71993 call 21851
 71996 add ESP,1
 71999 jmp 72019
__3020:
__3018:
__3022:
// printf arg #1 (char* format)
 72002 push 67995
 72005 mov ECX,1
// printf(...)
 72008 call 21851
 72011 add ESP,1
 72014 mov EAX,1
 72017 leave 
 72018 ret 
__3021:
__3016:
 72019 rstack EAX,EBP:-6
// fwrite arg #3 (float fp)
 72023 push EAX
 72025 rstack EAX,EBP:-5
// fwrite arg #2 (float size)
 72029 push EAX
 72031 rstack EAX,EBP:-4
// fwrite arg #1 (float from)
 72035 push EAX
 72037 mov ECX,3
// fwrite(...)
 72040 call 61481
 72043 add ESP,3
 72046 sstack EBP:-7,EAX
 72050 rstack EAX,EBP:-7
// printf arg #2 (unknown)
 72054 push EAX
// printf arg #1 (char* format)
 72056 push 72144
 72059 mov ECX,2
// printf(...)
 72062 call 21851
 72065 add ESP,2
 72068 mov EAX,0
 72071 leave 
 72072 ret 
__3009:
__3007:
 72073 rstack EAX,EBP:4
 72077 add EAX,0
 72080 mov EBX,EAX
// cmdHelp2 arg #2 (float str_cmd)
 72082 push #EBX
 72084 rstack EAX,EBP:2
// cmdHelp2 arg #1 (float shell)
 72088 push EAX
 72090 mov ECX,2
// cmdHelp2(...)
 72093 call 49409
 72096 add ESP,2
__3005:
 72099 leave 
 72100 ret 
__3019:
 72101 db "file opened
",0
__3010:
 72114 db "dumping device %d to file %s
",0
__3023:
 72144 db "wrote %d bytes, done
",0
__3015:
 72166 db "file too large, abort
",0
__3011:
 72189 db "file size = %d
",0
cmdRun:
// cmdRun(shell,argc,argv)
 72205 enter 11
__3025:
// assert_type arg #2 (float t)
 72208 push 45739
 72211 rstack EAX,EBP:2
// assert_type arg #1 (float self)
 72215 push EAX
 72217 mov ECX,2
// assert_type(...)
 72220 call 10123
 72223 add ESP,2
__3027:
 72226 rstack EAX,EBP:3
 72230 mov EBX,2
 72233 sub EBX,EAX
 72235 neg EBX
 72237 fsgn EBX,EBX
 72239 max EBX,0
// if (argc>2)
 72242 cmp 0,EBX
 72245 jge 72909
 72248 rstack EAX,EBP:4
 72252 add EAX,1
 72255 mov EBX,EAX
 72257 sstack EBP:-1,#EBX
 72261 rstack EAX,EBP:4
 72265 add EAX,2
 72268 mov EBX,EAX
 72270 sstack EBP:-2,#EBX
__3031:
// strcmp arg #2 (char* dest)
 72274 push 72963
 72277 rstack EAX,EBP:-1
// strcmp arg #1 (char* src)
 72281 push EAX
 72283 mov ECX,2
// strcmp(...)
 72286 call 10763
 72289 add ESP,2
 72292 mov EBX,0
 72295 sub EBX,EAX
 72297 fabs EBX,EBX
 72299 fsgn EBX,EBX
 72301 lneg EBX
// if (strcmp(mode,"alcor")==0)
 72303 cmp 0,EBX
 72306 jge 72788
 72309 rstack EAX,EBP:-2
// printf arg #2 (unknown)
 72313 push EAX
// printf arg #1 (char* format)
 72315 push 73001
 72318 mov ECX,2
// printf(...)
 72321 call 21851
 72324 add ESP,2
// printf arg #1 (char* format)
 72327 push 73023
 72330 mov ECX,1
// printf(...)
 72333 call 21851
 72336 add ESP,1
// fopen arg #3 (float mode)
 72339 push 51831
 72342 rstack EAX,EBP:-2
// fopen arg #2 (float filepath)
 72346 push EAX
 72348 rstack EAX,EBP:2
// fopen arg #1 (float shell)
 72352 push EAX
 72354 mov ECX,3
// fopen(...)
 72357 call 61841
 72360 add ESP,3
 72363 sstack EBP:-3,EAX
__3036:
 72367 rstack EAX,EBP:-3
 72371 lneg EAX
 72373 mov EBX,EAX
// if (!fp)
 72375 cmp 0,EBX
 72378 jge 72398
// printf arg #1 (char* format)
 72381 push 67995
 72384 mov ECX,1
// printf(...)
 72387 call 21851
 72390 add ESP,1
 72393 mov EAX,1
 72396 leave 
 72397 ret 
__3037:
__3035:
 72398 rstack EAX,EBP:-3
// fsize arg #1 (float fp)
 72402 push EAX
 72404 mov ECX,1
// fsize(...)
 72407 call 61042
 72410 add ESP,1
 72413 sstack EBP:-4,EAX
 72417 rstack EAX,EBP:-4
// malloc arg #1 (float n)
 72421 push EAX
 72423 mov ECX,1
// malloc(...)
 72426 call 29334
 72429 add ESP,1
 72432 sstack EBP:-5,EAX
__3039:
 72436 rstack EAX,EBP:-5
 72440 lneg EAX
 72442 mov EBX,EAX
// if (!buff)
 72444 cmp 0,EBX
 72447 jge 72467
// printf arg #1 (char* format)
 72450 push 73039
 72453 mov ECX,1
// printf(...)
 72456 call 21851
 72459 add ESP,1
 72462 mov EAX,1
 72465 leave 
 72466 ret 
__3040:
__3038:
 72467 rstack EAX,EBP:-3
// fread arg #3 (float fp)
 72471 push EAX
 72473 rstack EAX,EBP:-4
// fread arg #2 (float size)
 72477 push EAX
 72479 rstack EAX,EBP:-5
// fread arg #1 (float to)
 72483 push EAX
 72485 mov ECX,3
// fread(...)
 72488 call 61307
 72491 add ESP,3
 72494 sstack EBP:-6,EAX
__3043:
 72498 rstack EAX,EBP:-6
 72502 lneg EAX
 72504 mov EBX,EAX
// if (!res)
 72506 cmp 0,EBX
 72509 jge 72529
// printf arg #1 (char* format)
 72512 push 73098
 72515 mov ECX,1
// printf(...)
 72518 call 21851
 72521 add ESP,1
 72524 mov EAX,1
 72527 leave 
 72528 ret 
__3044:
__3042:
// printf arg #1 (char* format)
 72529 push 72937
 72532 mov ECX,1
// printf(...)
 72535 call 21851
 72538 add ESP,1
// malloc arg #1 (float n)
 72541 push #38547
 72544 mov ECX,1
// malloc(...)
 72547 call 29334
 72550 add ESP,1
 72553 sstack EBP:-7,EAX
 72557 rstack EAX,EBP:-7
// proginfo_constructor arg #1 (float this)
 72561 push EAX
 72563 mov ECX,1
// proginfo_constructor(...)
 72566 call 38548
 72569 add ESP,1
 72572 rstack EAX,EBP:-5
// proginfo_set_addr arg #2 (float val)
 72576 push EAX
 72578 rstack EAX,EBP:-7
// proginfo_set_addr arg #1 (float this)
 72582 push EAX
 72584 mov ECX,2
// proginfo_set_addr(...)
 72587 call 38655
 72590 add ESP,2
 72593 sstack EBP:-8,0
 72598 mov EAX,SS:ESP
 72601 add EAX,-8
 72604 push EAX
 72606 push 10
 72609 rstack EAX,EBP:-5
 72613 push EAX
 72615 mov ECX,3
// findJmp(...)
 72618 call 95480
 72621 add ESP,3
 72624 sstack EBP:-9,EAX
__3048:
 72628 rstack EAX,EBP:-9
 72632 mov EBX,-1
 72635 sub EBX,EAX
 72637 fabs EBX,EBX
 72639 fsgn EBX,EBX
 72641 lneg EBX
// if (fj_res==-1)
 72643 cmp 0,EBX
 72646 jge 72666
// printf arg #1 (char* format)
 72649 push 72969
 72652 mov ECX,1
// printf(...)
 72655 call 21851
 72658 add ESP,1
 72661 mov EAX,1
 72664 leave 
 72665 ret 
__3049:
__3047:
 72666 rstack EAX,EBP:-8
// printf arg #2 (unknown)
 72670 push EAX
// printf arg #1 (char* format)
 72672 push 73076
 72675 mov ECX,2
// printf(...)
 72678 call 21851
 72681 add ESP,2
 72684 rstack EAX,EBP:-8
// proginfo_set_entry arg #2 (float val)
 72688 push EAX
 72690 rstack EAX,EBP:-7
// proginfo_set_entry arg #1 (float this)
 72694 push EAX
 72696 mov ECX,2
// proginfo_set_entry(...)
 72699 call 38695
 72702 add ESP,2
 72705 rstack EAX,EBP:-4
// proginfo_set_size arg #2 (float val)
 72709 push EAX
 72711 rstack EAX,EBP:-7
// proginfo_set_size arg #1 (float this)
 72715 push EAX
 72717 mov ECX,2
// proginfo_set_size(...)
 72720 call 38675
 72723 add ESP,2
 72726 sstack EBP:-10,1
 72731 rstack EAX,EBP:-10
// generateProcess arg #2 (float procID)
 72735 push EAX
 72737 rstack EAX,EBP:-7
// generateProcess arg #1 (float proginfo)
 72741 push EAX
 72743 mov ECX,2
// generateProcess(...)
 72746 call 38715
 72749 add ESP,2
 72752 sstack EBP:-11,EAX
// printf arg #1 (char* format)
 72756 push 39210
 72759 mov ECX,1
// printf(...)
 72762 call 21851
 72765 add ESP,1
 72768 rstack EAX,EBP:-11
// process_run arg #1 (float proc)
 72772 push EAX
 72774 mov ECX,1
// process_run(...)
 72777 call 39028
 72780 add ESP,1
 72783 mov EAX,0
 72786 leave 
 72787 ret 
__3032:
__3030:
__3054:
// strcmp arg #2 (char* dest)
 72788 push 72941
 72791 rstack EAX,EBP:-1
// strcmp arg #1 (char* src)
 72795 push EAX
 72797 mov ECX,2
// strcmp(...)
 72800 call 10763
 72803 add ESP,2
 72806 mov EBX,0
 72809 sub EBX,EAX
 72811 fabs EBX,EBX
 72813 fsgn EBX,EBX
 72815 lneg EBX
// if (strcmp(mode,"allfunc")==0)
 72817 cmp 0,EBX
 72820 jge 72840
// printf arg #1 (char* format)
 72823 push 72949
 72826 mov ECX,1
// printf(...)
 72829 call 21851
 72832 add ESP,1
 72835 mov EAX,1
 72838 leave 
 72839 ret 
__3055:
__3053:
__3059:
// strcmp arg #2 (char* dest)
 72840 push 73018
 72843 rstack EAX,EBP:-1
// strcmp arg #1 (char* src)
 72847 push EAX
 72849 mov ECX,2
// strcmp(...)
 72852 call 10763
 72855 add ESP,2
 72858 mov EBX,0
 72861 sub EBX,EAX
 72863 fabs EBX,EBX
 72865 fsgn EBX,EBX
 72867 lneg EBX
// if (strcmp(mode,"inex")==0)
 72869 cmp 0,EBX
 72872 jge 72892
// printf arg #1 (char* format)
 72875 push 72949
 72878 mov ECX,1
// printf(...)
 72881 call 21851
 72884 add ESP,1
 72887 mov EAX,1
 72890 leave 
 72891 ret 
__3060:
__3058:
// printf arg #1 (char* format)
 72892 push 73062
 72895 mov ECX,1
// printf(...)
 72898 call 21851
 72901 add ESP,1
 72904 mov EAX,1
 72907 leave 
 72908 ret 
__3028:
__3026:
 72909 rstack EAX,EBP:4
 72913 add EAX,0
 72916 mov EBX,EAX
// cmdHelp2 arg #2 (float str_cmd)
 72918 push #EBX
 72920 rstack EAX,EBP:2
// cmdHelp2 arg #1 (float shell)
 72924 push EAX
 72926 mov ECX,2
// cmdHelp2(...)
 72929 call 49409
 72932 add ESP,2
__3024:
 72935 leave 
 72936 ret 
__3046:
 72937 db "ok
",0
__3052:
 72941 db "allfunc",0
__3056:
 72949 db "unimplemented",0
__3029:
 72963 db "alcor",0
__3050:
 72969 db "can't find the jump instruction",0
__3033:
 73001 db "running file %s
",0
__3057:
 73018 db "inex",0
__3034:
 73023 db "loading file...",0
__3041:
 73039 db "can't allocate buffer
",0
__3061:
 73062 db "unknown mode
",0
__3051:
 73076 db "entry point is at %d
",0
__3045:
 73098 db "can't read file
",0
cmdOverstack:
// cmdOverstack(shell,argc,argv)
 73115 enter 1
__3063:
 73118 push 73172
 73121 mov ECX,1
// overstack_fenter(...)
 73124 call 76020
 73127 add ESP,1
 73130 sstack EBP:-1,EAX
// printf arg #1 (char* format)
 73134 push 73185
 73137 mov ECX,1
// printf(...)
 73140 call 21851
 73143 add ESP,1
 73146 mov ECX,0
// overstack_trace(...)
 73149 call 76634
 73152 push 73172
 73155 rstack EAX,EBP:-1
 73159 push EAX
 73161 mov ECX,2
// overstack_fexit(...)
 73164 call 76088
 73167 add ESP,2
__3062:
 73170 leave 
 73171 ret 
__3064:
 73172 db "cmdOverstack",0
__3065:
 73185 db "overstack test:",0
cmdTestArgs:
// cmdTestArgs(shell,argc,argv)
 73201 enter 7
__3067:
// printf arg #1 (char* format)
 73204 push 73705
 73207 mov ECX,1
// printf(...)
 73210 call 21851
 73213 add ESP,1
 73216 mov ECX,0
// args_new(...)
 73219 call 45696
 73222 sstack EBP:-1,EAX
// printf arg #1 (char* format)
 73226 push 73746
 73229 mov ECX,1
// printf(...)
 73232 call 21851
 73235 add ESP,1
 73238 rstack EAX,EBP:4
// args_collect arg #3 (float argv)
 73242 push EAX
 73244 rstack EAX,EBP:3
// args_collect arg #2 (float argc)
 73248 push EAX
 73250 rstack EAX,EBP:-1
// args_collect arg #1 (float this)
 73254 push EAX
 73256 mov ECX,3
// args_collect(...)
 73259 call 43550
 73262 add ESP,3
 73265 rstack EAX,EBP:-1
// args_num arg #1 (float this)
 73269 push EAX
 73271 mov ECX,1
// args_num(...)
 73274 call 44459
 73277 add ESP,1
 73280 sstack EBP:-2,EAX
 73284 rstack EAX,EBP:-1
// args_numFlags arg #1 (float this)
 73288 push EAX
 73290 mov ECX,1
// args_numFlags(...)
 73293 call 44637
 73296 add ESP,1
 73299 sstack EBP:-3,EAX
 73303 rstack EAX,EBP:-3
// printf arg #3 (unknown)
 73307 push EAX
 73309 rstack EAX,EBP:-2
// printf arg #2 (unknown)
 73313 push EAX
// printf arg #1 (char* format)
 73315 push 73781
 73318 mov ECX,3
// printf(...)
 73321 call 21851
 73324 add ESP,3
// printf arg #1 (char* format)
 73327 push 73820
 73330 mov ECX,1
// printf(...)
 73333 call 21851
 73336 add ESP,1
// args_popFlag_s arg #2 (float str)
 73339 push 73666
 73342 rstack EAX,EBP:-1
// args_popFlag_s arg #1 (float this)
 73346 push EAX
 73348 mov ECX,2
// args_popFlag_s(...)
 73351 call 45255
 73354 add ESP,2
// printf arg #2 (unknown)
 73357 push EAX
// printf arg #1 (char* format)
 73359 push 73851
 73362 mov ECX,2
// printf(...)
 73365 call 21851
 73368 add ESP,2
// args_popFlag_s arg #2 (float str)
 73371 push 73818
 73374 rstack EAX,EBP:-1
// args_popFlag_s arg #1 (float this)
 73378 push EAX
 73380 mov ECX,2
// args_popFlag_s(...)
 73383 call 45255
 73386 add ESP,2
// printf arg #2 (unknown)
 73389 push EAX
// printf arg #1 (char* format)
 73391 push 73668
 73394 mov ECX,2
// printf(...)
 73397 call 21851
 73400 add ESP,2
// args_popFlag_s arg #2 (float str)
 73403 push 46859
 73406 rstack EAX,EBP:-1
// args_popFlag_s arg #1 (float this)
 73410 push EAX
 73412 mov ECX,2
// args_popFlag_s(...)
 73415 call 45255
 73418 add ESP,2
// printf arg #2 (unknown)
 73421 push EAX
// printf arg #1 (char* format)
 73423 push 73764
 73426 mov ECX,2
// printf(...)
 73429 call 21851
 73432 add ESP,2
 73435 sstack EBP:-4,0
 73440 sstack EBP:-5,0
 73445 mov EAX,SS:ESP
 73448 add EAX,-5
// args_popFlagParam_s arg #3 (float p_res)
 73451 push EAX
// args_popFlagParam_s arg #2 (float str)
 73453 push 73744
 73456 rstack EAX,EBP:-1
// args_popFlagParam_s arg #1 (float this)
 73460 push EAX
 73462 mov ECX,3
// args_popFlagParam_s(...)
 73465 call 45384
 73468 add ESP,3
// res1=args_popFlagParam_s(args,"o",&res2)
 73471 sstack EBP:-4,EAX
 73475 rstack EAX,EBP:-5
// printf arg #3 (unknown)
 73479 push EAX
 73481 rstack EAX,EBP:-4
// printf arg #2 (unknown)
 73485 push EAX
// printf arg #1 (char* format)
 73487 push 73681
 73490 mov ECX,3
// printf(...)
 73493 call 21851
 73496 add ESP,3
// printf arg #1 (char* format)
 73499 push 73651
 73502 mov ECX,1
// printf(...)
 73505 call 21851
 73508 add ESP,1
__3081:
// if (1
 73511 cmp 0,1
 73515 jz 73574
 73518 rstack EAX,EBP:-1
// args_popFlag arg #1 (float this)
 73522 push EAX
 73524 mov ECX,1
// args_popFlag(...)
 73527 call 45141
 73530 add ESP,1
 73533 sstack EBP:-6,EAX
__3083:
 73537 rstack EAX,EBP:-6
// if (flag)
 73541 cmp 0,EAX
 73544 jge 73568
 73547 rstack EAX,EBP:-6
// printf arg #2 (unknown)
 73551 push EAX
// printf arg #1 (char* format)
 73553 push 73719
 73556 mov ECX,2
// printf(...)
 73559 call 21851
 73562 add ESP,2
 73565 jmp 73571
__3086:
__3084:
__3088:
 73568 jmp 73574
__3087:
__3082:
 73571 jmp 73511
__3080:
// printf arg #1 (char* format)
 73574 push 73730
 73577 mov ECX,1
// printf(...)
 73580 call 21851
 73583 add ESP,1
__3091:
// if (1
 73586 cmp 0,1
 73590 jz 73649
 73593 rstack EAX,EBP:-1
// args_popArg arg #1 (float this)
 73597 push EAX
 73599 mov ECX,1
// args_popArg(...)
 73602 call 44815
 73605 add ESP,1
 73608 sstack EBP:-7,EAX
__3093:
 73612 rstack EAX,EBP:-7
// if (arg)
 73616 cmp 0,EAX
 73619 jge 73643
 73622 rstack EAX,EBP:-7
// printf arg #2 (unknown)
 73626 push EAX
// printf arg #1 (char* format)
 73628 push 73841
 73631 mov ECX,2
// printf(...)
 73634 call 21851
 73637 add ESP,2
 73640 jmp 73646
__3096:
__3094:
__3098:
 73643 jmp 73649
__3097:
__3092:
 73646 jmp 73586
__3090:
__3066:
 73649 leave 
 73650 ret 
__3079:
 73651 db "listing flags
",0
__3073:
 73666 db "f",0
__3074:
 73668 db "flag -d: %d
",0
__3078:
 73681 db "flag -o: %d, param: %s
",0
__3068:
 73705 db "testing args
",0
__3085:
 73719 db "flag [%s]
",0
__3089:
 73730 db "listing args
",0
__3077:
 73744 db "o",0
__3069:
 73746 db "args constructed
",0
__3076:
 73764 db "flag --help: %d
",0
__3070:
 73781 db "args collected %d args and %d flags
",0
__3075:
 73818 db "d",0
__3071:
 73820 db "checking for flags:
",0
__3095:
 73841 db "arg [%s]
",0
__3072:
 73851 db "flag -f: %d
",0
libmarker19:
 73864 db 0
typeof_page_manager:
 73865 db "page_manager",0
sizeof_page_manager:
 73878 db 3
page_manager_constructor:
// page_manager_constructor(self)
 73879 enter 2
__3100:
 73882 rstack EAX,EBP:2
 73886 add EAX,0
 73889 mov EBX,EAX
// self[0]=typeof_page_manager
 73891 mov #EBX,73865
// malloc arg #1 (float n)
 73894 push #32206
 73897 mov ECX,1
// malloc(...)
 73900 call 29334
 73903 add ESP,1
 73906 sstack EBP:-1,EAX
// vector_constructor arg #2 (float element_size)
 73910 push 2
 73913 rstack EAX,EBP:-1
// vector_constructor arg #1 (void* self)
 73917 push EAX
 73919 mov ECX,2
// vector_constructor(...)
 73922 call 32207
 73925 add ESP,2
 73928 rstack EAX,EBP:-1
 73932 rstack EBX,EBP:2
 73936 add EBX,1
 73939 mov ECX,EBX
// self[1]=V
 73941 mov #ECX,EAX
 73943 rstack EAX,EBP:-1
// vector_array arg #1 (void* self)
 73947 push EAX
 73949 mov ECX,1
// vector_array(...)
 73952 call 35451
 73955 add ESP,1
 73958 sstack EBP:-2,EAX
 73962 rstack EAX,EBP:-2
 73966 rstack EBX,EBP:2
 73970 add EBX,2
 73973 mov ECX,EBX
// self[2]=PT
 73975 mov #ECX,EAX
__3099:
 73977 leave 
 73978 ret 
page_manager_assign_default_page:
// page_manager_assign_default_page(PM,page)
 73979 enter 2
__3102:
// assert_type arg #2 (float t)
 73982 push 73865
 73985 rstack EAX,EBP:2
// assert_type arg #1 (float self)
 73989 push EAX
 73991 mov ECX,2
// assert_type(...)
 73994 call 10123
 73997 add ESP,2
 74000 rstack EAX,EBP:2
 74004 add EAX,2
 74007 mov EBX,EAX
 74009 sstack EBP:-1,#EBX
 74013 rstack EAX,EBP:-1
 74017 add EAX,0
 74020 mov EBX,EAX
 74022 sstack EBP:-2,EBX
 74026 rstack EAX,EBP:3
 74030 add EAX,0
 74033 mov EBX,EAX
 74035 rstack EAX,EBP:-2
 74039 add EAX,0
 74042 mov ECX,EAX
// dpage[0]=page[0]
 74044 mov #ECX,#EBX
 74046 rstack EAX,EBP:3
 74050 add EAX,1
 74053 mov EBX,EAX
 74055 rstack EAX,EBP:-2
 74059 add EAX,1
 74062 mov ECX,EAX
// dpage[1]=page[1]
 74064 mov #ECX,#EBX
__3101:
 74066 leave 
 74067 ret 
page_manager_check_size:
// page_manager_check_size(PM,maxpage)
 74068 enter 4
__3104:
// assert_type arg #2 (float t)
 74071 push 73865
 74074 rstack EAX,EBP:2
// assert_type arg #1 (float self)
 74078 push EAX
 74080 mov ECX,2
// assert_type(...)
 74083 call 10123
 74086 add ESP,2
 74089 rstack EAX,EBP:2
 74093 add EAX,1
 74096 mov EBX,EAX
 74098 sstack EBP:-1,#EBX
 74102 rstack EAX,EBP:-1
// vector_size arg #1 (void* self)
 74106 push EAX
 74108 mov ECX,1
// vector_size(...)
 74111 call 33515
 74114 add ESP,1
 74117 sstack EBP:-2,EAX
 74121 rstack EAX,EBP:3
 74125 add EAX,1
 74128 mov EBX,EAX
 74130 sstack EBP:-3,EBX
__3106:
 74134 rstack EAX,EBP:-2
 74138 rstack EBX,EBP:-3
 74142 sub EBX,EAX
 74144 mov EAX,EBX
 74146 fsgn EAX,EAX
 74148 max EAX,0
// if (Vsize<needSize)
 74151 cmp 0,EAX
 74154 jge 74212
 74157 rstack EAX,EBP:-3
// vector_resize arg #2 (float newsize)
 74161 push EAX
 74163 rstack EAX,EBP:-1
// vector_resize arg #1 (void* self)
 74167 push EAX
 74169 mov ECX,2
// vector_resize(...)
 74172 call 35271
 74175 add ESP,2
 74178 rstack EAX,EBP:-1
// vector_array arg #1 (void* self)
 74182 push EAX
 74184 mov ECX,1
// vector_array(...)
 74187 call 35451
 74190 add ESP,1
 74193 sstack EBP:-4,EAX
 74197 rstack EAX,EBP:-4
 74201 rstack EBX,EBP:2
 74205 add EBX,2
 74208 mov ECX,EBX
// PM[2]=PT
 74210 mov #ECX,EAX
__3107:
__3105:
__3103:
 74212 leave 
 74213 ret 
page_manager_assign_page_range:
// page_manager_assign_page_range(PM,page,pn_from,pn_to)
 74214 enter 4
__3109:
// assert_type arg #2 (float t)
 74217 push 73865
 74220 rstack EAX,EBP:2
// assert_type arg #1 (float self)
 74224 push EAX
 74226 mov ECX,2
// assert_type(...)
 74229 call 10123
 74232 add ESP,2
 74235 rstack EAX,EBP:2
 74239 add EAX,1
 74242 mov EBX,EAX
 74244 sstack EBP:-1,#EBX
 74248 rstack EAX,EBP:5
 74252 add EAX,1
 74255 mov EBX,EAX
// pn_to=pn_to+1
 74257 sstack EBP:5,EBX
 74261 rstack EAX,EBP:5
// page_manager_check_size arg #2 (float maxpage)
 74265 push EAX
 74267 rstack EAX,EBP:2
// page_manager_check_size arg #1 (float PM)
 74271 push EAX
 74273 mov ECX,2
// page_manager_check_size(...)
 74276 call 74068
 74279 add ESP,2
 74282 rstack EAX,EBP:2
 74286 add EAX,2
 74289 mov EBX,EAX
 74291 sstack EBP:-2,#EBX
 74295 rstack EAX,EBP:4
// init loop
 74299 sstack EBP:-3,EAX
__3111:
 74303 rstack EAX,EBP:-3
 74307 rstack EBX,EBP:5
 74311 sub EBX,EAX
 74313 mov EAX,EBX
 74315 fsgn EAX,EAX
// condition
 74317 max EAX,0
 74320 cmp 0,EAX
 74323 jz 74403
 74326 rstack EAX,EBP:-3
 74330 add EAX,1
 74333 mov EBX,EAX
 74335 mul EBX,2
 74338 rstack EAX,EBP:-2
 74342 add EAX,EBX
 74344 mov EBX,EAX
 74346 sstack EBP:-4,EBX
 74350 rstack EAX,EBP:3
 74354 add EAX,0
 74357 mov EBX,EAX
 74359 rstack EAX,EBP:-4
 74363 add EAX,0
 74366 mov ECX,EAX
// pt_page[0]=page[0]
 74368 mov #ECX,#EBX
 74370 rstack EAX,EBP:3
 74374 add EAX,1
 74377 mov EBX,EAX
 74379 rstack EAX,EBP:-4
 74383 add EAX,1
 74386 mov ECX,EAX
// pt_page[1]=page[1]
 74388 mov #ECX,#EBX
 74390 rstack EAX,EBP:-3
// loop step
 74394 inc EAX
 74396 sstack EBP:-3,EAX
 74400 jmp 74303
__3110:
__3108:
 74403 leave 
 74404 ret 
page_manager_map_1_to_1:
// page_manager_map_1_to_1(PM,pn_from,pn_to)
 74405 enter 3
__3113:
// assert_type arg #2 (float t)
 74408 push 73865
 74411 rstack EAX,EBP:2
// assert_type arg #1 (float self)
 74415 push EAX
 74417 mov ECX,2
// assert_type(...)
 74420 call 10123
 74423 add ESP,2
 74426 rstack EAX,EBP:4
 74430 add EAX,1
 74433 mov EBX,EAX
// pn_to=pn_to+1
 74435 sstack EBP:4,EBX
 74439 rstack EAX,EBP:4
// page_manager_check_size arg #2 (float maxpage)
 74443 push EAX
 74445 rstack EAX,EBP:2
// page_manager_check_size arg #1 (float PM)
 74449 push EAX
 74451 mov ECX,2
// page_manager_check_size(...)
 74454 call 74068
 74457 add ESP,2
 74460 rstack EAX,EBP:2
 74464 add EAX,2
 74467 mov EBX,EAX
 74469 sstack EBP:-1,#EBX
 74473 rstack EAX,EBP:3
// init loop
 74477 sstack EBP:-2,EAX
__3115:
 74481 rstack EAX,EBP:-2
 74485 rstack EBX,EBP:4
 74489 sub EBX,EAX
 74491 mov EAX,EBX
 74493 fsgn EAX,EAX
// condition
 74495 max EAX,0
 74498 cmp 0,EAX
 74501 jz 74556
 74504 rstack EAX,EBP:-2
 74508 add EAX,1
 74511 mov EBX,EAX
 74513 mul EBX,2
 74516 rstack EAX,EBP:-1
 74520 add EAX,EBX
 74522 mov EBX,EAX
 74524 sstack EBP:-3,EBX
 74528 rstack EAX,EBP:-2
 74532 rstack EBX,EBP:-3
 74536 add EBX,1
 74539 mov ECX,EBX
// page[1]=I
 74541 mov #ECX,EAX
 74543 rstack EAX,EBP:-2
// loop step
 74547 inc EAX
 74549 sstack EBP:-2,EAX
 74553 jmp 74481
__3114:
__3112:
 74556 leave 
 74557 ret 
page_manager_activate:
// page_manager_activate(PM)
 74558 enter 4
__3117:
// assert_type arg #2 (float t)
 74561 push 73865
 74564 rstack EAX,EBP:2
// assert_type arg #1 (float self)
 74568 push EAX
 74570 mov ECX,2
// assert_type(...)
 74573 call 10123
 74576 add ESP,2
 74579 rstack EAX,EBP:2
 74583 add EAX,1
 74586 mov EBX,EAX
 74588 sstack EBP:-1,#EBX
 74592 rstack EAX,EBP:-1
// vector_size arg #1 (void* self)
 74596 push EAX
 74598 mov ECX,1
// vector_size(...)
 74601 call 33515
 74604 add ESP,1
 74607 sstack EBP:-2,EAX
 74611 rstack EAX,EBP:-2
 74615 sstack EBP:-3,EAX
 74619 rstack EAX,EBP:2
 74623 add EAX,2
 74626 mov EBX,EAX
 74628 sstack EBP:-4,#EBX
 74632 rstack EAX,EBP:-3
// setPageTable arg #2 (float size)
 74636 push EAX
 74638 rstack EAX,EBP:-4
// setPageTable arg #1 (float PT)
 74642 push EAX
 74644 mov ECX,2
// setPageTable(...)
 74647 call 37416
 74650 add ESP,2
__3116:
 74653 leave 
 74654 ret 
libmarker20:
 74655 db 0
getIntStackTrace:
// getIntStackTrace(buff)
 74656 enter 5
__3119:
 74659 sstack EBP:-1,EBP
 74663 rstack EAX,EBP:-1
 74667 add EAX,1
 74670 mov EBX,EAX
 74672 sstack EBP:-2,EBX
 74676 rstack EAX,EBP:-2
 74680 mov EBX,SS
 74682 add EBX,EAX
 74684 sstack EBP:-3,#EBX
 74688 rstack EAX,EBP:-3
 74692 rstack EBX,EBP:2
 74696 add EBX,0
 74699 mov ECX,EBX
// buff[0]=PrevIP
 74701 mov #ECX,EAX
 74703 rstack EAX,EBP:-1
 74707 mov EBX,SS
 74709 add EBX,EAX
 74711 sstack EBP:-4,#EBX
 74715 rstack EAX,EBP:-4
// pEBP=PrevEBP
 74719 sstack EBP:-1,EAX
 74723 rstack EAX,EBP:-1
 74727 add EAX,2
 74730 mov EBX,EAX
// pPrevIP=pEBP+2
 74732 sstack EBP:-2,EBX
 74736 sstack EBP:-5,1
__3121:
 74741 rstack EAX,EBP:-5
 74745 mov EBX,80
 74748 sub EBX,EAX
 74750 fsgn EBX,EBX
 74752 max EBX,0
// if (I<80
 74755 cmp 0,EBX
 74758 jz 74861
 74761 rstack EAX,EBP:-2
 74765 mov EBX,SS
 74767 add EBX,EAX
// PrevIP=*(SS+pPrevIP)
 74769 sstack EBP:-3,#EBX
 74773 rstack EAX,EBP:-1
 74777 mov EBX,SS
 74779 add EBX,EAX
// PrevEBP=*(SS+pEBP)
 74781 sstack EBP:-4,#EBX
 74785 rstack EAX,EBP:-3
 74789 rstack EBX,EBP:-5
 74793 rstack ECX,EBP:2
 74797 add ECX,EBX
 74799 mov EBX,ECX
// buff[I]=PrevIP
 74801 mov #EBX,EAX
 74803 rstack EAX,EBP:-5
// I++
 74807 inc EAX
 74809 sstack EBP:-5,EAX
__3123:
 74813 rstack EAX,EBP:-4
 74817 mov EBX,0
 74820 sub EBX,EAX
 74822 fabs EBX,EBX
 74824 fsgn EBX,EBX
 74826 lneg EBX
// if (PrevEBP==0)
 74828 cmp 0,EBX
 74831 jge 74837
 74834 jmp 74861
__3124:
__3122:
 74837 rstack EAX,EBP:-4
// pEBP=PrevEBP
 74841 sstack EBP:-1,EAX
 74845 rstack EAX,EBP:-1
 74849 add EAX,1
 74852 mov EBX,EAX
// pPrevIP=pEBP+1
 74854 sstack EBP:-2,EBX
 74858 jmp 74741
__3120:
 74861 rstack EAX,EBP:-5
 74865 rstack EBX,EBP:2
 74869 add EBX,EAX
 74871 mov EAX,EBX
// buff[I]=0
 74873 mov #EAX,0
__3118:
 74876 leave 
 74877 ret 
getStackTrace:
// getStackTrace(buff)
 74878 enter 5
__3126:
 74881 sstack EBP:-1,EBP
 74885 rstack EAX,EBP:-1
 74889 add EAX,1
 74892 mov EBX,EAX
 74894 sstack EBP:-2,EBX
 74898 sstack EBP:-3,0
__3128:
 74903 rstack EAX,EBP:-3
 74907 mov EBX,80
 74910 sub EBX,EAX
 74912 fsgn EBX,EBX
 74914 max EBX,0
// if (I<80
 74917 cmp 0,EBX
 74920 jz 75023
 74923 rstack EAX,EBP:-2
 74927 mov EBX,SS
 74929 add EBX,EAX
 74931 sstack EBP:-4,#EBX
 74935 rstack EAX,EBP:-1
 74939 mov EBX,SS
 74941 add EBX,EAX
 74943 sstack EBP:-5,#EBX
 74947 rstack EAX,EBP:-4
 74951 rstack EBX,EBP:-3
 74955 rstack ECX,EBP:2
 74959 add ECX,EBX
 74961 mov EBX,ECX
// buff[I]=PrevIP
 74963 mov #EBX,EAX
 74965 rstack EAX,EBP:-3
// I++
 74969 inc EAX
 74971 sstack EBP:-3,EAX
__3130:
 74975 rstack EAX,EBP:-5
 74979 mov EBX,0
 74982 sub EBX,EAX
 74984 fabs EBX,EBX
 74986 fsgn EBX,EBX
 74988 lneg EBX
// if (PrevEBP==0)
 74990 cmp 0,EBX
 74993 jge 74999
 74996 jmp 75023
__3131:
__3129:
 74999 rstack EAX,EBP:-5
// pEBP=PrevEBP
 75003 sstack EBP:-1,EAX
 75007 rstack EAX,EBP:-1
 75011 add EAX,1
 75014 mov EBX,EAX
// pPrevIP=pEBP+1
 75016 sstack EBP:-2,EBX
 75020 jmp 74903
__3127:
 75023 rstack EAX,EBP:-3
 75027 rstack EBX,EBP:2
 75031 add EBX,EAX
 75033 mov EAX,EBX
// buff[I]=0
 75035 mov #EAX,0
__3125:
 75038 leave 
 75039 ret 
printStackTrace:
// printStackTrace(buff)
 75040 enter 5
__3133:
// printf arg #1 (char* format)
 75043 push 75206
 75046 mov ECX,1
// printf(...)
 75049 call 21851
 75052 add ESP,1
 75055 sstack EBP:-1,0
__3136:
 75060 rstack EAX,EBP:-1
 75064 rstack EBX,EBP:2
 75068 add EBX,EAX
 75070 mov EAX,EBX
 75072 mov EBX,0
 75075 sub EBX,#EAX
 75077 fabs EBX,EBX
 75079 fsgn EBX,EBX
// if (buff[I]!=0
 75081 cmp 0,EBX
 75084 jz 75204
 75087 rstack EAX,EBP:-1
 75091 rstack EBX,EBP:2
 75095 add EBX,EAX
 75097 mov EAX,EBX
// fIP=buff[I]
 75099 sstack EBP:-2,#EAX
 75103 rstack EAX,EBP:-2
 75107 push EAX
 75109 mov ECX,1
// findClosestFunc(...)
 75112 call 75231
 75115 add ESP,1
 75118 sstack EBP:-3,EAX
 75122 rstack EAX,EBP:-3
 75126 push EAX
 75128 mov ECX,1
// getFuncName(...)
 75131 call 75405
 75134 add ESP,1
 75137 sstack EBP:-4,EAX
 75141 rstack EAX,EBP:-3
 75145 neg EAX
 75147 mov EBX,EAX
 75149 rstack EAX,EBP:-2
 75153 add EAX,EBX
 75155 mov EBX,EAX
 75157 sstack EBP:-5,EBX
 75161 rstack EAX,EBP:-5
// printf arg #4 (unknown)
 75165 push EAX
 75167 rstack EAX,EBP:-4
// printf arg #3 (unknown)
 75171 push EAX
 75173 rstack EAX,EBP:-1
// printf arg #2 (unknown)
 75177 push EAX
// printf arg #1 (char* format)
 75179 push 75219
 75182 mov ECX,4
// printf(...)
 75185 call 21851
 75188 add ESP,4
 75191 rstack EAX,EBP:-1
// I++
 75195 inc EAX
 75197 sstack EBP:-1,EAX
 75201 jmp 75060
__3135:
__3132:
 75204 leave 
 75205 ret 
__3134:
 75206 db "call trace:
",0
__3137:
 75219 db "%d: %s +%d
",0
findClosestFunc:
// findClosestFunc(fIP)
 75231 enter 5
__3139:
__3141:
 75234 rstack EAX,EBP:2
 75238 lneg EAX
 75240 mov EBX,EAX
// if (!fIP)
 75242 cmp 0,EBX
 75245 jge 75253
 75248 mov EAX,0
 75251 leave 
 75252 ret 
__3142:
__3140:
 75253 sstack EBP:-1,0
 75258 sstack EBP:-2,9999999
 75263 sstack EBP:-3,96294
__3144:
 75268 rstack EAX,EBP:-3
 75272 mov EBX,97268
 75275 sub EBX,EAX
 75277 fsgn EBX,EBX
 75279 max EBX,0
// if (ptr<func_table_end
 75282 cmp 0,EBX
 75285 jz 75397
 75288 rstack EAX,EBP:-3
 75292 add EAX,0
 75295 mov EBX,EAX
 75297 sstack EBP:-4,#EBX
__3146:
 75301 rstack EAX,EBP:-4
 75305 rstack EBX,EBP:2
 75309 sub EBX,EAX
 75311 mov EAX,EBX
 75313 fsgn EAX,EAX
 75315 max EAX,0
// if (f2<fIP)
 75318 cmp 0,EAX
 75321 jge 75383
 75324 rstack EAX,EBP:-4
 75328 neg EAX
 75330 mov EBX,EAX
 75332 rstack EAX,EBP:2
 75336 add EAX,EBX
 75338 mov EBX,EAX
 75340 sstack EBP:-5,EBX
__3149:
 75344 rstack EAX,EBP:-5
 75348 rstack EBX,EBP:-2
 75352 sub EBX,EAX
 75354 mov EAX,EBX
 75356 fsgn EAX,EAX
 75358 max EAX,0
// if (diff<bestdiff)
 75361 cmp 0,EAX
 75364 jge 75383
 75367 rstack EAX,EBP:-5
// bestdiff=diff
 75371 sstack EBP:-2,EAX
 75375 rstack EAX,EBP:-4
// bestf=f2
 75379 sstack EBP:-1,EAX
__3150:
__3148:
__3147:
__3145:
 75383 rstack EAX,EBP:-3
// ptr+=2
 75387 add EAX,2
 75390 sstack EBP:-3,EAX
 75394 jmp 75268
__3143:
 75397 rstack EAX,EBP:-1
 75401 leave 
 75402 ret 
__3138:
 75403 leave 
 75404 ret 
getFuncName:
// getFuncName(fIP)
 75405 enter 1
__3152:
__3154:
 75408 rstack EAX,EBP:2
 75412 lneg EAX
 75414 mov EBX,EAX
// if (!fIP)
 75416 cmp 0,EBX
 75419 jge 75427
 75422 mov EAX,0
 75425 leave 
 75426 ret 
__3155:
__3153:
 75427 sstack EBP:-1,96294
__3157:
 75432 rstack EAX,EBP:-1
 75436 mov EBX,97268
 75439 sub EBX,EAX
 75441 fsgn EBX,EBX
 75443 max EBX,0
// if (ptr<func_table_end
 75446 cmp 0,EBX
 75449 jz 75508
__3159:
 75452 rstack EAX,EBP:-1
 75456 add EAX,0
 75459 mov EBX,EAX
 75461 rstack EAX,EBP:2
 75465 sub EAX,#EBX
 75467 mov EBX,EAX
 75469 fabs EBX,EBX
 75471 fsgn EBX,EBX
 75473 lneg EBX
// if (ptr[0]==fIP)
 75475 cmp 0,EBX
 75478 jge 75494
 75481 rstack EAX,EBP:-1
 75485 add EAX,1
 75488 mov EBX,EAX
 75490 mov EAX,#EBX
 75492 leave 
 75493 ret 
__3160:
__3158:
 75494 rstack EAX,EBP:-1
// ptr+=2
 75498 add EAX,2
 75501 sstack EBP:-1,EAX
 75505 jmp 75432
__3156:
 75508 mov EAX,0
 75511 leave 
 75512 ret 
__3151:
 75513 leave 
 75514 ret 
getVarName:
// getVarName(vIP)
 75515 enter 1
__3162:
__3164:
 75518 rstack EAX,EBP:2
 75522 lneg EAX
 75524 mov EBX,EAX
// if (!vIP)
 75526 cmp 0,EBX
 75529 jge 75537
 75532 mov EAX,0
 75535 leave 
 75536 ret 
__3165:
__3163:
 75537 sstack EBP:-1,97268
__3167:
 75542 rstack EAX,EBP:-1
 75546 mov EBX,97392
 75549 sub EBX,EAX
 75551 fsgn EBX,EBX
 75553 max EBX,0
// if (ptr<var_table_end
 75556 cmp 0,EBX
 75559 jz 75618
__3169:
 75562 rstack EAX,EBP:-1
 75566 add EAX,0
 75569 mov EBX,EAX
 75571 rstack EAX,EBP:2
 75575 sub EAX,#EBX
 75577 mov EBX,EAX
 75579 fabs EBX,EBX
 75581 fsgn EBX,EBX
 75583 lneg EBX
// if (ptr[0]==vIP)
 75585 cmp 0,EBX
 75588 jge 75604
 75591 rstack EAX,EBP:-1
 75595 add EAX,1
 75598 mov EBX,EAX
 75600 mov EAX,#EBX
 75602 leave 
 75603 ret 
__3170:
__3168:
 75604 rstack EAX,EBP:-1
// ptr+=2
 75608 add EAX,2
 75611 sstack EBP:-1,EAX
 75615 jmp 75542
__3166:
 75618 mov EAX,0
 75621 leave 
 75622 ret 
__3161:
 75623 leave 
 75624 ret 
getSymbolName:
// getSymbolName(sIP)
 75625 enter 1
__3172:
 75628 rstack EAX,EBP:2
// getFuncName arg #1 (float fIP)
 75632 push EAX
 75634 mov ECX,1
// getFuncName(...)
 75637 call 75405
 75640 add ESP,1
 75643 sstack EBP:-1,EAX
__3174:
 75647 rstack EAX,EBP:-1
 75651 lneg EAX
 75653 mov EBX,EAX
// if (!name)
 75655 cmp 0,EBX
 75658 jge 75680
 75661 rstack EAX,EBP:2
// getVarName arg #1 (float vIP)
 75665 push EAX
 75667 mov ECX,1
// getVarName(...)
 75670 call 75515
 75673 add ESP,1
// name=getVarName(sIP)
 75676 sstack EBP:-1,EAX
__3175:
__3173:
 75680 rstack EAX,EBP:-1
 75684 leave 
 75685 ret 
__3171:
 75686 leave 
 75687 ret 
findSymbolByName:
// findSymbolByName(name)
 75688 enter 1
__3177:
 75691 rstack EAX,EBP:2
 75695 push EAX
 75697 mov ECX,1
// findFuncByName(...)
 75700 call 75758
 75703 add ESP,1
 75706 sstack EBP:-1,EAX
__3179:
 75710 rstack EAX,EBP:-1
 75714 mov EBX,-1
 75717 sub EBX,EAX
 75719 fabs EBX,EBX
 75721 fsgn EBX,EBX
 75723 lneg EBX
// if (def==-1)
 75725 cmp 0,EBX
 75728 jge 75750
 75731 rstack EAX,EBP:2
 75735 push EAX
 75737 mov ECX,1
// findVarByName(...)
 75740 call 75871
 75743 add ESP,1
// def=findVarByName(name)
 75746 sstack EBP:-1,EAX
__3180:
__3178:
 75750 rstack EAX,EBP:-1
 75754 leave 
 75755 ret 
__3176:
 75756 leave 
 75757 ret 
findFuncByName:
// findFuncByName(name)
 75758 enter 2
__3182:
 75761 sstack EBP:-1,96294
__3184:
 75766 rstack EAX,EBP:-1
 75770 mov EBX,97268
 75773 sub EBX,EAX
 75775 fsgn EBX,EBX
 75777 max EBX,0
// if (ptr<func_table_end
 75780 cmp 0,EBX
 75783 jz 75864
 75786 rstack EAX,EBP:-1
 75790 add EAX,1
 75793 mov EBX,EAX
 75795 sstack EBP:-2,#EBX
__3186:
 75799 rstack EAX,EBP:2
// strcmp arg #2 (char* dest)
 75803 push EAX
 75805 rstack EAX,EBP:-2
// strcmp arg #1 (char* src)
 75809 push EAX
 75811 mov ECX,2
// strcmp(...)
 75814 call 10763
 75817 add ESP,2
 75820 mov EBX,0
 75823 sub EBX,EAX
 75825 fabs EBX,EBX
 75827 fsgn EBX,EBX
 75829 lneg EBX
// if (strcmp(name2,name)==0)
 75831 cmp 0,EBX
 75834 jge 75850
 75837 rstack EAX,EBP:-1
 75841 add EAX,0
 75844 mov EBX,EAX
 75846 mov EAX,#EBX
 75848 leave 
 75849 ret 
__3187:
__3185:
 75850 rstack EAX,EBP:-1
// ptr+=2
 75854 add EAX,2
 75857 sstack EBP:-1,EAX
 75861 jmp 75766
__3183:
 75864 mov EAX,-1
 75867 leave 
 75868 ret 
__3181:
 75869 leave 
 75870 ret 
findVarByName:
// findVarByName(name)
 75871 enter 2
__3189:
 75874 sstack EBP:-1,97268
__3191:
 75879 rstack EAX,EBP:-1
 75883 mov EBX,97392
 75886 sub EBX,EAX
 75888 fsgn EBX,EBX
 75890 max EBX,0
// if (ptr<var_table_end
 75893 cmp 0,EBX
 75896 jz 75977
 75899 rstack EAX,EBP:-1
 75903 add EAX,1
 75906 mov EBX,EAX
 75908 sstack EBP:-2,#EBX
__3193:
 75912 rstack EAX,EBP:2
// strcmp arg #2 (char* dest)
 75916 push EAX
 75918 rstack EAX,EBP:-2
// strcmp arg #1 (char* src)
 75922 push EAX
 75924 mov ECX,2
// strcmp(...)
 75927 call 10763
 75930 add ESP,2
 75933 mov EBX,0
 75936 sub EBX,EAX
 75938 fabs EBX,EBX
 75940 fsgn EBX,EBX
 75942 lneg EBX
// if (strcmp(name2,name)==0)
 75944 cmp 0,EBX
 75947 jge 75963
 75950 rstack EAX,EBP:-1
 75954 add EAX,0
 75957 mov EBX,EAX
 75959 mov EAX,#EBX
 75961 leave 
 75962 ret 
__3194:
__3192:
 75963 rstack EAX,EBP:-1
// ptr+=2
 75967 add EAX,2
 75970 sstack EBP:-1,EAX
 75974 jmp 75879
__3190:
 75977 mov EAX,-1
 75980 leave 
 75981 ret 
__3188:
 75982 leave 
 75983 ret 
libmarker21:
 75984 db 0
overstack_init:
// overstack_init()
 75985 enter -0
__3196:
// malloc arg #1 (float n)
 75988 push #32206
 75991 mov ECX,1
// malloc(...)
 75994 call 29334
 75997 add ESP,1
// overstack_func_stack=malloc(sizeof_vector)
 76000 mov #77223,EAX
// vector_constructor arg #2 (float element_size)
 76003 push 1
// vector_constructor arg #1 (void* self)
 76006 push #77223
 76009 mov ECX,2
// vector_constructor(...)
 76012 call 32207
 76015 add ESP,2
__3195:
 76018 leave 
 76019 ret 
overstack_fenter:
// overstack_fenter(name)
 76020 enter 1
__3198:
__3200:
 76023 mov EAX,0
 76026 sub EAX,#77223
 76029 fabs EAX,EAX
 76031 fsgn EAX,EAX
 76033 lneg EAX
// if (overstack_func_stack==0)
 76035 cmp 0,EAX
 76038 jge 76046
 76041 mov EAX,0
 76044 leave 
 76045 ret 
__3201:
__3199:
 76046 rstack EAX,EBP:2
// vector_push arg #2 (void* element)
 76050 push EAX
// vector_push arg #1 (void* self)
 76052 push #77223
 76055 mov ECX,2
// vector_push(...)
 76058 call 32926
 76061 add ESP,2
// vector_size arg #1 (void* self)
 76064 push #77223
 76067 mov ECX,1
// vector_size(...)
 76070 call 33515
 76073 add ESP,1
 76076 sstack EBP:-1,EAX
 76080 rstack EAX,EBP:-1
 76084 leave 
 76085 ret 
__3197:
 76086 leave 
 76087 ret 
overstack_fexit:
// overstack_fexit(name,pos)
 76088 enter 4
__3203:
__3205:
 76091 mov EAX,0
 76094 sub EAX,#77223
 76097 fabs EAX,EAX
 76099 fsgn EAX,EAX
 76101 lneg EAX
// if (overstack_func_stack==0)
 76103 cmp 0,EAX
 76106 jge 76114
 76109 mov EAX,0
 76112 leave 
 76113 ret 
__3206:
__3204:
// vector_size arg #1 (void* self)
 76114 push #77223
 76117 mov ECX,1
// vector_size(...)
 76120 call 33515
 76123 add ESP,1
 76126 sstack EBP:-1,EAX
 76130 rstack EAX,EBP:-1
 76134 add EAX,-1
 76137 mov EBX,EAX
 76139 sstack EBP:-2,EBX
__3208:
 76143 rstack EAX,EBP:3
 76147 rstack EBX,EBP:-2
 76151 sub EBX,EAX
 76153 mov EAX,EBX
 76155 fsgn EAX,EAX
 76157 inc EAX
 76159 max EAX,0
// if (pos<=last)
 76162 cmp 0,EAX
 76165 jge 76365
__3211:
 76168 rstack EAX,EBP:3
 76172 rstack EBX,EBP:-2
 76176 sub EBX,EAX
 76178 mov EAX,EBX
 76180 fabs EAX,EAX
 76182 fsgn EAX,EAX
 76184 lneg EAX
// if (pos==last)
 76186 cmp 0,EAX
 76189 jge 76303
 76192 rstack EAX,EBP:3
// vector_get arg #3 (float pos)
 76196 push EAX
// vector_get arg #2 (void* element)
 76198 push 0
// vector_get arg #1 (void* self)
 76201 push #77223
 76204 mov ECX,3
// vector_get(...)
 76207 call 33598
 76210 add ESP,3
 76213 sstack EBP:-3,EAX
__3214:
 76217 rstack EAX,EBP:2
 76221 rstack EBX,EBP:-3
 76225 sub EBX,EAX
 76227 mov EAX,EBX
 76229 fabs EAX,EAX
 76231 fsgn EAX,EAX
 76233 lneg EAX
// if (name==name2)
 76235 cmp 0,EAX
 76238 jge 76261
// vector_pop arg #1 (void* self)
 76241 push #77223
 76244 mov ECX,1
// vector_pop(...)
 76247 call 33276
 76250 add ESP,1
 76253 mov EAX,0
 76256 leave 
 76257 ret 
 76258 jmp 76300
__3216:
__3215:
__3218:
 76261 rstack EAX,EBP:-3
// printf arg #4 (unknown)
 76265 push EAX
 76267 rstack EAX,EBP:2
// printf arg #3 (unknown)
 76271 push EAX
// printf arg #2 (unknown)
 76273 push 900
// printf arg #1 (char* format)
 76276 push 76545
 76279 mov ECX,4
// printf(...)
 76282 call 21851
 76285 add ESP,4
 76288 push 76522
 76291 mov ECX,1
// overstack_error(...)
 76294 call 76592
 76297 add ESP,1
__3217:
__3213:
 76300 jmp 76362
__3221:
__3212:
__3223:
 76303 rstack EAX,EBP:3
 76307 neg EAX
 76309 mov EBX,EAX
 76311 rstack EAX,EBP:-2
 76315 add EAX,EBX
 76317 mov EBX,EAX
 76319 sstack EBP:-4,EBX
 76323 rstack EAX,EBP:-4
// printf arg #4 (unknown)
 76327 push EAX
 76329 rstack EAX,EBP:2
// printf arg #3 (unknown)
 76333 push EAX
// printf arg #2 (unknown)
 76335 push 900
// printf arg #1 (char* format)
 76338 push 76467
 76341 mov ECX,4
// printf(...)
 76344 call 21851
 76347 add ESP,4
 76350 push 76522
 76353 mov ECX,1
// overstack_error(...)
 76356 call 76592
 76359 add ESP,1
__3222:
__3210:
 76362 jmp 76410
__3225:
__3209:
__3227:
 76365 rstack EAX,EBP:-2
// printf arg #5 (unknown)
 76369 push EAX
 76371 rstack EAX,EBP:3
// printf arg #4 (unknown)
 76375 push EAX
 76377 rstack EAX,EBP:2
// printf arg #3 (unknown)
 76381 push EAX
// printf arg #2 (unknown)
 76383 push 900
// printf arg #1 (char* format)
 76386 push 76412
 76389 mov ECX,5
// printf(...)
 76392 call 21851
 76395 add ESP,5
 76398 push 76522
 76401 mov ECX,1
// overstack_error(...)
 76404 call 76592
 76407 add ESP,1
__3226:
__3207:
__3202:
 76410 leave 
 76411 ret 
__3228:
 76412 db "mErr: func [%s] exited with pos %d but last pos is %d
",0
__3224:
 76467 db "%mErr: func [%s] exited but [%d] more funcs are above
",0
__3220:
 76522 db "function exit misfile
",0
__3219:
 76545 db "%mErr: func [%s] exited but last func is [%s]
",0
overstack_error:
// overstack_error(str)
 76592 enter -0
__3230:
// printf arg #1 (char* format)
 76595 push 76615
 76598 mov ECX,1
// printf(...)
 76601 call 21851
 76604 add ESP,1
 76607 mov ECX,0
// panic(...)
 76610 call 96246
__3229:
 76613 leave 
 76614 ret 
__3231:
 76615 db "%mErr:overstack:%s",0
overstack_trace:
// overstack_trace()
 76634 enter 3
__3233:
__3235:
 76637 mov EAX,0
 76640 sub EAX,#77223
 76643 fabs EAX,EAX
 76645 fsgn EAX,EAX
 76647 lneg EAX
// if (overstack_func_stack==0)
 76649 cmp 0,EAX
 76652 jge 76660
 76655 mov EAX,0
 76658 leave 
 76659 ret 
__3236:
__3234:
// vector_size arg #1 (void* self)
 76660 push #77223
 76663 mov ECX,1
// vector_size(...)
 76666 call 33515
 76669 add ESP,1
 76672 sstack EBP:-1,EAX
 76676 rstack EAX,EBP:-1
 76680 add EAX,-1
 76683 mov EBX,EAX
 76685 sstack EBP:-2,EBX
__3238:
 76689 rstack EAX,EBP:-2
// if (I
 76693 cmp 0,EAX
 76696 jz 76761
 76699 rstack EAX,EBP:-2
// vector_get arg #3 (float pos)
 76703 push EAX
// vector_get arg #2 (void* element)
 76705 push 0
// vector_get arg #1 (void* self)
 76708 push #77223
 76711 mov ECX,3
// vector_get(...)
 76714 call 33598
 76717 add ESP,3
 76720 sstack EBP:-3,EAX
 76724 rstack EAX,EBP:-3
// printf arg #3 (unknown)
 76728 push EAX
 76730 rstack EAX,EBP:-2
// printf arg #2 (unknown)
 76734 push EAX
// printf arg #1 (char* format)
 76736 push 76763
 76739 mov ECX,3
// printf(...)
 76742 call 21851
 76745 add ESP,3
 76748 rstack EAX,EBP:-2
// I--
 76752 dec EAX
 76754 sstack EBP:-2,EAX
 76758 jmp 76689
__3237:
__3232:
 76761 leave 
 76762 ret 
__3239:
 76763 db "%d: %s
",0
libmarker22:
 76771 db 0
 76772 alloc 128
all_globals:
cs_last_x:
 76900 db 29
cs_last_y:
 76901 db 17
printScrX:
 76902 db 0
printScrY:
 76903 db 0
AdrScreen:
 76904 alloc 1
screen_print_x_min:
 76905 db 0
screen_print_y_min:
 76906 db 0
screen_print_x_max:
 76907 db 0
screen_print_y_max:
 76908 db 0
LIBSTRING_VARS:
c2str_str:
 76909 alloc 2
Constr:
 76911 alloc 256
Nbase:
 77167 db 10
Nprec:
 77168 db 3
Nstack:
 77169 alloc 16
Array:
 77185 alloc 16
ZMALLOC_VARS:
malloc_debug:
 77201 db 0
malloc_print:
 77202 db 0
malloc_num2str:
 77203 db 0
malloc_disk:
 77204 alloc 1
malloc_max_disk:
 77205 alloc 1
malloc_header:
 77206 alloc 1
malloc_user:
 77207 alloc 1
lastFreeAllocation:
 77208 db 1
malloc_debug_iters:
 77209 db 0
page_allocator_disk:
 77210 db 0
page_allocator_size:
 77211 db 0
palloc_vpagemap:
 77212 alloc 10
ptrKB:
 77222 alloc 1
overstack_func_stack:
 77223 db 0
main_globals:
EBcb_1:
 77224 alloc 50
EB_Addr_Screen:
 77274 db 0
timerPeriod:
 77275 db 0
timerLogicTimeout:
 77276 db 0
v_proclist:
 77277 db 0
proclist_I:
 77278 db 0
switcherOn:
 77279 db 0
k_page_manager:
 77280 db 0
threadExit_ebp:
 77281 db 0
threadExit_esp:
 77282 db 0
threadExit_pos:
 77283 db 0
strbuff:
 77284 alloc 80
trans_buffer:
 77364 alloc 10
main_globals_end:
 77374 db 0
 77375 alloc 128
stack_buffer:
 77503 alloc 12800
stack_buffer_end:
 90303 db 0
 90304 alloc 128
trap_unmapped:
 90432 int 41
trap_unmapped_end:
 90435 db 0
main:
// main()
 90436 enter 1
__3241:
 90439 push 77374
 90442 push 77224
 90445 mov ECX,2
// clear_globals(...)
 90448 call 90739
 90451 add ESP,2
 90454 mov ECX,0
// libconsolescreen_init(...)
 90457 call 17283
// EBcb_constructor arg #1 (float this)
 90460 push 77224
 90463 mov ECX,1
// EBcb_constructor(...)
 90466 call 19785
 90469 add ESP,1
// EBcb_get_entry arg #2 (float num)
 90472 push 0
// EBcb_get_entry arg #1 (float this)
 90475 push 77224
 90478 mov ECX,2
// EBcb_get_entry(...)
 90481 call 19880
 90484 add ESP,2
 90487 sstack EBP:-1,EAX
// EBcb_entry_set_addr arg #2 (float val)
 90491 push 1048576
 90494 rstack EAX,EBP:-1
// EBcb_entry_set_addr arg #1 (float this)
 90498 push EAX
 90500 mov ECX,2
// EBcb_entry_set_addr(...)
 90503 call 19660
 90506 add ESP,2
// EBcb_autoconf arg #1 (float this)
 90509 push 77224
 90512 mov ECX,1
// EBcb_autoconf(...)
 90515 call 20235
 90518 add ESP,1
// EBcb_device_bind_addr arg #4 (float res)
 90521 push 77274
// EBcb_device_bind_addr arg #3 (float user)
 90524 push 1
// EBcb_device_bind_addr arg #2 (float type)
 90527 push 11
// EBcb_device_bind_addr arg #1 (float this)
 90530 push 77224
 90533 mov ECX,4
// EBcb_device_bind_addr(...)
 90536 call 21203
 90539 add ESP,4
__3243:
 90542 mov EAX,#77274
 90545 lneg EAX
// if (!EB_Addr_Screen)
 90547 cmp 0,EAX
 90550 jge 90565
 90553 push 32
 90556 mov ECX,1
// error(...)
 90559 call 96263
 90562 add ESP,1
__3244:
__3242:
// screen_set arg #1 (float scr)
 90565 push #77274
 90568 mov ECX,1
// screen_set(...)
 90571 call 18052
 90574 add ESP,1
 90577 mov ECX,0
// kernel_thread(...)
 90580 call 90913
__3240:
 90583 leave 
 90584 ret 
set_trampoline:
// set_trampoline(dest_start,dest_end,trp_start,trp_end)
 90585 enter 4
__3246:
 90588 rstack EAX,EBP:4
 90592 neg EAX
 90594 mov EBX,EAX
 90596 rstack EAX,EBP:5
 90600 add EAX,EBX
 90602 mov EBX,EAX
 90604 sstack EBP:-1,EBX
 90608 rstack EAX,EBP:2
 90612 neg EAX
 90614 mov EBX,EAX
 90616 rstack EAX,EBP:3
 90620 add EAX,EBX
 90622 mov EBX,EAX
 90624 sstack EBP:-2,EBX
 90628 rstack EAX,EBP:-1
 90632 rstack EBX,EBP:-2
 90636 div EBX,EAX
 90638 mov EAX,EBX
// floor arg #1 (float A)
 90640 push EAX
 90642 mov ECX,1
// floor(...)
 90645 call 31069
 90648 add ESP,1
 90651 sstack EBP:-3,EAX
// init loop
 90655 sstack EBP:-4,0
__3248:
 90660 rstack EAX,EBP:-4
 90664 rstack EBX,EBP:-3
 90668 sub EBX,EAX
 90670 mov EAX,EBX
 90672 fsgn EAX,EAX
// condition
 90674 max EAX,0
 90677 cmp 0,EAX
 90680 jz 90737
 90683 rstack EAX,EBP:-1
// memcpy arg #3 (float n)
 90687 push EAX
 90689 rstack EAX,EBP:4
// memcpy arg #2 (void* src)
 90693 push EAX
 90695 rstack EAX,EBP:2
// memcpy arg #1 (void* dest)
 90699 push EAX
 90701 mov ECX,3
// memcpy(...)
 90704 call 10355
 90707 add ESP,3
 90710 rstack EAX,EBP:-1
 90714 rstack EBX,EBP:2
// dest_start+=trp_len
 90718 add EBX,EAX
 90720 sstack EBP:2,EBX
 90724 rstack EAX,EBP:-4
// loop step
 90728 inc EAX
 90730 sstack EBP:-4,EAX
 90734 jmp 90660
__3247:
__3245:
 90737 leave 
 90738 ret 
clear_globals:
// clear_globals(start,end)
 90739 enter 1
__3250:
 90742 rstack EAX,EBP:2
// init loop
 90746 sstack EBP:-1,EAX
__3252:
 90750 rstack EAX,EBP:-1
 90754 rstack EBX,EBP:3
 90758 sub EBX,EAX
 90760 mov EAX,EBX
 90762 fsgn EAX,EAX
// condition
 90764 max EAX,0
 90767 cmp 0,EAX
 90770 jz 90793
 90773 rstack EAX,EBP:-1
// *I=0
 90777 mov #EAX,0
 90780 rstack EAX,EBP:-1
// loop step
 90784 inc EAX
 90786 sstack EBP:-1,EAX
 90790 jmp 90750
__3251:
__3249:
 90793 leave 
 90794 ret 
kprints:
// kprints(s)
 90795 enter -0
__3254:
 90798 push 0
 90801 push 0
 90804 rstack EAX,EBP:2
 90808 push EAX
 90810 push 1
 90813 mov ECX,4
// kcall(...)
 90816 call 95806
 90819 add ESP,4
__3253:
 90822 leave 
 90823 ret 
kprintn:
// kprintn(n)
 90824 enter -0
__3256:
 90827 push 0
 90830 push 0
 90833 rstack EAX,EBP:2
 90837 push EAX
 90839 push 2
 90842 mov ECX,4
// kcall(...)
 90845 call 95806
 90848 add ESP,4
__3255:
 90851 leave 
 90852 ret 
kprintf:
// kprintf(fmt)
 90853 enter 2
__3258:
 90856 sstack EBP:-1,ECX
 90860 mov EAX,SS:ESP
 90863 add EAX,2
 90866 push EAX
 90868 mov ECX,1
// va_start(...)
 90871 call 10002
 90874 add ESP,1
 90877 sstack EBP:-2,EAX
 90881 rstack EAX,EBP:-2
 90885 push EAX
 90887 rstack EAX,EBP:-1
 90891 push EAX
 90893 rstack EAX,EBP:2
 90897 push EAX
 90899 push 3
 90902 mov ECX,4
// kcall(...)
 90905 call 95806
 90908 add ESP,4
__3257:
 90911 leave 
 90912 ret 
kernel_thread:
// kernel_thread()
 90913 enter 6
__3260:
 90916 mov ECX,0
// screen_clear(...)
 90919 call 18064
// printf arg #2 (unknown)
 90922 push 191
// printf arg #1 (char* format)
 90925 push 91435
 90928 mov ECX,2
// printf(...)
 90931 call 21851
 90934 add ESP,2
// malloc_set_disk arg #2 (float disk_size)
 90937 push 500000
// malloc_set_disk arg #1 (float* disk)
 90940 push 105195
 90943 mov ECX,2
// malloc_set_disk(...)
 90946 call 27637
 90949 add ESP,2
 90952 mov ECX,0
// malloc_init(...)
 90955 call 27668
// printf arg #2 (unknown)
 90958 push 105195
// printf arg #1 (char* format)
 90961 push 91370
 90964 mov ECX,2
// printf(...)
 90967 call 21851
 90970 add ESP,2
// malloc arg #1 (float n)
 90973 push 100
 90976 mov ECX,1
// malloc(...)
 90979 call 29334
 90982 add ESP,1
 90985 sstack EBP:-1,EAX
 90989 rstack EAX,EBP:-1
// printf arg #2 (unknown)
 90993 push EAX
// printf arg #1 (char* format)
 90995 push 91352
 90998 mov ECX,2
// printf(...)
 91001 call 21851
 91004 add ESP,2
// printf arg #1 (char* format)
 91007 push 91407
 91010 mov ECX,1
// printf(...)
 91013 call 21851
 91016 add ESP,1
 91019 sstack EBP:-2,32
 91024 sstack EBP:-3,96
 91029 rstack EAX,EBP:-2
// initInterrupts arg #5 (float flags)
 91033 push EAX
// initInterrupts arg #4 (float handler)
 91035 push 94600
// initInterrupts arg #3 (float size)
 91038 push 50
// initInterrupts arg #2 (float first)
 91041 push 2
// initInterrupts arg #1 (float IT)
 91044 push 1280
 91047 mov ECX,5
// initInterrupts(...)
 91050 call 35495
 91053 add ESP,5
 91056 rstack EAX,EBP:-2
// addInterruptHandler arg #4 (float flags)
 91060 push EAX
// addInterruptHandler arg #3 (float func)
 91062 push 93894
// addInterruptHandler arg #2 (float num)
 91065 push 40
// addInterruptHandler arg #1 (float IT)
 91068 push 1280
 91071 mov ECX,4
// addInterruptHandler(...)
 91074 call 35590
 91077 add ESP,4
// printf arg #1 (char* format)
 91080 push 91459
 91083 mov ECX,1
// printf(...)
 91086 call 21851
 91089 add ESP,1
 91092 mov ECX,0
// protect_kernel_pages(...)
 91095 call 92020
 91098 cpuset 69,1
 91102 stef 
 91103 stm 
// printf arg #1 (char* format)
 91104 push 91520
 91107 mov ECX,1
// printf(...)
 91110 call 21851
 91113 add ESP,1
// printf arg #1 (char* format)
 91116 push 42383
 91119 mov ECX,1
// printf(...)
 91122 call 21851
 91125 add ESP,1
// printf arg #1 (char* format)
 91128 push 91488
 91131 mov ECX,1
// printf(...)
 91134 call 21851
 91137 add ESP,1
 91140 sstack EBP:-4,12800
 91145 rstack EAX,EBP:-4
// malloc arg #1 (float n)
 91149 push EAX
 91151 mov ECX,1
// malloc(...)
 91154 call 29334
 91157 add ESP,1
 91160 sstack EBP:-5,EAX
 91164 rstack EAX,EBP:-4
// palloc_set_disk arg #2 (float size)
 91168 push EAX
 91170 rstack EAX,EBP:-5
// palloc_set_disk arg #1 (float disk)
 91174 push EAX
 91176 mov ECX,2
// palloc_set_disk(...)
 91179 call 25494
 91182 add ESP,2
 91185 mov ECX,0
// palloc_init(...)
 91188 call 25598
// printf arg #1 (char* format)
 91191 push 42383
 91194 mov ECX,1
// printf(...)
 91197 call 21851
 91200 add ESP,1
// printf arg #1 (char* format)
 91203 push 91295
 91206 mov ECX,1
// printf(...)
 91209 call 21851
 91212 add ESP,1
 91215 mov ECX,0
// overstack_init(...)
 91218 call 75985
// printf arg #1 (char* format)
 91221 push 42383
 91224 mov ECX,1
// printf(...)
 91227 call 21851
 91230 add ESP,1
// printf arg #1 (char* format)
 91233 push 91333
 91236 mov ECX,1
// printf(...)
 91239 call 21851
 91242 add ESP,1
 91245 mov ECX,0
// init_shell2(...)
 91248 call 45749
 91251 sstack EBP:-6,EAX
 91255 rstack EAX,EBP:-6
// shell2_open arg #1 (float self)
 91259 push EAX
 91261 mov ECX,1
// shell2_open(...)
 91264 call 47402
 91267 add ESP,1
// printf arg #1 (char* format)
 91270 push 91313
 91273 mov ECX,1
// printf(...)
 91276 call 21851
 91279 add ESP,1
__3272:
// if (1
 91282 cmp 0,1
 91286 jz 91293
 91289 nop 
 91290 jmp 91282
__3271:
__3259:
 91293 leave 
 91294 ret 
__3268:
 91295 db "overstack init...",0
__3270:
 91313 db "...back to kernel.
",0
__3269:
 91333 db "starting shell...
",0
__3263:
 91352 db "malloc(100) = %d
",0
__3262:
 91370 db "malloc initialized (heap disk = %d)
",0
__3264:
 91407 db "initializing interrupts...
",0
__3261:
 91435 db "%mHello World! I am OS
",0
__3265:
 91459 db "engaging page protection...
",0
__3267:
 91488 db "initializing page allocator...
",0
__3266:
 91520 db "paging is on.
",0
exec_test:
// exec_test(buff)
 91535 enter 2
__3274:
 91538 sstack EBP:-1,4
 91543 sstack EBP:-2,0
 91548 rstack EAX,EBP:-1
// printf arg #2 (unknown)
 91552 push EAX
// printf arg #1 (char* format)
 91554 push 91673
 91557 mov ECX,2
// printf(...)
 91560 call 21851
 91563 add ESP,2
// printf arg #1 (char* format)
 91566 push 91656
 91569 mov ECX,1
// printf(...)
 91572 call 21851
 91575 add ESP,1
 91578 rstack EAX,EBP:-1
// memcpy arg #3 (float n)
 91582 push EAX
// memcpy arg #2 (void* src)
 91584 push 91737
 91587 rstack EAX,EBP:2
// memcpy arg #1 (void* dest)
 91591 push EAX
 91593 mov ECX,3
// memcpy(...)
 91596 call 10355
 91599 add ESP,3
// printf arg #1 (char* format)
 91602 push 91701
 91605 mov ECX,1
// printf(...)
 91608 call 21851
 91611 add ESP,1
 91614 mov EAX,0
 91617 mov ECX,0
 91620 rstack EAX,EBP:2
// buff(...)
 91624 call EAX
// x=buff()
 91626 sstack EBP:-2,EAX
 91630 rstack EAX,EBP:-2
// printf arg #2 (unknown)
 91634 push EAX
// printf arg #1 (char* format)
 91636 push 91718
 91639 mov ECX,2
// printf(...)
 91642 call 21851
 91645 add ESP,2
 91648 rstack EAX,EBP:-2
 91652 leave 
 91653 ret 
__3273:
 91654 leave 
 91655 ret 
__3276:
 91656 db "copying code...
",0
__3275:
 91673 db "exec code size is %d bytes
",0
__3277:
 91701 db "calling code...
",0
__3278:
 91718 db "code returned %d.
",0
exec_test_code:
 91737 mov EAX,1
 91740 ret 
exec_test_code_end:
 91741 db 0
write_test:
// write_test(func)
 91742 enter 1
__3280:
 91745 rstack EAX,EBP:2
 91749 add EAX,0
 91752 mov EBX,EAX
 91754 sstack EBP:-1,#EBX
 91758 rstack EAX,EBP:-1
// printf arg #2 (unknown)
 91762 push EAX
// printf arg #1 (char* format)
 91764 push 91933
 91767 mov ECX,2
// printf(...)
 91770 call 21851
 91773 add ESP,2
 91776 mov EAX,0
 91779 add EAX,90853
// kprintf[0]=0
 91782 mov #EAX,0
__3283:
 91785 mov EAX,0
 91788 add EAX,90853
 91791 mov EBX,0
 91794 sub EBX,#EAX
 91796 fabs EBX,EBX
 91798 fsgn EBX,EBX
 91800 lneg EBX
// if (kprintf[0]==0)
 91802 cmp 0,EBX
 91805 jge 91823
// printf arg #1 (char* format)
 91808 push 91954
 91811 mov ECX,1
// printf(...)
 91814 call 21851
 91817 add ESP,1
 91820 jmp 91884
__3286:
__3284:
__3288:
__3290:
 91823 mov EAX,0
 91826 add EAX,90853
 91829 rstack EBX,EBP:-1
 91833 sub EBX,#EAX
 91835 mov EAX,EBX
 91837 fabs EAX,EAX
 91839 fsgn EAX,EAX
 91841 lneg EAX
// if (kprintf[0]==x)
 91843 cmp 0,EAX
 91846 jge 91864
// printf arg #1 (char* format)
 91849 push 91986
 91852 mov ECX,1
// printf(...)
 91855 call 21851
 91858 add ESP,1
 91861 jmp 91884
__3293:
__3291:
__3295:
 91864 mov EAX,0
 91867 add EAX,90853
// printf arg #2 (unknown)
 91870 push #EAX
// printf arg #1 (char* format)
 91872 push 91886
 91875 mov ECX,2
// printf(...)
 91878 call 21851
 91881 add ESP,2
__3294:
__3289:
__3287:
__3282:
__3279:
 91884 leave 
 91885 ret 
__3296:
 91886 db "write test failed mysteriously (kprintf = %d)
",0
__3281:
 91933 db "write test (x = %d)
",0
__3285:
 91954 db "write test failed (full write)
",0
__3292:
 91986 db "write test failed (but no write)
",0
protect_kernel_pages:
// protect_kernel_pages()
 92020 enter 5
__3298:
// malloc arg #1 (float n)
 92023 push #73878
 92026 mov ECX,1
// malloc(...)
 92029 call 29334
 92032 add ESP,1
 92035 sstack EBP:-1,EAX
 92039 rstack EAX,EBP:-1
// page_manager_constructor arg #1 (float self)
 92043 push EAX
 92045 mov ECX,1
// page_manager_constructor(...)
 92048 call 73879
 92051 add ESP,1
 92054 rstack EAX,EBP:-1
// k_page_manager=PM
 92058 mov #77280,EAX
// page[0]=0
 92061 sstack EBP:-5,0
// page[1]=0
 92066 sstack EBP:-4,0
// setPageRunLevel arg #2 (float level)
 92071 push 1
 92074 mov EAX,SS:ESP
 92077 add EAX,-5
// setPageRunLevel arg #1 (float page)
 92080 push EAX
 92082 mov ECX,2
// setPageRunLevel(...)
 92085 call 37730
 92088 add ESP,2
// setPageFlags arg #2 (float flags)
 92091 push 64
 92094 mov EAX,SS:ESP
 92097 add EAX,-5
// setPageFlags arg #1 (float page)
 92100 push EAX
 92102 mov ECX,2
// setPageFlags(...)
 92105 call 37629
 92108 add ESP,2
// toPage arg #1 (float addr)
 92111 push 0
 92114 mov ECX,1
// toPage(...)
 92117 call 38079
 92120 add ESP,1
// pfrom=toPage(0)
 92123 sstack EBP:-2,EAX
// toPage arg #1 (float addr)
 92127 push 105195
 92130 mov ECX,1
// toPage(...)
 92133 call 38079
 92136 add ESP,1
// pto=toPage(heap)
 92139 sstack EBP:-3,EAX
 92143 rstack EAX,EBP:-3
// page_manager_assign_page_range arg #4 (float pn_to)
 92147 push EAX
 92149 rstack EAX,EBP:-2
// page_manager_assign_page_range arg #3 (float pn_from)
 92153 push EAX
 92155 mov EAX,SS:ESP
 92158 add EAX,-5
// page_manager_assign_page_range arg #2 (float page)
 92161 push EAX
 92163 rstack EAX,EBP:-1
// page_manager_assign_page_range arg #1 (float PM)
 92167 push EAX
 92169 mov ECX,4
// page_manager_assign_page_range(...)
 92172 call 74214
 92175 add ESP,4
// setPageFlags arg #2 (float flags)
 92178 push 128
 92181 mov EAX,SS:ESP
 92184 add EAX,-5
// setPageFlags arg #1 (float page)
 92187 push EAX
 92189 mov ECX,2
// setPageFlags(...)
 92192 call 37629
 92195 add ESP,2
// toPage arg #1 (float addr)
 92198 push 76900
 92201 mov ECX,1
// toPage(...)
 92204 call 38079
 92207 add ESP,1
// pfrom=toPage(all_globals)
 92210 sstack EBP:-2,EAX
// toPage arg #1 (float addr)
 92214 push 77374
 92217 mov ECX,1
// toPage(...)
 92220 call 38079
 92223 add ESP,1
// pto=toPage(main_globals_end)
 92226 sstack EBP:-3,EAX
 92230 rstack EAX,EBP:-3
// page_manager_assign_page_range arg #4 (float pn_to)
 92234 push EAX
 92236 rstack EAX,EBP:-2
// page_manager_assign_page_range arg #3 (float pn_from)
 92240 push EAX
 92242 mov EAX,SS:ESP
 92245 add EAX,-5
// page_manager_assign_page_range arg #2 (float page)
 92248 push EAX
 92250 rstack EAX,EBP:-1
// page_manager_assign_page_range arg #1 (float PM)
 92254 push EAX
 92256 mov ECX,4
// page_manager_assign_page_range(...)
 92259 call 74214
 92262 add ESP,4
// toPage arg #1 (float addr)
 92265 push 77503
 92268 mov ECX,1
// toPage(...)
 92271 call 38079
 92274 add ESP,1
// pfrom=toPage(stack_buffer)
 92277 sstack EBP:-2,EAX
// toPage arg #1 (float addr)
 92281 push 90303
 92284 mov ECX,1
// toPage(...)
 92287 call 38079
 92290 add ESP,1
// pto=toPage(stack_buffer_end)
 92293 sstack EBP:-3,EAX
 92297 rstack EAX,EBP:-3
// page_manager_assign_page_range arg #4 (float pn_to)
 92301 push EAX
 92303 rstack EAX,EBP:-2
// page_manager_assign_page_range arg #3 (float pn_from)
 92307 push EAX
 92309 mov EAX,SS:ESP
 92312 add EAX,-5
// page_manager_assign_page_range arg #2 (float page)
 92315 push EAX
 92317 rstack EAX,EBP:-1
// page_manager_assign_page_range arg #1 (float PM)
 92321 push EAX
 92323 mov ECX,4
// page_manager_assign_page_range(...)
 92326 call 74214
 92329 add ESP,4
 92332 mov EAX,SS:ESP
 92335 add EAX,-5
// page_manager_assign_default_page arg #2 (float page)
 92338 push EAX
 92340 rstack EAX,EBP:-1
// page_manager_assign_default_page arg #1 (float PM)
 92344 push EAX
 92346 mov ECX,2
// page_manager_assign_default_page(...)
 92349 call 73979
 92352 add ESP,2
// page[0]=0
 92355 sstack EBP:-5,0
// page[1]=0
 92360 sstack EBP:-4,0
// setPageRunLevel arg #2 (float level)
 92365 push 1
 92368 mov EAX,SS:ESP
 92371 add EAX,-5
// setPageRunLevel arg #1 (float page)
 92374 push EAX
 92376 mov ECX,2
// setPageRunLevel(...)
 92379 call 37730
 92382 add ESP,2
// setPageFlags arg #2 (float flags)
 92385 push 64
 92388 mov EAX,SS:ESP
 92391 add EAX,-5
// setPageFlags arg #1 (float page)
 92394 push EAX
 92396 mov ECX,2
// setPageFlags(...)
 92399 call 37629
 92402 add ESP,2
// toPage arg #1 (float addr)
 92405 push 1280
 92408 mov ECX,1
// toPage(...)
 92411 call 38079
 92414 add ESP,1
// pfrom=toPage(interruptTable)
 92417 sstack EBP:-2,EAX
 92421 rstack EAX,EBP:-2
 92425 add EAX,1
 92428 mov EBX,EAX
// pto=pfrom+1
 92430 sstack EBP:-3,EBX
 92434 rstack EAX,EBP:-3
// page_manager_assign_page_range arg #4 (float pn_to)
 92438 push EAX
 92440 rstack EAX,EBP:-2
// page_manager_assign_page_range arg #3 (float pn_from)
 92444 push EAX
 92446 mov EAX,SS:ESP
 92449 add EAX,-5
// page_manager_assign_page_range arg #2 (float page)
 92452 push EAX
 92454 rstack EAX,EBP:-1
// page_manager_assign_page_range arg #1 (float PM)
 92458 push EAX
 92460 mov ECX,4
// page_manager_assign_page_range(...)
 92463 call 74214
 92466 add ESP,4
// setPageRunLevel arg #2 (float level)
 92469 push 0
 92472 mov EAX,SS:ESP
 92475 add EAX,-5
// setPageRunLevel arg #1 (float page)
 92478 push EAX
 92480 mov ECX,2
// setPageRunLevel(...)
 92483 call 37730
 92486 add ESP,2
// setPageFlags arg #2 (float flags)
 92489 push 64
 92492 mov EAX,SS:ESP
 92495 add EAX,-5
// setPageFlags arg #1 (float page)
 92498 push EAX
 92500 mov ECX,2
// setPageFlags(...)
 92503 call 37629
 92506 add ESP,2
// toPage arg #1 (float addr)
 92509 push 93194
 92512 mov ECX,1
// toPage(...)
 92515 call 38079
 92518 add ESP,1
// pfrom=toPage(pg_int_handlers)
 92521 sstack EBP:-2,EAX
// toPage arg #1 (float addr)
 92525 push 95350
 92528 mov ECX,1
// toPage(...)
 92531 call 38079
 92534 add ESP,1
// pto=toPage(pg_int_handlers_end)
 92537 sstack EBP:-3,EAX
 92541 rstack EAX,EBP:-3
// page_manager_assign_page_range arg #4 (float pn_to)
 92545 push EAX
 92547 rstack EAX,EBP:-2
// page_manager_assign_page_range arg #3 (float pn_from)
 92551 push EAX
 92553 mov EAX,SS:ESP
 92556 add EAX,-5
// page_manager_assign_page_range arg #2 (float page)
 92559 push EAX
 92561 rstack EAX,EBP:-1
// page_manager_assign_page_range arg #1 (float PM)
 92565 push EAX
 92567 mov ECX,4
// page_manager_assign_page_range(...)
 92570 call 74214
 92573 add ESP,4
// setPageRunLevel arg #2 (float level)
 92576 push 0
 92579 mov EAX,SS:ESP
 92582 add EAX,-5
// setPageRunLevel arg #1 (float page)
 92585 push EAX
 92587 mov ECX,2
// setPageRunLevel(...)
 92590 call 37730
 92593 add ESP,2
// setPageFlags arg #2 (float flags)
 92596 push 64
 92599 mov EAX,SS:ESP
 92602 add EAX,-5
// setPageFlags arg #1 (float page)
 92605 push EAX
 92607 mov ECX,2
// setPageFlags(...)
 92610 call 37629
 92613 add ESP,2
// toPage arg #1 (float addr)
 92616 push 37415
 92619 mov ECX,1
// toPage(...)
 92622 call 38079
 92625 add ESP,1
// pfrom=toPage(pg_paging_control)
 92628 sstack EBP:-2,EAX
// toPage arg #1 (float addr)
 92632 push 37447
 92635 mov ECX,1
// toPage(...)
 92638 call 38079
 92641 add ESP,1
// pto=toPage(pg_paging_control_end)
 92644 sstack EBP:-3,EAX
 92648 rstack EAX,EBP:-3
// page_manager_assign_page_range arg #4 (float pn_to)
 92652 push EAX
 92654 rstack EAX,EBP:-2
// page_manager_assign_page_range arg #3 (float pn_from)
 92658 push EAX
 92660 mov EAX,SS:ESP
 92663 add EAX,-5
// page_manager_assign_page_range arg #2 (float page)
 92666 push EAX
 92668 rstack EAX,EBP:-1
// page_manager_assign_page_range arg #1 (float PM)
 92672 push EAX
 92674 mov ECX,4
// page_manager_assign_page_range(...)
 92677 call 74214
 92680 add ESP,4
// setPageRunLevel arg #2 (float level)
 92683 push 1
 92686 mov EAX,SS:ESP
 92689 add EAX,-5
// setPageRunLevel arg #1 (float page)
 92692 push EAX
 92694 mov ECX,2
// setPageRunLevel(...)
 92697 call 37730
 92700 add ESP,2
// setPageFlags arg #2 (float flags)
 92703 push 128
 92706 mov EAX,SS:ESP
 92709 add EAX,-5
// setPageFlags arg #1 (float page)
 92712 push EAX
 92714 mov ECX,2
// setPageFlags(...)
 92717 call 37629
 92720 add ESP,2
 92723 mov EAX,SS:ESP
 92726 add EAX,-5
// page_manager_assign_default_page arg #2 (float page)
 92729 push EAX
 92731 rstack EAX,EBP:-1
// page_manager_assign_default_page arg #1 (float PM)
 92735 push EAX
 92737 mov ECX,2
// page_manager_assign_default_page(...)
 92740 call 73979
 92743 add ESP,2
// setPageRunLevel arg #2 (float level)
 92746 push 0
 92749 mov EAX,SS:ESP
 92752 add EAX,-5
// setPageRunLevel arg #1 (float page)
 92755 push EAX
 92757 mov ECX,2
// setPageRunLevel(...)
 92760 call 37730
 92763 add ESP,2
// setPageFlags arg #2 (float flags)
 92766 push 64
 92769 mov EAX,SS:ESP
 92772 add EAX,-5
// setPageFlags arg #1 (float page)
 92775 push EAX
 92777 mov ECX,2
// setPageFlags(...)
 92780 call 37629
 92783 add ESP,2
// toPage arg #1 (float addr)
 92786 push 128
 92789 mov ECX,1
// toPage(...)
 92792 call 38079
 92795 add ESP,1
// pfrom=toPage(user_kernel_interface)
 92798 sstack EBP:-2,EAX
// toPage arg #1 (float addr)
 92802 push 424
 92805 mov ECX,1
// toPage(...)
 92808 call 38079
 92811 add ESP,1
// pto=toPage(user_ki_middle)
 92814 sstack EBP:-3,EAX
 92818 rstack EAX,EBP:-3
// page_manager_assign_page_range arg #4 (float pn_to)
 92822 push EAX
 92824 rstack EAX,EBP:-2
// page_manager_assign_page_range arg #3 (float pn_from)
 92828 push EAX
 92830 mov EAX,SS:ESP
 92833 add EAX,-5
// page_manager_assign_page_range arg #2 (float page)
 92836 push EAX
 92838 rstack EAX,EBP:-1
// page_manager_assign_page_range arg #1 (float PM)
 92842 push EAX
 92844 mov ECX,4
// page_manager_assign_page_range(...)
 92847 call 74214
 92850 add ESP,4
 92853 rstack EAX,EBP:-1
// page_manager_activate arg #1 (float PM)
 92857 push EAX
 92859 mov ECX,1
// page_manager_activate(...)
 92862 call 74558
 92865 add ESP,1
__3297:
 92868 leave 
 92869 ret 
init_ktimer:
// init_ktimer()
 92870 enter -0
__3300:
// printf arg #1 (char* format)
 92873 push 92907
 92876 mov ECX,1
// printf(...)
 92879 call 21851
 92882 add ESP,1
// timerPeriod=400000
 92885 mov #77275,400000
// timerN=0
 92889 mov #92932,0
 92893 cpuset 65,#77275
 92897 cpuset 64,2
 92901 cpuset 67,42
__3299:
 92905 leave 
 92906 ret 
__3301:
 92907 db "setting timer
",0
derpTable:
 92922 alloc 10
timerN:
 92932 db 0
unfuckEntry:
// unfuckEntry(ptr)
 92933 enter 3
__3303:
 92936 sstack EBP:-1,EBP
 92940 sstack EBP:-2,#EBP
 92944 rstack EAX,EBP:-2
 92948 add EAX,1
 92951 mov EBX,EAX
 92953 sstack EBP:-3,#EBX
__3305:
 92957 rstack EAX,EBP:-3
 92961 mov EBX,0
 92964 sub EBX,EAX
 92966 fabs EBX,EBX
 92968 fsgn EBX,EBX
// if (prevCS!=0)
 92970 cmp 0,EBX
 92973 jge 93031
// printf arg #2 (unknown)
 92976 push 990
// printf arg #1 (char* format)
 92979 push 93038
 92982 mov ECX,2
// printf(...)
 92985 call 21851
 92988 add ESP,2
 92991 rstack EAX,EBP:-2
 92995 add EAX,0
 92998 mov EBX,EAX
 93000 rstack EAX,EBP:-2
 93004 add EAX,18
 93007 mov ECX,EAX
// EP[18]=EP[0]
 93009 mov #ECX,#EBX
 93011 rstack EAX,EBP:-2
 93015 add EAX,18
 93018 mov EBX,EAX
 93020 rstack EAX,EBP:-1
// *E=EP+18
 93024 mov #EAX,EBX
 93026 mov EAX,1
 93029 leave 
 93030 ret 
__3306:
__3304:
 93031 mov EAX,0
 93034 leave 
 93035 ret 
__3302:
 93036 leave 
 93037 ret 
__3307:
 93038 db "%mentry fucked. Unfucking.
",0
 93066 alloc 128
pg_int_handlers:
retAlert:
// retAlert(p)
 93194 enter 4
__3309:
 93197 rstack EAX,EBP:2
 93201 add EAX,SS
 93203 mov EBX,EAX
// p=p+SS
 93205 sstack EBP:2,EBX
 93209 rstack EAX,EBP:2
 93213 add EAX,1
 93216 mov EBX,EAX
 93218 sstack EBP:-1,#EBX
 93222 rstack EAX,EBP:2
 93226 add EAX,2
 93229 mov EBX,EAX
 93231 sstack EBP:-2,#EBX
__3311:
 93235 rstack EAX,EBP:-1
 93239 mov EBX,0
 93242 sub EBX,EAX
 93244 fabs EBX,EBX
 93246 fsgn EBX,EBX
// if (prevCS!=0)
 93248 cmp 0,EBX
 93251 jge 93693
 93254 cpuset 64,0
// printf arg #1 (char* format)
 93258 push 93764
 93261 mov ECX,1
// printf(...)
 93264 call 21851
 93267 add ESP,1
// printf arg #1 (char* format)
 93270 push 93779
 93273 mov ECX,1
// printf(...)
 93276 call 21851
 93279 add ESP,1
// printf arg #1 (char* format)
 93282 push 93857
 93285 mov ECX,1
// printf(...)
 93288 call 21851
 93291 add ESP,1
// printf arg #1 (char* format)
 93294 push 93711
 93297 mov ECX,1
// printf(...)
 93300 call 21851
 93303 add ESP,1
 93306 rstack EAX,EBP:2
 93310 add EAX,-2
 93313 mov EBX,EAX
// printf arg #3 (unknown)
 93315 push #EBX
 93317 rstack EAX,EBP:2
 93321 add EAX,-2
 93324 mov EBX,EAX
// printf arg #2 (unknown)
 93326 push EBX
// printf arg #1 (char* format)
 93328 push 93695
 93331 mov ECX,3
// printf(...)
 93334 call 21851
 93337 add ESP,3
 93340 rstack EAX,EBP:2
 93344 add EAX,-1
 93347 mov EBX,EAX
// printf arg #3 (unknown)
 93349 push #EBX
 93351 rstack EAX,EBP:2
 93355 add EAX,-1
 93358 mov EBX,EAX
// printf arg #2 (unknown)
 93360 push EBX
// printf arg #1 (char* format)
 93362 push 93748
 93365 mov ECX,3
// printf(...)
 93368 call 21851
 93371 add ESP,3
 93374 rstack EAX,EBP:2
 93378 add EAX,0
 93381 mov EBX,EAX
// printf arg #3 (unknown)
 93383 push #EBX
 93385 rstack EAX,EBP:2
 93389 add EAX,0
 93392 mov EBX,EAX
// printf arg #2 (unknown)
 93394 push EBX
// printf arg #1 (char* format)
 93396 push 93732
 93399 mov ECX,3
// printf(...)
 93402 call 21851
 93405 add ESP,3
 93408 rstack EAX,EBP:2
 93412 add EAX,1
 93415 mov EBX,EAX
// printf arg #3 (unknown)
 93417 push #EBX
 93419 rstack EAX,EBP:2
 93423 add EAX,1
 93426 mov EBX,EAX
// printf arg #2 (unknown)
 93428 push EBX
// printf arg #1 (char* format)
 93430 push 93806
 93433 mov ECX,3
// printf(...)
 93436 call 21851
 93439 add ESP,3
 93442 rstack EAX,EBP:2
 93446 add EAX,2
 93449 mov EBX,EAX
// printf arg #3 (unknown)
 93451 push #EBX
 93453 rstack EAX,EBP:2
 93457 add EAX,2
 93460 mov EBX,EAX
// printf arg #2 (unknown)
 93462 push EBX
// printf arg #1 (char* format)
 93464 push 93841
 93467 mov ECX,3
// printf(...)
 93470 call 21851
 93473 add ESP,3
// printf arg #1 (char* format)
 93476 push 93822
 93479 mov ECX,1
// printf(...)
 93482 call 21851
 93485 add ESP,1
 93488 sstack EBP:-3,EBP
 93492 sstack EBP:-4,#EBP
 93496 rstack EAX,EBP:-4
// p=EP
 93500 sstack EBP:2,EAX
 93504 rstack EAX,EBP:2
 93508 add EAX,-2
 93511 mov EBX,EAX
// printf arg #3 (unknown)
 93513 push #EBX
 93515 rstack EAX,EBP:2
 93519 add EAX,-2
 93522 mov EBX,EAX
// printf arg #2 (unknown)
 93524 push EBX
// printf arg #1 (char* format)
 93526 push 93695
 93529 mov ECX,3
// printf(...)
 93532 call 21851
 93535 add ESP,3
 93538 rstack EAX,EBP:2
 93542 add EAX,-1
 93545 mov EBX,EAX
// printf arg #3 (unknown)
 93547 push #EBX
 93549 rstack EAX,EBP:2
 93553 add EAX,-1
 93556 mov EBX,EAX
// printf arg #2 (unknown)
 93558 push EBX
// printf arg #1 (char* format)
 93560 push 93748
 93563 mov ECX,3
// printf(...)
 93566 call 21851
 93569 add ESP,3
 93572 rstack EAX,EBP:2
 93576 add EAX,0
 93579 mov EBX,EAX
// printf arg #3 (unknown)
 93581 push #EBX
 93583 rstack EAX,EBP:2
 93587 add EAX,0
 93590 mov EBX,EAX
// printf arg #2 (unknown)
 93592 push EBX
// printf arg #1 (char* format)
 93594 push 93732
 93597 mov ECX,3
// printf(...)
 93600 call 21851
 93603 add ESP,3
 93606 rstack EAX,EBP:2
 93610 add EAX,1
 93613 mov EBX,EAX
// printf arg #3 (unknown)
 93615 push #EBX
 93617 rstack EAX,EBP:2
 93621 add EAX,1
 93624 mov EBX,EAX
// printf arg #2 (unknown)
 93626 push EBX
// printf arg #1 (char* format)
 93628 push 93806
 93631 mov ECX,3
// printf(...)
 93634 call 21851
 93637 add ESP,3
 93640 rstack EAX,EBP:2
 93644 add EAX,2
 93647 mov EBX,EAX
// printf arg #3 (unknown)
 93649 push #EBX
 93651 rstack EAX,EBP:2
 93655 add EAX,2
 93658 mov EBX,EAX
// printf arg #2 (unknown)
 93660 push EBX
// printf arg #1 (char* format)
 93662 push 93841
 93665 mov ECX,3
// printf(...)
 93668 call 21851
 93671 add ESP,3
// printf arg #1 (char* format)
 93674 push 93877
 93677 mov ECX,1
// printf(...)
 93680 call 21851
 93683 add ESP,1
 93686 clm 
 93687 mov ECX,0
// panic(...)
 93690 call 96246
__3312:
__3310:
__3308:
 93693 leave 
 93694 ret 
__3317:
 93695 db "p-2 = %d -> %d
",0
__3316:
 93711 db "printing given ptr:
",0
__3319:
 93732 db "p+0 = %d -> %d
",0
__3318:
 93748 db "p-1 = %d -> %d
",0
__3313:
 93764 db "Return alert!
",0
__3314:
 93779 db "stack should have [IP;CS]
",0
__3320:
 93806 db "p+1 = %d -> %d
",0
__3322:
 93822 db "printing prevEBP:
",0
__3321:
 93841 db "p+2 = %d -> %d
",0
__3315:
 93857 db "but CS is non-zero
",0
__3323:
 93877 db "and now i panik
",0
KernellCallIntHandler:
// KernellCallIntHandler()
 93894 enter 10
__3325:
 93897 sstack EBP:-1,R0
 93901 sstack EBP:-2,R1
 93905 sstack EBP:-3,R2
 93909 sstack EBP:-4,R3
 93913 mov ECX,0
// switchToKernel(...)
 93916 call 414
 93919 sstack EBP:-5,0
__3327:
 93924 rstack EAX,EBP:-1
 93928 mov EBX,1
 93931 sub EBX,EAX
 93933 fabs EBX,EBX
 93935 fsgn EBX,EBX
 93937 lneg EBX
// if (arg1==1)
 93939 cmp 0,EBX
 93942 jge 93990
// found=1
 93945 sstack EBP:-5,1
 93950 rstack EAX,EBP:-2
 93954 push EAX
 93956 mov ECX,1
// toAbsSpace(...)
 93959 call 95644
 93962 add ESP,1
 93965 sstack EBP:-6,EAX
 93969 rstack EAX,EBP:-6
// printf arg #3 (unknown)
 93973 push EAX
// printf arg #2 (unknown)
 93975 push 990
// printf arg #1 (char* format)
 93978 push 94370
 93981 mov ECX,3
// printf(...)
 93984 call 21851
 93987 add ESP,3
__3328:
__3326:
__3331:
 93990 rstack EAX,EBP:-1
 93994 mov EBX,2
 93997 sub EBX,EAX
 93999 fabs EBX,EBX
 94001 fsgn EBX,EBX
 94003 lneg EBX
// if (arg1==2)
 94005 cmp 0,EBX
 94008 jge 94037
// found=1
 94011 sstack EBP:-5,1
 94016 rstack EAX,EBP:-2
// printf arg #3 (unknown)
 94020 push EAX
// printf arg #2 (unknown)
 94022 push 990
// printf arg #1 (char* format)
 94025 push 94417
 94028 mov ECX,3
// printf(...)
 94031 call 21851
 94034 add ESP,3
__3332:
__3330:
__3335:
 94037 rstack EAX,EBP:-1
 94041 mov EBX,3
 94044 sub EBX,EAX
 94046 fabs EBX,EBX
 94048 fsgn EBX,EBX
 94050 lneg EBX
// if (arg1==3)
 94052 cmp 0,EBX
 94055 jge 94158
// found=1
 94058 sstack EBP:-5,1
 94063 rstack EAX,EBP:-2
 94067 push EAX
 94069 mov ECX,1
// toAbsSpace(...)
 94072 call 95644
 94075 add ESP,1
 94078 sstack EBP:-7,EAX
 94082 rstack EAX,EBP:-3
 94086 sstack EBP:-8,EAX
 94090 rstack EAX,EBP:-4
 94094 sstack EBP:-9,EAX
 94098 rstack EAX,EBP:-9
// printf arg #5 (unknown)
 94102 push EAX
 94104 rstack EAX,EBP:-8
// printf arg #4 (unknown)
 94108 push EAX
 94110 rstack EAX,EBP:-7
// printf arg #3 (unknown)
 94114 push EAX
// printf arg #2 (unknown)
 94116 push 990
// printf arg #1 (char* format)
 94119 push 94327
 94122 mov ECX,5
// printf(...)
 94125 call 21851
 94128 add ESP,5
 94131 rstack EAX,EBP:-9
 94135 push EAX
 94137 rstack EAX,EBP:-8
 94141 push EAX
 94143 rstack EAX,EBP:-7
 94147 push EAX
 94149 mov ECX,3
// vprintf(...)
 94152 call 95838
 94155 add ESP,3
__3336:
__3334:
__3339:
 94158 rstack EAX,EBP:-1
 94162 mov EBX,4
 94165 sub EBX,EAX
 94167 fabs EBX,EBX
 94169 fsgn EBX,EBX
 94171 lneg EBX
// if (arg1==4)
 94173 cmp 0,EBX
 94176 jge 94201
// found=1
 94179 sstack EBP:-5,1
__3342:
// if (lastProcess)
 94184 cmp 0,#257
 94188 jge 94201
// current_thread=0
 94191 mov #256,0
 94195 mov ECX,0
// jmpThreadExitPoint(...)
 94198 call 95428
__3343:
__3341:
__3340:
__3338:
__3345:
 94201 rstack EAX,EBP:-1
 94205 mov EBX,5
 94208 sub EBX,EAX
 94210 fabs EBX,EBX
 94212 fsgn EBX,EBX
 94214 lneg EBX
// if (arg1==5)
 94216 cmp 0,EBX
 94219 jge 94256
// found=1
 94222 sstack EBP:-5,1
__3348:
// if (lastProcess)
 94227 cmp 0,#257
 94231 jge 94256
// process_h_get_procID arg #1 (float this)
 94234 push #257
 94237 mov ECX,1
// process_h_get_procID(...)
 94240 call 25285
 94243 add ESP,1
 94246 sstack EBP:-10,EAX
 94250 rstack EAX,EBP:-10
 94254 mov R0,EAX
__3349:
__3347:
__3346:
__3344:
__3351:
 94256 rstack EAX,EBP:-5
 94260 lneg EAX
 94262 mov EBX,EAX
// if (!found)
 94264 cmp 0,EBX
 94267 jge 94306
 94270 rstack EAX,EBP:-4
// printf arg #5 (unknown)
 94274 push EAX
 94276 rstack EAX,EBP:-3
// printf arg #4 (unknown)
 94280 push EAX
 94282 rstack EAX,EBP:-2
// printf arg #3 (unknown)
 94286 push EAX
 94288 rstack EAX,EBP:-1
// printf arg #2 (unknown)
 94292 push EAX
// printf arg #1 (char* format)
 94294 push 94375
 94297 mov ECX,5
// printf(...)
 94300 call 21851
 94303 add ESP,5
__3352:
__3350:
 94306 mov ECX,0
// switchToLastProcess(...)
 94309 call 258
 94312 leave 
// retAlert arg #1 (float p)
 94313 push ESP
 94315 mov ECX,1
// retAlert(...)
 94318 call 93194
 94321 add ESP,1
 94324 iret 
__3324:
 94325 leave 
 94326 ret 
__3337:
 94327 db "%m-vprintf(fmt = %d, nargs = %d, va = %d)
",0
__3329:
 94370 db "%m%s",0
__3353:
 94375 db "unrecognized kernell call %d, %d, %d, %d
",0
__3333:
 94417 db "%m%d",0
UnmappedPageIntHandler:
// UnmappedPageIntHandler()
 94422 enter 2
__3355:
 94425 cli 
 94426 sstack EBP:-1,EBP:#1
 94432 sstack EBP:-2,EBP:#2
 94438 mov ECX,0
// switchToKernel(...)
 94441 call 414
 94444 rstack EAX,EBP:-1
// printf arg #4 (unknown)
 94448 push EAX
 94450 rstack EAX,EBP:-2
// printf arg #3 (unknown)
 94454 push EAX
// printf arg #2 (unknown)
 94456 push 900
// printf arg #1 (char* format)
 94459 push 94527
 94462 mov ECX,4
// printf(...)
 94465 call 21851
 94468 add ESP,4
__3358:
// if (lastProcess)
 94471 cmp 0,#257
 94475 jge 94484
 94478 mov ECX,0
// thread_terminate(...)
 94481 call 95351
__3359:
__3357:
// printf arg #1 (char* format)
 94484 push 94576
 94487 mov ECX,1
// printf(...)
 94490 call 21851
 94493 add ESP,1
__3362:
 94496 mov ECX,0
// hasKey(...)
 94499 call 36684
 94502 lneg EAX
// if (!hasKey()
 94504 cmp 0,EAX
 94507 jz 94513
 94510 jmp 94496
__3361:
 94513 mov ECX,0
// readKey(...)
 94516 call 36657
 94519 int 0
 94522 leave 
 94523 sti 
 94524 iret 
__3354:
 94525 leave 
 94526 ret 
__3356:
 94527 db "%mu:Access to unmapped page from (IP %d:CS %d) 
",0
__3360:
 94576 db "Press any key to reset
",0
defaultIntHandler:
// defaultIntHandler()
 94600 enter 86
__3364:
 94603 cli 
 94604 rstack EAX,EBP:-1
 94608 cpuget EAX,27
 94611 sstack EBP:-1,EAX
 94615 rstack EAX,EBP:-2
 94619 cpuget EAX,28
 94622 sstack EBP:-2,EAX
 94626 sstack EBP:-3,EBP:#1
 94632 sstack EBP:-4,EBP:#2
 94638 rstack EAX,EBP:-3
// printf arg #6 (unknown)
 94642 push EAX
 94644 rstack EAX,EBP:-4
// printf arg #5 (unknown)
 94648 push EAX
 94650 rstack EAX,EBP:-1
// printf arg #4 (unknown)
 94654 push EAX
 94656 rstack EAX,EBP:-2
// printf arg #3 (unknown)
 94660 push EAX
// printf arg #2 (unknown)
 94662 push 810
// printf arg #1 (char* format)
 94665 push 94851
 94668 mov ECX,6
// printf(...)
 94671 call 21851
 94674 add ESP,6
 94677 rstack EAX,EBP:-2
// intnum_to_str arg #1 (float num)
 94681 push EAX
 94683 mov ECX,1
// intnum_to_str(...)
 94686 call 35951
 94689 add ESP,1
 94692 sstack EBP:-5,EAX
 94696 rstack EAX,EBP:-5
// printf arg #3 (unknown)
 94700 push EAX
// printf arg #2 (unknown)
 94702 push 810
// printf arg #1 (char* format)
 94705 push 68433
 94708 mov ECX,3
// printf(...)
 94711 call 21851
 94714 add ESP,3
 94717 sstack EBP:-6,148
 94722 rstack EAX,EBP:-6
// printf arg #2 (unknown)
 94726 push EAX
// printf arg #1 (char* format)
 94728 push 94804
 94731 mov ECX,2
// printf(...)
 94734 call 21851
 94737 add ESP,2
 94740 mov EAX,SS:ESP
 94743 add EAX,-86
// getIntStackTrace arg #1 (float buff)
 94746 push EAX
 94748 mov ECX,1
// getIntStackTrace(...)
 94751 call 74656
 94754 add ESP,1
 94757 mov EAX,SS:ESP
 94760 add EAX,-86
// printStackTrace arg #1 (float buff)
 94763 push EAX
 94765 mov ECX,1
// printStackTrace(...)
 94768 call 75040
 94771 add ESP,1
// printf arg #2 (unknown)
 94774 push 159
// printf arg #1 (char* format)
 94777 push 94832
 94780 mov ECX,2
// printf(...)
 94783 call 21851
 94786 add ESP,2
__3369:
// if (1
 94789 cmp 0,1
 94793 jz 94799
 94796 jmp 94789
__3368:
 94799 leave 
 94800 sti 
 94801 iret 
__3363:
 94802 leave 
 94803 ret 
__3366:
 94804 db "%mgathering stack trace...
",0
__3367:
 94832 db "%m~ halting CPU ~
",0
__3365:
 94851 db "%md:INT %d:%d from %d:%d
",0
timerShouldRun:
// timerShouldRun()
 94877 enter -0
__3371:
// timePassed arg #1 (float timestamp)
 94880 push #77276
 94883 mov ECX,1
// timePassed(...)
 94886 call 25145
 94889 add ESP,1
 94892 leave 
 94893 ret 
__3370:
 94894 leave 
 94895 ret 
timerLogic:
// timerLogic()
 94896 enter 2
__3373:
// setTimeout arg #1 (float timeleft)
 94899 push 1.5
 94902 mov ECX,1
// setTimeout(...)
 94905 call 25108
 94908 add ESP,1
// timerLogicTimeout=setTimeout(1.5)
 94911 mov #77276,EAX
// printf arg #3 (unknown)
 94914 push #92932
// printf arg #2 (unknown)
 94917 push 59
// printf arg #1 (char* format)
 94920 push 95020
 94923 mov ECX,3
// printf(...)
 94926 call 21851
 94929 add ESP,3
// timerN++
 94932 inc #92932
__3376:
// if (switcherOn)
 94935 cmp 0,#77279
 94939 jge 95018
// vector_size arg #1 (void* self)
 94942 push #77277
 94945 mov ECX,1
// vector_size(...)
 94948 call 33515
 94951 add ESP,1
 94954 sstack EBP:-1,EAX
// vector_get arg #3 (float pos)
 94958 push #77278
// vector_get arg #2 (void* element)
 94961 push 0
// vector_get arg #1 (void* self)
 94964 push #77277
 94967 mov ECX,3
// vector_get(...)
 94970 call 33598
 94973 add ESP,3
 94976 sstack EBP:-2,EAX
// proclist_I++
 94980 inc #77278
__3379:
 94983 rstack EAX,EBP:-1
 94987 sub EAX,#77278
 94990 mov EBX,EAX
 94992 neg EBX
 94994 fsgn EBX,EBX
 94996 inc EBX
 94998 max EBX,0
// if (proclist_I>=size)
 95001 cmp 0,EBX
 95004 jge 95011
// proclist_I=0
 95007 mov #77278,0
__3380:
__3378:
 95011 rstack EAX,EBP:-2
// lastProcess=proc
 95015 mov #257,EAX
__3377:
__3375:
__3372:
 95018 leave 
 95019 ret 
__3374:
 95020 db "%m<T%d>",0
timerIntHandler:
// timerIntHandler()
 95028 enter -0
__3382:
 95031 cli 
 95032 mov ECX,0
// switchToKernel(...)
 95035 call 414
 95038 mov ECX,0
// timerLogic(...)
 95041 call 94896
 95044 mov ECX,0
// switchToLastProcess(...)
 95047 call 258
 95050 leave 
 95051 sti 
 95052 extret 
__3381:
 95053 leave 
 95054 ret 
pageTrapHandler:
// pageTrapHandler()
 95055 enter -0
__3384:
 95058 cli 
 95059 mov ECX,0
// switchToKernel(...)
 95062 call 414
// printf arg #1 (char* format)
 95065 push 95088
 95068 mov ECX,1
// printf(...)
 95071 call 21851
 95074 add ESP,1
 95077 mov ECX,0
// switchToLastProcess(...)
 95080 call 258
 95083 leave 
 95084 sti 
 95085 extret 
__3383:
 95086 leave 
 95087 ret 
__3385:
 95088 db "---page trap---
",0
pageReadHandler:
// pageReadHandler()
 95105 enter 1
__3387:
 95108 cli 
 95109 sstack EBP:-1,#256
 95114 mov ECX,0
// switchToKernel(...)
 95117 call 414
 95120 rstack EAX,EBP:-1
// printf arg #2 (unknown)
 95124 push EAX
// printf arg #1 (char* format)
 95126 push 95149
 95129 mov ECX,2
// printf(...)
 95132 call 21851
 95135 add ESP,2
 95138 mov ECX,0
// switchToLastProcess(...)
 95141 call 258
 95144 leave 
 95145 sti 
 95146 extret 
__3386:
 95147 leave 
 95148 ret 
__3388:
 95149 db "---read trap (%d)---
",0
pageWriteHandler:
// pageWriteHandler()
 95171 enter -0
__3390:
 95174 cli 
 95175 mov ECX,0
// switchToKernel(...)
 95178 call 414
// printf arg #1 (char* format)
 95181 push 95204
 95184 mov ECX,1
// printf(...)
 95187 call 21851
 95190 add ESP,1
 95193 mov ECX,0
// switchToLastProcess(...)
 95196 call 258
 95199 leave 
 95200 sti 
 95201 extret 
__3389:
 95202 leave 
 95203 ret 
__3391:
 95204 db "---write trap---
",0
 95222 alloc 128
pg_int_handlers_end:
 95350 db 0
thread_terminate:
// thread_terminate()
 95351 enter -0
__3393:
// printf arg #2 (unknown)
 95354 push 900
// printf arg #1 (char* format)
 95357 push 95381
 95360 mov ECX,2
// printf(...)
 95363 call 21851
 95366 add ESP,2
// current_thread=0
 95369 mov #256,0
 95373 mov ECX,0
// jmpThreadExitPoint(...)
 95376 call 95428
__3392:
 95379 leave 
 95380 ret 
__3394:
 95381 db "%mThread terminated
",0
setThreadExitPoint:
// setThreadExitPoint(c_ebp,c_esp,c_pos)
 95402 enter -0
__3396:
 95405 rstack EAX,EBP:2
// threadExit_ebp=c_ebp
 95409 mov #77281,EAX
 95412 rstack EAX,EBP:3
// threadExit_esp=c_esp
 95416 mov #77282,EAX
 95419 rstack EAX,EBP:4
// threadExit_pos=c_pos
 95423 mov #77283,EAX
__3395:
 95426 leave 
 95427 ret 
jmpThreadExitPoint:
// jmpThreadExitPoint()
 95428 enter -0
__3398:
 95431 push #77283
 95434 push #77282
 95437 push #77281
 95440 mov ECX,3
// farjump(...)
 95443 call 95451
 95446 add ESP,3
__3397:
 95449 leave 
 95450 ret 
farjump:
// farjump(c_ebp,c_esp,c_pos)
 95451 enter -0
__3400:
 95454 rstack EAX,EBP:2
 95458 mov R0,EAX
 95460 rstack EAX,EBP:3
 95464 mov R1,EAX
 95466 rstack EAX,EBP:4
 95470 mov R2,EAX
 95472 mov EBP,R0
 95474 mov ESP,R1
 95476 jmp R2
__3399:
 95478 leave 
 95479 ret 
findJmp:
// findJmp(addr,nbytes,pres)
 95480 enter 4
__3402:
// init loop
 95483 sstack EBP:-1,0
__3404:
 95488 rstack EAX,EBP:-1
 95492 rstack EBX,EBP:3
 95496 sub EBX,EAX
 95498 mov EAX,EBX
 95500 fsgn EAX,EAX
// condition
 95502 max EAX,0
 95505 cmp 0,EAX
 95508 jz 95637
 95511 rstack EAX,EBP:-1
 95515 rstack EBX,EBP:2
 95519 add EBX,EAX
 95521 mov EAX,EBX
 95523 sstack EBP:-2,EAX
 95527 rstack EAX,EBP:-2
 95531 add EAX,0
 95534 mov EBX,EAX
 95536 mov EAX,2
 95539 sub EAX,#EBX
 95541 fabs EAX,EAX
 95543 fsgn EAX,EAX
 95545 lneg EAX
 95547 sstack EBP:-3,EAX
 95551 rstack EAX,EBP:-2
 95555 add EAX,1
 95558 mov EBX,EAX
 95560 mov EAX,0
 95563 sub EAX,#EBX
 95565 fabs EAX,EAX
 95567 fsgn EAX,EAX
 95569 lneg EAX
 95571 sstack EBP:-4,EAX
__3406:
 95575 rstack EAX,EBP:-4
 95579 rstack EBX,EBP:-3
 95583 and EBX,EAX
 95585 mov EAX,EBX
// if (b1&&b2)
 95587 cmp 0,EAX
 95590 jge 95624
__3409:
 95593 rstack EAX,EBP:4
// if (pres)
 95597 cmp 0,EAX
 95600 jge 95618
 95603 rstack EAX,EBP:-2
 95607 add EAX,2
 95610 mov EBX,EAX
 95612 rstack EAX,EBP:4
// *pres=ptr[2]
 95616 mov #EAX,#EBX
__3410:
__3408:
 95618 rstack EAX,EBP:-1
 95622 leave 
 95623 ret 
__3407:
__3405:
 95624 rstack EAX,EBP:-1
// loop step
 95628 inc EAX
 95630 sstack EBP:-1,EAX
 95634 jmp 95488
__3403:
 95637 mov EAX,-1
 95640 leave 
 95641 ret 
__3401:
 95642 leave 
 95643 ret 
toAbsSpace:
// toAbsSpace(p)
 95644 enter 7
__3412:
__3414:
// if (lastProcess)
 95647 cmp 0,#257
 95651 jge 95798
// process_h_get_pagemap arg #1 (float this)
 95654 push #257
 95657 mov ECX,1
// process_h_get_pagemap(...)
 95660 call 25375
 95663 add ESP,1
 95666 sstack EBP:-1,EAX
 95670 rstack EAX,EBP:-1
// vector_array arg #1 (void* self)
 95674 push EAX
 95676 mov ECX,1
// vector_array(...)
 95679 call 35451
 95682 add ESP,1
 95685 sstack EBP:-2,EAX
 95689 rstack EAX,EBP:2
 95693 mod EAX,128
 95696 mov EBX,EAX
 95698 sstack EBP:-3,EBX
 95702 rstack EAX,EBP:2
 95706 div EAX,128
 95709 mov EBX,EAX
// floor arg #1 (float A)
 95711 push EBX
 95713 mov ECX,1
// floor(...)
 95716 call 31069
 95719 add ESP,1
 95722 sstack EBP:-4,EAX
 95726 rstack EAX,EBP:-4
// getPage arg #2 (float page)
 95730 push EAX
 95732 rstack EAX,EBP:-2
// getPage arg #1 (float PT)
 95736 push EAX
 95738 mov ECX,2
// getPage(...)
 95741 call 37576
 95744 add ESP,2
 95747 sstack EBP:-5,EAX
 95751 rstack EAX,EBP:-5
// getPageMapping arg #1 (float page)
 95755 push EAX
 95757 mov ECX,1
// getPageMapping(...)
 95760 call 37851
 95763 add ESP,1
 95766 sstack EBP:-6,EAX
 95770 rstack EAX,EBP:-3
 95774 rstack EBX,EBP:-6
 95778 mul EBX,128
 95781 mov ECX,EBX
 95783 add ECX,EAX
 95785 sstack EBP:-7,ECX
 95789 rstack EAX,EBP:-7
 95793 leave 
 95794 ret 
 95795 jmp 95804
__3416:
__3415:
__3418:
 95798 rstack EAX,EBP:2
 95802 leave 
 95803 ret 
__3417:
__3413:
__3411:
 95804 leave 
 95805 ret 
kcall:
// kcall(a,b,c,d)
 95806 enter -0
__3420:
 95809 rstack EAX,EBP:2
 95813 mov R0,EAX
 95815 rstack EAX,EBP:3
 95819 mov R1,EAX
 95821 rstack EAX,EBP:4
 95825 mov R2,EAX
 95827 rstack EAX,EBP:5
 95831 mov R3,EAX
 95833 int 40
__3419:
 95836 leave 
 95837 ret 
vprintf:
// vprintf(fmt,nargs,va)
 95838 enter 3
__3422:
 95841 rstack EAX,EBP:3
 95845 add EAX,-1
 95848 mov EBX,EAX
 95850 push EBX
 95852 mov ECX,1
// stack_alloc(...)
 95855 call 11635
 95858 add ESP,1
 95861 sstack EBP:-1,EAX
// init loop
 95865 sstack EBP:-2,-1
__3424:
 95870 rstack EAX,EBP:-2
 95874 rstack EBX,EBP:3
 95878 add EBX,-2
 95881 mov ECX,EBX
 95883 sub ECX,EAX
 95885 fsgn ECX,ECX
// condition
 95887 max ECX,0
 95890 cmp 0,ECX
 95893 jz 95948
 95896 mov EAX,SS:ESP
 95899 add EAX,4
 95902 push EAX
 95904 mov ECX,1
// va_next(...)
 95907 call 10016
 95910 add ESP,1
 95913 sstack EBP:-3,EAX
 95917 rstack EAX,EBP:-3
 95921 rstack EBX,EBP:-2
 95925 rstack ECX,EBP:-1
 95929 add ECX,EBX
 95931 mov EBX,ECX
// args[I]=arg
 95933 mov #EBX,EAX
 95935 rstack EAX,EBP:-2
// loop step
 95939 inc EAX
 95941 sstack EBP:-2,EAX
 95945 jmp 95870
__3423:
 95948 rstack EAX,EBP:2
 95952 push EAX
 95954 rstack EAX,EBP:3
 95958 mov ECX,EAX
 95960 call 21851
__3421:
 95963 leave 
 95964 ret 
bios_prints:
// bios_prints(s)
 95965 enter 1
__3426:
__3428:
// ioRead arg #1 (float pos)
 95968 push 0
 95971 mov ECX,1
// ioRead(...)
 95974 call 21478
 95977 add ESP,1
 95980 mov EBX,2
 95983 sub EBX,EAX
 95985 fabs EBX,EBX
 95987 fsgn EBX,EBX
 95989 lneg EBX
// if (ioRead(0)==2
 95991 cmp 0,EBX
 95994 jz 96001
 95997 nop 
 95998 jmp 95968
__3427:
// ioWrite arg #2 (float val)
 96001 push 1
// ioWrite arg #1 (float pos)
 96004 push 1
 96007 mov ECX,2
// ioWrite(...)
 96010 call 21614
 96013 add ESP,2
 96016 rstack EAX,EBP:2
// strlen arg #1 (char* str)
 96020 push EAX
 96022 mov ECX,1
// strlen(...)
 96025 call 11121
 96028 add ESP,1
 96031 sstack EBP:-1,EAX
 96035 rstack EAX,EBP:-1
 96039 add EAX,1
 96042 mov EBX,EAX
// ioWriteBuff arg #3 (float size)
 96044 push EBX
 96046 rstack EAX,EBP:2
// ioWriteBuff arg #2 (float src)
 96050 push EAX
// ioWriteBuff arg #1 (float dest)
 96052 push 2
 96055 mov ECX,3
// ioWriteBuff(...)
 96058 call 21647
 96061 add ESP,3
// ioWrite arg #2 (float val)
 96064 push 2
// ioWrite arg #1 (float pos)
 96067 push 0
 96070 mov ECX,2
// ioWrite(...)
 96073 call 21614
 96076 add ESP,2
__3430:
// ioRead arg #1 (float pos)
 96079 push 0
 96082 mov ECX,1
// ioRead(...)
 96085 call 21478
 96088 add ESP,1
 96091 mov EBX,2
 96094 sub EBX,EAX
 96096 fabs EBX,EBX
 96098 fsgn EBX,EBX
// if (ioRead(0)!=2
 96100 cmp 0,EBX
 96103 jz 96110
 96106 nop 
 96107 jmp 96079
__3429:
__3425:
 96110 leave 
 96111 ret 
bios_printn:
// bios_printn(n)
 96112 enter -0
__3432:
__3434:
// ioRead arg #1 (float pos)
 96115 push 0
 96118 mov ECX,1
// ioRead(...)
 96121 call 21478
 96124 add ESP,1
 96127 mov EBX,2
 96130 sub EBX,EAX
 96132 fabs EBX,EBX
 96134 fsgn EBX,EBX
 96136 lneg EBX
// if (ioRead(0)==2
 96138 cmp 0,EBX
 96141 jz 96148
 96144 nop 
 96145 jmp 96115
__3433:
// ioWrite arg #2 (float val)
 96148 push 2
// ioWrite arg #1 (float pos)
 96151 push 1
 96154 mov ECX,2
// ioWrite(...)
 96157 call 21614
 96160 add ESP,2
 96163 rstack EAX,EBP:2
// ioWrite arg #2 (float val)
 96167 push EAX
// ioWrite arg #1 (float pos)
 96169 push 2
 96172 mov ECX,2
// ioWrite(...)
 96175 call 21614
 96178 add ESP,2
// ioWrite arg #2 (float val)
 96181 push 2
// ioWrite arg #1 (float pos)
 96184 push 0
 96187 mov ECX,2
// ioWrite(...)
 96190 call 21614
 96193 add ESP,2
__3436:
// ioRead arg #1 (float pos)
 96196 push 0
 96199 mov ECX,1
// ioRead(...)
 96202 call 21478
 96205 add ESP,1
 96208 mov EBX,2
 96211 sub EBX,EAX
 96213 fabs EBX,EBX
 96215 fsgn EBX,EBX
// if (ioRead(0)!=2
 96217 cmp 0,EBX
 96220 jz 96227
 96223 nop 
 96224 jmp 96196
__3435:
__3431:
 96227 leave 
 96228 ret 
Perr:
// Perr()
 96229 enter -0
__3438:
 96232 push 45
 96235 mov ECX,1
// error(...)
 96238 call 96263
 96241 add ESP,1
__3437:
 96244 leave 
 96245 ret 
panic:
// panic()
 96246 enter -0
__3440:
 96249 push 46
 96252 mov ECX,1
// error(...)
 96255 call 96263
 96258 add ESP,1
__3439:
 96261 leave 
 96262 ret 
error:
// error(n)
 96263 enter -0
__3442:
 96266 rstack EAX,EBP:2
 96270 int EAX
__3444:
// if (1
 96272 cmp 0,1
 96276 jz 96282
 96279 jmp 96272
__3443:
__3441:
 96282 leave 
 96283 ret 
kernelSize:
// kernelSize()
 96284 enter -0
__3446:
 96287 mov EAX,105195
 96290 leave 
 96291 ret 
__3445:
 96292 leave 
 96293 ret 
func_table:
 96294 db 128
 96295 db 97392
 96296 db 258
 96297 db 97405
 96298 db 282
 96299 db 97425
 96300 db 360
 96301 db 97441
 96302 db 414
 96303 db 97463
 96304 db 10052
 96305 db 97478
 96306 db 10123
 96307 db 97485
 96308 db 10218
 96309 db 97497
 96310 db 10236
 96311 db 97506
 96312 db 10245
 96313 db 97514
 96314 db 10355
 96315 db 97527
 96316 db 10412
 96317 db 97534
 96318 db 10469
 96319 db 97541
 96320 db 10517
 96321 db 97548
 96322 db 10576
 96323 db 97555
 96324 db 10659
 96325 db 97563
 96326 db 10710
 96327 db 97570
 96328 db 10763
 96329 db 97578
 96330 db 10866
 96331 db 97585
 96332 db 10963
 96333 db 97593
 96334 db 11009
 96335 db 97600
 96336 db 11121
 96337 db 97608
 96338 db 11154
 96339 db 97615
 96340 db 11224
 96341 db 97622
 96342 db 11298
 96343 db 97630
 96344 db 11360
 96345 db 97638
 96346 db 11463
 96347 db 97645
 96348 db 11678
 96349 db 97653
 96350 db 11691
 96351 db 97662
 96352 db 11870
 96353 db 97672
 96354 db 11897
 96355 db 97683
 96356 db 11982
 96357 db 97696
 96358 db 12270
 96359 db 97704
 96360 db 13713
 96361 db 97712
 96362 db 13783
 96363 db 97722
 96364 db 13802
 96365 db 97733
 96366 db 15282
 96367 db 97741
 96368 db 15309
 96369 db 97746
 96370 db 15348
 96371 db 97754
 96372 db 15387
 96373 db 97760
 96374 db 15458
 96375 db 97768
 96376 db 15521
 96377 db 97776
 96378 db 15584
 96379 db 97784
 96380 db 16186
 96381 db 97788
 96382 db 16590
 96383 db 97795
 96384 db 16712
 96385 db 97801
 96386 db 16821
 96387 db 97820
 96388 db 16947
 96389 db 97838
 96390 db 16978
 96391 db 97849
 96392 db 17033
 96393 db 97865
 96394 db 17199
 96395 db 97873
 96396 db 17283
 96397 db 97882
 96398 db 17304
 96399 db 97904
 96400 db 17323
 96401 db 97919
 96402 db 17688
 96403 db 97925
 96404 db 17776
 96405 db 97935
 96406 db 17911
 96407 db 97949
 96408 db 17975
 96409 db 97961
 96410 db 18052
 96411 db 97977
 96412 db 18064
 96413 db 97988
 96414 db 18078
 96415 db 98001
 96416 db 18092
 96417 db 98022
 96418 db 18106
 96419 db 98044
 96420 db 18128
 96421 db 98066
 96422 db 18161
 96423 db 98091
 96424 db 18187
 96425 db 98112
 96426 db 18204
 96427 db 98136
 96428 db 18221
 96429 db 98160
 96430 db 18238
 96431 db 98184
 96432 db 18255
 96433 db 98208
 96434 db 18308
 96435 db 98229
 96436 db 18341
 96437 db 98250
 96438 db 18358
 96439 db 98272
 96440 db 18375
 96441 db 98296
 96442 db 18672
 96443 db 98311
 96444 db 18690
 96445 db 98328
 96446 db 18773
 96447 db 98344
 96448 db 18810
 96449 db 98362
 96450 db 18831
 96451 db 98379
 96452 db 18865
 96453 db 98398
 96454 db 18886
 96455 db 98416
 96456 db 18910
 96457 db 98432
 96458 db 18933
 96459 db 98450
 96460 db 18965
 96461 db 98466
 96462 db 19057
 96463 db 98483
 96464 db 19130
 96465 db 98499
 96466 db 19190
 96467 db 98522
 96468 db 19200
 96469 db 98539
 96470 db 19350
 96471 db 98553
 96472 db 19367
 96473 db 98569
 96474 db 19550
 96475 db 98589
 96476 db 19620
 96477 db 98612
 96478 db 19640
 96479 db 98632
 96480 db 19660
 96481 db 98652
 96482 db 19680
 96483 db 98672
 96484 db 19700
 96485 db 98692
 96486 db 19718
 96487 db 98712
 96488 db 19736
 96489 db 98732
 96490 db 19754
 96491 db 98752
 96492 db 19785
 96493 db 98772
 96494 db 19880
 96495 db 98789
 96496 db 19915
 96497 db 98804
 96498 db 20213
 96499 db 98818
 96500 db 20235
 96501 db 98837
 96502 db 20594
 96503 db 98851
 96504 db 20990
 96505 db 98867
 96506 db 21203
 96507 db 98884
 96508 db 21314
 96509 db 98906
 96510 db 21478
 96511 db 98917
 96512 db 21517
 96513 db 98924
 96514 db 21614
 96515 db 98935
 96516 db 21647
 96517 db 98943
 96518 db 21744
 96519 db 98955
 96520 db 21851
 96521 db 98961
 96522 db 23834
 96523 db 98968
 96524 db 23932
 96525 db 98981
 96526 db 24001
 96527 db 98996
 96528 db 25046
 96529 db 99005
 96530 db 25091
 96531 db 99011
 96532 db 25108
 96533 db 99019
 96534 db 25145
 96535 db 99030
 96536 db 25185
 96537 db 99041
 96538 db 25285
 96539 db 99063
 96540 db 25303
 96541 db 99084
 96542 db 25321
 96543 db 99105
 96544 db 25339
 96545 db 99136
 96546 db 25357
 96547 db 99165
 96548 db 25375
 96549 db 99188
 96550 db 25393
 96551 db 99210
 96552 db 25413
 96553 db 99231
 96554 db 25433
 96555 db 99252
 96556 db 25453
 96557 db 99283
 96558 db 25473
 96559 db 99312
 96560 db 25494
 96561 db 99335
 96562 db 25598
 96563 db 99351
 96564 db 25719
 96565 db 99363
 96566 db 25927
 96567 db 99370
 96568 db 25973
 96569 db 99376
 96570 db 26091
 96571 db 99394
 96572 db 26263
 96573 db 99412
 96574 db 26340
 96575 db 99435
 96576 db 26360
 96577 db 99455
 96578 db 26380
 96579 db 99476
 96580 db 26400
 96581 db 99496
 96582 db 26420
 96583 db 99516
 96584 db 26438
 96585 db 99536
 96586 db 26456
 96587 db 99557
 96588 db 26474
 96589 db 99577
 96590 db 26492
 96591 db 99597
 96592 db 26759
 96593 db 99618
 96594 db 26780
 96595 db 99642
 96596 db 26798
 96597 db 99671
 96598 db 26818
 96599 db 99687
 96600 db 27413
 96601 db 99703
 96602 db 27637
 96603 db 99715
 96604 db 27668
 96605 db 99731
 96606 db 27948
 96607 db 99743
 96608 db 28186
 96609 db 99755
 96610 db 28288
 96611 db 99774
 96612 db 28526
 96613 db 99787
 96614 db 28674
 96615 db 99809
 96616 db 29020
 96617 db 99825
 96618 db 29334
 96619 db 99836
 96620 db 29828
 96621 db 99843
 96622 db 30318
 96623 db 99848
 96624 db 30559
 96625 db 99856
 96626 db 30641
 96627 db 99871
 96628 db 30714
 96629 db 99881
 96630 db 30828
 96631 db 99891
 96632 db 30847
 96633 db 99895
 96634 db 30872
 96635 db 99902
 96636 db 30890
 96637 db 99907
 96638 db 30908
 96639 db 99912
 96640 db 30934
 96641 db 99917
 96642 db 30943
 96643 db 99919
 96644 db 30958
 96645 db 99923
 96646 db 30975
 96647 db 99926
 96648 db 30999
 96649 db 99931
 96650 db 31010
 96651 db 99937
 96652 db 31037
 96653 db 99941
 96654 db 31054
 96655 db 99945
 96656 db 31069
 96657 db 99950
 96658 db 31084
 96659 db 99956
 96660 db 31099
 96661 db 99962
 96662 db 31114
 96663 db 99970
 96664 db 31129
 96665 db 99975
 96666 db 31154
 96667 db 99981
 96668 db 31201
 96669 db 99989
 96670 db 31222
 96671 db 99997
 96672 db 31243
 96673 db 100005
 96674 db 31252
 96675 db 100012
 96676 db 31271
 96677 db 100020
 96678 db 31300
 96679 db 100028
 96680 db 31321
 96681 db 100037
 96682 db 31352
 96683 db 100046
 96684 db 31361
 96685 db 100049
 96686 db 31381
 96687 db 100055
 96688 db 31401
 96689 db 100061
 96690 db 31425
 96691 db 100065
 96692 db 31449
 96693 db 100069
 96694 db 31473
 96695 db 100073
 96696 db 31499
 96697 db 100077
 96698 db 31525
 96699 db 100081
 96700 db 31551
 96701 db 100085
 96702 db 31575
 96703 db 100090
 96704 db 31599
 96705 db 100095
 96706 db 31623
 96707 db 100100
 96708 db 31663
 96709 db 100105
 96710 db 31701
 96711 db 100110
 96712 db 31746
 96713 db 100115
 96714 db 31791
 96715 db 100120
 96716 db 31829
 96717 db 100125
 96718 db 31869
 96719 db 100130
 96720 db 31882
 96721 db 100135
 96722 db 31895
 96723 db 100140
 96724 db 31908
 96725 db 100145
 96726 db 31923
 96727 db 100150
 96728 db 31938
 96729 db 100155
 96730 db 31953
 96731 db 100160
 96732 db 31966
 96733 db 100166
 96734 db 31979
 96735 db 100172
 96736 db 31992
 96737 db 100178
 96738 db 32030
 96739 db 100184
 96740 db 32068
 96741 db 100191
 96742 db 32106
 96743 db 100198
 96744 db 32158
 96745 db 100206
 96746 db 32207
 96747 db 100216
 96748 db 32308
 96749 db 100235
 96750 db 32531
 96751 db 100259
 96752 db 32567
 96753 db 100276
 96754 db 32603
 96755 db 100292
 96756 db 32639
 96757 db 100312
 96758 db 32675
 96759 db 100336
 96760 db 32713
 96761 db 100353
 96762 db 32751
 96763 db 100369
 96764 db 32789
 96765 db 100389
 96766 db 32827
 96767 db 100413
 96768 db 32870
 96769 db 100431
 96770 db 32926
 96771 db 100444
 96772 db 33276
 96773 db 100456
 96774 db 33515
 96775 db 100467
 96776 db 33551
 96777 db 100479
 96778 db 33598
 96779 db 100496
 96780 db 33851
 96781 db 100507
 96782 db 33949
 96783 db 100522
 96784 db 34225
 96785 db 100533
 96786 db 34733
 96787 db 100547
 96788 db 35024
 96789 db 100561
 96790 db 35271
 96791 db 100576
 96792 db 35451
 96793 db 100590
 96794 db 35495
 96795 db 100603
 96796 db 35590
 96797 db 100618
 96798 db 35927
 96799 db 100638
 96800 db 35933
 96801 db 100657
 96802 db 35939
 96803 db 100677
 96804 db 35945
 96805 db 100694
 96806 db 35951
 96807 db 100712
 96808 db 36604
 96809 db 100726
 96810 db 36616
 96811 db 100738
 96812 db 36657
 96813 db 100747
 96814 db 36684
 96815 db 100755
 96816 db 36696
 96817 db 100762
 96818 db 36736
 96819 db 100769
 96820 db 36772
 96821 db 100777
 96822 db 37082
 96823 db 100790
 96824 db 37181
 96825 db 100799
 96826 db 37416
 96827 db 100810
 96828 db 37435
 96829 db 100823
 96830 db 37441
 96831 db 100836
 96832 db 37576
 96833 db 100850
 96834 db 37629
 96835 db 100858
 96836 db 37688
 96837 db 100871
 96838 db 37730
 96839 db 100884
 96840 db 37789
 96841 db 100900
 96842 db 37831
 96843 db 100916
 96844 db 37851
 96845 db 100931
 96846 db 37869
 96847 db 100946
 96848 db 38079
 96849 db 100957
 96850 db 38113
 96851 db 100964
 96852 db 38154
 96853 db 100973
 96854 db 38247
 96855 db 100981
 96856 db 38380
 96857 db 100999
 96858 db 38548
 96859 db 101016
 96860 db 38601
 96861 db 101037
 96862 db 38619
 96863 db 101055
 96864 db 38637
 96865 db 101073
 96866 db 38655
 96867 db 101092
 96868 db 38675
 96869 db 101110
 96870 db 38695
 96871 db 101128
 96872 db 38715
 96873 db 101147
 96874 db 39028
 96875 db 101163
 96876 db 39270
 96877 db 101175
 96878 db 39390
 96879 db 101192
 96880 db 39855
 96881 db 101210
 96882 db 40628
 96883 db 101234
 96884 db 40754
 96885 db 101243
 96886 db 41006
 96887 db 101257
 96888 db 41401
 96889 db 101273
 96890 db 42612
 96891 db 101296
 96892 db 42745
 96893 db 101313
 96894 db 42794
 96895 db 101321
 96896 db 42848
 96897 db 101334
 96898 db 43093
 96899 db 101352
 96900 db 43148
 96901 db 101373
 96902 db 43274
 96903 db 101392
 96904 db 43405
 96905 db 101410
 96906 db 43550
 96907 db 101421
 96908 db 43933
 96909 db 101434
 96910 db 44117
 96911 db 101453
 96912 db 44377
 96913 db 101473
 96914 db 44459
 96915 db 101486
 96916 db 44637
 96917 db 101495
 96918 db 44815
 96919 db 101509
 96920 db 44989
 96921 db 101521
 96922 db 45141
 96923 db 101538
 96924 db 45255
 96925 db 101551
 96926 db 45384
 96927 db 101566
 96928 db 45696
 96929 db 101586
 96930 db 45749
 96931 db 101595
 96932 db 45791
 96933 db 101607
 96934 db 47402
 96935 db 101626
 96936 db 47639
 96937 db 101638
 96938 db 47730
 96939 db 101657
 96940 db 47914
 96941 db 101679
 96942 db 48030
 96943 db 101696
 96944 db 48125
 96945 db 101716
 96946 db 48485
 96947 db 101735
 96948 db 48704
 96949 db 101758
 96950 db 48808
 96951 db 101791
 96952 db 49067
 96953 db 101821
 96954 db 49153
 96955 db 101835
 96956 db 49409
 96957 db 101843
 96958 db 49674
 96959 db 101852
 96960 db 49700
 96961 db 101859
 96962 db 49788
 96963 db 101867
 96964 db 50363
 96965 db 101880
 96966 db 50956
 96967 db 101890
 96968 db 50983
 96969 db 101903
 96970 db 51024
 96971 db 101927
 96972 db 51107
 96973 db 101956
 96974 db 51130
 96975 db 101979
 96976 db 51166
 96977 db 102002
 96978 db 51202
 96979 db 102025
 96980 db 51238
 96981 db 102045
 96982 db 51276
 96983 db 102068
 96984 db 51314
 96985 db 102091
 96986 db 51352
 96987 db 102111
 96988 db 51841
 96989 db 102132
 96990 db 51953
 96991 db 102147
 96992 db 52210
 96993 db 102160
 96994 db 52634
 96995 db 102178
 96996 db 52711
 96997 db 102197
 96998 db 52828
 96999 db 102211
 97000 db 52996
 97001 db 102226
 97002 db 53078
 97003 db 102244
 97004 db 53189
 97005 db 102253
 97006 db 53501
 97007 db 102269
 97008 db 53707
 97009 db 102292
 97010 db 53807
 97011 db 102312
 97012 db 54028
 97013 db 102338
 97014 db 54086
 97015 db 102361
 97016 db 54138
 97017 db 102384
 97018 db 54196
 97019 db 102402
 97020 db 54254
 97021 db 102421
 97022 db 54312
 97023 db 102437
 97024 db 54572
 97025 db 102449
 97026 db 54677
 97027 db 102466
 97028 db 54766
 97029 db 102479
 97030 db 54855
 97031 db 102493
 97032 db 54968
 97033 db 102509
 97034 db 55351
 97035 db 102531
 97036 db 55501
 97037 db 102550
 97038 db 55746
 97039 db 102568
 97040 db 56015
 97041 db 102580
 97042 db 56164
 97043 db 102599
 97044 db 56258
 97045 db 102623
 97046 db 56380
 97047 db 102645
 97048 db 56799
 97049 db 102665
 97050 db 56963
 97051 db 102686
 97052 db 57156
 97053 db 102708
 97054 db 57610
 97055 db 102724
 97056 db 57782
 97057 db 102745
 97058 db 58024
 97059 db 102763
 97060 db 58344
 97061 db 102783
 97062 db 58425
 97063 db 102813
 97064 db 58475
 97065 db 102831
 97066 db 58569
 97067 db 102845
 97068 db 59240
 97069 db 102866
 97070 db 59535
 97071 db 102891
 97072 db 59711
 97073 db 102915
 97074 db 59794
 97075 db 102933
 97076 db 59981
 97077 db 102948
 97078 db 60115
 97079 db 102970
 97080 db 60194
 97081 db 102992
 97082 db 60372
 97083 db 103011
 97084 db 60954
 97085 db 103029
 97086 db 61006
 97087 db 103049
 97088 db 61042
 97089 db 103069
 97090 db 61103
 97091 db 103075
 97092 db 61307
 97093 db 103081
 97094 db 61481
 97095 db 103087
 97096 db 61841
 97097 db 103094
 97098 db 62389
 97099 db 103100
 97100 db 62411
 97101 db 103107
 97102 db 62500
 97103 db 103126
 97104 db 62934
 97105 db 103136
 97106 db 63284
 97107 db 103148
 97108 db 63356
 97109 db 103168
 97110 db 63463
 97111 db 103187
 97112 db 63655
 97113 db 103203
 97114 db 63923
 97115 db 103221
 97116 db 64175
 97117 db 103245
 97118 db 64377
 97119 db 103268
 97120 db 64688
 97121 db 103277
 97122 db 65167
 97123 db 103283
 97124 db 65556
 97125 db 103293
 97126 db 66587
 97127 db 103300
 97128 db 66782
 97129 db 103309
 97130 db 66831
 97131 db 103316
 97132 db 67593
 97133 db 103323
 97134 db 68012
 97135 db 103332
 97136 db 68473
 97137 db 103340
 97138 db 68931
 97139 db 103349
 97140 db 69469
 97141 db 103363
 97142 db 70841
 97143 db 103369
 97144 db 71016
 97145 db 103378
 97146 db 71718
 97147 db 103386
 97148 db 72205
 97149 db 103394
 97150 db 73115
 97151 db 103401
 97152 db 73201
 97153 db 103414
 97154 db 73879
 97155 db 103426
 97156 db 73979
 97157 db 103451
 97158 db 74068
 97159 db 103484
 97160 db 74214
 97161 db 103508
 97162 db 74405
 97163 db 103539
 97164 db 74558
 97165 db 103563
 97166 db 74656
 97167 db 103585
 97168 db 74878
 97169 db 103602
 97170 db 75040
 97171 db 103616
 97172 db 75231
 97173 db 103632
 97174 db 75405
 97175 db 103648
 97176 db 75515
 97177 db 103660
 97178 db 75625
 97179 db 103671
 97180 db 75688
 97181 db 103685
 97182 db 75758
 97183 db 103702
 97184 db 75871
 97185 db 103717
 97186 db 75985
 97187 db 103731
 97188 db 76020
 97189 db 103746
 97190 db 76088
 97191 db 103763
 97192 db 76592
 97193 db 103779
 97194 db 76634
 97195 db 103795
 97196 db 90436
 97197 db 103811
 97198 db 90585
 97199 db 103816
 97200 db 90739
 97201 db 103831
 97202 db 90795
 97203 db 103845
 97204 db 90824
 97205 db 103853
 97206 db 90853
 97207 db 103861
 97208 db 90913
 97209 db 103869
 97210 db 91535
 97211 db 103883
 97212 db 91742
 97213 db 103893
 97214 db 92020
 97215 db 103904
 97216 db 92870
 97217 db 103925
 97218 db 92933
 97219 db 103937
 97220 db 93194
 97221 db 103949
 97222 db 93894
 97223 db 103958
 97224 db 94422
 97225 db 103980
 97226 db 94600
 97227 db 104003
 97228 db 94877
 97229 db 104021
 97230 db 94896
 97231 db 104036
 97232 db 95028
 97233 db 104047
 97234 db 95055
 97235 db 104063
 97236 db 95105
 97237 db 104079
 97238 db 95171
 97239 db 104095
 97240 db 95351
 97241 db 104112
 97242 db 95402
 97243 db 104129
 97244 db 95428
 97245 db 104148
 97246 db 95451
 97247 db 104167
 97248 db 95480
 97249 db 104175
 97250 db 95644
 97251 db 104183
 97252 db 95806
 97253 db 104194
 97254 db 95838
 97255 db 104200
 97256 db 95965
 97257 db 104208
 97258 db 96112
 97259 db 104220
 97260 db 96229
 97261 db 104232
 97262 db 96246
 97263 db 104237
 97264 db 96263
 97265 db 104243
 97266 db 96284
 97267 db 104249
func_table_end:
var_table:
 97268 db 256
 97269 db 104260
 97270 db 257
 97271 db 104275
 97272 db 18662
 97273 db 104287
 97274 db 18663
 97275 db 104300
 97276 db 18671
 97277 db 104317
 97278 db 19549
 97279 db 104339
 97280 db 19784
 97281 db 104357
 97282 db 25184
 97283 db 104369
 97284 db 32206
 97285 db 104386
 97286 db 35670
 97287 db 104400
 97288 db 36767
 97289 db 104408
 97290 db 36768
 97291 db 104432
 97292 db 36769
 97293 db 104457
 97294 db 36770
 97295 db 104479
 97296 db 36771
 97297 db 104501
 97298 db 38547
 97299 db 104522
 97300 db 42601
 97301 db 104538
 97302 db 42602
 97303 db 104550
 97304 db 45746
 97305 db 104569
 97306 db 45747
 97307 db 104583
 97308 db 45748
 97309 db 104602
 97310 db 50982
 97311 db 104619
 97312 db 53077
 97313 db 104638
 97314 db 55349
 97315 db 104649
 97316 db 55350
 97317 db 104664
 97318 db 60193
 97319 db 104678
 97320 db 73878
 97321 db 104692
 97322 db 76900
 97323 db 104712
 97324 db 76901
 97325 db 104722
 97326 db 76902
 97327 db 104732
 97328 db 76903
 97329 db 104742
 97330 db 76904
 97331 db 104752
 97332 db 76905
 97333 db 104762
 97334 db 76906
 97335 db 104781
 97336 db 76907
 97337 db 104800
 97338 db 76908
 97339 db 104819
 97340 db 77167
 97341 db 104838
 97342 db 77168
 97343 db 104844
 97344 db 77201
 97345 db 104850
 97346 db 77202
 97347 db 104863
 97348 db 77203
 97349 db 104876
 97350 db 77204
 97351 db 104891
 97352 db 77205
 97353 db 104903
 97354 db 77206
 97355 db 104919
 97356 db 77207
 97357 db 104933
 97358 db 77208
 97359 db 104945
 97360 db 77209
 97361 db 104964
 97362 db 77210
 97363 db 104983
 97364 db 77211
 97365 db 105003
 97366 db 77222
 97367 db 105023
 97368 db 77223
 97369 db 105029
 97370 db 77274
 97371 db 105050
 97372 db 77275
 97373 db 105065
 97374 db 77276
 97375 db 105077
 97376 db 77277
 97377 db 105095
 97378 db 77278
 97379 db 105106
 97380 db 77279
 97381 db 105117
 97382 db 77280
 97383 db 105128
 97384 db 77281
 97385 db 105143
 97386 db 77282
 97387 db 105158
 97388 db 77283
 97389 db 105173
 97390 db 92932
 97391 db 105188
var_table_end:
func_name_table:
str_thread_entry:
 97392 db "thread_entry"
 97404 db 0
str_switchToLastProcess:
 97405 db "switchToLastProcess"
 97424 db 0
str_switchToProcess:
 97425 db "switchToProcess"
 97440 db 0
str_switchToProcessAndRun:
 97441 db "switchToProcessAndRun"
 97462 db 0
str_switchToKernel:
 97463 db "switchToKernel"
 97477 db 0
str_assert:
 97478 db "assert"
 97484 db 0
str_assert_type:
 97485 db "assert_type"
 97496 db 0
str_curticks:
 97497 db "curticks"
 97505 db 0
str_curtime:
 97506 db "curtime"
 97513 db 0
str_assert_arity:
 97514 db "assert_arity"
 97526 db 0
str_memcpy:
 97527 db "memcpy"
 97533 db 0
str_memchr:
 97534 db "memchr"
 97540 db 0
str_memset:
 97541 db "memset"
 97547 db 0
str_strcat:
 97548 db "strcat"
 97554 db 0
str_strncat:
 97555 db "strncat"
 97562 db 0
str_strchr:
 97563 db "strchr"
 97569 db 0
str_strrchr:
 97570 db "strrchr"
 97577 db 0
str_strcmp:
 97578 db "strcmp"
 97584 db 0
str_strncmp:
 97585 db "strncmp"
 97592 db 0
str_strcpy:
 97593 db "strcpy"
 97599 db 0
str_strncpy:
 97600 db "strncpy"
 97607 db 0
str_strlen:
 97608 db "strlen"
 97614 db 0
str_strspn:
 97615 db "strspn"
 97621 db 0
str_strcspn:
 97622 db "strcspn"
 97629 db 0
str_strpbrk:
 97630 db "strpbrk"
 97637 db 0
str_strstr:
 97638 db "strstr"
 97644 db 0
str_memcpy2:
 97645 db "memcpy2"
 97652 db 0
str_curFrame:
 97653 db "curFrame"
 97661 db 0
str_backFrame:
 97662 db "backFrame"
 97671 db 0
str_stack_jump:
 97672 db "stack_jump"
 97682 db 0
str_stack_return:
 97683 db "stack_return"
 97695 db 0
str_explode:
 97696 db "explode"
 97703 db 0
str_str2num:
 97704 db "str2num"
 97711 db 0
str_getNdigit:
 97712 db "getNdigit"
 97721 db 0
str_num2strSet:
 97722 db "num2strSet"
 97732 db 0
str_num2str:
 97733 db "num2str"
 97740 db 0
str_Nlog:
 97741 db "Nlog"
 97745 db 0
str_isPrint:
 97746 db "isPrint"
 97753 db 0
str_isNum:
 97754 db "isNum"
 97759 db 0
str_isAlpha:
 97760 db "isAlpha"
 97767 db 0
str_toLower:
 97768 db "toLower"
 97775 db 0
str_toUpper:
 97776 db "toUpper"
 97783 db 0
str_Con:
 97784 db "Con"
 97787 db 0
str_concat:
 97788 db "concat"
 97794 db 0
str_c2str:
 97795 db "c2str"
 97800 db 0
str_cstr_find_first_of:
 97801 db "cstr_find_first_of"
 97819 db 0
str_cstr_find_last_of:
 97820 db "cstr_find_last_of"
 97837 db 0
str_stack_copy:
 97838 db "stack_copy"
 97848 db 0
str_cstr_stack_copy:
 97849 db "cstr_stack_copy"
 97864 db 0
str_isspace:
 97865 db "isspace"
 97872 db 0
str_stralloc:
 97873 db "stralloc"
 97881 db 0
str_libconsolescreen_init:
 97882 db "libconsolescreen_init"
 97903 db 0
str_setPrintCursor:
 97904 db "setPrintCursor"
 97918 db 0
str_Print:
 97919 db "Print"
 97924 db 0
str_PrintChar:
 97925 db "PrintChar"
 97934 db 0
str_PrintStringXY:
 97935 db "PrintStringXY"
 97948 db 0
str_printCharXY:
 97949 db "printCharXY"
 97960 db 0
str_screenEraseChar:
 97961 db "screenEraseChar"
 97976 db 0
str_screen_set:
 97977 db "screen_set"
 97987 db 0
str_screen_clear:
 97988 db "screen_clear"
 98000 db 0
str_screen_cursor_enable:
 98001 db "screen_cursor_enable"
 98021 db 0
str_screen_cursor_disable:
 98022 db "screen_cursor_disable"
 98043 db 0
str_screen_set_cursor_pos:
 98044 db "screen_set_cursor_pos"
 98065 db 0
str_screen_set_cursor_pos_xy:
 98066 db "screen_set_cursor_pos_xy"
 98090 db 0
str_screen_force_refresh:
 98091 db "screen_force_refresh"
 98111 db 0
str_screen_set_shift_box_x1:
 98112 db "screen_set_shift_box_x1"
 98135 db 0
str_screen_set_shift_box_x2:
 98136 db "screen_set_shift_box_x2"
 98159 db 0
str_screen_set_shift_box_y1:
 98160 db "screen_set_shift_box_y1"
 98183 db 0
str_screen_set_shift_box_y2:
 98184 db "screen_set_shift_box_y2"
 98207 db 0
str_screen_set_shift_box:
 98208 db "screen_set_shift_box"
 98228 db 0
str_screen_set_print_box:
 98229 db "screen_set_print_box"
 98249 db 0
str_screen_shift_vertical:
 98250 db "screen_shift_vertical"
 98271 db 0
str_screen_shift_horizontal:
 98272 db "screen_shift_horizontal"
 98295 db 0
str_ConsoleShiftUp:
 98296 db "ConsoleShiftUp"
 98310 db 0
str_udhSetBusAddress:
 98311 db "udhSetBusAddress"
 98327 db 0
str_udhQueryDevices:
 98328 db "udhQueryDevices"
 98343 db 0
str_udhRegisterDriver:
 98344 db "udhRegisterDriver"
 98361 db 0
str_udhGetDeviceType:
 98362 db "udhGetDeviceType"
 98378 db 0
str_udhGetDeviceOffset:
 98379 db "udhGetDeviceOffset"
 98397 db 0
str_udhGetDeviceStart:
 98398 db "udhGetDeviceStart"
 98415 db 0
str_udhGetDeviceEnd:
 98416 db "udhGetDeviceEnd"
 98431 db 0
str_udhSetDeviceStart:
 98432 db "udhSetDeviceStart"
 98449 db 0
str_udhSetDeviceEnd:
 98450 db "udhSetDeviceEnd"
 98465 db 0
str_udhGetDeviceName:
 98466 db "udhGetDeviceName"
 98482 db 0
str_udhTypeToString:
 98483 db "udhTypeToString"
 98498 db 0
str_udhSetDeviceOffsetSize:
 98499 db "udhSetDeviceOffsetSize"
 98521 db 0
str_udhGetNumDevices:
 98522 db "udhGetNumDevices"
 98538 db 0
str_udhGetDevices:
 98539 db "udhGetDevices"
 98552 db 0
str_udhSetRecursive:
 98553 db "udhSetRecursive"
 98568 db 0
str_udh_getSizeFromType:
 98569 db "udh_getSizeFromType"
 98588 db 0
str_EBcb_entry_constructor:
 98589 db "EBcb_entry_constructor"
 98611 db 0
str_EBcb_entry_set_type:
 98612 db "EBcb_entry_set_type"
 98631 db 0
str_EBcb_entry_set_size:
 98632 db "EBcb_entry_set_size"
 98651 db 0
str_EBcb_entry_set_addr:
 98652 db "EBcb_entry_set_addr"
 98671 db 0
str_EBcb_entry_set_user:
 98672 db "EBcb_entry_set_user"
 98691 db 0
str_EBcb_entry_get_type:
 98692 db "EBcb_entry_get_type"
 98711 db 0
str_EBcb_entry_get_size:
 98712 db "EBcb_entry_get_size"
 98731 db 0
str_EBcb_entry_get_addr:
 98732 db "EBcb_entry_get_addr"
 98751 db 0
str_EBcb_entry_get_user:
 98752 db "EBcb_entry_get_user"
 98771 db 0
str_EBcb_constructor:
 98772 db "EBcb_constructor"
 98788 db 0
str_EBcb_get_entry:
 98789 db "EBcb_get_entry"
 98803 db 0
str_EBcb_populate:
 98804 db "EBcb_populate"
 98817 db 0
str_getSizeFromDevType:
 98818 db "getSizeFromDevType"
 98836 db 0
str_EBcb_autoconf:
 98837 db "EBcb_autoconf"
 98850 db 0
str_EBcb_resize_dev:
 98851 db "EBcb_resize_dev"
 98866 db 0
str_EBcb_device_bind:
 98867 db "EBcb_device_bind"
 98883 db 0
str_EBcb_device_bind_addr:
 98884 db "EBcb_device_bind_addr"
 98905 db 0
str_EBcb_print:
 98906 db "EBcb_print"
 98916 db 0
str_ioRead:
 98917 db "ioRead"
 98923 db 0
str_ioReadBuff:
 98924 db "ioReadBuff"
 98934 db 0
str_ioWrite:
 98935 db "ioWrite"
 98942 db 0
str_ioWriteBuff:
 98943 db "ioWriteBuff"
 98954 db 0
str_iocpy:
 98955 db "iocpy"
 98960 db 0
str_printf:
 98961 db "printf"
 98967 db 0
str_snprintf_cpy:
 98968 db "snprintf_cpy"
 98980 db 0
str_snprintf_putch:
 98981 db "snprintf_putch"
 98995 db 0
str_snprintf:
 98996 db "snprintf"
 99004 db 0
str_delay:
 99005 db "delay"
 99010 db 0
str_getTime:
 99011 db "getTime"
 99018 db 0
str_setTimeout:
 99019 db "setTimeout"
 99029 db 0
str_timePassed:
 99030 db "timePassed"
 99040 db 0
str_process_h_constructor:
 99041 db "process_h_constructor"
 99062 db 0
str_process_h_get_procID:
 99063 db "process_h_get_procID"
 99083 db 0
str_process_h_get_thread:
 99084 db "process_h_get_thread"
 99104 db 0
str_process_h_get_free_pages_start:
 99105 db "process_h_get_free_pages_start"
 99135 db 0
str_process_h_get_free_pages_end:
 99136 db "process_h_get_free_pages_end"
 99164 db 0
str_process_h_get_proginfo:
 99165 db "process_h_get_proginfo"
 99187 db 0
str_process_h_get_pagemap:
 99188 db "process_h_get_pagemap"
 99209 db 0
str_process_h_set_procID:
 99210 db "process_h_set_procID"
 99230 db 0
str_process_h_set_thread:
 99231 db "process_h_set_thread"
 99251 db 0
str_process_h_set_free_pages_start:
 99252 db "process_h_set_free_pages_start"
 99282 db 0
str_process_h_set_free_pages_end:
 99283 db "process_h_set_free_pages_end"
 99311 db 0
str_process_h_set_proginfo:
 99312 db "process_h_set_proginfo"
 99334 db 0
str_palloc_set_disk:
 99335 db "palloc_set_disk"
 99350 db 0
str_palloc_init:
 99351 db "palloc_init"
 99362 db 0
str_palloc:
 99363 db "palloc"
 99369 db 0
str_pfree:
 99370 db "pfree"
 99375 db 0
str_palloc_count_used:
 99376 db "palloc_count_used"
 99393 db 0
str_palloc_count_free:
 99394 db "palloc_count_free"
 99411 db 0
str_allocation_constructor:
 99412 db "allocation_constructor"
 99434 db 0
str_allocation_set_size:
 99435 db "allocation_set_size"
 99454 db 0
str_allocation_set_owner:
 99455 db "allocation_set_owner"
 99475 db 0
str_allocation_set_prev:
 99476 db "allocation_set_prev"
 99495 db 0
str_allocation_set_next:
 99496 db "allocation_set_next"
 99515 db 0
str_allocation_get_size:
 99516 db "allocation_get_size"
 99535 db 0
str_allocation_get_owner:
 99536 db "allocation_get_owner"
 99556 db 0
str_allocation_get_prev:
 99557 db "allocation_get_prev"
 99576 db 0
str_allocation_get_next:
 99577 db "allocation_get_next"
 99596 db 0
str_malloc_getAllocation:
 99597 db "malloc_getAllocation"
 99617 db 0
str_malloc_getDataFromIndex:
 99618 db "malloc_getDataFromIndex"
 99641 db 0
str_malloc_getDataFromAllocation:
 99642 db "malloc_getDataFromAllocation"
 99670 db 0
str_malloc_getIndex:
 99671 db "malloc_getIndex"
 99686 db 0
str_malloc_trySplit:
 99687 db "malloc_trySplit"
 99702 db 0
str_malloc_join:
 99703 db "malloc_join"
 99714 db 0
str_malloc_set_disk:
 99715 db "malloc_set_disk"
 99730 db 0
str_malloc_init:
 99731 db "malloc_init"
 99742 db 0
str_malloc_test:
 99743 db "malloc_test"
 99754 db 0
str_malloc_print_count:
 99755 db "malloc_print_count"
 99773 db 0
str_malloc_count:
 99774 db "malloc_count"
 99786 db 0
str_printAllocationSimple:
 99787 db "printAllocationSimple"
 99808 db 0
str_printAllocation:
 99809 db "printAllocation"
 99824 db 0
str_mallocLast:
 99825 db "mallocLast"
 99835 db 0
str_malloc:
 99836 db "malloc"
 99842 db 0
str_free:
 99843 db "free"
 99847 db 0
str_realloc:
 99848 db "realloc"
 99855 db 0
str_malloc_memcopy:
 99856 db "malloc_memcopy"
 99870 db 0
str_str_alloc:
 99871 db "str_alloc"
 99880 db 0
str_lfa_check:
 99881 db "lfa_check"
 99890 db 0
str_pow:
 99891 db "pow"
 99894 db 0
str_modulo:
 99895 db "modulo"
 99901 db 0
str_sqrt:
 99902 db "sqrt"
 99906 db 0
str_cbrt:
 99907 db "cbrt"
 99911 db 0
str_root:
 99912 db "root"
 99916 db 0
str_e:
 99917 db "e"
 99918 db 0
str_exp:
 99919 db "exp"
 99922 db 0
str_ln:
 99923 db "ln"
 99925 db 0
str_log2:
 99926 db "log2"
 99930 db 0
str_log10:
 99931 db "log10"
 99936 db 0
str_log:
 99937 db "log"
 99940 db 0
str_abs:
 99941 db "abs"
 99944 db 0
str_ceil:
 99945 db "ceil"
 99949 db 0
str_floor:
 99950 db "floor"
 99955 db 0
str_round:
 99956 db "round"
 99961 db 0
str_integer:
 99962 db "integer"
 99969 db 0
str_frac:
 99970 db "frac"
 99974 db 0
str_clamp:
 99975 db "clamp"
 99980 db 0
str_inrange:
 99981 db "inrange"
 99988 db 0
str_minimal:
 99989 db "minimal"
 99996 db 0
str_maximal:
 99997 db "maximal"
100004 db 0
str_random:
100005 db "random"
100011 db 0
str_random1:
100012 db "random1"
100019 db 0
str_random2:
100020 db "random2"
100027 db 0
str_randint1:
100028 db "randint1"
100036 db 0
str_randint2:
100037 db "randint2"
100045 db 0
str_pi:
100046 db "pi"
100048 db 0
str_toRad:
100049 db "toRad"
100054 db 0
str_toDeg:
100055 db "toDeg"
100060 db 0
str_sin:
100061 db "sin"
100064 db 0
str_cos:
100065 db "cos"
100068 db 0
str_tan:
100069 db "tan"
100072 db 0
str_cot:
100073 db "cot"
100076 db 0
str_sec:
100077 db "sec"
100080 db 0
str_csc:
100081 db "csc"
100084 db 0
str_asin:
100085 db "asin"
100089 db 0
str_acos:
100090 db "acos"
100094 db 0
str_atan:
100095 db "atan"
100099 db 0
str_sinh:
100100 db "sinh"
100104 db 0
str_cosh:
100105 db "cosh"
100109 db 0
str_tanh:
100110 db "tanh"
100114 db 0
str_coth:
100115 db "coth"
100119 db 0
str_sech:
100120 db "sech"
100124 db 0
str_csch:
100125 db "csch"
100129 db 0
str_sinr:
100130 db "sinr"
100134 db 0
str_cosr:
100135 db "cosr"
100139 db 0
str_tanr:
100140 db "tanr"
100144 db 0
str_cotr:
100145 db "cotr"
100149 db 0
str_secr:
100150 db "secr"
100154 db 0
str_cscr:
100155 db "cscr"
100159 db 0
str_asinr:
100160 db "asinr"
100165 db 0
str_acosr:
100166 db "acosr"
100171 db 0
str_atanr:
100172 db "atanr"
100177 db 0
str_ceil2:
100178 db "ceil2"
100183 db 0
str_floor2:
100184 db "floor2"
100190 db 0
str_round2:
100191 db "round2"
100197 db 0
str_v_error:
100198 db "v_error"
100205 db 0
str_v_warning:
100206 db "v_warning"
100215 db 0
str_vector_constructor:
100216 db "vector_constructor"
100234 db 0
str_vector_copy_constructor:
100235 db "vector_copy_constructor"
100258 db 0
str_vector_get_array:
100259 db "vector_get_array"
100275 db 0
str_vector_get_size:
100276 db "vector_get_size"
100291 db 0
str_vector_get_capacity:
100292 db "vector_get_capacity"
100311 db 0
str_vector_get_element_size:
100312 db "vector_get_element_size"
100335 db 0
str_vector_set_array:
100336 db "vector_set_array"
100352 db 0
str_vector_set_size:
100353 db "vector_set_size"
100368 db 0
str_vector_set_capacity:
100369 db "vector_set_capacity"
100388 db 0
str_vector_set_element_size:
100389 db "vector_set_element_size"
100412 db 0
str_vector_destructor:
100413 db "vector_destructor"
100430 db 0
str_vector_clear:
100431 db "vector_clear"
100443 db 0
str_vector_push:
100444 db "vector_push"
100455 db 0
str_vector_pop:
100456 db "vector_pop"
100466 db 0
str_vector_size:
100467 db "vector_size"
100478 db 0
str_vector_disk_size:
100479 db "vector_disk_size"
100495 db 0
str_vector_get:
100496 db "vector_get"
100506 db 0
str_vector_get_ref:
100507 db "vector_get_ref"
100521 db 0
str_vector_set:
100522 db "vector_set"
100532 db 0
str_vector_insert:
100533 db "vector_insert"
100546 db 0
str_vector_remove:
100547 db "vector_remove"
100560 db 0
str_vector_reserve:
100561 db "vector_reserve"
100575 db 0
str_vector_resize:
100576 db "vector_resize"
100589 db 0
str_vector_array:
100590 db "vector_array"
100602 db 0
str_initInterrupts:
100603 db "initInterrupts"
100617 db 0
str_addInterruptHandler:
100618 db "addInterruptHandler"
100637 db 0
str_extendedModeEnable:
100638 db "extendedModeEnable"
100656 db 0
str_extendedModeDisable:
100657 db "extendedModeDisable"
100676 db 0
str_interruptsEnable:
100677 db "interruptsEnable"
100693 db 0
str_interruptsDisable:
100694 db "interruptsDisable"
100711 db 0
str_intnum_to_str:
100712 db "intnum_to_str"
100725 db 0
str_setKeyboard:
100726 db "setKeyboard"
100737 db 0
str_isPrint1:
100738 db "isPrint1"
100746 db 0
str_readKey:
100747 db "readKey"
100754 db 0
str_hasKey:
100755 db "hasKey"
100761 db 0
str_readKB:
100762 db "readKB"
100768 db 0
str_waitKey:
100769 db "waitKey"
100776 db 0
str_readKeyTimed:
100777 db "readKeyTimed"
100789 db 0
str_readline:
100790 db "readline"
100798 db 0
str_initPaging:
100799 db "initPaging"
100809 db 0
str_setPageTable:
100810 db "setPageTable"
100822 db 0
str_pagingEnable:
100823 db "pagingEnable"
100835 db 0
str_pagingDisable:
100836 db "pagingDisable"
100849 db 0
str_getPage:
100850 db "getPage"
100857 db 0
str_setPageFlags:
100858 db "setPageFlags"
100870 db 0
str_getPageFlags:
100871 db "getPageFlags"
100883 db 0
str_setPageRunLevel:
100884 db "setPageRunLevel"
100899 db 0
str_getPageRunlevel:
100900 db "getPageRunlevel"
100915 db 0
str_setPageMapping:
100916 db "setPageMapping"
100930 db 0
str_getPageMapping:
100931 db "getPageMapping"
100945 db 0
str_reportPage:
100946 db "reportPage"
100956 db 0
str_toPage:
100957 db "toPage"
100963 db 0
str_copyPage:
100964 db "copyPage"
100972 db 0
str_mapPage:
100973 db "mapPage"
100980 db 0
str_setMemoryRunlevel:
100981 db "setMemoryRunlevel"
100998 db 0
str_setMemoryMapping:
100999 db "setMemoryMapping"
101015 db 0
str_proginfo_constructor:
101016 db "proginfo_constructor"
101036 db 0
str_proginfo_get_addr:
101037 db "proginfo_get_addr"
101054 db 0
str_proginfo_get_size:
101055 db "proginfo_get_size"
101072 db 0
str_proginfo_get_entry:
101073 db "proginfo_get_entry"
101091 db 0
str_proginfo_set_addr:
101092 db "proginfo_set_addr"
101109 db 0
str_proginfo_set_size:
101110 db "proginfo_set_size"
101127 db 0
str_proginfo_set_entry:
101128 db "proginfo_set_entry"
101146 db 0
str_generateProcess:
101147 db "generateProcess"
101162 db 0
str_process_run:
101163 db "process_run"
101174 db 0
str_dbg_checkPagemap:
101175 db "dbg_checkPagemap"
101191 db 0
str_dbg_checkRunlevel:
101192 db "dbg_checkRunlevel"
101209 db 0
str_process_setup_pagetable:
101210 db "process_setup_pagetable"
101233 db 0
str_mapPages:
101234 db "mapPages"
101242 db 0
str_mapPagesAlloc:
101243 db "mapPagesAlloc"
101256 db 0
str_readProgramInfo:
101257 db "readProgramInfo"
101272 db 0
str_process_insert_program:
101273 db "process_insert_program"
101295 db 0
str_args_constructor:
101296 db "args_constructor"
101312 db 0
str_is_flag:
101313 db "is_flag"
101320 db 0
str_is_long_flag:
101321 db "is_long_flag"
101333 db 0
str_args_debug_printX:
101334 db "args_debug_printX"
101351 db 0
str_args_debug_printBuff:
101352 db "args_debug_printBuff"
101372 db 0
str_args_debug_printVX:
101373 db "args_debug_printVX"
101391 db 0
str_args_debug_printV:
101392 db "args_debug_printV"
101409 db 0
str_args_add_x:
101410 db "args_add_x"
101420 db 0
str_args_collect:
101421 db "args_collect"
101433 db 0
str_args_helper_getX_t:
101434 db "args_helper_getX_t"
101452 db 0
str_args_helper_getX_ts:
101453 db "args_helper_getX_ts"
101472 db 0
str_args_hasFlag:
101473 db "args_hasFlag"
101485 db 0
str_args_num:
101486 db "args_num"
101494 db 0
str_args_numFlags:
101495 db "args_numFlags"
101508 db 0
str_args_popArg:
101509 db "args_popArg"
101520 db 0
str_args_helper_popX:
101521 db "args_helper_popX"
101537 db 0
str_args_popFlag:
101538 db "args_popFlag"
101550 db 0
str_args_popFlag_s:
101551 db "args_popFlag_s"
101565 db 0
str_args_popFlagParam_s:
101566 db "args_popFlagParam_s"
101585 db 0
str_args_new:
101586 db "args_new"
101594 db 0
str_init_shell2:
101595 db "init_shell2"
101606 db 0
str_shell2_constructor:
101607 db "shell2_constructor"
101625 db 0
str_shell2_open:
101626 db "shell2_open"
101637 db 0
str_shell2_add_command:
101638 db "shell2_add_command"
101656 db 0
str_shell2_lookup_command:
101657 db "shell2_lookup_command"
101678 db 0
str_shell2_waitInput:
101679 db "shell2_waitInput"
101695 db 0
str_shell2_print_prompt:
101696 db "shell2_print_prompt"
101715 db 0
str_shell2_process_key:
101716 db "shell2_process_key"
101734 db 0
str_shell2_process_command:
101735 db "shell2_process_command"
101757 db 0
str_shell2_associate_fs3_with_letter:
101758 db "shell2_associate_fs3_with_letter"
101790 db 0
str_shell2_set_fs_by_drive_letter:
101791 db "shell2_set_fs_by_drive_letter"
101820 db 0
str_shell2_set_cd:
101821 db "shell2_set_cd"
101834 db 0
str_cmdHelp:
101835 db "cmdHelp"
101842 db 0
str_cmdHelp2:
101843 db "cmdHelp2"
101851 db 0
str_cmdCls:
101852 db "cmdCls"
101858 db 0
str_cmdEcho:
101859 db "cmdEcho"
101866 db 0
str_printBytemap:
101867 db "printBytemap"
101879 db 0
str_cmdDevice:
101880 db "cmdDevice"
101889 db 0
str_check_canary:
101890 db "check_canary"
101902 db 0
str_file_handle_constructor:
101903 db "file_handle_constructor"
101926 db 0
str_file_handle_copy_constructor:
101927 db "file_handle_copy_constructor"
101955 db 0
str_file_handle_destructor:
101956 db "file_handle_destructor"
101978 db 0
str_file_handle_get_canary:
101979 db "file_handle_get_canary"
102001 db 0
str_file_handle_get_rw_ptr:
102002 db "file_handle_get_rw_ptr"
102024 db 0
str_file_handle_get_imp:
102025 db "file_handle_get_imp"
102044 db 0
str_file_handle_set_canary:
102045 db "file_handle_set_canary"
102067 db 0
str_file_handle_set_rw_ptr:
102068 db "file_handle_set_rw_ptr"
102090 db 0
str_file_handle_set_imp:
102091 db "file_handle_set_imp"
102110 db 0
str_translate_fopen_mode:
102111 db "translate_fopen_mode"
102131 db 0
str_filepath_legal:
102132 db "filepath_legal"
102146 db 0
str_filepath_abs:
102147 db "filepath_abs"
102159 db 0
str_filepath_decimate:
102160 db "filepath_decimate"
102177 db 0
str_filepath_extension:
102178 db "filepath_extension"
102196 db 0
str_filepath_base:
102197 db "filepath_base"
102210 db 0
str_filepath_drive:
102211 db "filepath_drive"
102225 db 0
str_filepath_no_drive:
102226 db "filepath_no_drive"
102243 db 0
str_init_fs3:
102244 db "init_fs3"
102252 db 0
str_fs3_disk_format:
102253 db "fs3_disk_format"
102268 db 0
str_fs3_load_fs_descriptor:
102269 db "fs3_load_fs_descriptor"
102291 db 0
str_fs3_create_root_dir:
102292 db "fs3_create_root_dir"
102311 db 0
str_fs3_find_first_file_block:
102312 db "fs3_find_first_file_block"
102337 db 0
str_fs3_get_max_file_index:
102338 db "fs3_get_max_file_index"
102360 db 0
str_fs3_set_max_file_index:
102361 db "fs3_set_max_file_index"
102383 db 0
str_fs3_get_block_map:
102384 db "fs3_get_block_map"
102401 db 0
str_fs3_get_block_size:
102402 db "fs3_get_block_size"
102420 db 0
str_fs3_get_fblocks:
102421 db "fs3_get_fblocks"
102436 db 0
str_fs3_low_new:
102437 db "fs3_low_new"
102448 db 0
str_fs3_get_disk_adr:
102449 db "fs3_get_disk_adr"
102465 db 0
str_fs3_low_read:
102466 db "fs3_low_read"
102478 db 0
str_fs3_low_write:
102479 db "fs3_low_write"
102492 db 0
str_fs3_low_write_0:
102493 db "fs3_low_write_0"
102508 db 0
str_fs3_erase_block_chain:
102509 db "fs3_erase_block_chain"
102530 db 0
str_fs3_make_dir_entry:
102531 db "fs3_make_dir_entry"
102549 db 0
str_fs3_dir_add_entry:
102550 db "fs3_dir_add_entry"
102567 db 0
str_fs3_new_abs:
102568 db "fs3_new_abs"
102579 db 0
str_fs3_dir_read_entry:
102580 db "fs3_dir_read_entry"
102598 db 0
str_fs3_dir_get_num_entries:
102599 db "fs3_dir_get_num_entries"
102622 db 0
str_fs3_dir_get_entry_ptr:
102623 db "fs3_dir_get_entry_ptr"
102644 db 0
str_fs3_dir_erase_entry:
102645 db "fs3_dir_erase_entry"
102664 db 0
str_fs3_dir_get_filename:
102665 db "fs3_dir_get_filename"
102685 db 0
str_fs3_print_file_handle:
102686 db "fs3_print_file_handle"
102707 db 0
str_fs3_print_entry:
102708 db "fs3_print_entry"
102723 db 0
str_fs3_dir_get_filesize:
102724 db "fs3_dir_get_filesize"
102744 db 0
str_fs3_dir_find_fidx:
102745 db "fs3_dir_find_fidx"
102762 db 0
str_fs3_open_file_index:
102763 db "fs3_open_file_index"
102782 db 0
str_fs3_open_or_lookup_file_index:
102783 db "fs3_open_or_lookup_file_index"
102812 db 0
str_fs3_open_root_dir:
102813 db "fs3_open_root_dir"
102830 db 0
str_fs3_find_file:
102831 db "fs3_find_file"
102844 db 0
str_fs3_find_file_helper:
102845 db "fs3_find_file_helper"
102865 db 0
str_fs3_find_entry_in_folder:
102866 db "fs3_find_entry_in_folder"
102890 db 0
str_fs3_find_file_in_folder:
102891 db "fs3_find_file_in_folder"
102914 db 0
str_fs3_from_filepath:
102915 db "fs3_from_filepath"
102932 db 0
str_shell2_get_fs3:
102933 db "shell2_get_fs3"
102947 db 0
str_fs3_file_set_backlink:
102948 db "fs3_file_set_backlink"
102969 db 0
str_fs3_file_get_backlink:
102970 db "fs3_file_get_backlink"
102991 db 0
str_fs3_fh_constructor:
102992 db "fs3_fh_constructor"
103010 db 0
str_print_file_handle:
103011 db "print_file_handle"
103028 db 0
str_fs3_fh_set_filename:
103029 db "fs3_fh_set_filename"
103048 db 0
str_fs3_fh_get_filename:
103049 db "fs3_fh_get_filename"
103068 db 0
str_fsize:
103069 db "fsize"
103074 db 0
str_fseek:
103075 db "fseek"
103080 db 0
str_fread:
103081 db "fread"
103086 db 0
str_fwrite:
103087 db "fwrite"
103093 db 0
str_fopen:
103094 db "fopen"
103099 db 0
str_fclose:
103100 db "fclose"
103106 db 0
str_fs3_get_parent_dir:
103107 db "fs3_get_parent_dir"
103125 db 0
str_fs3_mkdir:
103126 db "fs3_mkdir"
103135 db 0
str_fs3_delFile:
103136 db "fs3_delFile"
103147 db 0
str_fs3_init_file_table:
103148 db "fs3_init_file_table"
103167 db 0
str_fs3_add_file_to_FT:
103168 db "fs3_add_file_to_FT"
103186 db 0
str_fs3_FT_get_file:
103187 db "fs3_FT_get_file"
103202 db 0
str_fs3_FT_erase_file:
103203 db "fs3_FT_erase_file"
103220 db 0
str_fs3_backlink_write_size:
103221 db "fs3_backlink_write_size"
103244 db 0
str_fs3_backlink_read_size:
103245 db "fs3_backlink_read_size"
103267 db 0
str_cmdMount:
103268 db "cmdMount"
103276 db 0
str_cmdCD:
103277 db "cmdCD"
103282 db 0
str_cmdFormat:
103283 db "cmdFormat"
103292 db 0
str_cmdDir:
103293 db "cmdDir"
103299 db 0
str_cmdMkDir:
103300 db "cmdMkDir"
103308 db 0
str_cmdDel:
103309 db "cmdDel"
103315 db 0
str_cmdMem:
103316 db "cmdMem"
103322 db 0
str_cmdWrite:
103323 db "cmdWrite"
103331 db 0
str_cmdRead:
103332 db "cmdRead"
103339 db 0
str_countHDD:
103340 db "countHDD"
103348 db 0
str_printBlockmap:
103349 db "printBlockmap"
103362 db 0
str_cmdFS:
103363 db "cmdFS"
103368 db 0
str_printKbs:
103369 db "printKbs"
103377 db 0
str_cmdDiag:
103378 db "cmdDiag"
103385 db 0
str_cmdDump:
103386 db "cmdDump"
103393 db 0
str_cmdRun:
103394 db "cmdRun"
103400 db 0
str_cmdOverstack:
103401 db "cmdOverstack"
103413 db 0
str_cmdTestArgs:
103414 db "cmdTestArgs"
103425 db 0
str_page_manager_constructor:
103426 db "page_manager_constructor"
103450 db 0
str_page_manager_assign_default_page:
103451 db "page_manager_assign_default_page"
103483 db 0
str_page_manager_check_size:
103484 db "page_manager_check_size"
103507 db 0
str_page_manager_assign_page_range:
103508 db "page_manager_assign_page_range"
103538 db 0
str_page_manager_map_1_to_1:
103539 db "page_manager_map_1_to_1"
103562 db 0
str_page_manager_activate:
103563 db "page_manager_activate"
103584 db 0
str_getIntStackTrace:
103585 db "getIntStackTrace"
103601 db 0
str_getStackTrace:
103602 db "getStackTrace"
103615 db 0
str_printStackTrace:
103616 db "printStackTrace"
103631 db 0
str_findClosestFunc:
103632 db "findClosestFunc"
103647 db 0
str_getFuncName:
103648 db "getFuncName"
103659 db 0
str_getVarName:
103660 db "getVarName"
103670 db 0
str_getSymbolName:
103671 db "getSymbolName"
103684 db 0
str_findSymbolByName:
103685 db "findSymbolByName"
103701 db 0
str_findFuncByName:
103702 db "findFuncByName"
103716 db 0
str_findVarByName:
103717 db "findVarByName"
103730 db 0
str_overstack_init:
103731 db "overstack_init"
103745 db 0
str_overstack_fenter:
103746 db "overstack_fenter"
103762 db 0
str_overstack_fexit:
103763 db "overstack_fexit"
103778 db 0
str_overstack_error:
103779 db "overstack_error"
103794 db 0
str_overstack_trace:
103795 db "overstack_trace"
103810 db 0
str_main:
103811 db "main"
103815 db 0
str_set_trampoline:
103816 db "set_trampoline"
103830 db 0
str_clear_globals:
103831 db "clear_globals"
103844 db 0
str_kprints:
103845 db "kprints"
103852 db 0
str_kprintn:
103853 db "kprintn"
103860 db 0
str_kprintf:
103861 db "kprintf"
103868 db 0
str_kernel_thread:
103869 db "kernel_thread"
103882 db 0
str_exec_test:
103883 db "exec_test"
103892 db 0
str_write_test:
103893 db "write_test"
103903 db 0
str_protect_kernel_pages:
103904 db "protect_kernel_pages"
103924 db 0
str_init_ktimer:
103925 db "init_ktimer"
103936 db 0
str_unfuckEntry:
103937 db "unfuckEntry"
103948 db 0
str_retAlert:
103949 db "retAlert"
103957 db 0
str_KernellCallIntHandler:
103958 db "KernellCallIntHandler"
103979 db 0
str_UnmappedPageIntHandler:
103980 db "UnmappedPageIntHandler"
104002 db 0
str_defaultIntHandler:
104003 db "defaultIntHandler"
104020 db 0
str_timerShouldRun:
104021 db "timerShouldRun"
104035 db 0
str_timerLogic:
104036 db "timerLogic"
104046 db 0
str_timerIntHandler:
104047 db "timerIntHandler"
104062 db 0
str_pageTrapHandler:
104063 db "pageTrapHandler"
104078 db 0
str_pageReadHandler:
104079 db "pageReadHandler"
104094 db 0
str_pageWriteHandler:
104095 db "pageWriteHandler"
104111 db 0
str_thread_terminate:
104112 db "thread_terminate"
104128 db 0
str_setThreadExitPoint:
104129 db "setThreadExitPoint"
104147 db 0
str_jmpThreadExitPoint:
104148 db "jmpThreadExitPoint"
104166 db 0
str_farjump:
104167 db "farjump"
104174 db 0
str_findJmp:
104175 db "findJmp"
104182 db 0
str_toAbsSpace:
104183 db "toAbsSpace"
104193 db 0
str_kcall:
104194 db "kcall"
104199 db 0
str_vprintf:
104200 db "vprintf"
104207 db 0
str_bios_prints:
104208 db "bios_prints"
104219 db 0
str_bios_printn:
104220 db "bios_printn"
104231 db 0
str_Perr:
104232 db "Perr"
104236 db 0
str_panic:
104237 db "panic"
104242 db 0
str_error:
104243 db "error"
104248 db 0
str_kernelSize:
104249 db "kernelSize"
104259 db 0
func_name_table_end:
var_name_table:
str_current_thread:
104260 db "current_thread"
104274 db 0
str_lastProcess:
104275 db "lastProcess"
104286 db 0
str_udhBusOffset:
104287 db "udhBusOffset"
104299 db 0
str_udhQueryCallback:
104300 db "udhQueryCallback"
104316 db 0
str_udhQueryCallbackCount:
104317 db "udhQueryCallbackCount"
104338 db 0
str_sizeof_EBcb_entry:
104339 db "sizeof_EBcb_entry"
104356 db 0
str_sizeof_EBcb:
104357 db "sizeof_EBcb"
104368 db 0
str_sizeof_process_h:
104369 db "sizeof_process_h"
104385 db 0
str_sizeof_vector:
104386 db "sizeof_vector"
104399 db 0
str_numInts:
104400 db "numInts"
104407 db 0
str_readKeyTimed_delay_time:
104408 db "readKeyTimed_delay_time"
104431 db 0
str_readKeyTimed_repeat_time:
104432 db "readKeyTimed_repeat_time"
104456 db 0
str_readKeyTimed_keyState:
104457 db "readKeyTimed_keyState"
104478 db 0
str_readKeyTimed_lastSeen:
104479 db "readKeyTimed_lastSeen"
104500 db 0
str_readKeyTimed_lastKey:
104501 db "readKeyTimed_lastKey"
104521 db 0
str_sizeof_proginfo:
104522 db "sizeof_proginfo"
104537 db 0
str_sizeof_args:
104538 db "sizeof_args"
104549 db 0
str_sizeof_arg_element:
104550 db "sizeof_arg_element"
104568 db 0
str_sizeof_shell2:
104569 db "sizeof_shell2"
104582 db 0
str_sizeof_shell2_text:
104583 db "sizeof_shell2_text"
104601 db 0
str_sizeof_shell2_cd:
104602 db "sizeof_shell2_cd"
104618 db 0
str_sizeof_file_handle:
104619 db "sizeof_file_handle"
104637 db 0
str_sizeof_fs3:
104638 db "sizeof_fs3"
104648 db 0
str_fs3_entry_size:
104649 db "fs3_entry_size"
104663 db 0
str_fs3_name_size:
104664 db "fs3_name_size"
104677 db 0
str_sizeof_fs3_fh:
104678 db "sizeof_fs3_fh"
104691 db 0
str_sizeof_page_manager:
104692 db "sizeof_page_manager"
104711 db 0
str_cs_last_x:
104712 db "cs_last_x"
104721 db 0
str_cs_last_y:
104722 db "cs_last_y"
104731 db 0
str_printScrX:
104732 db "printScrX"
104741 db 0
str_printScrY:
104742 db "printScrY"
104751 db 0
str_AdrScreen:
104752 db "AdrScreen"
104761 db 0
str_screen_print_x_min:
104762 db "screen_print_x_min"
104780 db 0
str_screen_print_y_min:
104781 db "screen_print_y_min"
104799 db 0
str_screen_print_x_max:
104800 db "screen_print_x_max"
104818 db 0
str_screen_print_y_max:
104819 db "screen_print_y_max"
104837 db 0
str_Nbase:
104838 db "Nbase"
104843 db 0
str_Nprec:
104844 db "Nprec"
104849 db 0
str_malloc_debug:
104850 db "malloc_debug"
104862 db 0
str_malloc_print:
104863 db "malloc_print"
104875 db 0
str_malloc_num2str:
104876 db "malloc_num2str"
104890 db 0
str_malloc_disk:
104891 db "malloc_disk"
104902 db 0
str_malloc_max_disk:
104903 db "malloc_max_disk"
104918 db 0
str_malloc_header:
104919 db "malloc_header"
104932 db 0
str_malloc_user:
104933 db "malloc_user"
104944 db 0
str_lastFreeAllocation:
104945 db "lastFreeAllocation"
104963 db 0
str_malloc_debug_iters:
104964 db "malloc_debug_iters"
104982 db 0
str_page_allocator_disk:
104983 db "page_allocator_disk"
105002 db 0
str_page_allocator_size:
105003 db "page_allocator_size"
105022 db 0
str_ptrKB:
105023 db "ptrKB"
105028 db 0
str_overstack_func_stack:
105029 db "overstack_func_stack"
105049 db 0
str_EB_Addr_Screen:
105050 db "EB_Addr_Screen"
105064 db 0
str_timerPeriod:
105065 db "timerPeriod"
105076 db 0
str_timerLogicTimeout:
105077 db "timerLogicTimeout"
105094 db 0
str_v_proclist:
105095 db "v_proclist"
105105 db 0
str_proclist_I:
105106 db "proclist_I"
105116 db 0
str_switcherOn:
105117 db "switcherOn"
105127 db 0
str_k_page_manager:
105128 db "k_page_manager"
105142 db 0
str_threadExit_ebp:
105143 db "threadExit_ebp"
105157 db 0
str_threadExit_esp:
105158 db "threadExit_esp"
105172 db 0
str_threadExit_pos:
105173 db "threadExit_pos"
105187 db 0
str_timerN:
105188 db "timerN"
105194 db 0
var_name_table_end:
heap:
105195 db 0
105196 alloc 10000
