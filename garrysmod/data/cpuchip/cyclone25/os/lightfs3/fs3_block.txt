//block level access

// functions:
//
// find_first_file_block - returns the block index of the first block with the matching file index
// get_max_file_index - returns the max_file_index of the filesystem
// get_block_map - returns a disk-pointer to the block map
// get_block_size - returns the blocksize of the filesystem
// low_new - allocates a new file and block chain
// get_disk_adr - converts a file-poitner to a disk-pointer
// low_read - performs a low-level read operation in disk space
// low_write - performs a low-level write operation in disk space
//


//on success, returns the block index and copies the block entry to *fblock.
//on failure, returns -1.
float fs3_find_first_file_block(float fs3, float file_index, float fblock){
    assert_type(fs3, typeof_fs3);
    //printf("fs3_find_first_file_block(fs3 %d, file_index %d, fblock %d)\n", fs3, file_index, fblock);
    //go over the block map until the file's chain is found
    float blockmap;
    fs3_low_read(fs3, 14, &blockmap, 1);  // disk[14] = dptr to blockmap
    float numblocks;
    fs3_low_read(fs3, 13, &numblocks, 1); // disk[13] = number of blocks
    //printf("fffb: blockmap = %d, numblocks = %d\n", blockmap, numblocks);
    float I;
    for(I = 0; I < numblocks; I++){
        float blockadr = blockmap + 2*I;
        fs3_low_read(fs3, blockadr, fblock, 2);
        float fb_index = fblock[0];
        if(fb_index == file_index){
            //printf("found fblock: {fi %d, next %d} @ %d\n", fblock[0], fblock[1], I);
            return I
        }
    }
    //printf("no fblock for fi %d\n", file_index);
    return -1;
}

float fs3_get_max_file_index(float fs3){
    assert_type(fs3, typeof_fs3);
    float res;
    fs3_low_read(fs3, 16, &res, 1);
    //printf("fs3_gmfi: max file_index was %d\n",res);
    return res;
}

float fs3_set_max_file_index(float fs3, float file_index){
    assert_type(fs3, typeof_fs3);
    fs3_low_write(fs3, 16, &file_index, 1);
    //printf("fs3_smfi: max file_index is now %d\n", file_index);
}

float fs3_get_block_map(float fs3){
    assert_type(fs3, typeof_fs3);
    float res;
    fs3_low_read(fs3, 14, &res, 1);
    return res;
}

float fs3_get_block_size(float fs3){
    assert_type(fs3, typeof_fs3);
    float res;
    fs3_low_read(fs3, 12, &res, 1);
    return res;
}

float fs3_get_fblocks(float fs3){
    assert_type(fs3, typeof_fs3);
    float res;
    fs3_low_read(fs3, 15, &res, 1); // disk[15] = dptr to blocks
    return res;
}

//low level function to allocate a new blank file
//returns block index or -1 if there are no empty blocks
float fs3_low_new(float fs3, float file_idx){
    //find an empty block
    //mark it as file_dx
    assert_type(fs3, typeof_fs3);
    //printf("fs3_low_new(fs3 %d, file_index %d)\n", fs3, file_idx);
    //go over the block map until the file's chain is found
    float blockmap;
    fs3_low_read(fs3, 14, &blockmap, 1);  // disk[14] = dptr to blockmap
    float numblocks;
    fs3_low_read(fs3, 13, &numblocks, 1); // disk[13] = number of blocks
    //printf("ln: blockmap = %d, numblocks = %d\n", blockmap, numblocks);
    float I;
    float fblock[2];
    for(I = 0; I < numblocks; I++){
        float blockadr = blockmap + 2*I;
        fs3_low_read(fs3, blockadr, fblock, 2);
        float fb_index = fblock[0];
        if(fb_index == 0){
            //printf("found fblock: {%d, %d} @ %d\n", fblock[0], fblock[1], I);
            fblock[0] = file_idx;
            fblock[1] = -1;
            //printf("new fblock: {fi %d, next %d} @ %d\n", fblock[0], fblock[1], I);
            fs3_low_write(fs3, blockadr, fblock, 2);
            return I
        }
    }
    return -1;
}


//gets the disk-relative address of a pointer, given a block number.
//the pointer is taken modulo block size.
float fs3_get_disk_adr(float fs3, float block_num, float ptr){
    assert_type(fs3, typeof_fs3);
    //float blockmap = fs3_get_block_map(fs3);
    float fblocks = fs3_get_fblocks(fs3);
    float blocksize= fs3_get_block_size(fs3);
    //float disk_adr = blockmap + (blocksize * block_num) + (ptr % blocksize);
    float disk_adr = fblocks + (blocksize * block_num) + (ptr % blocksize);
    //printf("fs3_get_disk_adr(fs3 %d, block_num %d, ptr %d) = %d\n", fs3, block_num, ptr, disk_adr);
    //printf("... fileblocks = %d, blocksize = %d\n", fblocks, blocksize);
    //printf("fs3gda(%d,%d)->%d\n",block_num,ptr,disk_adr);
    return disk_adr;
}

//does a low-level byte read from the disk
float fs3_low_read(float fs3, float disk_ptr, float to, float size){
    assert_type(fs3, typeof_fs3);
    float disk = fs3[1]; // disk pointer
    float abs_ptr = disk + disk_ptr;
    float col_blue = 119;
    //printf("%m(%d)", col_blue, disk_ptr);
    //void *memcpy(void *dest, void *src, float n);
    memcpy(to, abs_ptr, size); //needs to be updated to do multiblock stuff
    return 1;
}

float fs3_low_write(float fs3, float disk_ptr, float from, float size){
    assert_type(fs3, typeof_fs3);
    //printf("fs3_low_write(fs3 %d, dptr %d, from %d, size %d)\n",fs3, disk_ptr, from, size);
    float col_purple = 505;
    //printf("%m(%d)",col_purple, disk_ptr);
    //float I;
    //for(I = 0; I < size; I++){
    //    printf("from[%d] = %d\n", I, from[I]);
    //}
    
    float disk = fs3[1]; // address of disk
    float abs_ptr = disk + disk_ptr;
    //printf("disk = %d, aptr = %d\n", disk, abs_ptr);
    //void *memcpy(void *dest, void *src, float n);
    memcpy(abs_ptr, from, size); //needs to be updated to do multiblock stuff
    return 1;    
}


float fs3_low_write_0(float fs3, float disk_ptr, float count){
    assert_type(fs3, typeof_fs3);
    float disk = fs3[1]; // address of disk
    float abs_ptr = disk + disk_ptr;
    float I;
    for(I = 0; I < count; I++){
        abs_ptr[I] = 0;
    }
    return 1;
}

float fs3_erase_block_chain(float fs3, float block_id){
    //printf("erase_block_chain(%d)\n",block_id);
    if(block_id == 0){return 0;} //quick protection hack
    assert_type(fs3, typeof_fs3);
    float num_blocks;    fs3_low_read(fs3, 13, &num_blocks, 1);
    float dptr_blockmap; fs3_low_read(fs3, 14, &dptr_blockmap, 1);
    float blockmap_size = num_blocks*2;
    float blockmap = malloc(blockmap_size);
    fs3_low_read(fs3, dptr_blockmap, blockmap, blockmap_size);
    float B;
    float Buser;
    float Bnext;
    //no checks about valid block id
    if((block_id > -1) && (block_id < (num_blocks-1))){
        //printf("ebc: bad block id, max is %d\n", num_blocks-1);
        return 0;
    }
    while((block_id > -1) && (block_id < (num_blocks-1))){
        B = blockmap + block_id*2;
        Buser = B[0];
        Bnext = B[1];
        B[0] = 0;
        B[1] = -1;
        //printf("ebc: id %d, user %d, next %d\n",block_id, Buser, Bnext);
        block_id = Bnext;
    }
    fs3_low_write(fs3, dptr_blockmap, blockmap, blockmap_size);
}





