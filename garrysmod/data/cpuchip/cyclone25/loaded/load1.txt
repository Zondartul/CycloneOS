//cyclone 25 loaded program test 1
jmp main;
db programsize;
alloc 128;
ORG 2048;
//alloc 128;

// approximate layout:
// file     vmem      vpage   physmem
// 0-127    disabled  0       disabled (jmp main and programsize read by loader)
// 128-1024 128-1024  1-       kernel interface interrupt handlers
// 1024-    1024-             palloc pages
//
//file      vpage   remap   physmem
//0-127     0       -       disabled (nullptr), jmp main and programsize read by loader
//128-255   1       1:1     -------
//256-383   2       1:1     |
//384-511   3       1:1     | kernel interface interrupt handlers
//512-639   4       1:1     | maybe interrupt table
//640-767   5       1:1     | maybe stack
//768-895   6       1:1     |
//896-1023  7       1:1     |
//1024-1151 8       1:1     |
//1152-1279 9       1:      +------
//1280-1407 10      1:1     | interrupt table
//1408-1535 11      1:1     -------
//1536-1663 12      1:1      
//1664-1791 13      ..
//1792-1919 14
//1920-2047 15
//2048-2175 16      palloc  -----------
//2176-2303 17      palloc  | program
//2304-2431 18      palloc  -----------
//2432-2559 19
//2560-2687 20      
//2688-2815 21      
//2816-2943 22     
//2944-3071 23      ...
//3072-3199 24
//3200-3327 25 
//3328-3455 26
//3456-3583 27
//3584-3711 28
//3712-3839 29
//3840-3967 30
#pragma set OutputFinalListing true
#pragma set OutputToFile true




//
//1408
//1024-ps-1 8-n     palloc  program copied to allocated pages
//ps+       n+      -       disabled (forbidden)

float main(){
    return 0;
}

#include "variadic.txt"
#define int_kernell_call 40
#define kk_prints 1
#define kk_printn 2
#define kk_printf 3
#define kk_thread_exit 4
#define kk_proc_id 5
float kprints(float s){kcall(kk_prints, s, 0, 0);}
float kprintn(float n){kcall(kk_printn, n, 0, 0);}
float kprintf(float fmt){
    float nargs = ecx;
    float va = va_start(&fmt);
    kcall(kk_printf, fmt, nargs, va);
}
float getProcID(){
    kcall(kk_proc_id, 0, 0, 0); 
    return r0;
}

float kcall(float a, float b, float c, float d){
    preserve r0, r1, r2, r3;
    mov r0, a;
    mov r1, b;
    mov r2, c;
    mov r3, d;
    int int_kernell_call;
    zap r0, r1, r2, r3;
}

void delay(float time)
{
    preserve edx;
    timer edx;
    float T = edx;
    while((edx-T)<time)
    {
        timer edx;
    }
    zap edx;
}

float backup(){//main(){
    kprints("I am pone\n");
    kprintf("very pone %d\n",123);
    //float p = 10;
    //float x = *p;
    //kprintf("space pone %d\n",123);
    
    
    float k_switchToKernel = 430;
    float k_main = 40030;
//    k_switchToKernel();
//    kprintf(" i am now kernel\n");
    //k_main();
    float id = getProcID();
    kprintf("proc_id = %d\n",id);
    float col = 999;
    if(id == 0){col = 90;}
    if(id == 1){col = 990;}
    if(id == 2){col = 9;}
    if(id == 3){col = 909;}
    
    float I = 0;
    while(1){
        //kprintf("esp %d, ebp %d\n", esp, ebp);
        kprintf("%mpone %d\n",col, I);
        I = I+1;
        //nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;
        //nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;
        //nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;
        //nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;
        //nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;
        //nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;
        //delay(2);
    }

    //kprints("am done\n");
    //mov r0, kk_printn;
    //mov r1, 500;
    //float p = 128;
    //push 0;
    //p();
    //kprintn(1);
    //kprintn(2);
    //clef;
}

