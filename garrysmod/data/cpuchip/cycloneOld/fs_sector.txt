//CycloneFS: Sector System
//------------------------------------------------
//class sector
// sector member functions always use sector index instead of sector pointer as "self"
//float used    -       0-free, 1-used, 2-reserved
//float next
//float body[fs_page_size*fs_pages_per_sector];
//------------------------------------------------
float sizeof_fs_sector = 2;
void fs_sector_constructor(float *self){
    self[0] = 0;
    self[1] = 0;
}
//getters
float fs_sector_get_used(float *self){self = fs_index_to_ptr(self); return self[0];}
float fs_sector_get_next(float *self){self = fs_index_to_ptr(self); return self[1];}
float fs_sector_get_data(float *self){self = fs_index_to_ptr(self); return self+2;}
//setters
void fs_sector_set_used(float *self, float n){self = fs_index_to_ptr(self); self[0] = n;}
void fs_sector_set_next(float *self, float n){self = fs_index_to_ptr(self); self[1] = n;}
//non-member functions

//pointer calculation
void fs_file_pos_to_sector_and_pos(float filepos, float *index, float *pos){
    *pos = modulo(filepos, fs_body_size);
    *index = floor(filepos / fs_body_size);
}

float fs_ptr_to_index(float ptr){
    if(ptr < fs_Disk){return 0;}
    if(ptr > (fs_Disk + fs_Disk_size)){return 0;}
    ptr = ptr - fs_Disk;
    ptr = ptr / fs_sector_size;
    ptr = floor(ptr);
    return ptr;
}

float fs_index_to_ptr(float index){
    if(index < 1){return 0;}
    return fs_Disk + index*fs_sector_size;
}

//sector operations
float fs_allocate_sector(){
    P("fs_alc_sec\n");
    float I;
    for(I = 1; I < fs_num_sectors; I++){
        //float S = fs_index_to_ptr(I);
        P2("check ",I,"\n");
        if(!fs_sector_get_used(I)){
            fs_sector_set_used(I,1);
            return I;
        }
    }
    return 0;
}

float fs_load_sector(float sector){ //loads the contents of a single sector into memory
    
//    P2("fs_ld_sec ",sector,"\n");
//    float P = malloc(fs_body_size);
//    P2("P=",P,", ");
//    if(!P){return 0;}
//    float D = fs_sector_get_data(sector);
//    P2("D=",D,"\n");
//    if(malloc_test()){shell_panic();}
//    P2("wet copy P<-D x ",fs_body_size,"\n");
//    memcpy(P,D,fs_body_size);
//    if(malloc_test()){shell_panic();}
    //it just so happens that all sectors are already
    //accessible, we have a huge address bus and the whole HDD
    //just magically fits in there O.o
    float P = fs_sector_get_data(sector);
    return P;
}

float fs_load_sector_chain(float sector){ //loads the whole contents of a sector chain into memory
    //1) calculate the total memory required
    float M = fs_body_size;
    float S = sector;
    float N = fs_sector_get_next(S);
    fs_file_load_from_disk_loop1:
        if(N){
            M = M+fs_body_size;
            S = N;
            goto fs_file_load_from_disk_loop1;
        }
    float P = malloc(M);
    if(!P){return 0;}
    //2) begin loading
    S = sector;
    N = fs_sector_get_next(S);
    M = 0;
    float D;
    fs_file_load_from_disk_loop2:
        if(N){
            D = fs_sector_get_data(S);
            memcpy(P+M,D,fs_body_size);
            M = M+fs_body_size;
            S = N;
            goto fs_file_load_from_disk_loop2;
        }
    return P;
}

void fs_write_sector(float sector, float ptr){ //writes the contents of a single sector back to disk
    //float D = fs_sector_get_data(sector);
    //memcpy(D,ptr,fs_body_size);
    
    //same assuption as with fs_load_sector, we don't need to do anything since this is unbufferred.
}

void fs_free_sector_chain(float sector){ //marks the sector chain as free
    float N; 
    float U;
    fs_free_sector_chain_loop:
        N = fs_sector_get_next(sector);
        U = fs_sector_get_used(sector);
        if(U){
            fs_sector_set_used(sector, 0);
            if(N){
                sector = N;
                goto fs_free_sector_chain_loop;
            }
        }
}

