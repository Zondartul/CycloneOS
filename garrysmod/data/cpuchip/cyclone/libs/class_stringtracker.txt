//class stringtracker -- iterates through a c_string to determine screen coordinates.
//{
//  0:char *str; // C string that is being tracked.
//  1:int I;     // the index of a character within the string.
//
//  2:int x;     // coordinates where the character
//  3:int y;     // would be printed on the screen.
//
//  4:int x_min; // this defines a rectangle, the
//  5:int x_max; // character can only be printed when 
//  6:int y_min; // x_min <= x <= x_max, y_min <= y <= y_max
//  7:int y_max; // -1 means no restriction on a particular coordinate.
//}
#ifndef STRINGTRACKER_GUARD
#define STRINGTRACKER_GUARD

//uncomment the following line to enable the test program
//#define STRINGTRACKER_TEST

//#include <cyclone/libs/libnumber.txt>
STRINGTRACKER_CODE:
//size of stringtracker structure
//#define sizeof_stringtracker 8
float sizeof_stringtracker = 8;
//return conditions:
float stringtracker_ok = 0
float stringtracker_end_of_string = 1
float stringtracker_beginning_of_string = 2
float stringtracker_end_of_line = 3   
float stringtracker_beginning_of_line = 4 
float stringtracker_box_x_min = 5
float stringtracker_box_x_max = 6
float stringtracker_box_y_min = 7
float stringtracker_box_y_max = 8


//create a tracker for a given string at given location
void stringtracker_constructor(float *self, char *str){
    self[0] = str;
    self[1] = 0;
    self[2] = 0;
    self[3] = 0;
    self[4] = 0;
    self[5] = 29;
    self[6] = 0;
    self[7] = 17;
}

//create a tracker at a given location by copying existing tracker
void stringtracker_copy_constructor(float *self, float *other){
//    memcpy(self, other, sizeof_stringtracker);
    self[0] = other[0];
    self[1] = other[1];
    self[2] = other[2];
    self[3] = other[3];
    self[4] = other[4];
    self[5] = other[5];
    self[6] = other[6];
    self[7] = other[7];
}

//prepares the stringtracker for deletion
void stringtracker_destructor(float *self){
}

//getters
float stringtracker_get_str(float *self){return self[0];}
float stringtracker_get_I(float *self){return self[1];}
float stringtracker_get_x(float *self){return self[2];}
float stringtracker_get_y(float *self){return self[3];}
void stringtracker_get_box(float *self, float *return_x_min, float *return_x_max, float *return_y_min, float *return_y_max){
    *return_x_min = self[4];
    *return_x_max = self[5];
    *return_y_min = self[6];
    *return_y_max = self[7];
}
float stringtracker_get_c(float *self){float I = self[1]; float str = self[0]; return str[I];}
//setters
void stringtracker_set_str(float *self, float *str){self[0] = str;}
void stringtracker_set_I(float *self, float I){self[1] = I;}
void stringtracker_set_x(float *self, float x){self[2] = x;}
void stringtracker_set_y(float *self, float y){self[3] = y;}
void stringtracker_set_box(float *self, float x_min, float x_max, float y_min, float y_max){
    self[4] = x_min;
    self[5] = x_max;
    self[6] = y_min;
    self[7] = y_max;
}
void stringtracker_set_c(float *self, char c){float I = self[1]; float str = self[0]; str[I] = c;}
//movement functions
float stringtracker_go_I(float *self, float I){
    float J = stringtracker_get_I(self);
    float cond = stringtracker_ok;
    while(I < J){
        cond = stringtracker_go_right(self);
        J++;
        if(cond != stringtracker_ok){return cond;}
    }
    while(J < I){
        cond = stringtracker_go_left(self);
        J--;
        if(cond != stringtracker_ok){return cond;}
    }
    return stringtracker_ok;
}
float stringtracker_go_x(float *self, float x){
    float cond = 0;
    while(1){
        if(x == self[2]){return stringtracker_ok;} //we are at destination
        if(x < self[2]){    //target is to the left
            cond = stringtracker_go_left_same_line(self);
            if(cond != stringtracker_ok){return cond;}    
        }else{              //target is to the right
            cond = stringtracker_go_right_same_line(self);
            if(cond != stringtracker_ok){return cond;}
        }
    }
    return stringtracker_ok;
}
float stringtracker_go_y(float *self, float y){
    float x = self[2];
    float cond = 0;
    while(1){
        if(y > self[3]){
            cond = stringtracker_go_nextline(self);
            if(cond != stringtracker_ok){
                if(y != self[3]){return stringtracker_ok;}
                else{goto stringtracker_go_y_adjust_x;}
            }
        }
        if(y < self[3]){
            cond = stringtracker_go_prevline(self);
            if(cond != stringtracker_ok){
                if(y != self[3]){return stringtracker_ok;}
                else{goto stringtracker_go_y_adjust_x;}
            }
        }
        if(y == self[3]){
            goto stringtracker_go_y_adjust_x;
        }
    }
    stringtracker_go_y_adjust_x:
    return stringtracker_go_x(self, x);
}

float stringtracker_go_right(float *self){
    float str = self[0];
    float I = self[1];
    float x = self[2];
    float y = self[3];
    float x_min = self[4];
    float x_max = self[5];
    float y_max = self[7];
    float C = str[I];
    if(C == 0){return stringtracker_end_of_string;}
    if((x_max != -1) && (x == x_max)){goto stringtracker_go_right_nextline;}
    if(C == '\n'){goto stringtracker_go_right_nextline;}
    self[2] = self[2]+1;
    self[1] = I+1;
    return stringtracker_ok;
    stringtracker_go_right_nextline:
    if((y_max != -1) && (y == y_max)){return stringtracker_box_y_max;}
    self[1] = I+1;         //I++;
    self[2] = x_min;       //x = x_min = beginning of a line; (previously x = 0;)
                           //note that this destroys information about line length
    self[3] = self[3]+1;   //y++;
    return stringtracker_ok;
}

float stringtracker_go_right_same_line(float *self){
    float str = self[0];
    float I = self[1];
    float C = str[I];
    float x = self[2];
    float x_max = self[5];
    if(C == 0){return stringtracker_end_of_string;}
    if((x_max != -1) && (x == x_max)){return stringtracker_box_x_max;}
    if(C == '\n'){return stringtracker_end_of_line;}
    self[2] = self[2]+1;// x++;
    self[1] = I+1;      // I++;
    return stringtracker_ok;
}

float stringtracker_go_left(float *self){
    float str = self[0];
    float I = self[1];
    float C = str[I];
    float x = self[2];
    float y = self[3];
    float x_min = self[4];
    float y_min = self[6];
    if(I == 0){return stringtracker_beginning_of_string;}
    if((x_min != -1) && (x == x_min)){goto stringtracker_go_left_prevline;}
    C = str[I-1];
    if(C == '\n'){goto stringtracker_go_left_prevline;}
       
    //trivial case: we can go back 1 character and stay on the same line.
    self[2] = self[2]-1; // x--;
    goto stringtracker_go_left_ok;
    
    stringtracker_go_left_prevline:
        if((y_min != -1) && (y == y_min)){return stringtracker_box_y_min;}
        self[3] = self[3]-1; // y--;
        self[2] = x_min; // x = x_min = beginning of the line; (previously x = 0;)
        float J = I-1;
        stringtracker_go_left_loop: //we need to calculate line length again
            if(J == 0){goto stringtracker_go_left_measured_ok;}
            J--;
            C = str[J];
            if(C == '\n'){goto stringtracker_go_left_measured_ok;}
            self[2] = self[2]+1;              // x++ (we're incrementing from the beginning of the line until
            goto stringtracker_go_left_loop;  //      we figure out how far to the right we are)
    stringtracker_go_left_measured_ok:
        x = self[2];      //strings that go several lines without a '\n'
        float x_max = self[5];  //can give us incorrect reading on x coordinate
        if(x_max != -1){
            float len = x_max+1;
            if(x_min != -1){len = len-x_min;}
            float deltay = floor(x / len);
            x = modulo(x, len); 
            self[2] = x;    // x = x % screen line width
            //self[3] = self[3] - deltay // y = y - however we missed from multiline lines.
        }
        //go straight to next section
    stringtracker_go_left_ok:
        self[1] = I-1;
        return stringtracker_ok;
}

float stringtracker_go_left_same_line(float *self){
    float str = self[0];
    float I = self[1];
    float C = str[I];
    float x = self[2];
    float y = self[3];
    float x_min = self[4];
    float y_min = self[6];
    if(I == 0){return stringtracker_beginning_of_string;}
    C = str[I-1];
    if(C == '\n'){
        return stringtracker_beginning_of_line;
    }else{
        if((x_min != -1) && (x == x_min)){return stringtracker_box_x_min;}
        self[1] = I-1;
        self[2] = self[2]-1; // x--;
        return stringtracker_ok;
    }
}

float stringtracker_go_nextline(float *self){
    float y = self[3];
    float cond = 0;
    while(1){
        cond = stringtracker_go_right(self);
        if(cond != stringtracker_ok){return cond;}
        if(self[3] > y){return stringtracker_ok;} //we are at next line
    }
}

float stringtracker_go_prevline(float *self){
    float y = self[3];
    float cond = 0;
    while(1){
        cond = stringtracker_go_left(self);
        if(cond != stringtracker_ok){return cond;}
        if(self[3] < y){return stringtracker_ok;} //we are at previous line
    }
}

float stringtracker_go_down(float *self){
    float y = self[3];
    return stringtracker_go_y(self, y+1);
}

float stringtracker_go_up(float *self){
    float y = self[3];
    return stringtracker_go_y(self, y-1);
}

float stringtracker_go_beginning_of_string(float *self){
    float cond = 0;
    while(self[1] != 0){
        cond = stringtracker_go_left(self);
        if(cond != stringtracker_ok){return cond;}
    }
    return stringtracker_ok;
}

float stringtracker_go_end_of_string(float *self){
    float cond = 0;
    while(stringtracker_get_c(self) != 0){
        cond = stringtracker_go_right(self);
        if(cond != stringtracker_ok){return cond;}
    }
    return stringtracker_ok;
}

float stringtracker_go_beginning_of_line(float *self){
    float cond = 0;
    while(1){
        cond = stringtracker_go_left_same_line(self);
        if(cond != stringtracker_ok){return stringtracker_ok;} //i'm not sure... are we fine with every possible
                                                               //way go_left_same_line can fail?
    }
}

float stringtracker_go_end_of_line(float *self){
    float cond = 0;
    while(1){
        cond = stringtracker_go_right_same_line(self);
        if(cond != stringtracker_ok){return stringtracker_ok;} //i'm not sure... are we fine with every possible
                                                               //way go_left_same_line can fail?
    }
}


//program: stringtracker_test


#ifdef STRINGTRACKER_TEST
//---------------------------------------------------------------------
//the test program relies on extra libraries that are not present
//on most systems, and is therefore disabled by default. to turn it on, 
//uncomment the #define STRINGTRACKER_TEST at the top of the file.
//these functions and variables should be provided by the user:
//float AdrScreen; 
//contains the address of a console screen.
//
//float malloc(float n); 
//returns a pointer to at least sizeof_stringtracker unused bytes.
//
//float malloc_test(); 
//returns 0 if malloc() worked correctly. 
//
//void Print(char *string, float color);
//prints a string starting at 0,0 and going to new line when 
//encountering a newline ('\n') character 
//
//void PrintStringXY(float x, float y, char *string, float color);
//prints a string at the specified screen coordinates
//
//void PrintCharXY(float x, float y, char c);
//prints a character at the specified screen coordinates
//
//void delay(float seconds);
//suspends exececution for a specified number of seconds
//
//float getKeyPending();
//if a key is currently pressed, returns it; otherwise returns 0.
//does not wait.
//
//char *num2str(float n);
//returns a string representation of a character.
//
//char *concat(char *str1, char *str2, char *str3);
//returns concatenates at least three strings and returns the resulting string.
//----------------------------------------------------------------------



void stringtracker_test(){
    AdrScreen[2041] = 1;//cls();
    //stringtracker_test_S = malloc(sizeof_string);
    //string_constructor(stringtracker_test_S,test_string);
    //float S = stringtracker_test_S;
    stringtracker_test_tracker = malloc(sizeof_stringtracker); 
    //if no malloc, type "stringtracker_test_tracker:alloc sizeof_stringtracker;" outside of this function
    stringtracker_constructor(stringtracker_test_tracker, stringtracker_test_string);
    stringtracker_set_box(stringtracker_test_tracker, 0,29,0,17);
    float T = stringtracker_test_tracker;
    if(malloc_test()){goto stringtracker_test_exit;}
    Print(stringtracker_test_string,999);
    AdrScreen[2046] = 1;//screen_cursor_enable();
    stringtracker_test_snap_cursor();
    AdrScreen[2020]=1;delay(1);//screen_force_refresh();
    while(1){
        float C = readKey();//getKeyPending();
        while(C){
            if(C == 17){stringtracker_go_up(T);stringtracker_test_snap_cursor();}//up
            if(C == 18){stringtracker_go_down(T);stringtracker_test_snap_cursor();}//down
            if(C == 19){stringtracker_go_left(T);stringtracker_test_snap_cursor();}//left
            if(C == 20){stringtracker_go_right(T);stringtracker_test_snap_cursor();}//right
            if(C == 129){stringtracker_go_x(T,1);stringtracker_test_snap_cursor();}//num 1
            if(C == 130){stringtracker_go_x(T,2);stringtracker_test_snap_cursor();}//num 2
            if(C == 131){stringtracker_go_x(T,3);stringtracker_test_snap_cursor();}//num 3
            if(C == 132){stringtracker_go_x(T,4);stringtracker_test_snap_cursor();}//num 4
            if(C == 133){stringtracker_go_x(T,5);stringtracker_test_snap_cursor();}//num 5
            if(C == 134){stringtracker_go_x(T,6);stringtracker_test_snap_cursor();}//num 6
            if(C == 135){stringtracker_go_x(T,7);stringtracker_test_snap_cursor();}//num 7
            if(C == 136){stringtracker_go_x(T,8);stringtracker_test_snap_cursor();}//num 8
            if(C == 137){stringtracker_go_x(T,9);stringtracker_test_snap_cursor();}//num 9
            if(C == 149){stringtracker_go_beginning_of_string(T);stringtracker_test_snap_cursor();}//home
            if(C == 150){stringtracker_go_end_of_string(T);stringtracker_test_snap_cursor();}//end
            if(C == 151){stringtracker_go_beginning_of_line(T);stringtracker_test_snap_cursor();}//pgup
            if(C == 152){stringtracker_go_end_of_line(T);stringtracker_test_snap_cursor();}//pgdown
            if(C == 166){goto stringtracker_test_exit;} //F4
            if(C == 127){stringtracker_go_prevline(T);stringtracker_test_snap_cursor();}//backspace
            if(C == 13){stringtracker_go_nextline(T);stringtracker_test_snap_cursor();}  //enter
            C = readKey();//getKeyPending();
        }
    }
    stringtracker_test_exit:
    AdrScreen[2046] = 0;//screen_cursor_disable();
    AdrScreen[2020]=1;delay(1);//screen_force_refresh();
    AdrScreen[2041] = 1;//cls();
    return;
}

void stringtracker_test_snap_cursor(){
    float x;
    float y;
    x = stringtracker_get_x(stringtracker_test_tracker);
    y = stringtracker_get_y(stringtracker_test_tracker);
    AdrScreen[2045] = 2*(30*y+x);//screen_set_cursor_pos_xy(x,y);
    float I = stringtracker_get_I(stringtracker_test_tracker);
    float C = stringtracker_get_c(stringtracker_test_tracker);
    PrintStringXY(0,14,concat("x = ",num2str(x),"   "),999);
    PrintStringXY(0,15,concat("y = ",num2str(y),"   "),999);
    PrintStringXY(0,16,concat("I = ",num2str(I),"   "),999);
    PrintStringXY(0,17,"c =<_>",999);
    PrintCharXY(4,17,C,999);
}
#else
void stringtracker_test(){}
#endif
STRINGTRACKER_CONSTANTS:
stringtracker_test_string:
db "Lorem ipsum dolor sit amet,\n";
db "consectetur adipiscing elit,\n";
db "sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\n";
db "Ut enim ad minim veniam,\n";
db "quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.";
db 0;
//Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum."
STRINGTRACKER_VARS:
float stringtracker_test_tracker;
STRINGTRACKER_END:
#endif
