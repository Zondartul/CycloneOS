hello world!
fullname: E:\SteamLibrary\steamapps\common\GarrysMod\garrysmod\data\cpuchip\cyclone\test23.txt
dir_cpuchip [E:\SteamLibrary\steamapps\common\GarrysMod\garrysmod\data\cpuchip\]
file_main [cyclone\test23.txt]
dir_output [E:\SteamLibrary\steamapps\common\GarrysMod\garrysmod\data\cpuchip\cyclone\generated\]
reading file cyclone\test23.txt

line 1: [//test23]

line 2: [//this is an extension of test22 with a larger memory model]

line 3: [//and different hardware.]

line 4: [//Use 128kb ram/rom memory model for the zCPU.]

line 5: [//#pragma no_export all]

line 6: [//#pragma set AlwaysEnterLeave true]

line 7: [//AlwaysEnterLeave reduces speed but makes calltraces more accurate]

line 8: [#define _65kb 65536]
#defined "_65kb"

line 9: [#define _128kb 131072]
#defined "_128kb"

line 10: [#define size_EB 32]
#defined "size_EB"

line 11: [#define size_keyboard 300]
#defined "size_keyboard"

line 12: [//#define size_console 3000]

line 13: [#define size_console 12500]
#defined "size_console"

line 14: [#define size_RAM 131072]
#defined "size_RAM"

line 15: [#define size_HDD 131072]
#defined "size_HDD"

line 16: [#define size_port 131072]
#defined "size_port"

line 17: [#define programslot_size 1000]
#defined "programslot_size"

line 18: [//#pragma set OutputToFile true]

line 19: [//#pragma set OutputTokenListing true]

line 20: [//programslot is needed so that programs mapped to page 0]

line 21: [//do not interfere with kernel-internal calls]

line 22: [//programslot:]

line 23: [#include <cyclone/defines.txt>]
found include <cyclone/defines.txt>
reading file cyclone/defines.txt

line 1: [//CycloneOS defines and enums]

line 2: [//number classification:]

line 3: [//7 aaa aaa - dummy addresses (usually for linking)]

line 4: [//6 xxx yyy - type and property names]

line 5: [//5 xxx yyy - enums / special constants]

line 6: [//  xxx - object type]

line 7: [//  yyy - enum number]

line 8: [//0 - 4 MB - normall addresses]

line 9: [//prefixes]

line 10: []

line 11: [//------------------- TYPES --------------------------------------]

line 12: [//vector, prefix V]

line 13: [#define T_VECTOR                    6001000]
#defined "T_VECTOR"

line 14: [//string, prefix S]

line 15: [#define T_STRING                    6002000]
#defined "T_STRING"

line 16: [//executable, prefix EXE]

line 17: [#define T_EXE                       6003000]
#defined "T_EXE"

line 18: [//section, prefix SEC]

line 19: [#define T_SECTION                   6004000]
#defined "T_SECTION"

line 20: [//symbol, prefix SYM]

line 21: [#define T_SYMBOL                    6005000]
#defined "T_SYMBOL"

line 22: [//proginfo, prefix PI]

line 23: [#define T_PROGINFO                  6006000]
#defined "T_PROGINFO"

line 24: [//file (executable), prefix FE]

line 25: [#define T_FILE_EXE                  6007000]
#defined "T_FILE_EXE"

line 26: [//typeinfo, prefix TI]

line 27: [#define T_TYPEINFO                  6008000]
#defined "T_TYPEINFO"

line 28: [//typeinfo_member, prefix TI_M]

line 29: [#define T_TYPEINFO_MEMBER           6009000]
#defined "T_TYPEINFO_MEMBER"

line 30: [//vtable, prefix VT]

line 31: [#define T_VTABLE                    6010000]
#defined "T_VTABLE"

line 32: [//------------------- PROPERTIES ---------------------------------]

line 33: [//size of program in bytes]

line 34: [#define P_FE_PROGRAMSIZE            6007001]
#defined "P_FE_PROGRAMSIZE"

line 35: [//base pointer for program block]

line 36: [#define P_FE_CODEBASE               6007002]
#defined "P_FE_CODEBASE"

line 37: [//base pointer for whole file]

line 38: [#define P_FE_FILEBASE               6007003]
#defined "P_FE_FILEBASE"

line 39: [//type of CycloneOS executable format]

line 40: [#define P_FE_EXE_STYLE              6007004]
#defined "P_FE_EXE_STYLE"

line 41: [//type of linking operation requested]

line 42: [#define P_FE_LINK_STYLE             6007005]
#defined "P_FE_LINK_STYLE"

line 43: [//program code (excluding prologue) starts here]

line 44: [#define P_FE_CODESTART              6007006]
#defined "P_FE_CODESTART"

line 45: [//if reference table is used, it's start and end]

line 46: [#define P_FE_REFTABLE_START         6007007]
#defined "P_FE_REFTABLE_START"

line 47: [#define P_FE_REFTABLE_END           6007008]
#defined "P_FE_REFTABLE_END"

line 48: [//------------------- ENUMS (EXE) --------------------------------]

line 49: [//Flat exe has entry point at 0 and no linking]

line 50: [#define EXE_STYLE_FLAT              5003001]
#defined "EXE_STYLE_FLAT"

line 51: [//AlcorPC exe has programsize at 0 and entry point at 1]

line 52: [#define EXE_STYLE_ALCOR             5003002]
#defined "EXE_STYLE_ALCOR"

line 53: [//All-function import/export table executables link to a specific version of the kernel]

line 54: [//and have an entry point immediately after the table ]

line 55: [#define EXE_STYLE_ALLFUNC           5003003]
#defined "EXE_STYLE_ALLFUNC"

line 56: [//symbol table executable programs have a symbol table for dynamic linking]

line 57: [//their entry points are defined by the symbol table]

line 58: [#define EXE_STYLE_SYMBOL            5003004]
#defined "EXE_STYLE_SYMBOL"

line 59: []

line 60: [//position-dependent code must be run from base address 0, be it physically, through paging, or through segmentation.]

line 61: [#define IS_POSITION_DEPENDENT       5003005]
#defined "IS_POSITION_DEPENDENT"

line 62: [//position-independent code can be relocated to arbitrary addresses and run from there.]

line 63: [#define IS_POSITION_INDEPENDENT     5003006]
#defined "IS_POSITION_INDEPENDENT"

line 64: []

line 65: [//no linking is necessary]

line 66: [#define LINK_STYLE_NONE             5003007]
#defined "LINK_STYLE_NONE"

line 67: [//needs to be static-linked]

line 68: [#define LINK_STATIC_REQUESTED       5003008]
#defined "LINK_STATIC_REQUESTED"

line 69: [//needs to be dynamic-linked]

line 70: [#define LINK_DYNAMIC_REQUESTED      5003009]
#defined "LINK_DYNAMIC_REQUESTED"

line 71: [//needs to have a dyn-table built from reftable]

line 72: [#define LINK_REFTABLE_REQUESTED     5003010]
#defined "LINK_REFTABLE_REQUESTED"

line 73: []

line 74: [//has no static-links applied yet]

line 75: [#define HAS_NO_STATIC_LINKS         5003010]
#defined "HAS_NO_STATIC_LINKS"

line 76: [//has static-links not in symbol table]

line 77: [#define HAS_STATIC_LINKS            5003011]
#defined "HAS_STATIC_LINKS"

line 78: [//-------------------- ENUMS (VTABLE) ----------------------------]

line 79: [#define VT_CONSTRUCTOR              5010001]
#defined "VT_CONSTRUCTOR"

line 80: [#define VT_DESTRUCTOR               5010002]
#defined "VT_DESTRUCTOR"

line 81: [#define VT_SERIALIZE                5010003]
#defined "VT_SERIALIZE"

line 82: [#define VT_DESERIALIZE              5010004]
#defined "VT_DESERIALIZE"

line 83: [#define VT_NEW                      5010005]
#defined "VT_NEW"

line 84: [#define VT_HERE                     5010006]
#defined "VT_HERE"

line 85: [#define VT_GET                      5010007]
#defined "VT_GET"

line 86: [#define VT_SET                      5010008]
#defined "VT_SET"

line 87: [#define VT_PUSH                     5010009]
#defined "VT_PUSH"

line 88: [#define VT_POP                      5010010]
#defined "VT_POP"

line 89: [#define VT_INSERT                   5010011]
#defined "VT_INSERT"

line 90: [#define VT_REMOVE                   5010012]
#defined "VT_REMOVE"

line 91: [#define VT_CLEAR                    5010013]
#defined "VT_CLEAR"

line 92: [#define VT_OPEN                     5010014]
#defined "VT_OPEN"

line 93: [#define VT_CLOSE                    5010015]
#defined "VT_CLOSE"

line 94: [#define VT_SEEK                     5010016]
#defined "VT_SEEK"

line 95: [#define VT_CALL                     5010017]
#defined "VT_CALL"

line 96: [#define VT_RESIZE                   5010018]
#defined "VT_RESIZE"

line 97: []

line 98: []

line 99: []

line 100: []

line 101: []

line 102: []

line 103: []

line 104: []

line 105: []

line 106: []

line 24: [MAIN_CODE:]
found label MAIN_CODE

line 25: [boot();]
found reference to boot
no currentFunc
ref boot is REF_EXT

line 26: [alloc 120;]

line 27: []

line 28: [float size;]
found global var size

line 29: [void boot(){]
found func boot



sig1 = void boot()
sig2 = ()

line 30: [    size = programsize;]
found reference to size
currentFunc = boot
ref size is REF_EXT

line 31: [    if( programsize  > 128*1024){]

line 32: [        mov eax,  programsize ;]

line 33: [        div eax, 1024;]

line 34: [        frnd eax;]

line 35: [        out 0,eax;]

line 36: [        int 40;]

line 37: [    }]

line 38: []

line 39: [    float nullcall_size = NULL_CODE_END - NULL_CODE;]
found local var nullcall_size (BL = 1)
found reference to NULL_CODE_END
currentFunc = boot
ref NULL_CODE_END is REF_EXT
found reference to NULL_CODE
currentFunc = boot
ref NULL_CODE is REF_EXT

line 40: [    memcpy(0,NULL_CODE,nullcall_size);]
found reference to memcpy
currentFunc = boot
ref memcpy is REF_EXT
found reference to nullcall_size
currentFunc = boot
ref nullcall_size is REF_STACK

line 41: [    ]

line 42: [    init_hardware();]
found reference to init_hardware
currentFunc = boot
ref init_hardware is REF_EXT

line 43: [    screen_set(AdrScreen);]
found reference to screen_set
currentFunc = boot
ref screen_set is REF_EXT
found reference to AdrScreen
currentFunc = boot
ref AdrScreen is REF_EXT

line 44: [    mcs_screen_clear();]
found reference to mcs_screen_clear
currentFunc = boot
ref mcs_screen_clear is REF_EXT

line 45: [    ]

line 46: [    printf("Loading Cyclone OS\n");]
removed string literal ""Loading Cyclone OS\n""
found reference to printf
currentFunc = boot
ref printf is REF_EXT

line 47: [    printf("boot size:   %d k\n", BOOT_CODE_END/1024);]
removed string literal ""boot size:   %d k\n""
found reference to BOOT_CODE_END
currentFunc = boot
ref BOOT_CODE_END is REF_EXT

line 48: [    printf("kernel size: %d k\n", size/1024);]
removed string literal ""kernel size: %d k\n""

line 49: [    //if(size > 128*1024){int 0;}]

line 50: [    /*]

line 51: [    if(programsize > 128*1024){]

line 52: [        printf("ERROR: kernel too large (> 128k)\n",programsize);]
removed string literal ""ERROR: kernel too large (> 128k)\n""

line 53: [        printf("Boot aborted\n");]
removed string literal ""Boot aborted\n""

line 54: [        ]

line 55: [        //interrupt 40: kernel too big]

line 56: [        out programsize,0;]

line 57: [        int 40;]

line 58: [        ]

line 59: [        //int 1;]

line 60: [        int 0; //reset]

line 61: [    }]

line 62: [    */]

line 63: [    float time = compileTimeStamp();]
found local var time (BL = 1)
found reference to compileTimeStamp
currentFunc = boot
ref compileTimeStamp is REF_EXT

line 64: [    OSversion = time;]
found reference to OSversion
currentFunc = boot
ref OSversion is REF_EXT
found reference to time
currentFunc = boot
ref time is REF_STACK

line 65: [    float str = timeStampToString(time);]
found local var str (BL = 1)
found reference to timeStampToString
currentFunc = boot
ref timeStampToString is REF_EXT

line 66: [    printf("compile timestamp:\n%s\n",str);    ]
removed string literal ""compile timestamp:\n%s\n""
found reference to str
currentFunc = boot
ref str is REF_STACK

line 67: [    main();]
found reference to main
currentFunc = boot
ref main is REF_EXT

line 68: [}]

line 69: []

line 70: [NULL_CODE:]
found label NULL_CODE

line 71: [nop; nop; nop; nop; nop; nop; nop; nop; nop; nop; //1]

line 72: [nop; nop; nop; nop; nop; nop; nop; nop; nop; nop; //2]

line 73: [nop; nop; nop; nop; nop; nop; nop; nop; nop; nop; //3]

line 74: [nop; nop; nop; nop; nop; nop; nop; nop; nop; nop; //4]

line 75: [nop; nop; nop; nop; nop; nop; nop; nop; nop; nop; //5]

line 76: [nop; nop; nop; nop; nop; nop; nop; nop; nop; nop; //6]

line 77: [nop; nop; nop; nop; nop; nop; nop; nop; nop; nop; //7]

line 78: [nop; nop; nop; nop; nop; nop; nop; nop; nop; nop; //8]

line 79: [nop; nop; nop; nop; nop; nop; nop; nop; nop; nop; //9]

line 80: [nop; nop; nop; nop; nop; nop; nop; nop; nop; nop; //10]

line 81: [nullcall_error();]
found reference to nullcall_error
no currentFunc
ref nullcall_error is REF_EXT

line 82: [NULL_CODE_END:]
found label NULL_CODE_END

line 83: []

line 84: [void nullcall_error(){]
found func nullcall_error



sig1 = void nullcall_error()
sig2 = ()

line 85: [    printf("Error: jump to physical 0\n");]
removed string literal ""Error: jump to physical 0\n""

line 86: [    shell_panic();]
found reference to shell_panic
currentFunc = nullcall_error
ref shell_panic is REF_EXT

line 87: [}]

line 88: []

line 89: []

line 90: [float AdrEB;]
found global var AdrEB

line 91: [float AdrRAM;]
found global var AdrRAM

line 92: [float AdrKb;]
found global var AdrKb

line 93: [//float AdrScreen;]

line 94: [float AdrHDD;]
found global var AdrHDD

line 95: [float AdrPort;]
found global var AdrPort

line 96: [float OSversion;]
found global var OSversion

line 97: []

line 98: [float num_screens_x;]
found global var num_screens_x

line 99: [float num_screens_y;]
found global var num_screens_y

line 100: [screens:]
found label screens

line 101: [alloc 10;]

line 102: []

line 103: [void init_hardware(){]
found func init_hardware



sig1 = void init_hardware()
sig2 = ()

line 104: [    AdrEB = _128kb;]
found reference to AdrEB
currentFunc = init_hardware
ref AdrEB is REF_EXT

line 105: [    AdrRAM = AdrEB+size_EB;]
found reference to AdrRAM
currentFunc = init_hardware
ref AdrRAM is REF_EXT

line 106: [    AdrKb = AdrRAM+size_RAM;]
found reference to AdrKb
currentFunc = init_hardware
ref AdrKb is REF_EXT

line 107: [    AdrScreen = AdrKb+size_keyboard;]

line 108: [    AdrHDD = AdrScreen+size_console;]
found reference to AdrHDD
currentFunc = init_hardware
ref AdrHDD is REF_EXT

line 109: [    AdrPort = AdrHDD+size_HDD;]
found reference to AdrPort
currentFunc = init_hardware
ref AdrPort is REF_EXT

line 110: []

line 111: [    float I = 0;]
found local var I (BL = 1)

line 112: [    for(I = 0; I < 32; I++){]
found reference to I
currentFunc = init_hardware
ref I is REF_STACK

line 113: [        AdrEB[I] = 0;]

line 114: [    }]

line 115: [    ]

line 116: [    AdrEB[0] = 0;             //ram]

line 117: [    AdrEB[1] = size_RAM-1;]

line 118: [    AdrEB[2] = AdrEB[1]+1;    //kb]

line 119: [    AdrEB[3] = AdrEB[2]+size_keyboard-1;]

line 120: [    AdrEB[4] = AdrEB[3]+1;    //console]

line 121: [    AdrEB[5] = AdrEB[4]+size_console-1;]

line 122: [    AdrEB[6] = AdrEB[5]+1;    //hdd]

line 123: [    AdrEB[7] = AdrEB[6]+size_HDD-1;]

line 124: [    AdrEB[8] = AdrEB[7]+1;    //port]

line 125: [    AdrEB[9] = AdrEB[8]+size_port-1;]

line 126: []

line 127: [    for(I = 0; I < 32; I++){]

line 128: [        AdrScreen[I] = 0;]

line 129: [    }]

line 130: [    //setup console EB]

line 131: [    float AdrScreen2 = 0;]
found local var AdrScreen2 (BL = 1)

line 132: [    float size_console2 = 3000;]
found local var size_console2 (BL = 1)

line 133: [    AdrScreen[0] = 0;]

line 134: [    AdrScreen[1] = size_console2-1;]
found reference to size_console2
currentFunc = init_hardware
ref size_console2 is REF_STACK

line 135: [    AdrScreen[2] = AdrScreen[1]+1;]

line 136: [    AdrScreen[3] = AdrScreen[2]+size_console2-1;]

line 137: [    AdrScreen[4] = AdrScreen[3]+1;]

line 138: [    AdrScreen[5] = AdrScreen[4]+size_console2-1;]

line 139: [    AdrScreen[6] = AdrScreen[5]+1;]

line 140: [    AdrScreen[7] = AdrScreen[6]+size_console2-1;]

line 141: [    AdrScreen += size_EB;]

line 142: [    ]

line 143: [//    num_screens_x = 2;]

line 144: [//    num_screens_y = 2;]

line 145: [    screens[0] = AdrScreen;]
found reference to screens
currentFunc = init_hardware
ref screens is REF_EXT

line 146: [    screens[1] = screens[0]+size_console2;]

line 147: [    screens[2] = screens[1]+size_console2;]

line 148: [    screens[3] = screens[2]+size_console2;]

line 149: [    mcs_init(2,2);]
found reference to mcs_init
currentFunc = init_hardware
ref mcs_init is REF_EXT

line 150: [    //while(1){NOP;}]

line 151: [}]

line 152: []

line 153: [alloc programslot_size;]

line 154: []

line 155: [BOOT_CODE:]
found label BOOT_CODE

line 156: [#include <cyclone/libs/libstring.txt>]
found include <cyclone/libs/libstring.txt>
reading file cyclone/libs/libstring.txt

line 1: [//sub, explode, reverse, to string, tonumber;]

line 2: [#ifndef LIBSTRING_GUARD]
#ifndef "LIBSTRING_GUARD" (undefined)

line 3: [#define LIBSTRING_GUARD]
#defined "LIBSTRING_GUARD"

line 4: [LIBSTRING_CODE:]
found label LIBSTRING_CODE

line 5: [#include <cyclone/libs/zcrt/string.txt>]
found include <cyclone/libs/zcrt/string.txt>
reading file cyclone/libs/zcrt/string.txt

line 1: [//------------------------------------------------------------------------------]

line 2: [// ZCPU CRT sourcecode (for HL-ZASM compiler)         (C) 2011 by Black Phoenix]

line 3: [//]

line 4: [// String library. Contains functions to work with C strings (C89-compatible)]

line 5: [//------------------------------------------------------------------------------]

line 6: [#ifndef ZCRT_STRING]
#ifndef "ZCRT_STRING" (undefined)

line 7: [#define ZCRT_STRING]
#defined "ZCRT_STRING"

line 8: []

line 9: [#define NULL 0]
#defined "NULL"

line 10: []

line 11: [//copies n bytes between two memory areas; if there is overlap, the behavior is undefined]

line 12: [void *memcpy(void *dest, void *src, float n) {]
found func memcpy



sig1 = void *memcpy(void *dest, void *src, float n)
sig2 = (void *dest, void *src, float n)
found param dest
found param src
found param n

line 13: [  preserve esi,edi;]

line 14: [  register float rem;]
found local var rem (BL = 1)

line 15: [  ]

line 16: [  esi = src;]
found reference to src
currentFunc = memcpy
ref src is REF_STACK

line 17: [  edi = dest;]
found reference to dest
currentFunc = memcpy
ref dest is REF_STACK

line 18: [  rem = n;]
found reference to rem
currentFunc = memcpy
ref rem is REF_STACK
found reference to n
currentFunc = memcpy
ref n is REF_STACK

line 19: [  while (rem) {]

line 20: [    register float count = rem;]
found local var count (BL = 2)

line 21: [    min count,8192;]
found reference to count
currentFunc = memcpy
ref count is REF_STACK

line 22: [    mcopy count;]

line 23: [    rem = rem - count;]

line 24: [  }]

line 25: [  return dest;]

line 26: [}]

line 27: []

line 28: [//copies n bytes between two memory areas; unlike with memcpy the areas may overlap]

line 29: [//void *memmove(void *dest, void *src, float n);]

line 30: [#define memmove memcpy]
#defined "memmove"

line 31: []

line 32: [//returns a pointer to the first occurrence of c in the first n bytes of s, or NULL if not found]

line 33: [void* memchr(void *s, float c, float n) {]
found func memchr



sig1 = void* memchr(void *s, float c, float n)
sig2 = (void *s, float c, float n)
found param s
found param c
found param n

line 34: [  register void *r = s;]
found local var r (BL = 1)
found reference to s
currentFunc = memchr
ref s is REF_STACK

line 35: [  register float rem = n;]
found local var rem (BL = 1)
found reference to n
currentFunc = memchr
ref n is REF_STACK

line 36: []

line 37: [  while (rem) {]
found reference to rem
currentFunc = memchr
ref rem is REF_STACK

line 38: [    if (*r == c) {]
found reference to r
currentFunc = memchr
ref r is REF_STACK
found reference to c
currentFunc = memchr
ref c is REF_STACK

line 39: [      return r;]

line 40: [    }]

line 41: [    ++r;]

line 42: [    --rem;]

line 43: [  }]

line 44: []

line 45: [  return NULL;]

line 46: [}]

line 47: []

line 48: [//compares the first n bytes of two memory areas]

line 49: [//int memcmp(const void *s1, const void *s2, float n);]

line 50: [#define memcmp strcmp]
#defined "memcmp"
found reference to strcmp
no currentFunc
ref strcmp is REF_EXT

line 51: []

line 52: [//overwrites a memory area with n copies of c]

line 53: [void* memset(void *ptr, float c, float n) {]
found func memset



sig1 = void* memset(void *ptr, float c, float n)
sig2 = (void *ptr, float c, float n)
found param ptr
found param c
found param n

line 54: [  register void *p = ptr;]
found local var p (BL = 1)
found reference to ptr
currentFunc = memset
ref ptr is REF_STACK

line 55: [  register float rem = n;]
found local var rem (BL = 1)
found reference to n
currentFunc = memset
ref n is REF_STACK

line 56: [  register float ch = c;]
found local var ch (BL = 1)
found reference to c
currentFunc = memset
ref c is REF_STACK

line 57: []

line 58: [  while (rem) {]
found reference to rem
currentFunc = memset
ref rem is REF_STACK

line 59: [    *p++ = ch;]
found reference to p
currentFunc = memset
ref p is REF_STACK
found reference to ch
currentFunc = memset
ref ch is REF_STACK

line 60: [    --rem;]

line 61: [  }]

line 62: []

line 63: [  return ptr;]

line 64: [}]

line 65: []

line 66: [//appends the string src to dest]

line 67: [char* strcat(char *src, *dest) {]
found func strcat



sig1 = char* strcat(char *src, *dest)
sig2 = (char *src, *dest)
found param src
found param dest

line 68: [  register char *srcptr, *destptr;]
found local var srcptr (BL = 1)
found local var destptr (BL = 1)

line 69: [  ]

line 70: [  srcptr = src;]
found reference to srcptr
currentFunc = strcat
ref srcptr is REF_STACK
found reference to src
currentFunc = strcat
ref src is REF_STACK

line 71: [  while (*++srcptr) ;]

line 72: []

line 73: [  destptr = dest;]
found reference to destptr
currentFunc = strcat
ref destptr is REF_STACK
found reference to dest
currentFunc = strcat
ref dest is REF_STACK

line 74: [  while (*srcptr++ = *destptr++) ;]

line 75: [  return src;]

line 76: [}]

line 77: []

line 78: [//appends at most n bytes of the string src to dest]

line 79: [char* strncat(char *src, *dest, float n) {]
found func strncat



sig1 = char* strncat(char *src, *dest, float n)
sig2 = (char *src, *dest, float n)
found param src
found param dest
found param n

line 80: [  register char *srcptr, *destptr;]
found local var srcptr (BL = 1)
found local var destptr (BL = 1)

line 81: [  register float i;]
found local var i (BL = 1)

line 82: [  ]

line 83: [  srcptr = src;]
found reference to srcptr
currentFunc = strncat
ref srcptr is REF_STACK
found reference to src
currentFunc = strncat
ref src is REF_STACK

line 84: [  srcptr--;]

line 85: [  while (*++srcptr) ;]

line 86: []

line 87: [  destptr = dest;]
found reference to destptr
currentFunc = strncat
ref destptr is REF_STACK
found reference to dest
currentFunc = strncat
ref dest is REF_STACK

line 88: [  i = n;]
found reference to i
currentFunc = strncat
ref i is REF_STACK
found reference to n
currentFunc = strncat
ref n is REF_STACK

line 89: [  while (i--) {]

line 90: [    if (*srcptr++ = *destptr++) continue;]

line 91: [  }]

line 92: [  *srcptr = 0;]

line 93: [  return src;]

line 94: [}]

line 95: []

line 96: [//locates character c in a string, searching from the beginning]

line 97: [char* strchr(char *str, c) {]
found func strchr



sig1 = char* strchr(char *str, c)
sig2 = (char *str, c)
found param str
found param c

line 98: [  register char *strptr, ch;]
found local var strptr (BL = 1)
found local var ch (BL = 1)

line 99: [  strptr = str;]
found reference to strptr
currentFunc = strchr
ref strptr is REF_STACK
found reference to str
currentFunc = strchr
ref str is REF_STACK

line 100: [  ch = c;]
found reference to ch
currentFunc = strchr
ref ch is REF_STACK
found reference to c
currentFunc = strchr
ref c is REF_STACK

line 101: [  while(*strptr) {]

line 102: [    if (*strptr == ch) return strptr;]

line 103: [    ++strptr;]

line 104: [  }]

line 105: [  return 0;]

line 106: [}]

line 107: []

line 108: [//locates character c in a string, searching from the end]

line 109: [char* strrchr(char *str, c) {]
found func strrchr



sig1 = char* strrchr(char *str, c)
sig2 = (char *str, c)
found param str
found param c

line 110: [  register char *strptr, ch;]
found local var strptr (BL = 1)
found local var ch (BL = 1)

line 111: [  register char *findptr;]
found local var findptr (BL = 1)

line 112: [  ]

line 113: [  findptr = 0;]
found reference to findptr
currentFunc = strrchr
ref findptr is REF_STACK

line 114: [  strptr = str;]
found reference to strptr
currentFunc = strrchr
ref strptr is REF_STACK
found reference to str
currentFunc = strrchr
ref str is REF_STACK

line 115: [  ch = c;]
found reference to ch
currentFunc = strrchr
ref ch is REF_STACK
found reference to c
currentFunc = strrchr
ref c is REF_STACK

line 116: [  while (*strptr) {]

line 117: [    if (*strptr == ch) findptr = strptr;]

line 118: [    ++strptr;]

line 119: [  }]

line 120: [  return findptr;]

line 121: [}]

line 122: []

line 123: [//compares two strings lexicographically]

line 124: [float strcmp(char *src, *dest) {]
found func strcmp



sig1 = float strcmp(char *src, *dest)
sig2 = (char *src, *dest)
found param src
found param dest

line 125: [  if(src == dest){return 0;}]
found reference to src
currentFunc = strcmp
ref src is REF_STACK
found reference to dest
currentFunc = strcmp
ref dest is REF_STACK

line 126: [  register char *srcptr, *destptr;]
found local var srcptr (BL = 1)
found local var destptr (BL = 1)

line 127: []

line 128: [  srcptr = src;]
found reference to srcptr
currentFunc = strcmp
ref srcptr is REF_STACK

line 129: [  destptr = dest;]
found reference to destptr
currentFunc = strcmp
ref destptr is REF_STACK

line 130: [  while (*srcptr == *destptr) {]

line 131: [    if (*srcptr == 0) return 0;]

line 132: [    ++srcptr; ++destptr;]

line 133: [  }]

line 134: [  return (*srcptr - *destptr);]

line 135: [}]

line 136: []

line 137: [//compares up to the first n bytes of two strings lexicographically]

line 138: [float strncmp(char *src, *dest, float n) {]
found func strncmp



sig1 = float strncmp(char *src, *dest, float n)
sig2 = (char *src, *dest, float n)
found param src
found param dest
found param n

line 139: [  register char *srcptr, *destptr;]
found local var srcptr (BL = 1)
found local var destptr (BL = 1)

line 140: [  register float i;]
found local var i (BL = 1)

line 141: [  ]

line 142: [  srcptr = src;]
found reference to srcptr
currentFunc = strncmp
ref srcptr is REF_STACK
found reference to src
currentFunc = strncmp
ref src is REF_STACK

line 143: [  destptr = dest;]
found reference to destptr
currentFunc = strncmp
ref destptr is REF_STACK
found reference to dest
currentFunc = strncmp
ref dest is REF_STACK

line 144: [  i = n;]
found reference to i
currentFunc = strncmp
ref i is REF_STACK
found reference to n
currentFunc = strncmp
ref n is REF_STACK

line 145: []

line 146: [  while (i && (*srcptr == *destptr)) {]

line 147: [    if (*srcptr == 0) return 0;]

line 148: [    ++srcptr; ++destptr; --i;]

line 149: [  }]

line 150: [  if (i) return (*srcptr - *destptr);]

line 151: [  return 0;]

line 152: [}]

line 153: []

line 154: [//copies a string from one location to another]

line 155: [char* strcpy(char *dest, *src) {]
found func strcpy



sig1 = char* strcpy(char *dest, *src)
sig2 = (char *dest, *src)
found param dest
found param src

line 156: [  register char *srcptr, *destptr;]
found local var srcptr (BL = 1)
found local var destptr (BL = 1)

line 157: []

line 158: [  destptr = dest;]
found reference to destptr
currentFunc = strcpy
ref destptr is REF_STACK
found reference to dest
currentFunc = strcpy
ref dest is REF_STACK

line 159: [  srcptr = src;]
found reference to srcptr
currentFunc = strcpy
ref srcptr is REF_STACK
found reference to src
currentFunc = strcpy
ref src is REF_STACK

line 160: [  while (*destptr++ = *srcptr++) ;]

line 161: [  return dest;]

line 162: [}]

line 163: []

line 164: []

line 165: [//write exactly n bytes to dest, copying from src or add 0's]

line 166: [char* strncpy(char *dest, *src, float n) {]
found func strncpy



sig1 = char* strncpy(char *dest, *src, float n)
sig2 = (char *dest, *src, float n)
found param dest
found param src
found param n

line 167: [  register char *srcptr, *destptr;]
found local var srcptr (BL = 1)
found local var destptr (BL = 1)

line 168: [  register float i;]
found local var i (BL = 1)

line 169: []

line 170: [  destptr = dest;]
found reference to destptr
currentFunc = strncpy
ref destptr is REF_STACK
found reference to dest
currentFunc = strncpy
ref dest is REF_STACK

line 171: [  srcptr = src;]
found reference to srcptr
currentFunc = strncpy
ref srcptr is REF_STACK
found reference to src
currentFunc = strncpy
ref src is REF_STACK

line 172: [  i = n;]
found reference to i
currentFunc = strncpy
ref i is REF_STACK
found reference to n
currentFunc = strncpy
ref n is REF_STACK

line 173: [  ]

line 174: [  while (i-- > 0) {]

line 175: [    if (*destptr++ = *srcptr++) continue;]

line 176: [    while (i-- > 0) *destptr++ = 0;]

line 177: [  }]

line 178: [  *destptr = 0;]

line 179: [  return dest;]

line 180: [}]

line 181: []

line 182: [//returns the string representation of an error number e.g. errno]

line 183: [//char *strerror(int);]

line 184: []

line 185: [//finds the length of a C string]

line 186: [float strlen(char* str) {]
found func strlen



sig1 = float strlen(char* str)
sig2 = (char* str)
found param str

line 187: [  register char* strptr;]
found local var strptr (BL = 1)

line 188: [  register float n;]
found local var n (BL = 1)

line 189: [  ]

line 190: [  strptr = str;]
found reference to strptr
currentFunc = strlen
ref strptr is REF_STACK
found reference to str
currentFunc = strlen
ref str is REF_STACK

line 191: [  n = 0;]
found reference to n
currentFunc = strlen
ref n is REF_STACK

line 192: [  while (*strptr++) n++;]

line 193: [  return n;]

line 194: [}]

line 195: []

line 196: [//determines the length of the maximal initial substring consisting entirely of characters in accept]

line 197: [float strspn(char *str, *accept) {]
found func strspn



sig1 = float strspn(char *str, *accept)
sig2 = (char *str, *accept)
found param str
found param accept

line 198: [  register char *s = str;]
found local var s (BL = 1)
found reference to str
currentFunc = strspn
ref str is REF_STACK

line 199: [  register char *p = accept;]
found local var p (BL = 1)
found reference to accept
currentFunc = strspn
ref accept is REF_STACK

line 200: []

line 201: [  while (*p) {]
found reference to p
currentFunc = strspn
ref p is REF_STACK

line 202: [    if (*p++ == *s) {]
found reference to s
currentFunc = strspn
ref s is REF_STACK

line 203: [      ++s;]

line 204: [      p = accept;]

line 205: [    }]

line 206: [  }]

line 207: [  return s - str;]

line 208: [}]

line 209: []

line 210: [//determines the length of the maximal initial substring consisting entirely of characters not in reject]

line 211: [float strcspn(char *str, char *reject) {]
found func strcspn



sig1 = float strcspn(char *str, char *reject)
sig2 = (char *str, char *reject)
found param str
found param reject

line 212: [  register char *s, *p;]
found local var s (BL = 1)
found local var p (BL = 1)

line 213: [  ]

line 214: [  for (s=str; *s; s++) {]
found reference to s
currentFunc = strcspn
ref s is REF_STACK
found reference to str
currentFunc = strcspn
ref str is REF_STACK

line 215: [    for (p=reject; *p; p++) {]
found reference to p
currentFunc = strcspn
ref p is REF_STACK
found reference to reject
currentFunc = strcspn
ref reject is REF_STACK

line 216: [      if (*p == *s) goto done;]
found reference to done
currentFunc = strcspn
ref done is REF_EXT

line 217: [    }]

line 218: [  }]

line 219: [  done:]
found label done

line 220: [  return s - str;]

line 221: [}]

line 222: []

line 223: [//finds the first occurrence of any character in accept]

line 224: [char* strpbrk(char *str, char *accept) {]
found func strpbrk



sig1 = char* strpbrk(char *str, char *accept)
sig2 = (char *str, char *accept)
found param str
found param accept

line 225: [  register char *s;]
found local var s (BL = 1)

line 226: [  register char *p;]
found local var p (BL = 1)

line 227: []

line 228: [  for (s=str; *s; s++) {]
found reference to s
currentFunc = strpbrk
ref s is REF_STACK
found reference to str
currentFunc = strpbrk
ref str is REF_STACK

line 229: [    for (p=accept; *p; p++) {]
found reference to p
currentFunc = strpbrk
ref p is REF_STACK
found reference to accept
currentFunc = strpbrk
ref accept is REF_STACK

line 230: [      if (*p == *s) return s;]

line 231: [    }]

line 232: [  }]

line 233: [  return NULL;]

line 234: [}]

line 235: []

line 236: [//finds the first occurrence of the string "needle" in the longer string "haystack"]
removed string literal ""needle""
removed string literal ""haystack""

line 237: [char *strstr(char *haystack, char *needle) {]
found func strstr



sig1 = char *strstr(char *haystack, char *needle)
sig2 = (char *haystack, char *needle)
found param haystack
found param needle

line 238: [  register char *s = haystack;]
found local var s (BL = 1)
found reference to haystack
currentFunc = strstr
ref haystack is REF_STACK

line 239: [  register char *p = needle;]
found local var p (BL = 1)
found reference to needle
currentFunc = strstr
ref needle is REF_STACK

line 240: []

line 241: [  while (1) {]

line 242: [    if (!*p) {]
found reference to p
currentFunc = strstr
ref p is REF_STACK

line 243: [      return haystack;]

line 244: [    }]

line 245: [    if (*p == *s) {]
found reference to s
currentFunc = strstr
ref s is REF_STACK

line 246: [      ++p;]

line 247: [      ++s;]

line 248: [    } else {]

line 249: [      p = needle;]

line 250: [      if (!*s) {]

line 251: [        return NULL;]

line 252: [      }]

line 253: [      s = ++haystack;]

line 254: [    }]

line 255: [  }]

line 256: [}]

line 257: []

line 258: [//parses a string into a sequence of tokens; non-thread safe in the spec, non-reentrant]

line 259: [//char *strtok(char *, const char * delim);]

line 260: []

line 261: [//transforms src into a collating form, such that the numerical sort order of the transformed string is equivalent to the collating order of src]

line 262: [//float strxfrm(char *dest, const char *src, float n);]

line 263: [#endif]

line 264: []

line 6: [#include <cyclone/libs/variadic.txt>]
found include <cyclone/libs/variadic.txt>
reading file cyclone/libs/variadic.txt

line 1: [//variadic functions library by immibis]

line 2: [//]

line 3: [//Usage:]

line 4: [//----------------------------------------------------------------------------]

line 5: [//|void printf(char *fmt, ...)                                               |]

line 6: [//|{                                                                         |]

line 7: [//|    float va = va_start(&fmt);                                            |]

line 8: [//|    // do stuff - the point of this isn't to show how to write printf :P  |]

line 9: [//|    float arg = va_next(&va);                                             |]

line 10: [//|    // do more stuff                                                      |]

line 11: [//|}                                                                         |]

line 12: [//|                                                                          |]

line 13: [//|void main()                                                               |]

line 14: [//|{                                                                         |]

line 15: [//|    printf("One plus one is %d\n", 1+1);                                  |]
removed string literal ""One plus one is %d\n""

line 16: [//|}                                                                         |]

line 17: [//----------------------------------------------------------------------------]

line 18: [//]

line 19: [//Functions:]

line 20: [//float va_start(float *last_arg)]

line 21: [// - Returns a pointer you can use in va_next]

line 22: [// - last_arg should be a pointer to the last named argument]

line 23: [//float va_start_0()]

line 24: [// - Like va_start for functions with no named arguments]

line 25: [//float va_next(float *va)]

line 26: [// - Returns the next argument. Note that "va" is a pointer to the pointer returned by va_start. If you have "float va = va_start(&x);" you need to use "va_next(&va)"]
removed string literal ""va""
removed string literal ""float va = va_start(&x);""
removed string literal ""va_next(&va)""

line 27: [//float va_get(float *last_arg, float n)]

line 28: [// - Gets the N'th argument after the last named argument, starting from 0. Equivalent to calling va_start, then va_next N times, then va_next once more.]

line 29: [//float va_get_0(float n)]

line 30: [// - Like va_get for functions with no named arguments.]

line 31: [#ifndef VARIADIC_GUARD]
#ifndef "VARIADIC_GUARD" (undefined)

line 32: [#define VARIADIC_GUARD]
#defined "VARIADIC_GUARD"

line 33: [va_start: // float va_start(float *last_arg)]
found label va_start

line 34: [rstack eax, esp:2]
found label esp

line 35: [sub eax, ds]

line 36: [add eax, ss]

line 37: [ret]

line 38: []

line 39: [va_start_0: // float va_start_0()]
found label va_start_0

line 40: [mov eax, ebp:1]
found label ebp

line 41: [ret]

line 42: []

line 43: [va_next: // float va_next(float *va)]
found label va_next

line 44: [rstack ebx, esp:2]
found label esp

line 45: [inc #ebx]

line 46: [rstack eax, #ebx]

line 47: [ret]

line 48: []

line 49: [va_get: // float va_get(float *last_arg, float n)]
found label va_get

line 50: [rstack eax, esp:2]
found label esp

line 51: [rstack ebx, esp:3]
found label esp

line 52: [add eax, ebx]

line 53: [inc eax]

line 54: [mov eax, #eax]

line 55: [ret]

line 56: []

line 57: [va_get_0: // float va_get_0(float n)]
found label va_get_0

line 58: [rstack eax, esp:2]
found label esp

line 59: [add eax, ebp:2]
found label ebp

line 60: [rstack eax, eax]

line 61: [ret]

line 62: [#endif]

line 63: []

line 7: [//#include <stackalloc.txt>]

line 8: []

line 9: [float explode(char *str, char *del)]
found func explode



sig1 = float explode(char *str, char *del)
sig2 = (char *str, char *del)
found param str
found param del

line 10: [{]

line 11: [    //persist R0;]

line 12: [    float Start = str;]
found local var Start (BL = 1)
found reference to str
currentFunc = explode
ref str is REF_STACK

line 13: [    float End = str;]
found local var End (BL = 1)

line 14: [    float I = 0;]
found local var I (BL = 1)

line 15: [    float Count = 0;]
found local var Count (BL = 1)

line 16: [    float lenD = strlen(del);]
found local var lenD (BL = 1)
found reference to strlen
currentFunc = explode
ref strlen is REF_EXT
found reference to del
currentFunc = explode
ref del is REF_STACK

line 17: [    float lenS = strlen(str);]
found local var lenS (BL = 1)

line 18: [    float Finish = 0;]
found local var Finish (BL = 1)

line 19: [    while(!Finish)]
found reference to Finish
currentFunc = explode
ref Finish is REF_STACK

line 20: [    {]

line 21: [        Count++;]
found reference to Count
currentFunc = explode
ref Count is REF_STACK

line 22: [        End = strstr(Start, del);]
found reference to End
currentFunc = explode
ref End is REF_STACK
found reference to strstr
currentFunc = explode
ref strstr is REF_EXT
found reference to Start
currentFunc = explode
ref Start is REF_STACK

line 23: [        if(End)]

line 24: [        {]

line 25: [        *End = 0;]

line 26: [        *(Array+I) = Start;]
found reference to Array
currentFunc = explode
ref Array is REF_EXT
found reference to I
currentFunc = explode
ref I is REF_STACK

line 27: [        I++;]

line 28: [        Start = End+lenD;]
found reference to lenD
currentFunc = explode
ref lenD is REF_STACK

line 29: [        if((I>13)|(Start>(str+lenS))){Finish = 1;}   ]
found reference to lenS
currentFunc = explode
ref lenS is REF_STACK

line 30: [        }else{Finish = 1}]

line 31: [    }]

line 32: [    Array[I] = Start; I++;]

line 33: [    Array[I] = 0;]

line 34: [    return Array;]

line 35: [}]

line 36: []

line 37: []

line 38: [float str2num(char* str)]
found func str2num



sig1 = float str2num(char* str)
sig2 = (char* str)
found param str

line 39: [{]

line 40: [    // -1243.0423]

line 41: [    // 0b1010101011]

line 42: [    // 0o1702403715]

line 43: [    // 0xFF0035EA12]

line 44: [    float End = 0;]
found local var End (BL = 1)

line 45: [    float I = 0;]
found local var I (BL = 1)

line 46: [    float Num = 0;]
found local var Num (BL = 1)

line 47: [    float Minus = 0;]
found local var Minus (BL = 1)

line 48: [    float Frac = 0;]
found local var Frac (BL = 1)

line 49: [    float N = 0;]
found local var N (BL = 1)

line 50: [    float Base = 10;]
found local var Base (BL = 1)

line 51: [    float C = str[I];]
found local var C (BL = 1)
found reference to str
currentFunc = str2num
ref str is REF_STACK
found reference to I
currentFunc = str2num
ref I is REF_STACK

line 52: [    if(C == 0){return 0;}]
found reference to C
currentFunc = str2num
ref C is REF_STACK

line 53: [    else]

line 54: [    {]

line 55: [        if(C == '-'){Minus = 1;}]
removed character literal "'-'"
found reference to Minus
currentFunc = str2num
ref Minus is REF_STACK

line 56: [        if(C == '0')]
removed character literal "'0'"

line 57: [        {]

line 58: [            if(str[I+1]=='b'){Base = 2;I+=2;}]
removed character literal "'b'"
found reference to Base
currentFunc = str2num
ref Base is REF_STACK

line 59: [            if(str[I+1]=='o'){Base = 8;I+=2;}]
removed character literal "'o'"

line 60: [            if(str[I+1]=='x'){Base = 16;I+=2;}]
removed character literal "'x'"

line 61: [            ]

line 62: [        }]

line 63: [    }]

line 64: [    while(!End)]
found reference to End
currentFunc = str2num
ref End is REF_STACK

line 65: [    {]

line 66: [        C = str[I++];]

line 67: [        if(C == 0){End = 1;}else]

line 68: [        {]

line 69: [         if(C == '.'){End = 1; Frac = 1;}]
removed character literal "'.'"
found reference to Frac
currentFunc = str2num
ref Frac is REF_STACK

line 70: [         else]

line 71: [         {]

line 72: [            N = 0;]
found reference to N
currentFunc = str2num
ref N is REF_STACK

line 73: [            if(C == '0'){N=0;}]
removed character literal "'0'"

line 74: [            if(C == '1'){N=1;}]
removed character literal "'1'"

line 75: [            if(C == '2'){N=2;}]
removed character literal "'2'"

line 76: [            if(C == '3'){N=3;}]
removed character literal "'3'"

line 77: [            if(C == '4'){N=4;}]
removed character literal "'4'"

line 78: [            if(C == '5'){N=5;}]
removed character literal "'5'"

line 79: [            if(C == '6'){N=6;}]
removed character literal "'6'"

line 80: [            if(C == '7'){N=7;}]
removed character literal "'7'"

line 81: [            if(C == '8'){N=8;}]
removed character literal "'8'"

line 82: [            if(C == '9'){N=9;}]
removed character literal "'9'"

line 83: [            if(C == 'A'){N=10;}]
removed character literal "'A'"

line 84: [            if(C == 'B'){N=11;}]
removed character literal "'B'"

line 85: [            if(C == 'C'){N=12;}]
removed character literal "'C'"

line 86: [            if(C == 'D'){N=13;}]
removed character literal "'D'"

line 87: [            if(C == 'E'){N=14;}]
removed character literal "'E'"

line 88: [            if(C == 'F'){N=15;}]
removed character literal "'F'"

line 89: [            Num = Num*Base+N;]
found reference to Num
currentFunc = str2num
ref Num is REF_STACK

line 90: [         }]

line 91: [        }]

line 92: [    }]

line 93: [    if(Frac==1)]

line 94: [    {]

line 95: [     End = 0;]

line 96: [     while(!End)]

line 97: [     {]

line 98: [        C = str[I++];]

line 99: [        if(C == 0){End = 1;}else]

line 100: [        {]

line 101: [            N = 0;]

line 102: [            if(C == '0'){N=0;}]
removed character literal "'0'"

line 103: [            if(C == '1'){N=1;}]
removed character literal "'1'"

line 104: [            if(C == '2'){N=2;}]
removed character literal "'2'"

line 105: [            if(C == '3'){N=3;}]
removed character literal "'3'"

line 106: [            if(C == '4'){N=4;}]
removed character literal "'4'"

line 107: [            if(C == '5'){N=5;}]
removed character literal "'5'"

line 108: [            if(C == '6'){N=6;}]
removed character literal "'6'"

line 109: [            if(C == '7'){N=7;}]
removed character literal "'7'"

line 110: [            if(C == '8'){N=8;}]
removed character literal "'8'"

line 111: [            if(C == '9'){N=9;}]
removed character literal "'9'"

line 112: [            if(C == 'A'){N=10;}]
removed character literal "'A'"

line 113: [            if(C == 'B'){N=11;}]
removed character literal "'B'"

line 114: [            if(C == 'C'){N=12;}]
removed character literal "'C'"

line 115: [            if(C == 'D'){N=13;}]
removed character literal "'D'"

line 116: [            if(C == 'E'){N=14;}]
removed character literal "'E'"

line 117: [            if(C == 'F'){N=15;}]
removed character literal "'F'"

line 118: [            Num = Num*Base+N;]

line 119: [            Frac++;]

line 120: [        }]

line 121: [     }]

line 122: [    }]

line 123: [    if(Frac){Num /=(Base^^(Frac-1));}]

line 124: [    if(Minus){Num = -Num;}]

line 125: [    return Num;]

line 126: [}]

line 127: []

line 128: [float getNdigit(float num, float digit, float Base)]
found func getNdigit



sig1 = float getNdigit(float num, float digit, float Base)
sig2 = (float num, float digit, float Base)
found param num
found param digit
found param Base

line 129: [{]

line 130: [   preserve eax, edx;]

line 131: [   eax = Nlog(num, Base);]
found reference to Nlog
currentFunc = getNdigit
ref Nlog is REF_EXT
found reference to num
currentFunc = getNdigit
ref num is REF_STACK
found reference to Base
currentFunc = getNdigit
ref Base is REF_STACK

line 132: [   fint eax;]

line 133: [   inc eax;]

line 134: [   sub eax, digit;]
found reference to digit
currentFunc = getNdigit
ref digit is REF_STACK

line 135: [   mov edx, Base;]

line 136: [   fpwr edx, eax;]

line 137: [   mov eax, num;]

line 138: [   div eax, edx;]

line 139: [   fint eax;]

line 140: [   mod eax, Base;]

line 141: [   return eax;]

line 142: [}]

line 143: []

line 144: [void num2strSet(float base, float precision)]
found func num2strSet



sig1 = void num2strSet(float base, float precision)
sig2 = (float base, float precision)
found param base
found param precision

line 145: [{]

line 146: [    Nbase = base;]
found reference to Nbase
currentFunc = num2strSet
ref Nbase is REF_EXT
found reference to base
currentFunc = num2strSet
ref base is REF_STACK

line 147: [    Nprec = precision;]
found reference to Nprec
currentFunc = num2strSet
ref Nprec is REF_EXT
found reference to precision
currentFunc = num2strSet
ref precision is REF_STACK

line 148: [    out 5, Nbase;]

line 149: [}]

line 150: []

line 151: []

line 152: []

line 153: [//  1  0  0  0  0  0]

line 154: [//  5  4  3  2  1  0]

line 155: [//  32 16 8  4  2  1]

line 156: []

line 157: [//  F  F]

line 158: [//  1  0]

line 159: [//  16 1]

line 160: [char num2str(float num)]
found func num2str



sig1 = char num2str(float num)
sig2 = (float num)
found param num

line 161: [{]

line 162: [    preserve eax;]

line 163: [    float NI = 0;]
found local var NI (BL = 1)

line 164: [    float End =0;]
found local var End (BL = 1)

line 165: [    float NM = num;]
found local var NM (BL = 1)
found reference to num
currentFunc = num2str
ref num is REF_STACK

line 166: [    float Base = 10;]
found local var Base (BL = 1)

line 167: [    float Prec = 3;]
found local var Prec (BL = 1)

line 168: [    //mov eax, Nbase; mov eax, #eax;]

line 169: [    //Base = eax;]

line 170: [    Base = Nbase;]
found reference to Base
currentFunc = num2str
ref Base is REF_STACK

line 171: [    out 1, Base;]

line 172: [    //mov eax, Nprec; mov eax, #eax;]

line 173: [    //Prec = eax;]

line 174: [    Prec = Nprec ]
found reference to Prec
currentFunc = num2str
ref Prec is REF_STACK

line 175: [    out 2, Prec;  ]

line 176: [    //float Base = *Nbase;]

line 177: [    //float Prec = *Nprec;]

line 178: [    if(NM<0){NM = -NM; Nstack[NI++] = '-';}]
removed character literal "'-'"
found reference to NM
currentFunc = num2str
ref NM is REF_STACK
found reference to Nstack
currentFunc = num2str
ref Nstack is REF_EXT
found reference to NI
currentFunc = num2str
ref NI is REF_STACK

line 179: [    if(Base == 2){Nstack[NI++] = '0';Nstack[NI++] = 'b'}]
removed character literal "'0'"
removed character literal "'b'"

line 180: [    if(Base == 8){Nstack[NI++] = '0';Nstack[NI++] = 'o'}]
removed character literal "'0'"
removed character literal "'o'"

line 181: [    if(Base == 16){Nstack[NI++] = '0';Nstack[NI++] = 'x'}]
removed character literal "'0'"
removed character literal "'x'"

line 182: [    if(NM<1){Nstack[NI++] = '0';}]
removed character literal "'0'"

line 183: [    eax = Nlog(NM, Base);]

line 184: [    //frnd eax;]

line 185: [    out 3, eax;]

line 186: [    float Len = eax+1;]
found local var Len (BL = 1)

line 187: [    float N;]
found local var N (BL = 1)

line 188: [    float C;]
found local var C (BL = 1)

line 189: [    float I = 0;]
found local var I (BL = 1)

line 190: [    for(I = 1;I<=Len;I++)]
found reference to I
currentFunc = num2str
ref I is REF_STACK
found reference to Len
currentFunc = num2str
ref Len is REF_STACK

line 191: [    {]

line 192: [        C = 'F';]
removed character literal "'F'"
found reference to C
currentFunc = num2str
ref C is REF_STACK

line 193: [        N = getNdigit(NM, I, Base);]
found reference to N
currentFunc = num2str
ref N is REF_STACK
found reference to getNdigit
currentFunc = num2str
ref getNdigit is REF_EXT

line 194: [        if(N==0){C='0';}]
removed character literal "'0'"

line 195: [        if(N==1){C='1';}]
removed character literal "'1'"

line 196: [        if(N==2){C='2';}]
removed character literal "'2'"

line 197: [        if(N==3){C='3';}]
removed character literal "'3'"

line 198: [        if(N==4){C='4';}]
removed character literal "'4'"

line 199: [        if(N==5){C='5';}]
removed character literal "'5'"

line 200: [        if(N==6){C='6';}]
removed character literal "'6'"

line 201: [        if(N==7){C='7';}]
removed character literal "'7'"

line 202: [        if(N==8){C='8';}]
removed character literal "'8'"

line 203: [        if(N==9){C='9';}]
removed character literal "'9'"

line 204: [        if(N==10){C='A';}]
removed character literal "'A'"

line 205: [        if(N==11){C='B';}]
removed character literal "'B'"

line 206: [        if(N==12){C='C';}]
removed character literal "'C'"

line 207: [        if(N==13){C='D';}]
removed character literal "'D'"

line 208: [        if(N==14){C='E';}]
removed character literal "'E'"

line 209: [        if(N==15){C='F';}]
removed character literal "'F'"

line 210: [        Nstack[NI++] = C;]

line 211: [    }]

line 212: [    mov eax, NM; FFRAC eax;]

line 213: [    if((eax>0)&&(Prec>0))]

line 214: [    {]

line 215: [        float K = 0;]
found local var K (BL = 2)

line 216: [        Nstack[NI++] = '.';]
removed character literal "'.'"

line 217: [        for(K = I;K<I+Prec;K++)]
found reference to K
currentFunc = num2str
ref K is REF_STACK

line 218: [        {]

line 219: [        C = 'F';]
removed character literal "'F'"

line 220: [        N = getNdigit(NM, K, Base);]

line 221: [        if(N==0){C='0';}]
removed character literal "'0'"

line 222: [        if(N==1){C='1';}]
removed character literal "'1'"

line 223: [        if(N==2){C='2';}]
removed character literal "'2'"

line 224: [        if(N==3){C='3';}]
removed character literal "'3'"

line 225: [        if(N==4){C='4';}]
removed character literal "'4'"

line 226: [        if(N==5){C='5';}]
removed character literal "'5'"

line 227: [        if(N==6){C='6';}]
removed character literal "'6'"

line 228: [        if(N==7){C='7';}]
removed character literal "'7'"

line 229: [        if(N==8){C='8';}]
removed character literal "'8'"

line 230: [        if(N==9){C='9';}]
removed character literal "'9'"

line 231: [        if(N==10){C='A';}]
removed character literal "'A'"

line 232: [        if(N==11){C='B';}]
removed character literal "'B'"

line 233: [        if(N==12){C='C';}]
removed character literal "'C'"

line 234: [        if(N==13){C='D';}]
removed character literal "'D'"

line 235: [        if(N==14){C='E';}]
removed character literal "'E'"

line 236: [        if(N==15){C='F';}]
removed character literal "'F'"

line 237: [        Nstack[NI++] = C;]

line 238: [        }]

line 239: [    }]

line 240: [    Nstack[NI] = 0;]

line 241: [    //len = strlen(Nstack);]

line 242: [    return Nstack;]

line 243: [    //stack_return(Nstack, len+1, 1);]

line 244: [}]

line 245: [float Nlog(float A, float B)     {preserve eax, edx, ecx, ebx;mov eax, A; mov ebx, B; FLN edx, eax; FLN ecx, ebx; div edx, ecx; return edx;}]
found func Nlog



sig1 = float Nlog(float A, float B)
sig2 = (float A, float B)
found param A
found param B
found reference to A
currentFunc = Nlog
ref A is REF_STACK
found reference to B
currentFunc = Nlog
ref B is REF_STACK

line 246: []

line 247: [float isPrint(char C){return (31<C)&&(C<127);}]
found func isPrint



sig1 = float isPrint(char C)
sig2 = (char C)
found param C
found reference to C
currentFunc = isPrint
ref C is REF_STACK

line 248: [float isNum(char C){return (47<C)&&(C<58);}]
found func isNum



sig1 = float isNum(char C)
sig2 = (char C)
found param C
found reference to C
currentFunc = isNum
ref C is REF_STACK

line 249: [float isAlpha(char C){return ((64<C)&&(C<91))||((96<C)&&(C<123))}]
found func isAlpha



sig1 = float isAlpha(char C)
sig2 = (char C)
found param C
found reference to C
currentFunc = isAlpha
ref C is REF_STACK

line 250: [float toLower(char C){if((64<C)&&(C<91)){return C+32;}else{return C;}}]
found func toLower



sig1 = float toLower(char C)
sig2 = (char C)
found param C
found reference to C
currentFunc = toLower
ref C is REF_STACK

line 251: [float toUpper(char C){if((96<C)&&(C<123)){return C-32;}else{return C;}}]
found func toUpper



sig1 = float toUpper(char C)
sig2 = (char C)
found param C
found reference to C
currentFunc = toUpper
ref C is REF_STACK

line 252: []

line 253: [float Con(char* str1, char* str2, char* str3, char* str4, char* str5)]
found func Con



sig1 = float Con(char* str1, char* str2, char* str3, char* str4, char* str5)
sig2 = (char* str1, char* str2, char* str3, char* str4, char* str5)
found param str1
found param str2
found param str3
found param str4
found param str5

line 254: [{]

line 255: [    float I = 0;]
found local var I (BL = 1)

line 256: [    float I2 = 0;]
found local var I2 (BL = 1)

line 257: [    float C = str1[I++];]
found local var C (BL = 1)
found reference to str1
currentFunc = Con
ref str1 is REF_STACK
found reference to I
currentFunc = Con
ref I is REF_STACK

line 258: [    while((C>0)&(I2<256))]
found reference to C
currentFunc = Con
ref C is REF_STACK
found reference to I2
currentFunc = Con
ref I2 is REF_STACK

line 259: [    {]

line 260: [        Constr[I2++] = C;]
found reference to Constr
currentFunc = Con
ref Constr is REF_EXT

line 261: [        C = str1[I++];]

line 262: [    }]

line 263: [    I = 0;C = str2[I++];]
found reference to str2
currentFunc = Con
ref str2 is REF_STACK

line 264: [    while((C>0)&(I2<256))]

line 265: [    {]

line 266: [        Constr[I2++] = C;]

line 267: [        C = str2[I++];]

line 268: [    }]

line 269: [    I = 0;C = str3[I++];]
found reference to str3
currentFunc = Con
ref str3 is REF_STACK

line 270: [    while((C>0)&(I2<256))]

line 271: [    {]

line 272: [        Constr[I2++] = C;]

line 273: [        C = str3[I++];]

line 274: [    }]

line 275: [    I = 0;C = str4[I++];]
found reference to str4
currentFunc = Con
ref str4 is REF_STACK

line 276: [    while((C>0)&(I2<256))]

line 277: [    {]

line 278: [        Constr[I2++] = C;]

line 279: [        C = str4[I++];]

line 280: [    }]

line 281: [    I = 0;C = str5[I++];]
found reference to str5
currentFunc = Con
ref str5 is REF_STACK

line 282: [    while((C>0)&(I2<256))]

line 283: [    {]

line 284: [        Constr[I2++] = C;]

line 285: [        C = str5[I++];]

line 286: [    }]

line 287: [    Constr[I2] = 0;]

line 288: [    return Constr;]

line 289: [}]

line 290: []

line 291: []

line 292: [float concat(){ //VARIADIC]
found func concat



sig1 = float concat()
sig2 = ()

line 293: [    float n = ecx;]
found local var n (BL = 1)

line 294: [    float I = 0;]
found local var I (BL = 1)

line 295: [    float va = va_start_0();]
found local var va (BL = 1)
found reference to va_start_0
currentFunc = concat
ref va_start_0 is REF_EXT

line 296: [    float len = 0;]
found local var len (BL = 1)

line 297: [    //1 determine the length of strings provided]

line 298: [    while(I < n){]
found reference to I
currentFunc = concat
ref I is REF_STACK
found reference to n
currentFunc = concat
ref n is REF_STACK

line 299: [        float str = va_next(&va);]
found local var str (BL = 2)
found reference to va_next
currentFunc = concat
ref va_next is REF_EXT
found reference to va
currentFunc = concat
ref va is REF_STACK

line 300: [        float J = 0;]
found local var J (BL = 2)

line 301: [        float C = str[J++];]
found local var C (BL = 2)
found reference to str
currentFunc = concat
ref str is REF_STACK
found reference to J
currentFunc = concat
ref J is REF_STACK

line 302: [        while(C){]
found reference to C
currentFunc = concat
ref C is REF_STACK

line 303: [            len++;]
found reference to len
currentFunc = concat
ref len is REF_STACK

line 304: [            C = str[J++];]

line 305: [        }]

line 306: [        I++;]

line 307: [    }]

line 308: [    //2 allocate the memory for a new string on the stack]

line 309: [    float newstr = stack_alloc(len+1);]
found local var newstr (BL = 1)
found reference to stack_alloc
currentFunc = concat
ref stack_alloc is REF_EXT

line 310: [    //float newstr = malloc(len+1);//stack_alloc(len+1);]

line 311: [    //3 copy strings to the new string]

line 312: [    I = 0;]

line 313: [    va = va_start_0();]

line 314: [    float J2 = 0;]
found local var J2 (BL = 1)

line 315: [    while(I < n){]

line 316: [        str = va_next(&va);]

line 317: [        J = 0;]

line 318: [        C = str[J++];]

line 319: [        while(C){]

line 320: [            newstr[J2++] = C;]
found reference to newstr
currentFunc = concat
ref newstr is REF_STACK
found reference to J2
currentFunc = concat
ref J2 is REF_STACK

line 321: [            C = str[J++];]

line 322: [        }]

line 323: [        I++;]

line 324: [    }]

line 325: [    newstr[J2] = 0;]

line 326: [    //4 return the resulting string by value]

line 327: [    //return 0;]

line 328: [    //return newstr;]

line 329: [    return stack_return(newstr,len+1,n);]
found reference to stack_return
currentFunc = concat
ref stack_return is REF_EXT

line 330: [}]

line 331: []

line 332: [float c2str(char C){]
found func c2str



sig1 = float c2str(char C)
sig2 = (char C)
found param C

line 333: [    if(C == '\n'){]
removed character literal "'\n'"
found reference to C
currentFunc = c2str
ref C is REF_STACK

line 334: [        stack_return(c2str_n,3,1);]
found reference to c2str_n
currentFunc = c2str
ref c2str_n is REF_EXT

line 335: [    }]

line 336: [    if(C == 0){]

line 337: [        stack_return(c2str_0,3,1);]
found reference to c2str_0
currentFunc = c2str
ref c2str_0 is REF_EXT

line 338: [    }]

line 339: [    c2str_str[0] = C;]
found reference to c2str_str
currentFunc = c2str
ref c2str_str is REF_EXT

line 340: [    c2str_str[1] = 0;]

line 341: [    stack_return(c2str_str,2,1);   ]

line 342: [}]

line 343: []

line 344: [float unescapeStr(float str){]
found func unescapeStr



sig1 = float unescapeStr(float str)
sig2 = (float str)
found param str

line 345: [    //printf("unescapeStr:\n");]
removed string literal ""unescapeStr:\n""

line 346: [    float len1 = strlen(str)+1;]
found local var len1 (BL = 1)
found reference to str
currentFunc = unescapeStr
ref str is REF_STACK

line 347: [    float str2 = malloc(len1);//cstr_stack_copy(str);]
found local var str2 (BL = 1)
found reference to malloc
currentFunc = unescapeStr
ref malloc is REF_EXT
found reference to len1
currentFunc = unescapeStr
ref len1 is REF_STACK

line 348: [    float I = 0;]
found local var I (BL = 1)

line 349: [    float ptr = str;]
found local var ptr (BL = 1)

line 350: [    float ptr2 = str2;]
found local var ptr2 (BL = 1)
found reference to str2
currentFunc = unescapeStr
ref str2 is REF_STACK

line 351: [    while(1){]

line 352: [        float C = *ptr++;]
found local var C (BL = 2)
found reference to ptr
currentFunc = unescapeStr
ref ptr is REF_STACK

line 353: [        float C2= *ptr;]
found local var C2 (BL = 2)

line 354: [        //printf("chars [%c][%c]:",C,C2);]
removed string literal ""chars [%c][%c]:""

line 355: [        if(C == 0){]
found reference to C
currentFunc = unescapeStr
ref C is REF_STACK

line 356: [         //   printf("end\n");]
removed string literal ""end\n""

line 357: [            break;]

line 358: [        }]

line 359: [        if(C == 92){// == '\\'){]
removed character literal "'\\'"

line 360: [            if(C2 == 0){continue;}]
found reference to C2
currentFunc = unescapeStr
ref C2 is REF_STACK

line 361: [            if(C2 == 'n'){*ptr2++ = '\n';}]
removed character literal "'n'"
removed character literal "'\n'"
found reference to ptr2
currentFunc = unescapeStr
ref ptr2 is REF_STACK

line 362: [            if(C2 == '0'){*ptr2++ = 0;}]
removed character literal "'0'"

line 363: [            if(C2 == 'r'){*ptr2++ = '\r';}]
removed character literal "'r'"
removed character literal "'\r'"

line 364: [            if(C2 == 'b'){*ptr2++ = '\b';}]
removed character literal "'b'"
removed character literal "'\b'"

line 365: [            if(C2 == 'f'){*ptr2++ = '\f';}   ]
removed character literal "'f'"
removed character literal "'\f'"

line 366: [            ptr++;]

line 367: [        }else{]

line 368: [     //       printf("*\n"); ]
removed string literal ""*\n""

line 369: [            *ptr2++ = C; ]

line 370: [        }]

line 371: [    }]

line 372: [    *ptr2 = 0;]

line 373: [    //printf("string [%s] unescaped to [%s]\n",str,str2);]
removed string literal ""string [%s] unescaped to [%s]\n""

line 374: [    //stack_return(str2,I,1);]

line 375: [    return str2;]

line 376: [}]

line 377: []

line 378: [float cstr_find_first_of(char *S, char C){]
found func cstr_find_first_of



sig1 = float cstr_find_first_of(char *S, char C)
sig2 = (char *S, char C)
found param S
found param C

line 379: [    float I = 0;]
found local var I (BL = 1)

line 380: [    float C1 = S[I];]
found local var C1 (BL = 1)
found reference to S
currentFunc = cstr_find_first_of
ref S is REF_STACK
found reference to I
currentFunc = cstr_find_first_of
ref I is REF_STACK

line 381: [    while(C1 != 0){]
found reference to C1
currentFunc = cstr_find_first_of
ref C1 is REF_STACK

line 382: [        if(C1 == C){return I;}]
found reference to C
currentFunc = cstr_find_first_of
ref C is REF_STACK

line 383: [        I++;]

line 384: [        C1 = S[I];]

line 385: [    }]

line 386: [    return -1;]

line 387: [}]

line 388: []

line 389: [float cstr_find_last_of(char *S, char C){]
found func cstr_find_last_of



sig1 = float cstr_find_last_of(char *S, char C)
sig2 = (char *S, char C)
found param S
found param C

line 390: [    float I = strlen(S)-1;]
found local var I (BL = 1)
found reference to S
currentFunc = cstr_find_last_of
ref S is REF_STACK

line 391: [    float C1 = S[I];]
found local var C1 (BL = 1)
found reference to I
currentFunc = cstr_find_last_of
ref I is REF_STACK

line 392: [    while(I != -1){]

line 393: [        if(C1 == C){return I;}]
found reference to C1
currentFunc = cstr_find_last_of
ref C1 is REF_STACK
found reference to C
currentFunc = cstr_find_last_of
ref C is REF_STACK

line 394: [        I--;]

line 395: [        C1 = S[I];]

line 396: [    }]

line 397: [    return -1;]

line 398: [}]

line 399: []

line 400: [//makes a local copy of the object on the stack.]

line 401: [float stack_copy(float ptr, float size){]
found func stack_copy



sig1 = float stack_copy(float ptr, float size)
sig2 = (float ptr, float size)
found param ptr
found param size

line 402: [    return stack_return(ptr,size,2);]
found reference to ptr
currentFunc = stack_copy
ref ptr is REF_STACK

line 403: [}]

line 404: []

line 405: [//makes a local copy of a string on the stack.]

line 406: [char *cstr_stack_copy(char *str){]
found func cstr_stack_copy



sig1 = char *cstr_stack_copy(char *str)
sig2 = (char *str)
found param str

line 407: [    float len = strlen(str);]
found local var len (BL = 1)
found reference to str
currentFunc = cstr_stack_copy
ref str is REF_STACK

line 408: [    return stack_return(str,len+1,1);]
found reference to len
currentFunc = cstr_stack_copy
ref len is REF_STACK

line 409: [}]

line 410: []

line 411: [float isspace(float C){]
found func isspace



sig1 = float isspace(float C)
sig2 = (float C)
found param C

line 412: [    if(C == ' '){return 1;}]
removed character literal "' '"
found reference to C
currentFunc = isspace
ref C is REF_STACK

line 413: [    if(C == '\t'){return 1;}]
removed character literal "'\t'"

line 414: [    if(C == '\n'){return 1;}]
removed character literal "'\n'"

line 415: [    if(C == '\v'){return 1;}]
removed character literal "'\v'"

line 416: [    if(C == '\f'){return 1;}]
removed character literal "'\f'"

line 417: [    if(C == '\r'){return 1;}]
removed character literal "'\r'"

line 418: [    return 0;]

line 419: [}]

line 420: []

line 421: [float stralloc(float S){]
found func stralloc



sig1 = float stralloc(float S)
sig2 = (float S)
found param S

line 422: [    float len = strlen(S)+1;]
found local var len (BL = 1)
found reference to S
currentFunc = stralloc
ref S is REF_STACK

line 423: [    float S2 = malloc(len);]
found local var S2 (BL = 1)
found reference to len
currentFunc = stralloc
ref len is REF_STACK

line 424: [    memcpy(S2,S,len);]
found reference to S2
currentFunc = stralloc
ref S2 is REF_STACK

line 425: [    return S2;]

line 426: [}]

line 427: []

line 428: [LIBSTRING_CONSTANTS:]
found label LIBSTRING_CONSTANTS

line 429: [c2str_n: db '\\'; db 'n'; db 0;]
removed character literal "'\\'"
removed character literal "'n'"
found label c2str_n

line 430: [c2str_0: db '\\'; db '0'; db 0;]
removed character literal "'\\'"
removed character literal "'0'"
found label c2str_0

line 431: [LIBSTRING_VARS:]
found label LIBSTRING_VARS

line 432: [c2str_str:alloc 2;]
found label c2str_str

line 433: [Constr:alloc 256]
found label Constr

line 434: [float Nbase = 10;//Nbase:db 10;]
found global var Nbase

line 435: [float Nprec = 3;//Nprec:db 3;]
found global var Nprec

line 436: [Nstack:alloc 16;]
found label Nstack

line 437: [Array:alloc 16]
found label Array

line 438: [LIBSTRING_END:]
found label LIBSTRING_END

line 439: [#endif]

line 440: []

line 157: [#include <cyclone/libs/boot.txt>]
found include <cyclone/libs/boot.txt>
reading file cyclone/libs/boot.txt

line 1: [//stuff needed at boot]

line 2: [#define CONSOLE_BUFFER_SIZE 6000]
#defined "CONSOLE_BUFFER_SIZE"

line 3: [ConsoleStrBuff:alloc CONSOLE_BUFFER_SIZE;]
found label ConsoleStrBuff

line 4: []

line 5: [//float printPtrY = 0;]

line 6: [//float printPtrX = 0;]

line 7: [float printScrX = 0;]
found global var printScrX

line 8: [float printScrY = 0;]
found global var printScrY

line 9: [float printBuffX = 0;]
found global var printBuffX

line 10: [float printBuffY = 0;]
found global var printBuffY

line 11: [float printLineOffset = 0;]
found global var printLineOffset

line 12: [float printSpecials = 0;]
found global var printSpecials

line 13: [float RedrawPending = 0;]
found global var RedrawPending

line 14: []

line 15: [void P(char *str){Print(str,999);}]
found func P



sig1 = void P(char *str)
sig2 = (char *str)
found param str
found reference to Print
currentFunc = P
ref Print is REF_EXT
found reference to str
currentFunc = P
ref str is REF_STACK

line 16: [//this label is literally poisonous wtf]

line 17: [//PcStr: db 0; db 0;]

line 18: [void Pc(char c){]
found func Pc



sig1 = void Pc(char c)
sig2 = (char c)
found param c

line 19: [    float c3 = 0; ]
found local var c3 (BL = 1)

line 20: [    float c2 = c; ]
found local var c2 (BL = 1)
found reference to c
currentFunc = Pc
ref c is REF_STACK

line 21: [    if(c2 == 0){c2 = ' ';}]
removed character literal "' '"
found reference to c2
currentFunc = Pc
ref c2 is REF_STACK

line 22: [    P(&c2);]
found reference to P
currentFunc = Pc
ref P is REF_EXT

line 23: [}//{*PcStr = c; Print(PcStr,999);}]

line 24: [void Pn(float N){Print(num2str(N),999);}]
found func Pn



sig1 = void Pn(float N)
sig2 = (float N)
found param N
found reference to num2str
currentFunc = Pn
ref num2str is REF_EXT
found reference to N
currentFunc = Pn
ref N is REF_STACK

line 25: [void Pl(char *str){Print(str,999);Print("\n",999);}]
removed string literal ""\n""
found func Pl



sig1 = void Pl(char *str)
sig2 = (char *str)
found param str
found reference to str
currentFunc = Pl
ref str is REF_STACK

line 26: [void P2(char *str1, float N, char *str2){Print(con(str1,num2str(N),str2,"",""),999);}]
removed string literal """"
removed string literal """"
found func P2



sig1 = void P2(char *str1, float N, char *str2)
sig2 = (char *str1, float N, char *str2)
found param str1
found param N
found param str2
found reference to con
currentFunc = P2
ref con is REF_EXT
found reference to str1
currentFunc = P2
ref str1 is REF_STACK
found reference to N
currentFunc = P2
ref N is REF_STACK
found reference to str2
currentFunc = P2
ref str2 is REF_STACK

line 27: [void Perr(char *str){Print(str,833);}]
found func Perr



sig1 = void Perr(char *str)
sig2 = (char *str)
found param str
found reference to str
currentFunc = Perr
ref str is REF_STACK

line 28: []

line 29: []

line 30: []

line 31: [//new logic:]

line 32: [//1)print to buffer]

line 33: [//2)calculate screen offset]

line 34: [//3)if print point on the line just after the screen, shift up]

line 35: [//4)if print point now on screen, print to screen.]

line 36: []

line 37: []

line 38: [//old logic]

line 39: [//1) writes string to screen]

line 40: [//2) performs scrolling]

line 41: [//3) saves scrolled text to buffer]

line 42: [//4) notifies console that GUI redraw is needed]

line 43: [void Print(char str, float col)]
found func Print



sig1 = void Print(char str, float col)
sig2 = (char str, float col)
found param str
found param col

line 44: [{]

line 45: [    float C = str[0];]
found local var C (BL = 1)
found reference to str
currentFunc = Print
ref str is REF_STACK

line 46: [    float I = 1;]
found local var I (BL = 1)

line 47: [    //float xspan = 60*num_screens_x;]

line 48: [    float buffAddr = 0;]
found local var buffAddr (BL = 1)

line 49: [    float ch = 0;]
found local var ch (BL = 1)

line 50: [    while(C!=0)]
found reference to C
currentFunc = Print
ref C is REF_STACK

line 51: [    {]

line 52: [        //if((printPtrY*xspan+printPtrX*2)>CONSOLE_BUFFER_SIZE-1){]

line 53: [        //    memcpy(ConsoleStrBuff, ConsoleStrBuff+xspan, CONSOLE_BUFFER_SIZE-60);]

line 54: [        //    memset(ConsoleStrBuff+CONSOLE_BUFFER_SIZE-xspan,0,60);]

line 55: [        //    PrintPtrY--;]

line 56: [        //}]

line 57: [        //if(printScrY == (19*num_screens_y-2)){ConsoleShiftUp();}]

line 58: [        if(printScrY == mcs_last_y){ConsoleShiftUp();}]
found reference to printScrY
currentFunc = Print
ref printScrY is REF_EXT
found reference to mcs_last_y
currentFunc = Print
ref mcs_last_y is REF_EXT
found reference to ConsoleShiftUp
currentFunc = Print
ref ConsoleShiftUp is REF_EXT

line 59: [        ]

line 60: [        if((C=='\n')) // \n means newline]
removed character literal "'\n'"

line 61: [        {]

line 62: [            //if(printSpecials){]

line 63: [            //    ConsoleStrBuff[printPtrY*xspan+printPtrX*2] = C;]

line 64: [            //    ConsoleStrBuff[printPtrY*xspan+printPtrX*2+1] = col;]

line 65: [            //    mcs_putchar(C,col,printPtrX,printScrY);]

line 66: [            //}]

line 67: [            goto print_nextline;]
found reference to print_nextline
currentFunc = Print
ref print_nextline is REF_EXT

line 68: [        }]

line 69: [        else if((C=='\r')) // \r means carriage return (go to beginning of current line)]
removed character literal "'\r'"

line 70: [        {]

line 71: [            //printPtrX = 0; ]

line 72: [            printScrX = 0;]
found reference to printScrX
currentFunc = Print
ref printScrX is REF_EXT

line 73: [            printBuffX = 0;]
found reference to printBuffX
currentFunc = Print
ref printBuffX is REF_EXT

line 74: [        }]

line 75: [        else if((C=='\b')) // \b means line return (go to beginning of previous line)]
removed character literal "'\b'"

line 76: [        {]

line 77: [            //printPtrY--;]

line 78: [            //printScrY--;]

line 79: [            //printPtrX = 0;]

line 80: [            printScrY--;]

line 81: [            printBuffY--;]
found reference to printBuffY
currentFunc = Print
ref printBuffY is REF_EXT

line 82: [            printScrX = 0;]

line 83: [            printBuffX = 0;]

line 84: [        }]

line 85: [        else if((C=='\f')) // \f means fill (print spaces for the rest of the line)]
removed character literal "'\f'"

line 86: [        {]

line 87: [            //while(printPtrX < (30*num_screens_x-2)){]

line 88: [            //    ConsoleStrBuff[printPtrY*xspan+printPtrX*2] = ' ';]
removed character literal "' '"

line 89: [           //     ConsoleStrBuff[printPtrY*xspan+printPtrX*2+1] = col;]

line 90: [           //     mcs_putchar(C,col,printPtrX,printScrY);]

line 91: [           //     printPtrX++]

line 92: [           // }]

line 93: [            while(printScrX < mcs_last_x){]
found reference to mcs_last_x
currentFunc = Print
ref mcs_last_x is REF_EXT

line 94: [                buffAddr = printBuffY*mcs_width+printBuffX;]
found reference to buffAddr
currentFunc = Print
ref buffAddr is REF_STACK
found reference to mcs_width
currentFunc = Print
ref mcs_width is REF_EXT

line 95: [                ch = ' ';]
removed character literal "' '"
found reference to ch
currentFunc = Print
ref ch is REF_STACK

line 96: [                ConsoleStrBuff[2*buffAddr] = ch;]
found reference to ConsoleStrBuff
currentFunc = Print
ref ConsoleStrBuff is REF_EXT

line 97: [                ConsoleStrBuff[2*buffAddr+1]=col;]
found reference to col
currentFunc = Print
ref col is REF_STACK

line 98: [                mcs_putchar(ch,col,printScrX,printScrY);]
found reference to mcs_putchar
currentFunc = Print
ref mcs_putchar is REF_EXT

line 99: [                printScrX++;]

line 100: [                printBuffX++;]

line 101: [            }]

line 102: [        }]

line 103: [        else]

line 104: [        {]

line 105: [            buffAddr = printBuffY*mcs_width+printBuffX;]

line 106: [            //ConsoleStrBuff[printPtrY*xspan+printPtrX*2] = C;]

line 107: [            //ConsoleStrBuff[printPtrY*xspan+printPtrX*2+1] = col;]

line 108: [            ConsoleStrBuff[2*buffAddr] = C;]

line 109: [            ConsoleStrBuff[2*buffAddr+1] = col;]

line 110: [            mcs_putchar(C,col,printScrX,printScrY);]

line 111: [            printScrX++]

line 112: [            printBuffX++;]

line 113: [        }]

line 114: [        ]

line 115: [        //if(printPtrX>(30*num_screens_x-2))]

line 116: [        //{]

line 117: [        //    print_nextline:]

line 118: [        //    printPtrX = 0;]

line 119: [        //    printPtrY++;]

line 120: [        //    printScrY++;]

line 121: [        //}]

line 122: [        ]

line 123: [        if(printScrX > (mcs_last_x-1)){]

line 124: [            print_nextline:]
found label print_nextline

line 125: [            printScrX = 0;]

line 126: [            printBuffX = 0;]

line 127: [            printScrY++;]

line 128: [            printBuffY++;]

line 129: [            ]

line 130: [            if((printBuffY+1) > CONSOLE_BUFFER_SIZE/(2*mcs_width)){]

line 131: [                printBuffY--;]

line 132: [                printLineOffset--;]
found reference to printLineOffset
currentFunc = Print
ref printLineOffset is REF_EXT

line 133: [                float dest = ConsoleStrBuff;]
found local var dest (BL = 4)

line 134: [                float src = ConsoleStrBuff+2*mcs_width;]
found local var src (BL = 4)

line 135: [                float size = CONSOLE_BUFFER_SIZE-2*mcs_width;]
found local var size (BL = 4)

line 136: [                memmove(dest,src,size);]
found reference to dest
currentFunc = Print
ref dest is REF_STACK
found reference to src
currentFunc = Print
ref src is REF_STACK

line 137: [                dest += size;]

line 138: [                memset(dest,0,2*mcs_width);]
found reference to memset
currentFunc = Print
ref memset is REF_EXT

line 139: [            }]

line 140: [        }]

line 141: [        C= str[I++];]
found reference to I
currentFunc = Print
ref I is REF_STACK

line 142: [    }]

line 143: [}]

line 144: []

line 145: [void printword(float str){]
found func printword



sig1 = void printword(float str)
sig2 = (float str)
found param str

line 146: [    float len = strlen(str);]
found local var len (BL = 1)
found reference to str
currentFunc = printword
ref str is REF_STACK

line 147: [    float lenleft = mcs_last_x-printScrX;]
found local var lenleft (BL = 1)

line 148: [    float lendiff = len-lenleft;]
found local var lendiff (BL = 1)
found reference to len
currentFunc = printword
ref len is REF_STACK
found reference to lenleft
currentFunc = printword
ref lenleft is REF_STACK

line 149: [    if(lendiff <= 0){]
found reference to lendiff
currentFunc = printword
ref lendiff is REF_STACK

line 150: [        //there is enough screen space to fit the string completely]

line 151: [        P(str);]

line 152: [    }else{]

line 153: [        //the string doesn't fit on this line]

line 154: [        if(lendiff > mcs_width){]

line 155: [            //it doesn't fit on the next line either so whatever]

line 156: [            P(str);]

line 157: [        }else{]

line 158: [            //it DOES fit unbroken if we go to the next line.]

line 159: [            P("\n");]
removed string literal ""\n""

line 160: [            P(str);]

line 161: [        }]

line 162: [    }]

line 163: [}]

line 164: []

line 165: [void mcs_putchar(float C, float col, float X, float Y){]
found func mcs_putchar



sig1 = void mcs_putchar(float C, float col, float X, float Y)
sig2 = (float C, float col, float X, float Y)
found param C
found param col
found param X
found param Y

line 166: [    float scrx = 0;]
found local var scrx (BL = 1)

line 167: [    float scry = 0;]
found local var scry (BL = 1)

line 168: [    while(X > cs_last_x){]
found reference to X
currentFunc = mcs_putchar
ref X is REF_STACK
found reference to cs_last_x
currentFunc = mcs_putchar
ref cs_last_x is REF_EXT

line 169: [        X = X - cs_width;]
found reference to cs_width
currentFunc = mcs_putchar
ref cs_width is REF_EXT

line 170: [        scrx++;]
found reference to scrx
currentFunc = mcs_putchar
ref scrx is REF_STACK

line 171: [        if(scrx >= num_screens_x){return;}]
found reference to num_screens_x
currentFunc = mcs_putchar
ref num_screens_x is REF_EXT

line 172: [    }]

line 173: [    while(Y > cs_last_y){]
found reference to Y
currentFunc = mcs_putchar
ref Y is REF_STACK
found reference to cs_last_y
currentFunc = mcs_putchar
ref cs_last_y is REF_EXT

line 174: [        Y = Y-cs_height;]
found reference to cs_height
currentFunc = mcs_putchar
ref cs_height is REF_EXT

line 175: [        scry++;]
found reference to scry
currentFunc = mcs_putchar
ref scry is REF_STACK

line 176: [        if(scry >= num_screens_y){return;}]
found reference to num_screens_y
currentFunc = mcs_putchar
ref num_screens_y is REF_EXT

line 177: [    }]

line 178: [    float scr = screens[scry*num_screens_x+scrx];]
found local var scr (BL = 1)

line 179: [    cs_putchar(scr,C,col,X,Y);]
found reference to cs_putchar
currentFunc = mcs_putchar
ref cs_putchar is REF_EXT
found reference to scr
currentFunc = mcs_putchar
ref scr is REF_STACK
found reference to C
currentFunc = mcs_putchar
ref C is REF_STACK
found reference to col
currentFunc = mcs_putchar
ref col is REF_STACK

line 180: [}]

line 181: []

line 182: [float cs_putchar(float scr, float C, float col, float X, float Y){]
found func cs_putchar



sig1 = float cs_putchar(float scr, float C, float col, float X, float Y)
sig2 = (float scr, float C, float col, float X, float Y)
found param scr
found param C
found param col
found param X
found param Y

line 183: [    float adr = 2*(cs_width*Y+X);]
found local var adr (BL = 1)
found reference to Y
currentFunc = cs_putchar
ref Y is REF_STACK
found reference to X
currentFunc = cs_putchar
ref X is REF_STACK

line 184: [    scr[adr] = C;]
found reference to scr
currentFunc = cs_putchar
ref scr is REF_STACK
found reference to adr
currentFunc = cs_putchar
ref adr is REF_STACK
found reference to C
currentFunc = cs_putchar
ref C is REF_STACK

line 185: [    adr++;]

line 186: [    scr[adr] = col;]
found reference to col
currentFunc = cs_putchar
ref col is REF_STACK

line 187: [}]

line 188: []

line 189: [void ConsoleShiftUp()]
found func ConsoleShiftUp



sig1 = void ConsoleShiftUp()
sig2 = ()

line 190: [{]

line 191: [    //you press down key, text goes up]

line 192: [    //if(printScrY >= 17){]

line 193: [    //if(printScrY >= (19*num_screens_y-2)){]

line 194: [    if(printScrY >= mcs_last_y){]

line 195: [        mcs_screen_shift_vertical(1);]
found reference to mcs_screen_shift_vertical
currentFunc = ConsoleShiftUp
ref mcs_screen_shift_vertical is REF_EXT

line 196: [        printLineOffset++;]

line 197: [        printScrY--;]

line 198: [        float I = 0;]
found local var I (BL = 2)

line 199: [        ]

line 200: [        float scrx;]
found local var scrx (BL = 2)

line 201: [        float scry;]
found local var scry (BL = 2)

line 202: [        float adry;]
found local var adry (BL = 2)

line 203: [        float adrx;]
found local var adrx (BL = 2)

line 204: [        for(scrx = 0; scrx < num_screens_x; scrx++){]
found reference to scrx
currentFunc = ConsoleShiftUp
ref scrx is REF_STACK

line 205: [            for(scry = 0; scry < num_screens_y; scry++){]
found reference to scry
currentFunc = ConsoleShiftUp
ref scry is REF_STACK

line 206: [                float scrID = scry*num_screens_x+scrx;]
found local var scrID (BL = 4)

line 207: [                AdrScreen = screens[scrID];]
found reference to scrID
currentFunc = ConsoleShiftUp
ref scrID is REF_STACK

line 208: [                ]

line 209: [                float buffLine = printLineOffset+cs_height*scry+cs_last_y;]
found local var buffLine (BL = 4)

line 210: [                if(scry == (num_screens_y-1)){]

line 211: [                    buffLine -= 1;]
found reference to buffLine
currentFunc = ConsoleShiftUp
ref buffLine is REF_STACK

line 212: [                    adry = cs_last_y-1;    ]
found reference to adry
currentFunc = ConsoleShiftUp
ref adry is REF_STACK

line 213: [                }else{]

line 214: [                    adry = cs_last_y;]

line 215: [                }]

line 216: [                //bottom screen]

line 217: [                float buffAddr = mcs_width*buffLine+cs_width*scrx;]
found local var buffAddr (BL = 4)

line 218: [                if(scrx == (num_screens_x-1)){]

line 219: [                    //buffAddr -= 1;]

line 220: [                    adrx = cs_last_x-1;]
found reference to adrx
currentFunc = ConsoleShiftUp
ref adrx is REF_STACK

line 221: [                }else{]

line 222: [                    adrx = cs_last_x;]

line 223: [                }]

line 224: [                //rightmost screen]

line 225: [                ]

line 226: [                for(I = 0; I <= adrx; I++){]
found reference to I
currentFunc = ConsoleShiftUp
ref I is REF_STACK

line 227: [                    float ch = ConsoleStrBuff[(buffAddr+I)*2];]
found local var ch (BL = 5)
found reference to buffAddr
currentFunc = ConsoleShiftUp
ref buffAddr is REF_STACK

line 228: [                    float col = ConsoleStrBuff[(buffAddr+I)*2+1];]
found local var col (BL = 5)

line 229: [                    ]

line 230: [                    cs_putchar(AdrScreen,ch,col,I,adry);]
found reference to ch
currentFunc = ConsoleShiftUp
ref ch is REF_STACK
found reference to col
currentFunc = ConsoleShiftUp
ref col is REF_STACK

line 231: [                }]

line 232: [            }]

line 233: [        }]

line 234: [        //for(I=0;I<58;I++)]

line 235: [        //{]

line 236: [        //    AdrScreen[16*60+I] = ConsoleStrBuff[60*(printPtrY+16-printScrY)+I];]

line 237: [        //}]

line 238: [        RedrawPending = 1;]
found reference to RedrawPending
currentFunc = ConsoleShiftUp
ref RedrawPending is REF_EXT

line 239: [    }]

line 240: [}]

line 241: [void ConsoleShiftDown()]
found func ConsoleShiftDown



sig1 = void ConsoleShiftDown()
sig2 = ()

line 242: [{]

line 243: [    //you press up key, text goes down]

line 244: [    //top of console limited correctly]

line 245: [    //if((printPtrY-printScrY)>0)]

line 246: [    if(printLineOffset > 0)]

line 247: [    {]

line 248: [        mcs_screen_shift_vertical(-1);]

line 249: [        printScrY++;]

line 250: [        printLineOffset--;]

line 251: [        float I = 0;]
found local var I (BL = 2)

line 252: [        //for(I=0;I<60;I++)]

line 253: [        //{]

line 254: [        //    AdrScreen[I] = ConsoleStrBuff[(printPtrY-printScrY)*60+I];]

line 255: [        //}]

line 256: [        ]

line 257: [        float scrx;]
found local var scrx (BL = 2)

line 258: [        float scry;]
found local var scry (BL = 2)

line 259: [        float adrx = cs_last_x;]
found local var adrx (BL = 2)

line 260: [        for(scrx = 0; scrx < num_screens_x; scrx++){]
found reference to scrx
currentFunc = ConsoleShiftDown
ref scrx is REF_STACK

line 261: [            for(scry = 0; scry < num_screens_y; scry++){]
found reference to scry
currentFunc = ConsoleShiftDown
ref scry is REF_STACK

line 262: [                float scrID = scry*num_screens_x+scrx;]
found local var scrID (BL = 4)

line 263: [                AdrScreen = screens[scrID];]
found reference to scrID
currentFunc = ConsoleShiftDown
ref scrID is REF_STACK

line 264: [                ]

line 265: [                //float buffAddr = mcs_width*(printLineOffset+19*scry)+30*scrx;]

line 266: [                float buffAddr = mcs_width*(printLineOffset+cs_height*scry)+cs_width*scrx;]
found local var buffAddr (BL = 4)

line 267: [                if(scrx == (num_screens_x-1)){adrx = cs_last_x-1;}]
found reference to adrx
currentFunc = ConsoleShiftDown
ref adrx is REF_STACK

line 268: [                ]

line 269: [                ]

line 270: [                for(I = 0; I <= adrx; I++){]
found reference to I
currentFunc = ConsoleShiftDown
ref I is REF_STACK

line 271: [                    float ch = ConsoleStrBuff[(buffAddr+I)*2];]
found local var ch (BL = 5)
found reference to buffAddr
currentFunc = ConsoleShiftDown
ref buffAddr is REF_STACK

line 272: [                    float col = ConsoleStrBuff[(buffAddr+I)*2+1];]
found local var col (BL = 5)

line 273: [                    cs_putchar(AdrScreen,ch,col,I,0);]
found reference to ch
currentFunc = ConsoleShiftDown
ref ch is REF_STACK
found reference to col
currentFunc = ConsoleShiftDown
ref col is REF_STACK

line 274: [                }]

line 275: [            }]

line 276: [        }]

line 277: [    }]

line 278: [    RedrawPending = 1;]

line 279: [}]

line 280: []

line 281: []

line 282: []

line 158: [#include <cyclone/libs/libnumber.txt>]
found include <cyclone/libs/libnumber.txt>
reading file cyclone/libs/libnumber.txt

line 1: [// E2-like libraries - Number]

line 2: [// By Nikita (Zondartul)]

line 3: [#ifndef LIBNUMBER_GUARD]
#ifndef "LIBNUMBER_GUARD" (undefined)

line 4: [#define LIBNUMBER_GUARD]
#defined "LIBNUMBER_GUARD"

line 5: [LIBNUMBER_CODE:]
found label LIBNUMBER_CODE

line 6: [float pow(float A, float B)     {return A^^B;}]
found func pow



sig1 = float pow(float A, float B)
sig2 = (float A, float B)
found param A
found param B
found reference to A
currentFunc = pow
ref A is REF_STACK
found reference to B
currentFunc = pow
ref B is REF_STACK

line 7: [float modulo(float A, float B)  {mod A, B; return A;}]
found func modulo



sig1 = float modulo(float A, float B)
sig2 = (float A, float B)
found param A
found param B
found reference to A
currentFunc = modulo
ref A is REF_STACK
found reference to B
currentFunc = modulo
ref B is REF_STACK

line 8: [float sqrt(float A)             {return A^^(0.5);}//inexact]
found func sqrt



sig1 = float sqrt(float A)
sig2 = (float A)
found param A
found reference to A
currentFunc = sqrt
ref A is REF_STACK

line 9: [float cbrt(float A)             {return A^^(1/3);}//inexact]
found func cbrt



sig1 = float cbrt(float A)
sig2 = (float A)
found param A
found reference to A
currentFunc = cbrt
ref A is REF_STACK

line 10: [float root(float A, float B)    {return A^^(1/B);}//inexact]
found func root



sig1 = float root(float A, float B)
sig2 = (float A, float B)
found param A
found param B
found reference to A
currentFunc = root
ref A is REF_STACK
found reference to B
currentFunc = root
ref B is REF_STACK

line 11: [float e()                       {preserve eax; FE eax; return eax ;}]
found func e



sig1 = float e()
sig2 = ()

line 12: [float exp(float A)              {preserve eax; FPI eax; fpwr eax, A; return eax;}]
found func exp



sig1 = float exp(float A)
sig2 = (float A)
found param A
found reference to A
currentFunc = exp
ref A is REF_STACK

line 13: [float ln(float A)               {preserve eax, edx; mov eax, A; FLN edx, eax; return edx;}]
found func ln



sig1 = float ln(float A)
sig2 = (float A)
found param A
found reference to A
currentFunc = ln
ref A is REF_STACK

line 14: [float log2(float A)             {preserve eax, edx, ecx; mov eax, A;FLN edx, eax; FLN ecx, 2; return edx/ecx;} ]
found func log2



sig1 = float log2(float A)
sig2 = (float A)
found param A
found reference to A
currentFunc = log2
ref A is REF_STACK

line 15: [float log10(float A)            {preserve eax, edx; FLOG10 edx, eax; return edx;}]
found func log10



sig1 = float log10(float A)
sig2 = (float A)
found param A

line 16: [float log(float A, float B)     {preserve eax, edx, ecx, ebx;mov eax, A; mov ebx, B; FLN edx, eax; FLN ecx, ebx; div edx, ecx; return edx;}]
found func log



sig1 = float log(float A, float B)
sig2 = (float A, float B)
found param A
found param B
found reference to A
currentFunc = log
ref A is REF_STACK
found reference to B
currentFunc = log
ref B is REF_STACK

line 17: [float abs(float A)              {preserve eax, edx; mov eax, A; FABS edx, eax; return edx;}]
found func abs



sig1 = float abs(float A)
sig2 = (float A)
found param A
found reference to A
currentFunc = abs
ref A is REF_STACK

line 18: [float ceil(float A)             {preserve eax; mov eax, A; FCEIL eax; return eax;}]
found func ceil



sig1 = float ceil(float A)
sig2 = (float A)
found param A
found reference to A
currentFunc = ceil
ref A is REF_STACK

line 19: [float floor(float A)            {preserve eax; mov eax, A; FINT eax; return eax;}]
found func floor



sig1 = float floor(float A)
sig2 = (float A)
found param A
found reference to A
currentFunc = floor
ref A is REF_STACK

line 20: [float round(float A)            {preserve eax; mov eax, A; FRND eax; return eax;}]
found func round



sig1 = float round(float A)
sig2 = (float A)
found param A
found reference to A
currentFunc = round
ref A is REF_STACK

line 21: [float integer(float A)          {preserve eax; mov eax, A; FINT eax; return eax;}]
found func integer



sig1 = float integer(float A)
sig2 = (float A)
found param A
found reference to A
currentFunc = integer
ref A is REF_STACK

line 22: [float frac(float A)             {preserve eax; mov eax, A; FFRAC eax; return eax;}]
found func frac



sig1 = float frac(float A)
sig2 = (float A)
found param A
found reference to A
currentFunc = frac
ref A is REF_STACK

line 23: [float clamp(float A, float MinA, float MaxA){preserve eax; mov eax, A; max eax, MinA; min eax, MaxA; return eax;}]
found func clamp



sig1 = float clamp(float A, float MinA, float MaxA)
sig2 = (float A, float MinA, float MaxA)
found param A
found param MinA
found param MaxA
found reference to A
currentFunc = clamp
ref A is REF_STACK
found reference to MinA
currentFunc = clamp
ref MinA is REF_STACK
found reference to MaxA
currentFunc = clamp
ref MaxA is REF_STACK

line 24: [float inrange(float A, float MinA, float MaxA){return ((A>MinA)&&(A<MaxA));}]
found func inrange



sig1 = float inrange(float A, float MinA, float MaxA)
sig2 = (float A, float MinA, float MaxA)
found param A
found param MinA
found param MaxA
found reference to A
currentFunc = inrange
ref A is REF_STACK
found reference to MinA
currentFunc = inrange
ref MinA is REF_STACK
found reference to MaxA
currentFunc = inrange
ref MaxA is REF_STACK

line 25: [float minimal(float A, float B) {preserve eax, ebx; mov eax, A; mov ebx, B;min eax, ebx; return eax;}]
found func minimal



sig1 = float minimal(float A, float B)
sig2 = (float A, float B)
found param A
found param B
found reference to A
currentFunc = minimal
ref A is REF_STACK
found reference to B
currentFunc = minimal
ref B is REF_STACK

line 26: [float maximal(float A, float B) {preserve eax, ebx; mov eax, A; mov ebx, B;max eax, ebx; return eax;}]
found func maximal



sig1 = float maximal(float A, float B)
sig2 = (float A, float B)
found param A
found param B
found reference to A
currentFunc = maximal
ref A is REF_STACK
found reference to B
currentFunc = maximal
ref B is REF_STACK

line 27: []

line 28: [float random()                  {preserve eax; rand eax; return eax;}]
found func random



sig1 = float random()
sig2 = ()

line 29: [float random1(float A)          {preserve eax, edx; mov eax, A;rand edx;mul edx, eax; return edx;}]
found func random1



sig1 = float random1(float A)
sig2 = (float A)
found param A
found reference to A
currentFunc = random1
ref A is REF_STACK

line 30: [float random2(float A,B)        {preserve eax, ebx, edx; mov eax, A; mov ebx, B; rand edx; sub ebx, eax; mul edx, ebx; add edx, eax; return edx;}]
found func random2



sig1 = float random2(float A,B)
sig2 = (float A,B)
found param A
found param B
found reference to A
currentFunc = random2
ref A is REF_STACK
found reference to B
currentFunc = random2
ref B is REF_STACK

line 31: [float randint1(float A)         {preserve eax, edx; mov eax, A; rand edx;mul edx, eax; fint edx; return edx;}]
found func randint1



sig1 = float randint1(float A)
sig2 = (float A)
found param A
found reference to A
currentFunc = randint1
ref A is REF_STACK

line 32: [float randint2(float A,B)       {preserve eax, ebx, edx; mov eax, A; mov ebx, B;rand edx; sub ebx, eax; mul edx, ebx; add edx, eax; fint edx; return edx;}]
found func randint2



sig1 = float randint2(float A,B)
sig2 = (float A,B)
found param A
found param B
found reference to A
currentFunc = randint2
ref A is REF_STACK
found reference to B
currentFunc = randint2
ref B is REF_STACK

line 33: []

line 34: [float pi()                      {preserve eax; FPI eax; return eax ;}]
found func pi



sig1 = float pi()
sig2 = ()

line 35: [float toRad(float N)            {preserve eax, ebx; mov eax, N; FPI ebx; mul eax, ebx; div eax, 180; return eax;}]
found func toRad



sig1 = float toRad(float N)
sig2 = (float N)
found param N
found reference to N
currentFunc = toRad
ref N is REF_STACK

line 36: [float toDeg(float N)            {preserve eax, ebx; mov eax, N; FPI ebx; mul eax, 180; div eax, ebx; return eax;}]
found func toDeg



sig1 = float toDeg(float N)
sig2 = (float N)
found param N
found reference to N
currentFunc = toDeg
ref N is REF_STACK

line 37: [float sin(float N)              {preserve eax; FSIN eax, toRad(N);  return eax;}]
found func sin



sig1 = float sin(float N)
sig2 = (float N)
found param N
found reference to toRad
currentFunc = sin
ref toRad is REF_EXT
found reference to N
currentFunc = sin
ref N is REF_STACK

line 38: [float cos(float N)              {preserve eax; FCOS eax, toRad(N); return eax;}]
found func cos



sig1 = float cos(float N)
sig2 = (float N)
found param N
found reference to N
currentFunc = cos
ref N is REF_STACK

line 39: [float tan(float N)              {preserve eax; FTAN eax, toRad(N); return eax;}]
found func tan



sig1 = float tan(float N)
sig2 = (float N)
found param N
found reference to N
currentFunc = tan
ref N is REF_STACK

line 40: [float cot(float N)              {preserve eax; FTAN eax, toRad(N); FINV eax; return eax;}]
found func cot



sig1 = float cot(float N)
sig2 = (float N)
found param N
found reference to N
currentFunc = cot
ref N is REF_STACK

line 41: [float sec(float N)              {preserve eax; FCOS eax, toRad(N); FINV eax; return eax;}]
found func sec



sig1 = float sec(float N)
sig2 = (float N)
found param N
found reference to N
currentFunc = sec
ref N is REF_STACK

line 42: [float csc(float N)              {preserve eax; FSIN eax, toRad(N); FINV eax; return eax;} ]
found func csc



sig1 = float csc(float N)
sig2 = (float N)
found param N
found reference to N
currentFunc = csc
ref N is REF_STACK

line 43: [float asin(float N)             {preserve eax; FASIN eax, N; mov eax, toDeg(eax); return eax;}]
found func asin



sig1 = float asin(float N)
sig2 = (float N)
found param N
found reference to N
currentFunc = asin
ref N is REF_STACK
found reference to toDeg
currentFunc = asin
ref toDeg is REF_EXT

line 44: [float acos(float N)             {preserve eax; FACOS eax, N; mov eax, toDeg(eax); return eax;} ]
found func acos



sig1 = float acos(float N)
sig2 = (float N)
found param N
found reference to N
currentFunc = acos
ref N is REF_STACK

line 45: [float atan(float N)             {preserve eax; FATAN eax, N; mov eax, toDeg(eax); return eax;} ]
found func atan



sig1 = float atan(float N)
sig2 = (float N)
found param N
found reference to N
currentFunc = atan
ref N is REF_STACK

line 46: [float sinh(float N)             {preserve eax; FE eax; return 0.5*( eax ^^N-eax^^(-N));} ]
found func sinh



sig1 = float sinh(float N)
sig2 = (float N)
found param N
found reference to N
currentFunc = sinh
ref N is REF_STACK

line 47: [float cosh(float N)             {preserve eax; FE eax; return 0.5*( eax ^^N+eax^^(-N));} ]
found func cosh



sig1 = float cosh(float N)
sig2 = (float N)
found param N
found reference to N
currentFunc = cosh
ref N is REF_STACK

line 48: [float tanh(float N)             {preserve eax; FE eax; return ( eax ^^(2*N)-1)/( eax ^^(2*N )+1);} ]
found func tanh



sig1 = float tanh(float N)
sig2 = (float N)
found param N
found reference to N
currentFunc = tanh
ref N is REF_STACK

line 49: [float coth(float N)             {preserve eax; FE eax; return ( eax ^^(2*N)+1)/( eax ^^(2*N )-1);}]
found func coth



sig1 = float coth(float N)
sig2 = (float N)
found param N
found reference to N
currentFunc = coth
ref N is REF_STACK

line 50: [float sech(float N)             {preserve eax; FE eax; return 2/( eax ^^N+ eax ^^(-N));} ]
found func sech



sig1 = float sech(float N)
sig2 = (float N)
found param N
found reference to N
currentFunc = sech
ref N is REF_STACK

line 51: [float csch(float N)             {preserve eax; FE eax; return 2/( eax ^^N- eax ^^(-N));} ]
found func csch



sig1 = float csch(float N)
sig2 = (float N)
found param N
found reference to N
currentFunc = csch
ref N is REF_STACK

line 52: [float sinr(float N)             {preserve eax; FSIN eax, N; return eax;} ]
found func sinr



sig1 = float sinr(float N)
sig2 = (float N)
found param N
found reference to N
currentFunc = sinr
ref N is REF_STACK

line 53: [float cosr(float N)             {preserve eax; FCOS eax, N; return eax;} ]
found func cosr



sig1 = float cosr(float N)
sig2 = (float N)
found param N
found reference to N
currentFunc = cosr
ref N is REF_STACK

line 54: [float tanr(float N)             {preserve eax; FTAN eax, N; return eax;} ]
found func tanr



sig1 = float tanr(float N)
sig2 = (float N)
found param N
found reference to N
currentFunc = tanr
ref N is REF_STACK

line 55: [float cotr(float N)             {preserve eax; FTAN eax, N;FINV eax; return eax;} ]
found func cotr



sig1 = float cotr(float N)
sig2 = (float N)
found param N
found reference to N
currentFunc = cotr
ref N is REF_STACK

line 56: [float secr(float N)             {preserve eax; FCOS eax, N;FINV eax; return eax;} ]
found func secr



sig1 = float secr(float N)
sig2 = (float N)
found param N
found reference to N
currentFunc = secr
ref N is REF_STACK

line 57: [float cscr(float N)             {preserve eax; FSIN eax, N;FINV eax; return eax;} ]
found func cscr



sig1 = float cscr(float N)
sig2 = (float N)
found param N
found reference to N
currentFunc = cscr
ref N is REF_STACK

line 58: [float asinr(float N)            {preserve eax; FASIN eax, N; return eax;} ]
found func asinr



sig1 = float asinr(float N)
sig2 = (float N)
found param N
found reference to N
currentFunc = asinr
ref N is REF_STACK

line 59: [float acosr(float N)            {preserve eax; FACOS eax, N; return eax;} ]
found func acosr



sig1 = float acosr(float N)
sig2 = (float N)
found param N
found reference to N
currentFunc = acosr
ref N is REF_STACK

line 60: [float atanr(float N)            {preserve eax; FATAN eax, N; return eax;}]
found func atanr



sig1 = float atanr(float N)
sig2 = (float N)
found param N
found reference to N
currentFunc = atanr
ref N is REF_STACK

line 61: []

line 62: [float ceil2(float A, float B)   ]
found func ceil2



sig1 = float ceil2(float A, float B)
sig2 = (float A, float B)
found param A
found param B

line 63: [{]

line 64: [    preserve edx,ebx,eax;]

line 65: [    mov eax, A;]
found reference to A
currentFunc = ceil2
ref A is REF_STACK

line 66: [    mov ebx, B;]
found reference to B
currentFunc = ceil2
ref B is REF_STACK

line 67: [    mov edx, 10;]

line 68: [    fpwr ebx, edx;]

line 69: [    div eax, B;]

line 70: [    mov edx, eax;]

line 71: [    //edx = A/(10^^(B)); ]

line 72: [    FCEIL edx;]

line 73: [    mul edx, ebx;]

line 74: [    //`mov edx,edx*(10^^(B)); ]

line 75: [    return edx; ]

line 76: [    zap edx;]

line 77: [}]

line 78: []

line 79: [float floor2(float A, float B)]
found func floor2



sig1 = float floor2(float A, float B)
sig2 = (float A, float B)
found param A
found param B

line 80: [{]

line 81: [    preserve edx,ebx,eax;]

line 82: [    mov eax, A;]
found reference to A
currentFunc = floor2
ref A is REF_STACK

line 83: [    mov ebx, B;]
found reference to B
currentFunc = floor2
ref B is REF_STACK

line 84: [    mov edx, 10;]

line 85: [    fpwr ebx, edx;]

line 86: [    div eax, B;]

line 87: [    mov edx, eax;]

line 88: [    //edx = A/(10^^(B)); ]

line 89: [    FINT edx;]

line 90: [    mul edx, ebx;]

line 91: [    //`mov edx,edx*(10^^(B)); ]

line 92: [    return edx; ]

line 93: [    zap edx;]

line 94: [}]

line 95: [ ]

line 96: [float round2(float A, float B)  ]
found func round2



sig1 = float round2(float A, float B)
sig2 = (float A, float B)
found param A
found param B

line 97: [{]

line 98: [    preserve edx,ebx,eax;]

line 99: [    mov eax, A;]
found reference to A
currentFunc = round2
ref A is REF_STACK

line 100: [    mov ebx, B;]
found reference to B
currentFunc = round2
ref B is REF_STACK

line 101: [    mov edx, 10;]

line 102: [    fpwr ebx, edx;]

line 103: [    div eax, B;]

line 104: [    mov edx, eax;]

line 105: [    //edx = A/(10^^(B)); ]

line 106: [    FRND edx;]

line 107: [    mul edx, ebx;]

line 108: [    //`mov edx,edx*(10^^(B)); ]

line 109: [    return edx; ]

line 110: [    zap edx;]

line 111: [}]

line 112: [LIBNUMBER_CONSTANTS:]
found label LIBNUMBER_CONSTANTS

line 113: [LIBNUMBER_VARS:]
found label LIBNUMBER_VARS

line 114: [LIBNUMBER_END:]
found label LIBNUMBER_END

line 115: [#endif]

line 116: []

line 159: [#include <cyclone/libs/printf.txt>]
found include <cyclone/libs/printf.txt>
reading file cyclone/libs/printf.txt

line 1: [//printf]

line 2: [#ifndef PRINTF_GUARD]
#ifndef "PRINTF_GUARD" (undefined)

line 3: [#define PRINTF_GUARD]
#defined "PRINTF_GUARD"

line 4: [#include <cyclone/libs/variadic.txt>]
found include <cyclone/libs/variadic.txt>
reading file cyclone/libs/variadic.txt

line 1: [//variadic functions library by immibis]

line 2: [//]

line 3: [//Usage:]

line 4: [//----------------------------------------------------------------------------]

line 5: [//|void printf(char *fmt, ...)                                               |]

line 6: [//|{                                                                         |]

line 7: [//|    float va = va_start(&fmt);                                            |]

line 8: [//|    // do stuff - the point of this isn't to show how to write printf :P  |]

line 9: [//|    float arg = va_next(&va);                                             |]

line 10: [//|    // do more stuff                                                      |]

line 11: [//|}                                                                         |]

line 12: [//|                                                                          |]

line 13: [//|void main()                                                               |]

line 14: [//|{                                                                         |]

line 15: [//|    printf("One plus one is %d\n", 1+1);                                  |]
removed string literal ""One plus one is %d\n""

line 16: [//|}                                                                         |]

line 17: [//----------------------------------------------------------------------------]

line 18: [//]

line 19: [//Functions:]

line 20: [//float va_start(float *last_arg)]

line 21: [// - Returns a pointer you can use in va_next]

line 22: [// - last_arg should be a pointer to the last named argument]

line 23: [//float va_start_0()]

line 24: [// - Like va_start for functions with no named arguments]

line 25: [//float va_next(float *va)]

line 26: [// - Returns the next argument. Note that "va" is a pointer to the pointer returned by va_start. If you have "float va = va_start(&x);" you need to use "va_next(&va)"]
removed string literal ""va""
removed string literal ""float va = va_start(&x);""
removed string literal ""va_next(&va)""

line 27: [//float va_get(float *last_arg, float n)]

line 28: [// - Gets the N'th argument after the last named argument, starting from 0. Equivalent to calling va_start, then va_next N times, then va_next once more.]

line 29: [//float va_get_0(float n)]

line 30: [// - Like va_get for functions with no named arguments.]

line 31: [#ifndef VARIADIC_GUARD]
#ifndef "VARIADIC_GUARD" (defined)

line 32: [#define VARIADIC_GUARD]

line 33: [va_start: // float va_start(float *last_arg)]

line 34: [rstack eax, esp:2]

line 35: [sub eax, ds]

line 36: [add eax, ss]

line 37: [ret]

line 38: []

line 39: [va_start_0: // float va_start_0()]

line 40: [mov eax, ebp:1]

line 41: [ret]

line 42: []

line 43: [va_next: // float va_next(float *va)]

line 44: [rstack ebx, esp:2]

line 45: [inc #ebx]

line 46: [rstack eax, #ebx]

line 47: [ret]

line 48: []

line 49: [va_get: // float va_get(float *last_arg, float n)]

line 50: [rstack eax, esp:2]

line 51: [rstack ebx, esp:3]

line 52: [add eax, ebx]

line 53: [inc eax]

line 54: [mov eax, #eax]

line 55: [ret]

line 56: []

line 57: [va_get_0: // float va_get_0(float n)]

line 58: [rstack eax, esp:2]

line 59: [add eax, ebp:2]

line 60: [rstack eax, eax]

line 61: [ret]

line 62: [#endif]

line 63: []

line 5: [float printf(char* format)//... VARIADIC]
found func printf



sig1 = float printf(char* format)
sig2 = (char* format)
found param format

line 6: [{]

line 7: [    //preserve ecx, ebp;float va_v_count = ecx;float va_v_start = ebp; float va_v_list = ebp; float va_v_cur = 0;zap ecx, ebp;]

line 8: [    float va = va_start(&format);]
found local var va (BL = 1)
found reference to va_start
currentFunc = printf
ref va_start is REF_EXT
found reference to format
currentFunc = printf
ref format is REF_STACK

line 9: [    //va_start1(va_v_start, &va_v_list, &va_v_cur, 2);]

line 10: [    float I = 0;]
found local var I (BL = 1)

line 11: [    float C = 0;]
found local var C (BL = 1)

line 12: [    float S = 0;]
found local var S (BL = 1)

line 13: [    float A = 0;]
found local var A (BL = 1)

line 14: [    float A2 = 0;]
found local var A2 (BL = 1)

line 15: [    float c3 = 0;]
found local var c3 (BL = 1)

line 16: [    float c2 = 0;]
found local var c2 (BL = 1)

line 17: [    float pcolor = 999;]
found local var pcolor (BL = 1)

line 18: [    float pcolor2 = 999;]
found local var pcolor2 (BL = 1)

line 19: [    float pdarken = 222;]
found local var pdarken (BL = 1)

line 20: [    float escmode = 0;]
found local var escmode (BL = 1)

line 21: [    //float P = 0;]

line 22: [    C = format[I];]
found reference to C
currentFunc = printf
ref C is REF_STACK
found reference to I
currentFunc = printf
ref I is REF_STACK

line 23: [    while(C!=0)]

line 24: [    {]

line 25: [        if(C=='%')]
removed character literal "'%'"

line 26: [        {]

line 27: [            S = format[I+1];]
found reference to S
currentFunc = printf
ref S is REF_STACK

line 28: [            if(S == 'd')]
removed character literal "'d'"

line 29: [            {]

line 30: [                A = va_next(&va);]
found reference to A
currentFunc = printf
ref A is REF_STACK
found reference to va
currentFunc = printf
ref va is REF_STACK

line 31: [                float St = num2str(A);]
found local var St (BL = 4)

line 32: [                Print(St,pcolor);]
found reference to St
currentFunc = printf
ref St is REF_STACK
found reference to pcolor
currentFunc = printf
ref pcolor is REF_STACK

line 33: [                I = I+2;]

line 34: [            }]

line 35: [            if(S == 'c')]
removed character literal "'c'"

line 36: [            {]

line 37: [                A = va_next(&va);]

line 38: [                A2 = A;]
found reference to A2
currentFunc = printf
ref A2 is REF_STACK

line 39: [                pcolor2 = pcolor;]
found reference to pcolor2
currentFunc = printf
ref pcolor2 is REF_STACK

line 40: [                if(escmode == 2){]
found reference to escmode
currentFunc = printf
ref escmode is REF_STACK

line 41: [                    if(isPrint(A) == 0){A2 = '.'; pcolor2 = pcolor-pdarken;}]
removed character literal "'.'"
found reference to isPrint
currentFunc = printf
ref isPrint is REF_EXT
found reference to pdarken
currentFunc = printf
ref pdarken is REF_STACK

line 42: [                }]

line 43: [                if(escmode == 1){]

line 44: [                    if(isPrint(A) == 0){pcolor2 = pcolor - pdarken;}]

line 45: [                    if(A == '\a'){A2 = 'a'; pcolor2 = pcolor - pdarken;}]
removed character literal "'\a'"
removed character literal "'a'"

line 46: [                    if(A == '\b'){A2 = 'b'; pcolor2 = pcolor - pdarken;}]
removed character literal "'\b'"
removed character literal "'b'"

line 47: [                    if(A == '\n'){A2 = 'n'; pcolor2 = pcolor - pdarken;}]
removed character literal "'\n'"
removed character literal "'n'"

line 48: [                    if(A == '\r'){A2 = 'r'; pcolor2 = pcolor - pdarken;}]
removed character literal "'\r'"
removed character literal "'r'"

line 49: [                    if(A == '\t'){A2 = 't'; pcolor2 = pcolor - pdarken;}]
removed character literal "'\t'"
removed character literal "'t'"

line 50: [                    if(A == '\0'){A2 = '0'; pcolor2 = pcolor - pdarken;}]
removed character literal "'\0'"
removed character literal "'0'"

line 51: [                }]

line 52: [                c2 = A2;]
found reference to c2
currentFunc = printf
ref c2 is REF_STACK

line 53: [                Print(&c2,pcolor2);//Pc(A);]

line 54: [                I = I+2;]

line 55: [            }]

line 56: [            if(S == 's')]
removed character literal "'s'"

line 57: [            {]

line 58: [                A = va_next(&va);]

line 59: [                if(!A){A = "<null>";}]
removed string literal ""<null>""

line 60: [                Print(A,pcolor);]

line 61: [                I = I+2;]

line 62: [            }]

line 63: [            if(S == 'm')]
removed character literal "'m'"

line 64: [            {]

line 65: [                A = va_next(&va);]

line 66: [                pcolor = A;]

line 67: [                I = I+2;]

line 68: [            }]

line 69: [            if(S == 'e')]
removed character literal "'e'"

line 70: [            {]

line 71: [                A = va_next(&va);]

line 72: [                escmode = A;]

line 73: [                I = I+2;]

line 74: [            }]

line 75: [        }]

line 76: [        else]

line 77: [        {]

line 78: [            if(C=='\\')]
removed character literal "'\\'"

line 79: [            {]

line 80: [               S = format[I+1];]

line 81: [               if(S == 'a'){Pc('\a');}//fputchar(stream, 7);}]
removed character literal "'a'"
removed character literal "'\a'"
found reference to Pc
currentFunc = printf
ref Pc is REF_EXT

line 82: [               if(S == 'b'){Pc('\b');}//fputchar(stream,8);}]
removed character literal "'b'"
removed character literal "'\b'"

line 83: [               if(S == 'n'){Pc('\n');}//fputchar(stream,10);}]
removed character literal "'n'"
removed character literal "'\n'"

line 84: [               if(S == 'r'){Pc('\r');}//fputchar(stream,13);}]
removed character literal "'r'"
removed character literal "'\r'"

line 85: [               if(S == 't'){Pc('\t');}//fputchar(stream,9);}]
removed character literal "'t'"
removed character literal "'\t'"

line 86: [               if(S == '\\'){Pc('\\');}//fputchar(stream,92);}]
removed character literal "'\\'"
removed character literal "'\\'"

line 87: [               if(S == '\''){Pc('\'');}//fputchar(stream,39);}]
removed character literal "''"
removed character literal "''"

line 88: [               if(S == '\"'){Pc('\"');}//fputchar(stream,34);}]
removed character literal "'\"'"
removed character literal "'\"'"

line 89: [               if(S == '0'){Pc('\0');}//fputchar(stream,0);}]
removed character literal "'0'"
removed character literal "'\0'"

line 90: [            }]

line 91: [            else]

line 92: [            {]

line 93: [                pcolor2 = pcolor;]

line 94: [                if(escmode == 2){]

line 95: [                    if(isPrint(C) == 0){C = '.'; pcolor2 = pcolor-pdarken;}]
removed character literal "'.'"

line 96: [                }]

line 97: [                if(escmode == 1){]

line 98: [                    if(C == '\a'){C = 'a'; pcolor2 = pcolor - pdarken;}]
removed character literal "'\a'"
removed character literal "'a'"

line 99: [                    if(C == '\b'){C = 'b'; pcolor2 = pcolor - pdarken;}]
removed character literal "'\b'"
removed character literal "'b'"

line 100: [                    if(C == '\n'){C = 'n'; pcolor2 = pcolor - pdarken;}]
removed character literal "'\n'"
removed character literal "'n'"

line 101: [                    if(C == '\r'){C = 'r'; pcolor2 = pcolor - pdarken;}]
removed character literal "'\r'"
removed character literal "'r'"

line 102: [                    if(C == '\t'){C = 't'; pcolor2 = pcolor - pdarken;}]
removed character literal "'\t'"
removed character literal "'t'"

line 103: [                    if(C == '\0'){C = '0'; pcolor2 = pcolor - pdarken;}]
removed character literal "'\0'"
removed character literal "'0'"

line 104: [                    if(isPrint(C) == 0){pcolor2 = pcolor - pdarken;}]

line 105: [                }]

line 106: [                c2 = C;]

line 107: [                Print(&c2,pcolor2);]

line 108: [                ]

line 109: [                //Pc(C);//fputchar(stream,C);]

line 110: [                I = I+1;]

line 111: [            }   ]

line 112: [        }]

line 113: [        C = format[I];]

line 114: [    }]

line 115: [    return 1;]

line 116: [}]

line 117: [#endif]

line 118: []

line 160: [#include <cyclone/libs/timestamp.txt>]
found include <cyclone/libs/timestamp.txt>
reading file cyclone/libs/timestamp.txt

line 1: [//timestamps and time accessories]

line 2: [#ifndef TIMESTAMP_GUARD]
#ifndef "TIMESTAMP_GUARD" (undefined)

line 3: [#define TIMESTAMP_GUARD]
#defined "TIMESTAMP_GUARD"

line 4: []

line 5: [//#define COMPILE_TIMESTAMP __DATE_SECOND__+60*(__DATE_MINUTE__+60*(__DATE_HOUR__+24*(__DATE_DAY__+31*(__DATE_MONTH__+12*__DATE_YEAR__))))]

line 6: []

line 7: [float compileTimeStamp(){]
found func compileTimeStamp



sig1 = float compileTimeStamp()
sig2 = ()

line 8: [    //float day = __DATE_DAY__;]

line 9: [    //float month = __DATE_MONTH__;]

line 10: [    //float year = __DATE_YEAR__;]

line 11: [    //float hour = __DATE_HOUR__;]

line 12: [    //float minute = __DATE_MINUTE__;]

line 13: [    //float second = __DATE_SECOND__;]

line 14: [    //return second+60*(minute+60*(hour+24*(day+31*(month+12*year))));]

line 15: [    return __DATE_SECOND__+60*(__DATE_MINUTE__+60*(__DATE_HOUR__+24*(__DATE_DAY__+31*(__DATE_MONTH__+12*__DATE_YEAR__))));//COMPILE_TIMESTAMP;]

line 16: [}]

line 17: []

line 18: [//should really return current time instead]

line 19: [float currentTimeStamp(){]
found func currentTimeStamp



sig1 = float currentTimeStamp()
sig2 = ()

line 20: [    return compileTimeStamp();]

line 21: [}]

line 22: []

line 23: [void decodeTimeStamp(float time, float *day, float *month, float *year, float *hour, float *minute, float *second){]
found func decodeTimeStamp



sig1 = void decodeTimeStamp(float time, float *day, float *month, float *year, float *hour, float *minute, float *second)
sig2 = (float time, float *day, float *month, float *year, float *hour, float *minute, float *second)
found param time
found param day
found param month
found param year
found param hour
found param minute
found param second

line 24: [    *second = time%60; time -= *second; time /= 60;]
found reference to second
currentFunc = decodeTimeStamp
ref second is REF_STACK
found reference to time
currentFunc = decodeTimeStamp
ref time is REF_STACK

line 25: [    *minute = time%60; time -= *minute; time /= 60;]
found reference to minute
currentFunc = decodeTimeStamp
ref minute is REF_STACK

line 26: [    *hour = time%24; time -= *hour; time /= 24;]
found reference to hour
currentFunc = decodeTimeStamp
ref hour is REF_STACK

line 27: [    *day = time%31; time -= *day; time /= 31;]
found reference to day
currentFunc = decodeTimeStamp
ref day is REF_STACK

line 28: [    *month = time%12; time-= *month; time /= 12;]
found reference to month
currentFunc = decodeTimeStamp
ref month is REF_STACK

line 29: [    *year = time;]
found reference to year
currentFunc = decodeTimeStamp
ref year is REF_STACK

line 30: [}]

line 31: []

line 32: [month_strings:]
found label month_strings

line 33: [db str_nan, //0]
found reference to str_nan
no currentFunc
ref str_nan is REF_EXT

line 34: [db str_jan, //1]
found reference to str_jan
no currentFunc
ref str_jan is REF_EXT

line 35: [db str_feb, //2]
found reference to str_feb
no currentFunc
ref str_feb is REF_EXT

line 36: [db str_mar, //3]
found reference to str_mar
no currentFunc
ref str_mar is REF_EXT

line 37: [db str_apr, //4]
found reference to str_apr
no currentFunc
ref str_apr is REF_EXT

line 38: [db str_may, //5]
found reference to str_may
no currentFunc
ref str_may is REF_EXT

line 39: [db str_jun, //6]
found reference to str_jun
no currentFunc
ref str_jun is REF_EXT

line 40: [db str_jul, //7]
found reference to str_jul
no currentFunc
ref str_jul is REF_EXT

line 41: [db str_aug, //8]
found reference to str_aug
no currentFunc
ref str_aug is REF_EXT

line 42: [db str_sep, //9]
found reference to str_sep
no currentFunc
ref str_sep is REF_EXT

line 43: [db str_oct, //10]
found reference to str_oct
no currentFunc
ref str_oct is REF_EXT

line 44: [db str_nov, //11]
found reference to str_nov
no currentFunc
ref str_nov is REF_EXT

line 45: [db str_dec2,  //12]
found reference to str_dec2
no currentFunc
ref str_dec2 is REF_EXT

line 46: [db 0;]

line 47: []

line 48: [str_nan: db "NaN", db 0;]
removed string literal ""NaN""
found label str_nan

line 49: [str_jan: db "Jan", db 0;]
removed string literal ""Jan""
found label str_jan

line 50: [str_feb: db "Feb", db 0;]
removed string literal ""Feb""
found label str_feb

line 51: [str_mar: db "Mar", db 0;]
removed string literal ""Mar""
found label str_mar

line 52: [str_apr: db "Apr", db 0;]
removed string literal ""Apr""
found label str_apr

line 53: [str_may: db "May", db 0;]
removed string literal ""May""
found label str_may

line 54: [str_jun: db "Jun", db 0;]
removed string literal ""Jun""
found label str_jun

line 55: [str_jul: db "Jul", db 0;]
removed string literal ""Jul""
found label str_jul

line 56: [str_aug: db "Aug", db 0;]
removed string literal ""Aug""
found label str_aug

line 57: [str_sep: db "Sep", db 0;]
removed string literal ""Sep""
found label str_sep

line 58: [str_oct: db "Oct", db 0;]
removed string literal ""Oct""
found label str_oct

line 59: [str_nov: db "Nov", db 0;]
removed string literal ""Nov""
found label str_nov

line 60: [str_dec2: db "Dec", db 0;]
removed string literal ""Dec""
found label str_dec2

line 61: []

line 62: [float monthToString(float month){]
found func monthToString



sig1 = float monthToString(float month)
sig2 = (float month)
found param month

line 63: [    if(month < 0){month = 0;}]
found reference to month
currentFunc = monthToString
ref month is REF_STACK

line 64: [    if(month > 12){month = 0;}]

line 65: [    return month_strings[month];]
found reference to month_strings
currentFunc = monthToString
ref month_strings is REF_EXT

line 66: [}]

line 67: []

line 68: [timeStampStr:]
found label timeStampStr

line 69: [alloc 22;]

line 70: []

line 71: [float timeStampToString(float time){]
found func timeStampToString



sig1 = float timeStampToString(float time)
sig2 = (float time)
found param time

line 72: [    float day,month,year,hour,minute,second;]
found local var day (BL = 1)
found local var month (BL = 1)
found local var year (BL = 1)
found local var hour (BL = 1)
found local var minute (BL = 1)
found local var second (BL = 1)

line 73: [    decodeTimeStamp(time,&day,&month,&year,&hour,&minute,&second);]
found reference to decodeTimeStamp
currentFunc = timeStampToString
ref decodeTimeStamp is REF_EXT
found reference to time
currentFunc = timeStampToString
ref time is REF_STACK
found reference to day
currentFunc = timeStampToString
ref day is REF_STACK
found reference to month
currentFunc = timeStampToString
ref month is REF_STACK
found reference to year
currentFunc = timeStampToString
ref year is REF_STACK
found reference to hour
currentFunc = timeStampToString
ref hour is REF_STACK
found reference to minute
currentFunc = timeStampToString
ref minute is REF_STACK
found reference to second
currentFunc = timeStampToString
ref second is REF_STACK

line 74: [    day = clamp(day,0,99);]
found reference to clamp
currentFunc = timeStampToString
ref clamp is REF_EXT

line 75: [    month = clamp(month,0,99);]

line 76: [    year = clamp(year,0,9999);]

line 77: [    hour = clamp(hour,0,99);]

line 78: [    minute = clamp(minute,0,99);]

line 79: [    second = clamp(second,0,99);]

line 80: [    ]

line 81: [    float str = timeStampStr;//malloc(22);]
found local var str (BL = 1)
found reference to timeStampStr
currentFunc = timeStampToString
ref timeStampStr is REF_EXT

line 82: [    float ptr = str;]
found local var ptr (BL = 1)
found reference to str
currentFunc = timeStampToString
ref str is REF_STACK

line 83: [    float str2;]
found local var str2 (BL = 1)

line 84: [    ]

line 85: [    str2 = num2str(day);]
found reference to str2
currentFunc = timeStampToString
ref str2 is REF_STACK

line 86: [    strcpy(ptr,str2); ptr += 2; *ptr++ = ' ';]
removed character literal "' '"
found reference to strcpy
currentFunc = timeStampToString
ref strcpy is REF_EXT
found reference to ptr
currentFunc = timeStampToString
ref ptr is REF_STACK

line 87: [    ]

line 88: [    str2 = monthToString(month);]
found reference to monthToString
currentFunc = timeStampToString
ref monthToString is REF_EXT

line 89: [    strcpy(ptr,str2); ptr += 3; *ptr++ = ' '; //this is kind of macabre]
removed character literal "' '"

line 90: [    ]

line 91: [    str2 = num2str(year);]

line 92: [    strcpy(ptr,str2); ptr += 4; *ptr++ = ' ';]
removed character literal "' '"

line 93: [    ]

line 94: [    str2 = num2str(hour);]

line 95: [    strcpy(ptr,str2); ptr += 2; *ptr++ = ':';]
removed character literal "':'"

line 96: [    ]

line 97: [    str2 = num2str(minute);]

line 98: [    strcpy(ptr,str2); ptr += 2; *ptr++ = ':';]
removed character literal "':'"

line 99: [    ]

line 100: [    str2 = num2str(second);]

line 101: [    strcpy(ptr,str2); ptr += 2; *ptr++ = 0;]

line 102: [    ]

line 103: [    return str;]

line 104: [}]

line 105: []

line 106: [#endif]

line 107: []

line 161: [#include <cyclone/libs/libconsolescreen.txt>]
found include <cyclone/libs/libconsolescreen.txt>
reading file cyclone/libs/libconsolescreen.txt

line 1: [//#define ptrScreen 65536 or similar in master program]

line 2: [#ifndef LIBCONSOLESCREEN_GUARD]
#ifndef "LIBCONSOLESCREEN_GUARD" (undefined)

line 3: [#define LIBCONSOLESCREEN_GUARD]
#defined "LIBCONSOLESCREEN_GUARD"

line 4: [LIBCONSOLESCREEN_CODE:]
found label LIBCONSOLESCREEN_CODE

line 5: [void PrintStringXY(float x, float y, char str, float col)]
found func PrintStringXY



sig1 = void PrintStringXY(float x, float y, char str, float col)
sig2 = (float x, float y, char str, float col)
found param x
found param y
found param str
found param col

line 6: [{]

line 7: [    /*]

line 8: [    float P = (y*30+x)*2;]

line 9: [    float I = 0;]

line 10: [    float C = str[I++];]

line 11: [    while(C)]

line 12: [    {]

line 13: [        AdrScreen[P++] = C;]

line 14: [        AdrScreen[P++] = col;]

line 15: [        C = str[I++];]

line 16: [    }]

line 17: [    */]

line 18: [    while(*str){]
found reference to str
currentFunc = PrintStringXY
ref str is REF_STACK

line 19: [        mcs_putchar(*str++,col,x++,y);]
found reference to col
currentFunc = PrintStringXY
ref col is REF_STACK
found reference to x
currentFunc = PrintStringXY
ref x is REF_STACK
found reference to y
currentFunc = PrintStringXY
ref y is REF_STACK

line 20: [    }]

line 21: [}]

line 22: [// prints single character to screen coords.]

line 23: [void printCharXY(float X, float Y, char C, float col){]
found func printCharXY



sig1 = void printCharXY(float X, float Y, char C, float col)
sig2 = (float X, float Y, char C, float col)
found param X
found param Y
found param C
found param col

line 24: [    //float P = AdrScreen+2*(X+Y*30);]

line 25: [   // *P++ = C;]

line 26: [    //*P = col;]

line 27: [    mcs_putchar(C,col,X,Y);]
found reference to C
currentFunc = printCharXY
ref C is REF_STACK
found reference to col
currentFunc = printCharXY
ref col is REF_STACK
found reference to X
currentFunc = printCharXY
ref X is REF_STACK
found reference to Y
currentFunc = printCharXY
ref Y is REF_STACK

line 28: [}]

line 29: []

line 30: [void delaysimple(float time)]
found func delaysimple



sig1 = void delaysimple(float time)
sig2 = (float time)
found param time

line 31: [{]

line 32: [    preserve edx;]

line 33: [    timer edx;]

line 34: [    float T = edx;]
found local var T (BL = 1)

line 35: [    while((edx-T)<time)]
found reference to T
currentFunc = delaysimple
ref T is REF_STACK
found reference to time
currentFunc = delaysimple
ref time is REF_STACK

line 36: [    {]

line 37: [        NOP;]

line 38: [        timer edx;]

line 39: [    }]

line 40: [    zap edx;]

line 41: [}]

line 42: []

line 43: [void screen_set(float scr){AdrScreen = scr;}]
found func screen_set



sig1 = void screen_set(float scr)
sig2 = (float scr)
found param scr
found reference to scr
currentFunc = screen_set
ref scr is REF_STACK

line 44: [void screen_clear(){AdrScreen[2041] = 1;}]
found func screen_clear



sig1 = void screen_clear()
sig2 = ()

line 45: [void screen_cursor_enable(){AdrScreen[2046] = 1;}]
found func screen_cursor_enable



sig1 = void screen_cursor_enable()
sig2 = ()

line 46: [void screen_cursor_disable(){AdrScreen[2046] = 0;}]
found func screen_cursor_disable



sig1 = void screen_cursor_disable()
sig2 = ()

line 47: [void screen_set_cursor_pos(float I){AdrScreen[2045] = 2*I;}]
found func screen_set_cursor_pos



sig1 = void screen_set_cursor_pos(float I)
sig2 = (float I)
found param I
found reference to I
currentFunc = screen_set_cursor_pos
ref I is REF_STACK

line 48: [void screen_set_cursor_pos_xy(float x, float y){AdrScreen[2045] = 2*(30*y+x);}]
found func screen_set_cursor_pos_xy



sig1 = void screen_set_cursor_pos_xy(float x, float y)
sig2 = (float x, float y)
found param x
found param y
found reference to y
currentFunc = screen_set_cursor_pos_xy
ref y is REF_STACK
found reference to x
currentFunc = screen_set_cursor_pos_xy
ref x is REF_STACK

line 49: [void screen_force_refresh(){AdrScreen[2020]=1; delaysimple(/*1*/0.16);} //AdrScreen[2020]=1;]
found func screen_force_refresh



sig1 = void screen_force_refresh()
sig2 = ()
found reference to delaysimple
currentFunc = screen_force_refresh
ref delaysimple is REF_EXT

line 50: [void screen_set_shift_box_x1(float n){AdrScreen[2031]=n;} //AdrScreen[2031]=0;]
found func screen_set_shift_box_x1



sig1 = void screen_set_shift_box_x1(float n)
sig2 = (float n)
found param n
found reference to n
currentFunc = screen_set_shift_box_x1
ref n is REF_STACK

line 51: [void screen_set_shift_box_x2(float n){AdrScreen[2032]=n;} //AdrScreen[2032]=28;]
found func screen_set_shift_box_x2



sig1 = void screen_set_shift_box_x2(float n)
sig2 = (float n)
found param n
found reference to n
currentFunc = screen_set_shift_box_x2
ref n is REF_STACK

line 52: [void screen_set_shift_box_y1(float n){AdrScreen[2033]=n;} //AdrScreen[2033]=0;]
found func screen_set_shift_box_y1



sig1 = void screen_set_shift_box_y1(float n)
sig2 = (float n)
found param n
found reference to n
currentFunc = screen_set_shift_box_y1
ref n is REF_STACK

line 53: [void screen_set_shift_box_y2(float n){AdrScreen[2034]=n;} //AdrScreen[2034]=16;]
found func screen_set_shift_box_y2



sig1 = void screen_set_shift_box_y2(float n)
sig2 = (float n)
found param n
found reference to n
currentFunc = screen_set_shift_box_y2
ref n is REF_STACK

line 54: [void screen_set_shift_box(float x1, float x2, float y1, float y2){]
found func screen_set_shift_box



sig1 = void screen_set_shift_box(float x1, float x2, float y1, float y2)
sig2 = (float x1, float x2, float y1, float y2)
found param x1
found param x2
found param y1
found param y2

line 55: [    AdrScreen[2031] = x1;]
found reference to x1
currentFunc = screen_set_shift_box
ref x1 is REF_STACK

line 56: [    AdrScreen[2032] = x2;]
found reference to x2
currentFunc = screen_set_shift_box
ref x2 is REF_STACK

line 57: [    AdrScreen[2033] = y1;]
found reference to y1
currentFunc = screen_set_shift_box
ref y1 is REF_STACK

line 58: [    AdrScreen[2034] = y2;]
found reference to y2
currentFunc = screen_set_shift_box
ref y2 is REF_STACK

line 59: [}]

line 60: [float screen_print_x_min = 0;]
found global var screen_print_x_min

line 61: [float screen_print_y_min = 0;]
found global var screen_print_y_min

line 62: [float screen_print_x_max = 0;]
found global var screen_print_x_max

line 63: [float screen_print_y_max = 0;]
found global var screen_print_y_max

line 64: [void screen_set_print_box(float x1, float y1, float x2, float y2){]
found func screen_set_print_box



sig1 = void screen_set_print_box(float x1, float y1, float x2, float y2)
sig2 = (float x1, float y1, float x2, float y2)
found param x1
found param y1
found param x2
found param y2

line 65: [    screen_print_x_min = x1;]
found reference to screen_print_x_min
currentFunc = screen_set_print_box
ref screen_print_x_min is REF_EXT
found reference to x1
currentFunc = screen_set_print_box
ref x1 is REF_STACK

line 66: [    screen_print_y_min = y1;]
found reference to screen_print_y_min
currentFunc = screen_set_print_box
ref screen_print_y_min is REF_EXT
found reference to y1
currentFunc = screen_set_print_box
ref y1 is REF_STACK

line 67: [    screen_print_x_max = x2;]
found reference to screen_print_x_max
currentFunc = screen_set_print_box
ref screen_print_x_max is REF_EXT
found reference to x2
currentFunc = screen_set_print_box
ref x2 is REF_STACK

line 68: [    screen_print_y_max = y2;]
found reference to screen_print_y_max
currentFunc = screen_set_print_box
ref screen_print_y_max is REF_EXT
found reference to y2
currentFunc = screen_set_print_box
ref y2 is REF_STACK

line 69: [}]

line 70: [void screen_shift_vertical(float n){AdrScreen[2038]=n;}]
found func screen_shift_vertical



sig1 = void screen_shift_vertical(float n)
sig2 = (float n)
found param n
found reference to n
currentFunc = screen_shift_vertical
ref n is REF_STACK

line 71: [void screen_shift_horizontal(float n){AdrScreen[2037]=n;}]
found func screen_shift_horizontal



sig1 = void screen_shift_horizontal(float n)
sig2 = (float n)
found param n
found reference to n
currentFunc = screen_shift_horizontal
ref n is REF_STACK

line 72: [void screen_set_blink_rate(float rate){AdrScreen[2043] = rate;}]
found func screen_set_blink_rate



sig1 = void screen_set_blink_rate(float rate)
sig2 = (float rate)
found param rate
found reference to rate
currentFunc = screen_set_blink_rate
ref rate is REF_STACK

line 73: [void screen_set_cursor_size(float size){AdrScreen[2044] = size;}]
found func screen_set_cursor_size



sig1 = void screen_set_cursor_size(float size)
sig2 = (float size)
found param size

line 74: [LIBCONSOLESCREEN_CONSTANTS:]
found label LIBCONSOLESCREEN_CONSTANTS

line 75: [LIBCONSOLESCREEN_VARS:]
found label LIBCONSOLESCREEN_VARS

line 76: [float AdrScreen;]
found global var AdrScreen

line 77: [LIBCONSOLESCREEN_END:]
found label LIBCONSOLESCREEN_END

line 78: [#endif]

line 79: []

line 162: [#include <cyclone/libs/libmulticonsolescreen.txt>]
found include <cyclone/libs/libmulticonsolescreen.txt>
reading file cyclone/libs/libmulticonsolescreen.txt

line 1: [//libmulticonsolescreen]

line 2: [/*]

line 3: [    for console screens arranged in an NxM grid]

line 4: [    ]

line 5: [    ---------------]

line 6: [    |hello |world |]

line 7: [    |      |      |]

line 8: [    |      |      |]

line 9: [    ---------------]

line 10: [    |      |      |]

line 11: [    |      |      |]

line 12: [    |      |      |]

line 13: [    ---------------]

line 14: []

line 15: []

line 16: [*/]

line 17: []

line 18: [void mcs_screen_clear(){]
found func mcs_screen_clear



sig1 = void mcs_screen_clear()
sig2 = ()

line 19: [    float scrx;]
found local var scrx (BL = 1)

line 20: [    float scry;]
found local var scry (BL = 1)

line 21: [    for(scrx = 0; scrx < num_screens_x; scrx++){]
found reference to scrx
currentFunc = mcs_screen_clear
ref scrx is REF_STACK

line 22: [        for(scry = 0; scry < num_screens_y; scry++){]
found reference to scry
currentFunc = mcs_screen_clear
ref scry is REF_STACK

line 23: [            float scrID = scry*num_screens_x+scrx;]
found local var scrID (BL = 3)

line 24: [            AdrScreen = screens[scrID];]
found reference to scrID
currentFunc = mcs_screen_clear
ref scrID is REF_STACK

line 25: [            screen_clear();]
found reference to screen_clear
currentFunc = mcs_screen_clear
ref screen_clear is REF_EXT

line 26: [        }]

line 27: [    }]

line 28: [}]

line 29: []

line 30: [void mcs_screen_force_refresh(){]
found func mcs_screen_force_refresh



sig1 = void mcs_screen_force_refresh()
sig2 = ()

line 31: [    float scrx;]
found local var scrx (BL = 1)

line 32: [    float scry;]
found local var scry (BL = 1)

line 33: [    for(scrx = 0; scrx < num_screens_x; scrx++){]
found reference to scrx
currentFunc = mcs_screen_force_refresh
ref scrx is REF_STACK

line 34: [        for(scry = 0; scry < num_screens_y; scry++){]
found reference to scry
currentFunc = mcs_screen_force_refresh
ref scry is REF_STACK

line 35: [            float scrID = scry*num_screens_x+scrx;]
found local var scrID (BL = 3)

line 36: [            AdrScreen = screens[scrID];]
found reference to scrID
currentFunc = mcs_screen_force_refresh
ref scrID is REF_STACK

line 37: [            screen_force_refresh();]
found reference to screen_force_refresh
currentFunc = mcs_screen_force_refresh
ref screen_force_refresh is REF_EXT

line 38: [        }]

line 39: [    }]

line 40: [}]

line 41: []

line 42: [float mcs_width;]
found global var mcs_width

line 43: [float mcs_height;]
found global var mcs_height

line 44: [float mcs_last_x;]
found global var mcs_last_x

line 45: [float mcs_last_y;]
found global var mcs_last_y

line 46: [float cs_width = 30;]
found global var cs_width

line 47: [float cs_height = 18;]
found global var cs_height

line 48: [float cs_last_x = 29;]
found global var cs_last_x

line 49: [float cs_last_y = 17;]
found global var cs_last_y

line 50: []

line 51: [void mcs_init(float numx, float numy){]
found func mcs_init



sig1 = void mcs_init(float numx, float numy)
sig2 = (float numx, float numy)
found param numx
found param numy

line 52: [    num_screens_x = numx;]
found reference to numx
currentFunc = mcs_init
ref numx is REF_STACK

line 53: [    num_screens_y = numy;]
found reference to numy
currentFunc = mcs_init
ref numy is REF_STACK

line 54: [    mcs_width = cs_width*numx;]

line 55: [    mcs_last_x = mcs_width-1;]

line 56: [    mcs_height = cs_height*numy;]
found reference to mcs_height
currentFunc = mcs_init
ref mcs_height is REF_EXT

line 57: [    mcs_last_y = mcs_height-1;]

line 58: [}]

line 59: []

line 60: []

line 61: [void mcs_screen_shift_vertical(float n){]
found func mcs_screen_shift_vertical



sig1 = void mcs_screen_shift_vertical(float n)
sig2 = (float n)
found param n

line 62: [    float scrx;]
found local var scrx (BL = 1)

line 63: [    float scry;]
found local var scry (BL = 1)

line 64: [    for(scrx = 0; scrx < num_screens_x; scrx++){]
found reference to scrx
currentFunc = mcs_screen_shift_vertical
ref scrx is REF_STACK

line 65: [        for(scry = 0; scry < num_screens_y; scry++){]
found reference to scry
currentFunc = mcs_screen_shift_vertical
ref scry is REF_STACK

line 66: [            float scrID = scry*num_screens_x+scrx;]
found local var scrID (BL = 3)

line 67: [            AdrScreen = screens[scrID];]
found reference to scrID
currentFunc = mcs_screen_shift_vertical
ref scrID is REF_STACK

line 68: [            screen_shift_vertical(n);]
found reference to screen_shift_vertical
currentFunc = mcs_screen_shift_vertical
ref screen_shift_vertical is REF_EXT
found reference to n
currentFunc = mcs_screen_shift_vertical
ref n is REF_STACK

line 69: [        }]

line 70: [    }]

line 71: [}]

line 72: []

line 73: [void mcs_screen_set_shift_box(float x1, float x2, float y1, float y2){]
found func mcs_screen_set_shift_box



sig1 = void mcs_screen_set_shift_box(float x1, float x2, float y1, float y2)
sig2 = (float x1, float x2, float y1, float y2)
found param x1
found param x2
found param y1
found param y2

line 74: [    float scrx;]
found local var scrx (BL = 1)

line 75: [    float scry;]
found local var scry (BL = 1)

line 76: [    for(scrx = 0; scrx < num_screens_x; scrx++){]
found reference to scrx
currentFunc = mcs_screen_set_shift_box
ref scrx is REF_STACK

line 77: [        for(scry = 0; scry < num_screens_y; scry++){]
found reference to scry
currentFunc = mcs_screen_set_shift_box
ref scry is REF_STACK

line 78: [            float scrID = scry*num_screens_x+scrx;]
found local var scrID (BL = 3)

line 79: [            AdrScreen = screens[scrID];]
found reference to scrID
currentFunc = mcs_screen_set_shift_box
ref scrID is REF_STACK

line 80: [//            screen_set_shift_box(x1,x2,y1,y2);]

line 81: [            float scrx1 = cs_width*scrx;]
found local var scrx1 (BL = 3)

line 82: [            float scrx2 = scrx1+cs_last_x;]
found local var scrx2 (BL = 3)
found reference to scrx1
currentFunc = mcs_screen_set_shift_box
ref scrx1 is REF_STACK

line 83: [            float scry1 = cs_height*scry;]
found local var scry1 (BL = 3)

line 84: [            float scry2 = scry1+cs_last_y;]
found local var scry2 (BL = 3)
found reference to scry1
currentFunc = mcs_screen_set_shift_box
ref scry1 is REF_STACK

line 85: [            float cx1 = x1;]
found local var cx1 (BL = 3)
found reference to x1
currentFunc = mcs_screen_set_shift_box
ref x1 is REF_STACK

line 86: [            float cx2 = x2;]
found local var cx2 (BL = 3)
found reference to x2
currentFunc = mcs_screen_set_shift_box
ref x2 is REF_STACK

line 87: [            float cy1 = y1;]
found local var cy1 (BL = 3)
found reference to y1
currentFunc = mcs_screen_set_shift_box
ref y1 is REF_STACK

line 88: [            float cy2 = y2;]
found local var cy2 (BL = 3)
found reference to y2
currentFunc = mcs_screen_set_shift_box
ref y2 is REF_STACK

line 89: [            ]

line 90: [            if(cx1 < scrx1){cx1 = scrx1;}]
found reference to cx1
currentFunc = mcs_screen_set_shift_box
ref cx1 is REF_STACK

line 91: [            if(cx1 > scrx2){cx1 = scrx2;}]
found reference to scrx2
currentFunc = mcs_screen_set_shift_box
ref scrx2 is REF_STACK

line 92: [            if(cx2 < scrx1){cx2 = scrx1;}]
found reference to cx2
currentFunc = mcs_screen_set_shift_box
ref cx2 is REF_STACK

line 93: [            if(cx2 > scrx2){cx2 = scrx2;}]

line 94: [            ]

line 95: [            if(cy1 < scry1){cy1 = scry1;}]
found reference to cy1
currentFunc = mcs_screen_set_shift_box
ref cy1 is REF_STACK

line 96: [            if(cy1 > scry2){cy1 = scry2;}]
found reference to scry2
currentFunc = mcs_screen_set_shift_box
ref scry2 is REF_STACK

line 97: [            if(cy2 < scry1){cy2 = scry1;}]
found reference to cy2
currentFunc = mcs_screen_set_shift_box
ref cy2 is REF_STACK

line 98: [            if(cy2 > scry2){cy2 = scry2;}]

line 99: [            ]

line 100: [            cx1 -= scrx1;]

line 101: [            cx2 -= scrx1;]

line 102: [            cy1 -= scry1;]

line 103: [            cy2 -= scry1;]

line 104: [             ]

line 105: [            screen_set_shift_box(cx1,cx2,cy1,cy2);]
found reference to screen_set_shift_box
currentFunc = mcs_screen_set_shift_box
ref screen_set_shift_box is REF_EXT

line 106: [        }]

line 107: [    }]

line 108: [}]

line 109: []

line 110: [void mcs_screen_set_cursor_pos_xy(float x, float y){]
found func mcs_screen_set_cursor_pos_xy



sig1 = void mcs_screen_set_cursor_pos_xy(float x, float y)
sig2 = (float x, float y)
found param x
found param y

line 111: [    float scrx;]
found local var scrx (BL = 1)

line 112: [    float scry;]
found local var scry (BL = 1)

line 113: [    for(scrx = 0; scrx < num_screens_x; scrx++){]
found reference to scrx
currentFunc = mcs_screen_set_cursor_pos_xy
ref scrx is REF_STACK

line 114: [        for(scry = 0; scry < num_screens_y; scry++){]
found reference to scry
currentFunc = mcs_screen_set_cursor_pos_xy
ref scry is REF_STACK

line 115: [            float scrID = scry*num_screens_x+scrx;]
found local var scrID (BL = 3)

line 116: [            AdrScreen = screens[scrID];]
found reference to scrID
currentFunc = mcs_screen_set_cursor_pos_xy
ref scrID is REF_STACK

line 117: [            float posx = x-scrx*cs_width;]
found local var posx (BL = 3)
found reference to x
currentFunc = mcs_screen_set_cursor_pos_xy
ref x is REF_STACK

line 118: [            float posy = y-scry*cs_height;]
found local var posy (BL = 3)
found reference to y
currentFunc = mcs_screen_set_cursor_pos_xy
ref y is REF_STACK

line 119: [            if((posx >= 0) && (posx <= cs_last_x) && (posy >= 0) && (posy <= cs_last_y)){]
found reference to posx
currentFunc = mcs_screen_set_cursor_pos_xy
ref posx is REF_STACK
found reference to posy
currentFunc = mcs_screen_set_cursor_pos_xy
ref posy is REF_STACK

line 120: [                screen_set_cursor_pos_xy(posx,posy);]
found reference to screen_set_cursor_pos_xy
currentFunc = mcs_screen_set_cursor_pos_xy
ref screen_set_cursor_pos_xy is REF_EXT

line 121: [                screen_cursor_enable();]
found reference to screen_cursor_enable
currentFunc = mcs_screen_set_cursor_pos_xy
ref screen_cursor_enable is REF_EXT

line 122: [            }else{]

line 123: [                screen_cursor_disable();]
found reference to screen_cursor_disable
currentFunc = mcs_screen_set_cursor_pos_xy
ref screen_cursor_disable is REF_EXT

line 124: [            }]

line 125: [            ]

line 126: [        }]

line 127: [    }]

line 128: [}]

line 129: []

line 130: []

line 131: [void mcs_screen_cursor_enable(){]
found func mcs_screen_cursor_enable



sig1 = void mcs_screen_cursor_enable()
sig2 = ()

line 132: [    float scrx;]
found local var scrx (BL = 1)

line 133: [    float scry;]
found local var scry (BL = 1)

line 134: [    for(scrx = 0; scrx < num_screens_x; scrx++){]
found reference to scrx
currentFunc = mcs_screen_cursor_enable
ref scrx is REF_STACK

line 135: [        for(scry = 0; scry < num_screens_y; scry++){]
found reference to scry
currentFunc = mcs_screen_cursor_enable
ref scry is REF_STACK

line 136: [            float scrID = scry*num_screens_x+scrx;]
found local var scrID (BL = 3)

line 137: [            AdrScreen = screens[scrID];]
found reference to scrID
currentFunc = mcs_screen_cursor_enable
ref scrID is REF_STACK

line 138: [            screen_cursor_enable();]

line 139: [        }]

line 140: [    }]

line 141: [}    ]

line 142: [        ]

line 143: [void mcs_screen_cursor_disable(){]
found func mcs_screen_cursor_disable



sig1 = void mcs_screen_cursor_disable()
sig2 = ()

line 144: [    float scrx;]
found local var scrx (BL = 1)

line 145: [    float scry;]
found local var scry (BL = 1)

line 146: [    for(scrx = 0; scrx < num_screens_x; scrx++){]
found reference to scrx
currentFunc = mcs_screen_cursor_disable
ref scrx is REF_STACK

line 147: [        for(scry = 0; scry < num_screens_y; scry++){]
found reference to scry
currentFunc = mcs_screen_cursor_disable
ref scry is REF_STACK

line 148: [            float scrID = scry*num_screens_x+scrx;]
found local var scrID (BL = 3)

line 149: [            AdrScreen = screens[scrID];]
found reference to scrID
currentFunc = mcs_screen_cursor_disable
ref scrID is REF_STACK

line 150: [            screen_cursor_disable();]

line 151: [        }]

line 152: [    }]

line 153: [}   ]

line 154: []

line 155: []

line 156: [void mcs_set_blink_rate(float rate){]
found func mcs_set_blink_rate



sig1 = void mcs_set_blink_rate(float rate)
sig2 = (float rate)
found param rate

line 157: [    float scrx;]
found local var scrx (BL = 1)

line 158: [    float scry;]
found local var scry (BL = 1)

line 159: [    for(scrx = 0; scrx < num_screens_x; scrx++){]
found reference to scrx
currentFunc = mcs_set_blink_rate
ref scrx is REF_STACK

line 160: [        for(scry = 0; scry < num_screens_y; scry++){]
found reference to scry
currentFunc = mcs_set_blink_rate
ref scry is REF_STACK

line 161: [            float scrID = scry*num_screens_x+scrx;]
found local var scrID (BL = 3)

line 162: [            AdrScreen = screens[scrID];]
found reference to scrID
currentFunc = mcs_set_blink_rate
ref scrID is REF_STACK

line 163: [            screen_set_blink_rate(rate);]
found reference to screen_set_blink_rate
currentFunc = mcs_set_blink_rate
ref screen_set_blink_rate is REF_EXT
found reference to rate
currentFunc = mcs_set_blink_rate
ref rate is REF_STACK

line 164: [        }]

line 165: [    }]

line 166: [}   ]

line 167: []

line 168: [void mcs_set_cursor_size(float size){]
found func mcs_set_cursor_size



sig1 = void mcs_set_cursor_size(float size)
sig2 = (float size)
found param size

line 169: [    float scrx;]
found local var scrx (BL = 1)

line 170: [    float scry;]
found local var scry (BL = 1)

line 171: [    for(scrx = 0; scrx < num_screens_x; scrx++){]
found reference to scrx
currentFunc = mcs_set_cursor_size
ref scrx is REF_STACK

line 172: [        for(scry = 0; scry < num_screens_y; scry++){]
found reference to scry
currentFunc = mcs_set_cursor_size
ref scry is REF_STACK

line 173: [            float scrID = scry*num_screens_x+scrx;]
found local var scrID (BL = 3)

line 174: [            AdrScreen = screens[scrID];]
found reference to scrID
currentFunc = mcs_set_cursor_size
ref scrID is REF_STACK

line 175: [            screen_set_cursor_size(size);]
found reference to screen_set_cursor_size
currentFunc = mcs_set_cursor_size
ref screen_set_cursor_size is REF_EXT

line 176: [        }]

line 177: [    }]

line 178: [}]

line 179: []

line 163: [#include <cyclone/libs/stackalloc.txt>]
found include <cyclone/libs/stackalloc.txt>
reading file cyclone/libs/stackalloc.txt

line 1: [//Stack allocation and ]

line 2: [#ifndef STACKALLOC_GUARD]
#ifndef "STACKALLOC_GUARD" (undefined)

line 3: [#define STACKALLOC_GUARD]
#defined "STACKALLOC_GUARD"

line 4: []

line 5: []

line 6: [// memcpy2 - copies memory. can copy to overlapping areas.]

line 7: [//]

line 8: [// stack_alloc - allocates space on the stack of the current function]

line 9: [// stack_return - allocates space on the owner's stack, copies the object there, and returns pointer to that object]

line 10: [//]

line 11: [//future work: ]

line 12: [// stack_vector - vector/dynarray that lives fully on the stack.]

line 13: [//]

line 14: []

line 15: []

line 16: [//include lib/zcrt/string.txt for memset;]

line 17: [//#include <lib/zcrt/string.txt>]

line 18: [STACKALLOC_CODE:]
found label STACKALLOC_CODE

line 19: []

line 20: [void *memcpy2(void *dest, void *src, float n) {]
found func memcpy2



sig1 = void *memcpy2(void *dest, void *src, float n)
sig2 = (void *dest, void *src, float n)
found param dest
found param src
found param n

line 21: [    float I;]
found local var I (BL = 1)

line 22: [    if(dest < src){]
found reference to dest
currentFunc = memcpy2
ref dest is REF_STACK
found reference to src
currentFunc = memcpy2
ref src is REF_STACK

line 23: [        for(I = 0; I < n; I++){]
found reference to I
currentFunc = memcpy2
ref I is REF_STACK
found reference to n
currentFunc = memcpy2
ref n is REF_STACK

line 24: [            dest[I] = src[I];]

line 25: [        }]

line 26: [    }else{]

line 27: [        for(I = n-1; I > -1; I--){]

line 28: [            dest[I] = src[I];]

line 29: [        }]

line 30: [    }]

line 31: [}]

line 32: []

line 33: [//float stack_alloc(float n)]

line 34: [//this function allocates space on the stack.]

line 35: [//it will be freed automatically when the caller function exits.]

line 36: [stack_alloc:]
found label stack_alloc

line 37: [    //out 0, esp;]

line 38: [    //out 1, 2;]

line 39: [    //int 1;]

line 40: [    //stack state:]

line 41: [    // +2: arg1   :newX]

line 42: [    // +1: IPprev :]

line 43: [    //ESP:        :]

line 44: [    //]

line 45: [    //desired stack state:]

line 46: [    // +2+size:         : oldX : oldESP+2]

line 47: [    //      +2:         : newX : oldESP+2-size]

line 48: [    //      +1: IPprev  :      : oldESP+1-size]

line 49: [    //     ESP:         :      : oldESP-size]

line 50: [    mov eax, esp;]

line 51: [    add eax, 2;     //eax = &size = X]

line 52: [    mov ebx, esp:#2 //ebx = size]
found label esp

line 53: [    mov ecx, esp:#1 //ecx = IPprev]
found label esp

line 54: [    mov edx, eax;]

line 55: [    sub edx, ebx;   ]

line 56: [    inc edx;        //edx = X-size+1;]

line 57: [    sub esp, ebx;   //ESP = ESP-size;]

line 58: [    push ecx;       //push IPprev]

line 59: [    push edx;]

line 60: [        //memset(X-size+1,0,size);]

line 61: [        push ebx; //size]

line 62: [        push 8008135;]

line 63: [        push edx; //X-size+1]

line 64: [        call memset;]

line 65: [        add esp, 3;]

line 66: [    pop eax; //eax = edx = X-size+1]

line 67: [ret;]

line 68: []

line 69: [//float stack_return(float ptr, float size, float num_args)]

line 70: [//allows the caller to return a multibyte structure by value.]

line 71: [//ptr - pointer to the structure you wish to return.]

line 72: [//size - size of the structure you wish to return.]

line 73: [//num_args - number of arguments of your function]

line 74: [stack_return:]
found label stack_return

line 75: [    enter 0;]

line 76: [    //variables of interest:]

line 77: [    //]

line 78: [    //EBP:#4: SR_arg3 (num_args)]

line 79: [    //EBP:#3: SR_arg2 (size)]

line 80: [    //EBP:#2: SR_arg1 (ptr)]

line 81: [    //EBP:#1: SR_IPprev]

line 82: [    //EBP:#0: F2_EBP]

line 83: [    //]

line 84: [    //F2_EBP+num_args+1 = F1_X //this is just an address]

line 85: [    //F2_EBP:#2: F2_arg1 //not interesting]

line 86: [    //F2_EBP:#1: F2_IPprev]

line 87: [    //F2_EBP:#0: F1_EBP]

line 88: [    ]

line 89: [    //first, allocate to ourselves the same amount of stack as we would push into F1.]

line 90: [        //stack_alloc(size);]

line 91: [        push EBP:#3; //SR_arg2 (size);]
found label EBP

line 92: [        call stack_alloc;]

line 93: [        add esp, 1;]

line 94: [    //next, push all the variables of interest onto the stack.]

line 95: [    push EBP:#4;]
found label EBP

line 96: [    push EBP:#3;]
found label EBP

line 97: [    push EBP:#2;]
found label EBP

line 98: [    push EBP:#1;]
found label EBP

line 99: [    push EBP:#0;]
found label EBP

line 100: [    mov eax, EBP:#0;]
found label EBP

line 101: [    push eax:#0;]
found label eax

line 102: [    push eax:#1;]
found label eax

line 103: [    add eax, EBP:#4;]
found label EBP

line 104: [    inc eax;]

line 105: [    push eax;]

line 106: [    ]

line 107: [    mov ebp, esp;]

line 108: [    //to recap, here is our stack now:]

line 109: [    //[allocated mem]]

line 110: [    //[allocated mem]]

line 111: [    //[allocated mem]]

line 112: [    // +8:  SR_arg3 (num_args)]

line 113: [    // +7:  SR_arg2 (size)]

line 114: [    // +6:  SR_arg1 (ptr)]

line 115: [    // +5:  SR_IPprev]

line 116: [    // +4:  F2_EBP]

line 117: [    // +3:  F1_EBP]

line 118: [    // +2:  F2_IPprev]

line 119: [    // +1:  F1_X]

line 120: [    //EBP:]

line 121: [    //this SHOULD be preserved through the memcopy operation]

line 122: [    mov eax, EBP:#1;]
found label EBP

line 123: [    sub eax, EBP:#7;]
found label EBP

line 124: [    inc eax;        //eax = X-size+1;]

line 125: [        //memcpy2(X-size+1, ptr, size);]

line 126: [        push EBP:#7;]
found label EBP

line 127: [        push EBP:#6;]
found label EBP

line 128: [        push eax;]

line 129: [        call memcpy2;]
found reference to memcpy2
no currentFunc
ref memcpy2 is REF_EXT

line 130: [        add esp, 3;]

line 131: [    //ok, we have returned data, now let's work on returning control flow.]

line 132: [    ]

line 133: [    //how ESP should look:]

line 134: [    //             [allocated] : oldX]

line 135: [    //             [allocated] : oldX-size+1          : returned data pointer     ]

line 136: [    //+1+num_args: arg_n       : oldX-size            : newX ]

line 137: [    //       +1+1: arg1        : oldX-size-num_args+1]

line 138: [    //         +1: IPprev      : oldX-size-num_args]

line 139: [    //        ESP:]

line 140: [    //we want X just after our returned data.]

line 141: [    mov eax, EBP:#1;]
found label EBP

line 142: [    sub eax, EBP:#7;]
found label EBP

line 143: [    inc eax;           //eax = F1_X-size+1;]

line 144: [    ]

line 145: [    mov esp, EBP:#1;]
found label EBP

line 146: [    sub esp, EBP:#7;]
found label EBP

line 147: [    sub esp, EBP:#8;   //ESP = oldX-size-num_args]
found label EBP

line 148: [    push EBP:#2;       //push F2_IPprev]
found label EBP

line 149: [    //EBP should become the stack base of F1]

line 150: [    mov EBP, EBP:#3;   //EBP = F1_EBP;]
found label EBP

line 151: [ret;]

line 152: []

line 153: [//copies n bytes from src to dest byte by byte.]

line 154: [//locations may overlap.]

line 155: [//void *memcpy2(void *dest, void *src, float n) {]

line 156: [//    float I;]

line 157: [//    if(dest < src){]

line 158: [//        for(I = 0; I < n; I++){]

line 159: [//            dest[I] = src[I];]

line 160: [//        }]

line 161: [//    }else{]

line 162: [//        for(I = n-1; I > -1; I--){]

line 163: [//            dest[I] = src[I];]

line 164: [//        }]

line 165: [//    }]

line 166: [//}]

line 167: [STACKALLOC_CONSTANTS:]
found label STACKALLOC_CONSTANTS

line 168: [STACKALLOC_VARS:]
found label STACKALLOC_VARS

line 169: [STACKALLOC_END:]
found label STACKALLOC_END

line 170: [#endif]

line 171: []

line 164: [BOOT_CODE_END:]
found label BOOT_CODE_END

line 165: [//void main(){printf("boot test complete\n");int 1;}]
removed string literal ""boot test complete\n""

line 166: []

line 167: [//alloc 10000;]

line 168: [#include <cyclone/libs/zmalloc.txt>]
found include <cyclone/libs/zmalloc.txt>
reading file cyclone/libs/zmalloc.txt

line 1: [// zon_malloc, first written in C++ in August 12th, 2015]

line 2: [// ported to HL-zASM and last updated August 13th, 2015]

line 3: [#ifndef ZMALLOC_GUARD]
#ifndef "ZMALLOC_GUARD" (undefined)

line 4: [#define ZMALLOC_GUARD]
#defined "ZMALLOC_GUARD"

line 5: [ZMALLOC_CODE:]
found label ZMALLOC_CODE

line 6: []

line 7: [void allocation_constructor(float *A){]
found func allocation_constructor



sig1 = void allocation_constructor(float *A)
sig2 = (float *A)
found param A

line 8: [    allocation_set_size(A, 0);]
found reference to allocation_set_size
currentFunc = allocation_constructor
ref allocation_set_size is REF_EXT
found reference to A
currentFunc = allocation_constructor
ref A is REF_STACK

line 9: [    allocation_set_owner(A, 0);]
found reference to allocation_set_owner
currentFunc = allocation_constructor
ref allocation_set_owner is REF_EXT

line 10: [    allocation_set_prev(A, 0);]
found reference to allocation_set_prev
currentFunc = allocation_constructor
ref allocation_set_prev is REF_EXT

line 11: [    allocation_set_next(A, 0);]
found reference to allocation_set_next
currentFunc = allocation_constructor
ref allocation_set_next is REF_EXT

line 12: [}]

line 13: []

line 14: [void allocation_set_size(float *A, float n){A[0] = n;}]
found func allocation_set_size



sig1 = void allocation_set_size(float *A, float n)
sig2 = (float *A, float n)
found param A
found param n
found reference to A
currentFunc = allocation_set_size
ref A is REF_STACK
found reference to n
currentFunc = allocation_set_size
ref n is REF_STACK

line 15: [void allocation_set_owner(float *A, float n){A[1] = n;}]
found func allocation_set_owner



sig1 = void allocation_set_owner(float *A, float n)
sig2 = (float *A, float n)
found param A
found param n
found reference to A
currentFunc = allocation_set_owner
ref A is REF_STACK
found reference to n
currentFunc = allocation_set_owner
ref n is REF_STACK

line 16: [void allocation_set_prev(float *A, float n){A[2] = n;}]
found func allocation_set_prev



sig1 = void allocation_set_prev(float *A, float n)
sig2 = (float *A, float n)
found param A
found param n
found reference to A
currentFunc = allocation_set_prev
ref A is REF_STACK
found reference to n
currentFunc = allocation_set_prev
ref n is REF_STACK

line 17: [void allocation_set_next(float *A, float n){A[3] = n;}]
found func allocation_set_next



sig1 = void allocation_set_next(float *A, float n)
sig2 = (float *A, float n)
found param A
found param n
found reference to A
currentFunc = allocation_set_next
ref A is REF_STACK
found reference to n
currentFunc = allocation_set_next
ref n is REF_STACK

line 18: [float allocation_get_size(float *A){return A[0];}]
found func allocation_get_size



sig1 = float allocation_get_size(float *A)
sig2 = (float *A)
found param A
found reference to A
currentFunc = allocation_get_size
ref A is REF_STACK

line 19: [float allocation_get_owner(float *A){return A[1];}]
found func allocation_get_owner



sig1 = float allocation_get_owner(float *A)
sig2 = (float *A)
found param A
found reference to A
currentFunc = allocation_get_owner
ref A is REF_STACK

line 20: [float allocation_get_prev(float *A){return A[2];}]
found func allocation_get_prev



sig1 = float allocation_get_prev(float *A)
sig2 = (float *A)
found param A
found reference to A
currentFunc = allocation_get_prev
ref A is REF_STACK

line 21: [float allocation_get_next(float *A){return A[3];}]
found func allocation_get_next



sig1 = float allocation_get_next(float *A)
sig2 = (float *A)
found param A
found reference to A
currentFunc = allocation_get_next
ref A is REF_STACK

line 22: []

line 23: []

line 24: []

line 25: [float *malloc_getAllocation(float I){]
found func malloc_getAllocation



sig1 = float *malloc_getAllocation(float I)
sig2 = (float I)
found param I

line 26: [    if(I < 1){]
found reference to I
currentFunc = malloc_getAllocation
ref I is REF_STACK

line 27: [        if(malloc_debug){malloc_print("getAllocation fails: ");malloc_print(malloc_num2str(I));malloc_print("<= 0\n");}]
removed string literal ""getAllocation fails: ""
removed string literal ""<= 0\n""
found reference to malloc_debug
currentFunc = malloc_getAllocation
ref malloc_debug is REF_EXT
found reference to malloc_print
currentFunc = malloc_getAllocation
ref malloc_print is REF_EXT
found reference to malloc_num2str
currentFunc = malloc_getAllocation
ref malloc_num2str is REF_EXT

line 28: [        return 0;]

line 29: [    }]

line 30: [    if(I > malloc_max_disk - malloc_header){]
found reference to malloc_max_disk
currentFunc = malloc_getAllocation
ref malloc_max_disk is REF_EXT
found reference to malloc_header
currentFunc = malloc_getAllocation
ref malloc_header is REF_EXT

line 31: [        if(malloc_debug){malloc_print("getAllocation fails: ");malloc_print(malloc_num2str(I));malloc_print(">");malloc_print(malloc_num2str(malloc_max_disk - malloc_header)); malloc_print("\n");}]
removed string literal ""getAllocation fails: ""
removed string literal "">""
removed string literal ""\n""

line 32: [        return 0;]

line 33: [    }]

line 34: [    return malloc_disk+I;]
found reference to malloc_disk
currentFunc = malloc_getAllocation
ref malloc_disk is REF_EXT

line 35: [}]

line 36: []

line 37: [float *malloc_getDataFromIndex(float I){]
found func malloc_getDataFromIndex



sig1 = float *malloc_getDataFromIndex(float I)
sig2 = (float I)
found param I

line 38: [    return malloc_disk+I+malloc_header;]
found reference to I
currentFunc = malloc_getDataFromIndex
ref I is REF_STACK

line 39: [}]

line 40: []

line 41: []

line 42: [float *malloc_getDataFromAllocation(float *A){]
found func malloc_getDataFromAllocation



sig1 = float *malloc_getDataFromAllocation(float *A)
sig2 = (float *A)
found param A

line 43: [    return A+malloc_header;]
found reference to A
currentFunc = malloc_getDataFromAllocation
ref A is REF_STACK

line 44: [}]

line 45: []

line 46: [float malloc_getIndex(float *ptr){]
found func malloc_getIndex



sig1 = float malloc_getIndex(float *ptr)
sig2 = (float *ptr)
found param ptr

line 47: [    return ptr-malloc_disk;]
found reference to ptr
currentFunc = malloc_getIndex
ref ptr is REF_STACK

line 48: [}]

line 49: []

line 50: []

line 51: [float malloc_trySplit(float *A, float **returnB, float n){]
found func malloc_trySplit



sig1 = float malloc_trySplit(float *A, float **returnB, float n)
sig2 = (float *A, float **returnB, float n)
found param A
found param returnB
found param n

line 52: [    //if(malloc_debug){malloc_print("trying to split ");malloc_print(malloc_num2str(A));malloc_print(" into "); malloc_print(malloc_num2str(n)); malloc_print("\n");}]
removed string literal ""trying to split ""
removed string literal "" into ""
removed string literal ""\n""

line 53: [    if(allocation_get_size(A) < n+malloc_header+1){if(malloc_debug){malloc_print("too small, can\'t split\n");} return 0;}]
removed string literal ""too small, can\'t split\n""
found reference to allocation_get_size
currentFunc = malloc_trySplit
ref allocation_get_size is REF_EXT
found reference to A
currentFunc = malloc_trySplit
ref A is REF_STACK
found reference to n
currentFunc = malloc_trySplit
ref n is REF_STACK

line 54: [    float oldsize = allocation_get_size(A);]
found local var oldsize (BL = 1)

line 55: [    allocation_set_size(A,n);]

line 56: [    float tmp = malloc_getDataFromAllocation(A);]
found local var tmp (BL = 1)
found reference to malloc_getDataFromAllocation
currentFunc = malloc_trySplit
ref malloc_getDataFromAllocation is REF_EXT

line 57: [    tmp = tmp+n;]
found reference to tmp
currentFunc = malloc_trySplit
ref tmp is REF_STACK

line 58: [    tmp = malloc_getIndex(tmp);]
found reference to malloc_getIndex
currentFunc = malloc_trySplit
ref malloc_getIndex is REF_EXT

line 59: [    float tmp2 = malloc_getAllocation(tmp);]
found local var tmp2 (BL = 1)
found reference to malloc_getAllocation
currentFunc = malloc_trySplit
ref malloc_getAllocation is REF_EXT

line 60: []

line 61: [    float *B = tmp2;//malloc_getAllocation(malloc_getIndex(malloc_getDataFromAllocation(A)+n));]
found local var B (BL = 1)
found reference to tmp2
currentFunc = malloc_trySplit
ref tmp2 is REF_STACK

line 62: [    //if(malloc_debug){malloc_print("splitting: make new allocation at ");malloc_print(malloc_num2str(B));malloc_print(" (index ");malloc_print(malloc_num2str(tmp));malloc_print(")\n");}]
removed string literal ""splitting: make new allocation at ""
removed string literal "" (index ""
removed string literal "")\n""

line 63: [    allocation_set_size(B,oldsize-n-malloc_header);]
found reference to B
currentFunc = malloc_trySplit
ref B is REF_STACK
found reference to oldsize
currentFunc = malloc_trySplit
ref oldsize is REF_STACK

line 64: [    allocation_set_owner(B, allocation_get_owner(A));]
found reference to allocation_get_owner
currentFunc = malloc_trySplit
ref allocation_get_owner is REF_EXT

line 65: [    allocation_set_prev(B, malloc_getIndex(A));]

line 66: [    allocation_set_next(B, allocation_get_next(A));]
found reference to allocation_get_next
currentFunc = malloc_trySplit
ref allocation_get_next is REF_EXT

line 67: [    allocation_set_next(A, malloc_getIndex(B));]

line 68: [    if(allocation_get_next(B)){allocation_set_prev(malloc_getAllocation(allocation_get_next(B)), malloc_getIndex(B));}]

line 69: [    *returnB = B;]
found reference to returnB
currentFunc = malloc_trySplit
ref returnB is REF_STACK

line 70: [    //if(malloc_debug){malloc_print("done splitting\n");}]
removed string literal ""done splitting\n""

line 71: [    return 1;]

line 72: [}]

line 73: []

line 74: [void malloc_join(float *A, float *B){]
found func malloc_join



sig1 = void malloc_join(float *A, float *B)
sig2 = (float *A, float *B)
found param A
found param B

line 75: [    float tmp = allocation_get_size(A);]
found local var tmp (BL = 1)
found reference to A
currentFunc = malloc_join
ref A is REF_STACK

line 76: [    tmp = tmp+allocation_get_size(B);]
found reference to tmp
currentFunc = malloc_join
ref tmp is REF_STACK
found reference to B
currentFunc = malloc_join
ref B is REF_STACK

line 77: [    tmp = tmp+malloc_header;]

line 78: [    allocation_set_size(A, tmp);]

line 79: [    tmp = allocation_get_next(B);]

line 80: [    allocation_set_next(A, tmp);]

line 81: [    if(allocation_get_next(B)){]

line 82: [        tmp = allocation_get_next(B);]

line 83: [        tmp = malloc_getAllocation(tmp);]

line 84: [        float tmp2 = malloc_getIndex(A);]
found local var tmp2 (BL = 2)

line 85: [        allocation_set_prev(tmp, tmp2);]
found reference to tmp2
currentFunc = malloc_join
ref tmp2 is REF_STACK

line 86: [    }]

line 87: [}]

line 88: []

line 89: [void malloc_set_disk(float *disk, float disk_size){]
found func malloc_set_disk



sig1 = void malloc_set_disk(float *disk, float disk_size)
sig2 = (float *disk, float disk_size)
found param disk
found param disk_size

line 90: [    malloc_disk = disk;]
found reference to disk
currentFunc = malloc_set_disk
ref disk is REF_STACK

line 91: [    malloc_max_disk = disk_size;]
found reference to disk_size
currentFunc = malloc_set_disk
ref disk_size is REF_STACK

line 92: [    malloc_header = 4;]

line 93: [    malloc_user = 1;]
found reference to malloc_user
currentFunc = malloc_set_disk
ref malloc_user is REF_EXT

line 94: [    malloc_debug = 0;]

line 95: [}]

line 96: []

line 97: [void malloc_init(){]
found func malloc_init



sig1 = void malloc_init()
sig2 = ()

line 98: [    if(malloc_debug){malloc_print("disk = ");malloc_print(malloc_num2str(malloc_disk));malloc_print("\n")}]
removed string literal ""disk = ""
removed string literal ""\n""

line 99: [    float *A = malloc_getAllocation(1);]
found local var A (BL = 1)

line 100: [    if(malloc_debug){malloc_print("allocation = ");malloc_print(malloc_num2str(A));malloc_print("\n");}]
removed string literal ""allocation = ""
removed string literal ""\n""
found reference to A
currentFunc = malloc_init
ref A is REF_STACK

line 101: [    allocation_set_size(A, malloc_max_disk - malloc_header - 1);]

line 102: [    allocation_set_owner(A, 0);]

line 103: [    allocation_set_prev(A, 0);]

line 104: [    allocation_set_next(A, 0);]

line 105: [    if(malloc_debug){malloc_print("malloc_init returning\n");}]
removed string literal ""malloc_init returning\n""

line 106: [}]

line 107: []

line 108: []

line 109: [float malloc_test(){]
found func malloc_test



sig1 = float malloc_test()
sig2 = ()

line 110: [    float A,B,C,D;]
found local var A (BL = 1)
found local var B (BL = 1)
found local var C (BL = 1)
found local var D (BL = 1)

line 111: [    malloc_count(&A,&B,&C,&D){]
found reference to malloc_count
currentFunc = malloc_test
ref malloc_count is REF_EXT
found reference to A
currentFunc = malloc_test
ref A is REF_STACK
found reference to B
currentFunc = malloc_test
ref B is REF_STACK
found reference to C
currentFunc = malloc_test
ref C is REF_STACK
found reference to D
currentFunc = malloc_test
ref D is REF_STACK

line 112: [        float calcsize = A+B+malloc_header*(C+D)+1;]
found local var calcsize (BL = 2)

line 113: [        if(calcsize != malloc_max_disk){]
found reference to calcsize
currentFunc = malloc_test
ref calcsize is REF_STACK

line 114: [            if(malloc_print){]

line 115: [                malloc_print("ERROR: HEAP CORRUPTED\n(");]
removed string literal ""ERROR: HEAP CORRUPTED\n(""

line 116: [                malloc_print(malloc_num2str(calcsize));]

line 117: [                malloc_print(" / ");]
removed string literal "" / ""

line 118: [                malloc_print(malloc_num2str(malloc_max_disk));]

line 119: [                malloc_print(")\n");]
removed string literal "")\n""

line 120: [            }]

line 121: [            return 1;]

line 122: [        }]

line 123: [    }]

line 124: [    return 0;]

line 125: [}]

line 126: []

line 127: [void malloc_print_count(){]
found func malloc_print_count



sig1 = void malloc_print_count()
sig2 = ()

line 128: [    float *A = malloc_getAllocation(1);]
found local var A (BL = 1)

line 129: [    while(1){]

line 130: [        printAllocationSimple(A);]
found reference to printAllocationSimple
currentFunc = malloc_print_count
ref printAllocationSimple is REF_EXT
found reference to A
currentFunc = malloc_print_count
ref A is REF_STACK

line 131: [        if(allocation_get_next(A)){A = malloc_getAllocation(allocation_get_next(A));}]

line 132: [        else{return;}]

line 133: [    }]

line 134: [}]

line 135: []

line 136: []

line 137: [void malloc_count(float *freesize, float *usedsize, float *freecount, float *usedcount){]
found func malloc_count



sig1 = void malloc_count(float *freesize, float *usedsize, float *freecount, float *usedcount)
sig2 = (float *freesize, float *usedsize, float *freecount, float *usedcount)
found param freesize
found param usedsize
found param freecount
found param usedcount

line 138: [    *freesize = 0;]
found reference to freesize
currentFunc = malloc_count
ref freesize is REF_STACK

line 139: [    *usedsize = 0;]
found reference to usedsize
currentFunc = malloc_count
ref usedsize is REF_STACK

line 140: [    *freecount = 0;]
found reference to freecount
currentFunc = malloc_count
ref freecount is REF_STACK

line 141: [    *usedcount = 0;]
found reference to usedcount
currentFunc = malloc_count
ref usedcount is REF_STACK

line 142: [    float *A = malloc_getAllocation(1);]
found local var A (BL = 1)

line 143: [    while(1){]

line 144: [        if(allocation_get_owner(A) == 0){*freesize = *freesize + allocation_get_size(A); *freecount = *freecount + 1;}]
found reference to A
currentFunc = malloc_count
ref A is REF_STACK

line 145: [        else{*usedsize = *usedsize + allocation_get_size(A); *usedcount = *usedcount + 1;}]

line 146: [        if(allocation_get_next(A)){A = malloc_getAllocation(allocation_get_next(A));}]

line 147: [        else{return;}]

line 148: [    }]

line 149: [}]

line 150: []

line 151: [void printAllocationSimple(float *A){]
found func printAllocationSimple



sig1 = void printAllocationSimple(float *A)
sig2 = (float *A)
found param A

line 152: [    if(allocation_get_owner(A)){malloc_print("X ");}else{malloc_print("O ");}]
removed string literal ""X ""
removed string literal ""O ""
found reference to A
currentFunc = printAllocationSimple
ref A is REF_STACK

line 153: [    malloc_print(malloc_num2str(A)); malloc_print(" "); malloc_print(malloc_num2str(allocation_get_size(A)));malloc_print("\n");]
removed string literal "" ""
removed string literal ""\n""

line 154: [}]

line 155: []

line 156: [void printAllocation(float *A){]
found func printAllocation



sig1 = void printAllocation(float *A)
sig2 = (float *A)
found param A

line 157: [    malloc_print("Alc ");]
removed string literal ""Alc ""

line 158: [    malloc_print(malloc_num2str(A));]
found reference to A
currentFunc = printAllocation
ref A is REF_STACK

line 159: [    malloc_print(", data ");]
removed string literal "", data ""

line 160: [    malloc_print(malloc_num2str(malloc_getDataFromAllocation(A)));]

line 161: [    malloc_print(", size ");]
removed string literal "", size ""

line 162: [    malloc_print(malloc_num2str(allocation_get_size(A)));]

line 163: [    malloc_print(", owner ");]
removed string literal "", owner ""

line 164: [    malloc_print(malloc_num2str(allocation_get_owner(A)));]

line 165: [    malloc_print(", prev ");]
removed string literal "", prev ""

line 166: [    malloc_print(malloc_num2str(allocation_get_prev(A)));]
found reference to allocation_get_prev
currentFunc = printAllocation
ref allocation_get_prev is REF_EXT

line 167: [    malloc_print(", next ");]
removed string literal "", next ""

line 168: [    malloc_print(malloc_num2str(allocation_get_next(A)));]

line 169: [    malloc_print("\n");]
removed string literal ""\n""

line 170: [}]

line 171: []

line 172: [float mallocLast(float n){]
found func mallocLast



sig1 = float mallocLast(float n)
sig2 = (float n)
found param n

line 173: [//    if(malloc_debug){malloc_print("mallocLast(");malloc_print(malloc_num2str(n));malloc_print(")\n");}]
removed string literal ""mallocLast(""
removed string literal "")\n""

line 174: [    //if(malloc_debug){malloc_print("lastFreeAllocation ");malloc_print(malloc_num2str(lastFreeAllocation));malloc_print("\n");}]
removed string literal ""lastFreeAllocation ""
removed string literal ""\n""

line 175: [    float *A = malloc_getAllocation(lastFreeAllocation);]
found local var A (BL = 1)
found reference to lastFreeAllocation
currentFunc = mallocLast
ref lastFreeAllocation is REF_EXT

line 176: [    while(1){]

line 177: [        malloc_debug_iters++;]
found reference to malloc_debug_iters
currentFunc = mallocLast
ref malloc_debug_iters is REF_EXT

line 178: [        //if(malloc_debug){printAllocation(A);}]

line 179: [        float cond1 = allocation_get_owner(A);]
found local var cond1 (BL = 2)
found reference to A
currentFunc = mallocLast
ref A is REF_STACK

line 180: [        float cond2 = allocation_get_size(A);]
found local var cond2 (BL = 2)

line 181: [        cond1 = (cond1 == 0);]
found reference to cond1
currentFunc = mallocLast
ref cond1 is REF_STACK

line 182: [        cond2 = (cond2 > (n-1));]
found reference to cond2
currentFunc = mallocLast
ref cond2 is REF_STACK
found reference to n
currentFunc = mallocLast
ref n is REF_STACK

line 183: [        cond1 = cond1 && cond2;]

line 184: [        if(cond1){]

line 185: [//            if(malloc_debug){malloc_print("mallocL: found something\n");}]
removed string literal ""mallocL: found something\n""

line 186: [            float *B;]
found local var B (BL = 3)

line 187: [            malloc_trySplit(A,&B,n);]
found reference to malloc_trySplit
currentFunc = mallocLast
ref malloc_trySplit is REF_EXT
found reference to B
currentFunc = mallocLast
ref B is REF_STACK

line 188: [            allocation_set_owner(A, malloc_user);]

line 189: [            lastFreeAllocation = malloc_getIndex(B);]

line 190: [            //if(malloc_test()){shell_panic();}]

line 191: [            return malloc_getDataFromAllocation(A);]

line 192: [        }else{]

line 193: [            if(allocation_get_next(A)){]

line 194: [                float tmp = allocation_get_next(A);]
found local var tmp (BL = 4)

line 195: [                A = malloc_getAllocation(tmp);]
found reference to tmp
currentFunc = mallocLast
ref tmp is REF_STACK

line 196: [            }else{]

line 197: [//                if(malloc_debug){malloc_print("mallocL: no memory, returning 0\n");}]
removed string literal ""mallocL: no memory, returning 0\n""

line 198: [                //Print("ERROR MALLOC FAILED PANIC\n",900);]
removed string literal ""ERROR MALLOC FAILED PANIC\n""

line 199: [                //shell_panic();]

line 200: [                return 0;]

line 201: [            }]

line 202: [        }]

line 203: [    } ]

line 204: [}]

line 205: []

line 206: [float *zmalloc(float n){]
found func zmalloc



sig1 = float *zmalloc(float n)
sig2 = (float n)
found param n

line 207: [    //if(malloc_debug){malloc_print("malloc(");malloc_print(malloc_num2str(n));malloc_print(")\n");}]
removed string literal ""malloc(""
removed string literal "")\n""

line 208: [    malloc_debug_iters = 0;]

line 209: [    float res;]
found local var res (BL = 1)

line 210: [    float time1 = 0;]
found local var time1 (BL = 1)

line 211: [    float time2 = 0;]
found local var time2 (BL = 1)

line 212: [    if(malloc_debug){]

line 213: [        timer eax; ]

line 214: [        mov time1, eax;]
found reference to time1
currentFunc = zmalloc
ref time1 is REF_STACK

line 215: [    }]

line 216: [    res = mallocLast(n);]
found reference to res
currentFunc = zmalloc
ref res is REF_STACK
found reference to mallocLast
currentFunc = zmalloc
ref mallocLast is REF_EXT
found reference to n
currentFunc = zmalloc
ref n is REF_STACK

line 217: [    if(res){]

line 218: [        //if(malloc_debug){malloc_print("malloc: OK (last)\n");}]
removed string literal ""malloc: OK (last)\n""

line 219: [        goto malloc_goodreturn;]
found reference to malloc_goodreturn
currentFunc = zmalloc
ref malloc_goodreturn is REF_EXT

line 220: [    }]

line 221: [    float *A = malloc_getAllocation(1);]
found local var A (BL = 1)

line 222: [    while(1){]

line 223: [        malloc_debug_iters++;]

line 224: [        //if(malloc_debug){printAllocation(A);}]

line 225: [        float cond1 = allocation_get_owner(A);]
found local var cond1 (BL = 2)
found reference to A
currentFunc = zmalloc
ref A is REF_STACK

line 226: [        float cond2 = allocation_get_size(A);]
found local var cond2 (BL = 2)

line 227: [        cond1 = (cond1 == 0);]
found reference to cond1
currentFunc = zmalloc
ref cond1 is REF_STACK

line 228: [        cond2 = (cond2 > (n-1));]
found reference to cond2
currentFunc = zmalloc
ref cond2 is REF_STACK

line 229: [        cond1 = cond1 && cond2;]

line 230: [        if(cond1){]

line 231: [            //if(malloc_debug){malloc_print("malloc: found something\n");}]
removed string literal ""malloc: found something\n""

line 232: [            float *B;]
found local var B (BL = 3)

line 233: [            if(malloc_trySplit(A,&B,n)){]
found reference to B
currentFunc = zmalloc
ref B is REF_STACK

line 234: [                lastFreeAllocation = malloc_getIndex(B);]

line 235: [            }else{]

line 236: [                lastFreeAllocation = 1;]

line 237: [            }]

line 238: [            allocation_set_owner(A, malloc_user);]

line 239: [            //if(malloc_test()){shell_panic();}]

line 240: [            res = malloc_getDataFromAllocation(A);]

line 241: [            //return malloc_getDataFromAllocation(A);]

line 242: [            //if(malloc_debug){malloc_print("malloc: OK (plain)\n");}]
removed string literal ""malloc: OK (plain)\n""

line 243: [            goto malloc_goodreturn;]

line 244: [        }else{]

line 245: [            if(allocation_get_next(A)){]

line 246: [                float tmp = allocation_get_next(A);]
found local var tmp (BL = 4)

line 247: [                A = malloc_getAllocation(tmp);]
found reference to tmp
currentFunc = zmalloc
ref tmp is REF_STACK

line 248: [            }else{]

line 249: [                if(malloc_debug){malloc_print("malloc: no memory, returning 0\n");}]
removed string literal ""malloc: no memory, returning 0\n""

line 250: [                Print("ERROR MALLOC FAILED PANIC\n",900);]
removed string literal ""ERROR MALLOC FAILED PANIC\n""

line 251: [                shell_panic();]

line 252: [                return 0;]

line 253: [            }]

line 254: [        }]

line 255: [    }]

line 256: [    malloc_goodreturn:]
found label malloc_goodreturn

line 257: [    if(malloc_debug){]

line 258: [        timer eax; ]

line 259: [        mov time2, eax; ]
found reference to time2
currentFunc = zmalloc
ref time2 is REF_STACK

line 260: [        float delta = time2-time1;]
found local var delta (BL = 2)

line 261: [        //malloc_print("malloc time: "); ]
removed string literal ""malloc time: ""

line 262: [        //malloc_print(malloc_num2str(delta)); ]

line 263: [        //malloc_print("\n");]
removed string literal ""\n""

line 264: [        //malloc_print("(");malloc_print(malloc_num2str(time1)); malloc_print(" - "); malloc_print(malloc_num2str(time2)); malloc_print(")\n");]
removed string literal ""(""
removed string literal "" - ""
removed string literal "")\n""

line 265: [        //malloc_print("iters: ");malloc_print(malloc_num2str(malloc_debug_iters));malloc_print("\n");]
removed string literal ""iters: ""
removed string literal ""\n""

line 266: [    }]

line 267: [    return res;]

line 268: [}]

line 269: []

line 270: []

line 271: [void zfree(float *ptr){]
found func zfree



sig1 = void zfree(float *ptr)
sig2 = (float *ptr)
found param ptr

line 272: [    if(malloc_debug){malloc_print("free(");malloc_print(malloc_num2str(ptr));malloc_print(")\n");}]
removed string literal ""free(""
removed string literal "")\n""
found reference to ptr
currentFunc = zfree
ref ptr is REF_STACK

line 273: [    if(ptr < malloc_disk+1+malloc_header){ if(malloc_debug){malloc_print("free: null pointer (index ");malloc_print(malloc_num2str(malloc_getIndex(ptr)));malloc_print(")\n");} return;}]
removed string literal ""free: null pointer (index ""
removed string literal "")\n""

line 274: [    float tmp = malloc_getIndex(ptr);]
found local var tmp (BL = 1)

line 275: [//    if(malloc_debug){malloc_print("index = ");malloc_print(malloc_num2str(tmp));malloc_print("\n");}]
removed string literal ""index = ""
removed string literal ""\n""

line 276: [    tmp = tmp-malloc_header;]
found reference to tmp
currentFunc = zfree
ref tmp is REF_STACK

line 277: [    tmp = malloc_getAllocation(tmp);]

line 278: [    float *A = tmp;]
found local var A (BL = 1)

line 279: [    allocation_set_owner(A,0);]
found reference to A
currentFunc = zfree
ref A is REF_STACK

line 280: [//    if(malloc_debug){malloc_print("free, trying previous\n");}]
removed string literal ""free, trying previous\n""

line 281: [    float prev;]
found local var prev (BL = 1)

line 282: [    float prevA;]
found local var prevA (BL = 1)

line 283: [    free_loop1:]
found label free_loop1

line 284: [    prev = allocation_get_prev(A);]
found reference to prev
currentFunc = zfree
ref prev is REF_STACK

line 285: [    if(prev){]

line 286: [        prevA = malloc_getAllocation(prev);]
found reference to prevA
currentFunc = zfree
ref prevA is REF_STACK

line 287: [        if(allocation_get_owner(prevA) == 0){]

line 288: [            malloc_join(prevA, A);]
found reference to malloc_join
currentFunc = zfree
ref malloc_join is REF_EXT

line 289: [            A = prevA;]

line 290: [            goto free_loop1;]
found reference to free_loop1
currentFunc = zfree
ref free_loop1 is REF_EXT

line 291: [        }]

line 292: [    }]

line 293: [//    if(malloc_debug){malloc_print("free, trying next\n");}]
removed string literal ""free, trying next\n""

line 294: [    float next;]
found local var next (BL = 1)

line 295: [    float nextA;]
found local var nextA (BL = 1)

line 296: [    free_loop2:]
found label free_loop2

line 297: [    next = allocation_get_next(A);]
found reference to next
currentFunc = zfree
ref next is REF_STACK

line 298: [    if(next){]

line 299: [        nextA = malloc_getAllocation(next);]
found reference to nextA
currentFunc = zfree
ref nextA is REF_STACK

line 300: [        if(allocation_get_owner(nextA) == 0){]

line 301: [            malloc_join(A, nextA);]

line 302: [            goto free_loop2;]
found reference to free_loop2
currentFunc = zfree
ref free_loop2 is REF_EXT

line 303: [        }]

line 304: [    }]

line 305: [//    if(malloc_debug){malloc_print("done freeing\n");}]
removed string literal ""done freeing\n""

line 306: [}]

line 307: []

line 308: []

line 309: [float *zrealloc(float *ptr, float n){]
found func zrealloc



sig1 = float *zrealloc(float *ptr, float n)
sig2 = (float *ptr, float n)
found param ptr
found param n

line 310: [    if(malloc_debug){malloc_print("realloc(");malloc_print(malloc_num2str(ptr));malloc_print(",");malloc_print(malloc_num2str(n));malloc_print(")\n");}]
removed string literal ""realloc(""
removed string literal "",""
removed string literal "")\n""
found reference to ptr
currentFunc = zrealloc
ref ptr is REF_STACK
found reference to n
currentFunc = zrealloc
ref n is REF_STACK

line 311: [    float *newp = malloc(n);]
found local var newp (BL = 1)

line 312: [//    if(malloc_debug){malloc_print("newp = ");malloc_print(malloc_num2str(newp));malloc_print("\n");}]
removed string literal ""newp = ""
removed string literal ""\n""

line 313: [    if(newp){]
found reference to newp
currentFunc = zrealloc
ref newp is REF_STACK

line 314: [        if(ptr){]

line 315: [            float tmp = malloc_getIndex(ptr);]
found local var tmp (BL = 3)

line 316: [            tmp = tmp-malloc_header;]
found reference to tmp
currentFunc = zrealloc
ref tmp is REF_STACK

line 317: [            tmp = malloc_getAllocation(tmp);]

line 318: [            float *A = tmp;]
found local var A (BL = 3)

line 319: [            float size = allocation_get_size(A);]
found local var size (BL = 3)
found reference to A
currentFunc = zrealloc
ref A is REF_STACK

line 320: [            if(n < size){size = n;}   ]

line 321: [//            if(malloc_debug){malloc_print("copying ");malloc_print(malloc_num2str(size));malloc_print(" bytes from ");malloc_print(malloc_num2str(malloc_getIndex(malloc_getDataFromAllocation(A))));malloc_print(" to ");malloc_print(malloc_num2str(malloc_getIndex(newp)));malloc_print("\n");}]
removed string literal ""copying ""
removed string literal "" bytes from ""
removed string literal "" to ""
removed string literal ""\n""

line 322: [            tmp = malloc_getDataFromAllocation(A);]

line 323: [            malloc_memcopy(tmp,newp,size);]
found reference to malloc_memcopy
currentFunc = zrealloc
ref malloc_memcopy is REF_EXT

line 324: [            free(ptr);]
found reference to free
currentFunc = zrealloc
ref free is REF_EXT

line 325: [            return newp;]

line 326: [        }else{]

line 327: [            return newp;]

line 328: [        }]

line 329: [    }else{]

line 330: [        return 0;]

line 331: [    }]

line 332: [}]

line 333: []

line 334: [void malloc_memcopy(float *from, float *to, float n){]
found func malloc_memcopy



sig1 = void malloc_memcopy(float *from, float *to, float n)
sig2 = (float *from, float *to, float n)
found param from
found param to
found param n

line 335: [    float I;]
found local var I (BL = 1)

line 336: [    for(I = 0; I < n; I++){]
found reference to I
currentFunc = malloc_memcopy
ref I is REF_STACK
found reference to n
currentFunc = malloc_memcopy
ref n is REF_STACK

line 337: [        *to = *from;]
found reference to to
currentFunc = malloc_memcopy
ref to is REF_STACK
found reference to from
currentFunc = malloc_memcopy
ref from is REF_STACK

line 338: [        to = to+1;]

line 339: [        from = from+1;]

line 340: [    }]

line 341: [}]

line 342: []

line 343: [float str_alloc(float str){]
found func str_alloc



sig1 = float str_alloc(float str)
sig2 = (float str)
found param str

line 344: [    float len = strlen(str)+1;]
found local var len (BL = 1)
found reference to str
currentFunc = str_alloc
ref str is REF_STACK

line 345: [    float ptr = malloc(len);]
found local var ptr (BL = 1)
found reference to len
currentFunc = str_alloc
ref len is REF_STACK

line 346: [    strcpy(ptr,str);]
found reference to ptr
currentFunc = str_alloc
ref ptr is REF_STACK

line 347: [    return ptr;]

line 348: [}]

line 349: []

line 350: [ZMALLOC_CONSTANTS:]
found label ZMALLOC_CONSTANTS

line 351: [ZMALLOC_VARS:]
found label ZMALLOC_VARS

line 352: [float malloc_debug = 0;]
found global var malloc_debug

line 353: [float malloc_print = 0;]
found global var malloc_print

line 354: [float malloc_num2str = 0;]
found global var malloc_num2str

line 355: [float malloc_disk;]
found global var malloc_disk

line 356: [float malloc_max_disk;]
found global var malloc_max_disk

line 357: [float malloc_header;]
found global var malloc_header

line 358: [float malloc_user;]
found global var malloc_user

line 359: [float lastFreeAllocation = 1;]
found global var lastFreeAllocation

line 360: [float malloc_debug_iters = 0;]
found global var malloc_debug_iters

line 361: [ZMALLOC_END:]
found label ZMALLOC_END

line 362: [#endif]

line 363: []

line 169: [#include <cyclone/libs/libsetalloc.txt>]
found include <cyclone/libs/libsetalloc.txt>
reading file cyclone/libs/libsetalloc.txt

line 1: [//libsetalloc]

line 2: [//]

line 3: [// allows one to change the currently active allocator]

line 4: [//]

line 5: []

line 6: []

line 7: [float curAllocator = 0;]
found global var curAllocator

line 8: [float defaultAllocator[5];]
found global var defaultAllocator

line 9: []

line 10: [void setalloc_init(){]
found func setalloc_init



sig1 = void setalloc_init()
sig2 = ()

line 11: [    allocator_constructor(defaultAllocator);]
found reference to allocator_constructor
currentFunc = setalloc_init
ref allocator_constructor is REF_EXT
found reference to defaultAllocator
currentFunc = setalloc_init
ref defaultAllocator is REF_EXT

line 12: [    allocator_set_malloc(defaultAllocator, zmalloc);]
found reference to allocator_set_malloc
currentFunc = setalloc_init
ref allocator_set_malloc is REF_EXT
found reference to zmalloc
currentFunc = setalloc_init
ref zmalloc is REF_EXT

line 13: [    allocator_set_realloc(defaultAllocator, zrealloc);]
found reference to allocator_set_realloc
currentFunc = setalloc_init
ref allocator_set_realloc is REF_EXT
found reference to zrealloc
currentFunc = setalloc_init
ref zrealloc is REF_EXT

line 14: [    allocator_set_free(defaultAllocator, zfree);]
found reference to allocator_set_free
currentFunc = setalloc_init
ref allocator_set_free is REF_EXT
found reference to zfree
currentFunc = setalloc_init
ref zfree is REF_EXT

line 15: [    curAllocator = defaultAllocator;]
found reference to curAllocator
currentFunc = setalloc_init
ref curAllocator is REF_EXT

line 16: [}]

line 17: []

line 18: [void setallocator(float all){]
found func setallocator



sig1 = void setallocator(float all)
sig2 = (float all)
found param all

line 19: [    curAllocator = all;]
found reference to all
currentFunc = setallocator
ref all is REF_STACK

line 20: [}]

line 21: []

line 22: [float malloc(float n){]
found func malloc



sig1 = float malloc(float n)
sig2 = (float n)
found param n

line 23: [    if(curAllocator){]

line 24: [        float i = curAllocator[1];]
found local var i (BL = 2)

line 25: [        float m = curAllocator[2];]
found local var m (BL = 2)

line 26: [        if(m){return m(n, i);}]
found reference to m
currentFunc = malloc
ref m is REF_STACK
found reference to n
currentFunc = malloc
ref n is REF_STACK
found reference to i
currentFunc = malloc
ref i is REF_STACK

line 27: [    }]

line 28: [    return 0;]

line 29: [}]

line 30: []

line 31: [float realloc(float p, float n){]
found func realloc



sig1 = float realloc(float p, float n)
sig2 = (float p, float n)
found param p
found param n

line 32: [    if(curAllocator){]

line 33: [        float i = curAllocator[1];]
found local var i (BL = 2)

line 34: [        float r = curAllocator[3];]
found local var r (BL = 2)

line 35: [        if(r){return r(p,n, i);}]
found reference to r
currentFunc = realloc
ref r is REF_STACK
found reference to n
currentFunc = realloc
ref n is REF_STACK
found reference to i
currentFunc = realloc
ref i is REF_STACK

line 36: [    }]

line 37: [    return 0;]

line 38: [}]

line 39: []

line 40: [float free(float p){]
found func free



sig1 = float free(float p)
sig2 = (float p)
found param p

line 41: [    if(curAllocator){]

line 42: [        float i = curAllocator[1];]
found local var i (BL = 2)

line 43: [        float f = curAllocator[4];]
found local var f (BL = 2)

line 44: [        if(f){return f(p, i);}]
found reference to f
currentFunc = free
ref f is REF_STACK
found reference to i
currentFunc = free
ref i is REF_STACK

line 45: [    }]

line 46: [    return 0;]

line 47: [}]

line 48: []

line 49: [//struct allocator]

line 50: [// typeof]

line 51: [// void *impl]

line 52: [// void (*malloc)(int n)]

line 53: [// void (*realloc)(void *p, int n)]

line 54: [// void (*free)()]

line 55: [//]

line 56: []

line 57: [typeof_allocator: db "allocator", 0;]
removed string literal ""allocator""
found label typeof_allocator

line 58: [float sizeof_allocator = 5;]
found global var sizeof_allocator

line 59: []

line 60: [float allocator_new(){]
found func allocator_new



sig1 = float allocator_new()
sig2 = ()

line 61: [    float all = malloc(sizeof_allocator)]
found local var all (BL = 1)
found reference to sizeof_allocator
currentFunc = allocator_new
ref sizeof_allocator is REF_EXT

line 62: [    allocator_constructor(all);]
found reference to all
currentFunc = allocator_new
ref all is REF_STACK

line 63: [    return all;]

line 64: [}]

line 65: []

line 66: [float allocator_constructor(float all){]
found func allocator_constructor



sig1 = float allocator_constructor(float all)
sig2 = (float all)
found param all

line 67: [    all[0] = typeof_allocator;]
found reference to all
currentFunc = allocator_constructor
ref all is REF_STACK
found reference to typeof_allocator
currentFunc = allocator_constructor
ref typeof_allocator is REF_EXT

line 68: [    all[1] = 0;]

line 69: [    all[2] = 0;]

line 70: [    all[3] = 0;]

line 71: [    all[4] = 0;]

line 72: [}]

line 73: []

line 74: [float allocator_set_impl(float all, float impl){]
found func allocator_set_impl



sig1 = float allocator_set_impl(float all, float impl)
sig2 = (float all, float impl)
found param all
found param impl

line 75: [    assert_arity(ecx,2);]
found reference to assert_arity
currentFunc = allocator_set_impl
ref assert_arity is REF_EXT

line 76: [    assert_type(all,typeof_allocator);]
found reference to assert_type
currentFunc = allocator_set_impl
ref assert_type is REF_EXT
found reference to all
currentFunc = allocator_set_impl
ref all is REF_STACK

line 77: [    all[1] = impl;]
found reference to impl
currentFunc = allocator_set_impl
ref impl is REF_STACK

line 78: [}]

line 79: [float allocator_set_malloc(float all, float mal){]
found func allocator_set_malloc



sig1 = float allocator_set_malloc(float all, float mal)
sig2 = (float all, float mal)
found param all
found param mal

line 80: [    assert_arity(ecx,2);]

line 81: [    assert_type(all,typeof_allocator);]
found reference to all
currentFunc = allocator_set_malloc
ref all is REF_STACK

line 82: [    all[2] = mal;]
found reference to mal
currentFunc = allocator_set_malloc
ref mal is REF_STACK

line 83: [}]

line 84: [float allocator_set_realloc(float all, float rel){]
found func allocator_set_realloc



sig1 = float allocator_set_realloc(float all, float rel)
sig2 = (float all, float rel)
found param all
found param rel

line 85: [    assert_arity(ecx,2);]

line 86: [    assert_type(all,typeof_allocator);]
found reference to all
currentFunc = allocator_set_realloc
ref all is REF_STACK

line 87: [    all[3] = rel;]
found reference to rel
currentFunc = allocator_set_realloc
ref rel is REF_STACK

line 88: [}]

line 89: [float allocator_set_free(float all, float fre){]
found func allocator_set_free



sig1 = float allocator_set_free(float all, float fre)
sig2 = (float all, float fre)
found param all
found param fre

line 90: [    assert_arity(ecx,2);]

line 91: [    assert_type(all,typeof_allocator);]
found reference to all
currentFunc = allocator_set_free
ref all is REF_STACK

line 92: [    all[4] = fre;]
found reference to fre
currentFunc = allocator_set_free
ref fre is REF_STACK

line 93: [}]

line 94: []

line 170: [#include <cyclone/libs/zvector.txt>]
found include <cyclone/libs/zvector.txt>
reading file cyclone/libs/zvector.txt

line 1: [//written a long time ago]

line 2: [//last updated August 13th 2015]

line 3: [//vector library]

line 4: []

line 5: [// [vector]]

line 6: [// type   vector       //magic value to id this as an object of class vector]

line 7: [// ptr*   array        //pointer to internal array]

line 8: [// int    size         //number of elements currently in array]

line 9: [// int    capacity     //number of elements that the space is reserved for]

line 10: [// int    element_size //size, in bytes, of a single element]

line 11: [// ------------------------]

line 12: [// funcs: ]

line 13: [// void   vector_constructor(self, element_size) //create the vector]

line 14: [// void   vector_clear(self)                     //delete all elements]

line 15: [// void   vector_push(self, element)             //add an element to the end (by value if size=1, else by ref)]

line 16: [// float  vector_pop(self, element)              //return element by pointer]

line 17: [// int    vector_size(self)                      //size of the vector]

line 18: [// float  vector_get(self,element,pos)           //return element at position]

line 19: [// void   vector_set(self,element,pos)           //set element at position to new value]

line 20: [// void   vector_insert(self,element,pos)        //insert an element, moving the rest forward]

line 21: [// float  vector_remove(self,element,pos)        //remove an element, moving the rest back]

line 22: [// void   vector_resize(self, new_size)          //resize the vector's internal storage]

line 23: [// ptr    vector_array(self)                     //pointer to the internal array]

line 24: [#ifndef ZVECTOR_GUARD]
#ifndef "ZVECTOR_GUARD" (undefined)

line 25: [#define ZVECTOR_GUARD]
#defined "ZVECTOR_GUARD"

line 26: [ZVECTOR_CODE:]
found label ZVECTOR_CODE

line 27: [//void *memcpy2(void *dest, void *src, float n) {]

line 28: [//    float I;]

line 29: [//    if(dest < src){]

line 30: [//        for(I = 0; I < n; I++){]

line 31: [//            dest[I] = src[I];]

line 32: [//        }]

line 33: [//    }else{]

line 34: [//        for(I = n-1; I > -1; I--){]

line 35: [//            dest[I] = src[I];]

line 36: [//        }]

line 37: [//    }]

line 38: [//}]

line 39: []

line 40: [float error(float errno){]
found func error



sig1 = float error(float errno)
sig2 = (float errno)
found param errno

line 41: [    Perr("Vector error ");Perr(num2str(errno));Perr("\n");]
removed string literal ""Vector error ""
removed string literal ""\n""
found reference to Perr
currentFunc = error
ref Perr is REF_EXT
found reference to errno
currentFunc = error
ref errno is REF_STACK

line 42: [    //P("VECTOR ERROR ");P(num2str(errno));P("\n");]
removed string literal ""VECTOR ERROR ""
removed string literal ""\n""

line 43: [    //return errno/0;]

line 44: [    shell_panic();]

line 45: [}]

line 46: [float sizeof_vector = 5;]
found global var sizeof_vector

line 47: []

line 48: [float vector_new(){]
found func vector_new



sig1 = float vector_new()
sig2 = ()

line 49: [    float v = malloc(sizeof_vector);]
found local var v (BL = 1)
found reference to sizeof_vector
currentFunc = vector_new
ref sizeof_vector is REF_EXT

line 50: [    vector_constructor(v,1);]
found reference to vector_constructor
currentFunc = vector_new
ref vector_constructor is REF_EXT
found reference to v
currentFunc = vector_new
ref v is REF_STACK

line 51: [    return v;]

line 52: [}]

line 53: []

line 54: [void vector_constructor(void *self, float element_size){]
found func vector_constructor



sig1 = void vector_constructor(void *self, float element_size)
sig2 = (void *self, float element_size)
found param self
found param element_size

line 55: [    assert_arity(ecx,2);]

line 56: [    self[0] = typeof_vector;]
found reference to self
currentFunc = vector_constructor
ref self is REF_STACK
found reference to typeof_vector
currentFunc = vector_constructor
ref typeof_vector is REF_EXT

line 57: [    //float size = 10*element_size;]

line 58: [    self[1] = malloc(10*element_size);]
found reference to element_size
currentFunc = vector_constructor
ref element_size is REF_STACK

line 59: [    self[2] = 0;]

line 60: [    self[3] = 10;]

line 61: [    self[4] = element_size;]

line 62: [}]

line 63: []

line 64: [void vector_copy_constructor(void *self, void *other){]
found func vector_copy_constructor



sig1 = void vector_copy_constructor(void *self, void *other)
sig2 = (void *self, void *other)
found param self
found param other

line 65: [    assert_type(other, typeof_vector);]
found reference to other
currentFunc = vector_copy_constructor
ref other is REF_STACK

line 66: [    //copy the header]

line 67: [    self[0] = other[0];]
found reference to self
currentFunc = vector_copy_constructor
ref self is REF_STACK

line 68: [    self[1] = other[1];]

line 69: [    self[2] = other[2];]

line 70: [    self[3] = other[3];]

line 71: [    self[4] = other[4];]

line 72: [    //copy the data]

line 73: [    float size = self[2]*self[4];]
found local var size (BL = 1)

line 74: [    float newarray = malloc(size);]
found local var newarray (BL = 1)

line 75: [    float oldarray = self[1];]
found local var oldarray (BL = 1)

line 76: [    memcpy(newarray,oldarray,size);]
found reference to newarray
currentFunc = vector_copy_constructor
ref newarray is REF_STACK
found reference to oldarray
currentFunc = vector_copy_constructor
ref oldarray is REF_STACK

line 77: [    self[1] = newarray;]

line 78: [}]

line 79: []

line 80: [float vector_get_array(void *self){assert_type(self,typeof_vector); return self[1];}]
found func vector_get_array



sig1 = float vector_get_array(void *self)
sig2 = (void *self)
found param self
found reference to self
currentFunc = vector_get_array
ref self is REF_STACK

line 81: [float vector_get_size(void *self){assert_type(self,typeof_vector); return self[2];}]
found func vector_get_size



sig1 = float vector_get_size(void *self)
sig2 = (void *self)
found param self
found reference to self
currentFunc = vector_get_size
ref self is REF_STACK

line 82: [float vector_get_capacity(void *self){assert_type(self,typeof_vector); return self[3];}]
found func vector_get_capacity



sig1 = float vector_get_capacity(void *self)
sig2 = (void *self)
found param self
found reference to self
currentFunc = vector_get_capacity
ref self is REF_STACK

line 83: [float vector_get_element_size(void *self){assert_type(self,typeof_vector); return self[4];}]
found func vector_get_element_size



sig1 = float vector_get_element_size(void *self)
sig2 = (void *self)
found param self
found reference to self
currentFunc = vector_get_element_size
ref self is REF_STACK

line 84: [void vector_set_array(void *self, float n){assert_type(self,typeof_vector); self[1] = n;}]
found func vector_set_array



sig1 = void vector_set_array(void *self, float n)
sig2 = (void *self, float n)
found param self
found param n
found reference to self
currentFunc = vector_set_array
ref self is REF_STACK
found reference to n
currentFunc = vector_set_array
ref n is REF_STACK

line 85: [void vector_set_size(void *self, float n){assert_type(self,typeof_vector); self[2] = n;}]
found func vector_set_size



sig1 = void vector_set_size(void *self, float n)
sig2 = (void *self, float n)
found param self
found param n
found reference to self
currentFunc = vector_set_size
ref self is REF_STACK
found reference to n
currentFunc = vector_set_size
ref n is REF_STACK

line 86: [void vector_set_capacity(void *self, float n){assert_type(self,typeof_vector); self[3] = n;}]
found func vector_set_capacity



sig1 = void vector_set_capacity(void *self, float n)
sig2 = (void *self, float n)
found param self
found param n
found reference to self
currentFunc = vector_set_capacity
ref self is REF_STACK
found reference to n
currentFunc = vector_set_capacity
ref n is REF_STACK

line 87: [void vector_set_element_size(void *self, float n){assert_type(self,typeof_vector); self[4] = n;}]
found func vector_set_element_size



sig1 = void vector_set_element_size(void *self, float n)
sig2 = (void *self, float n)
found param self
found param n
found reference to self
currentFunc = vector_set_element_size
ref self is REF_STACK
found reference to n
currentFunc = vector_set_element_size
ref n is REF_STACK

line 88: []

line 89: [void vector_destructor(void *self){]
found func vector_destructor



sig1 = void vector_destructor(void *self)
sig2 = (void *self)
found param self

line 90: [    assert_type(self,typeof_vector); ]
found reference to self
currentFunc = vector_destructor
ref self is REF_STACK

line 91: [    free(self[1]);]

line 92: [}]

line 93: [void vector_clear(void *self){]
found func vector_clear



sig1 = void vector_clear(void *self)
sig2 = (void *self)
found param self

line 94: [    assert_type(self,typeof_vector); ]
found reference to self
currentFunc = vector_clear
ref self is REF_STACK

line 95: [    float self_size = self[2];]
found local var self_size (BL = 1)

line 96: [    self_size = 0;]
found reference to self_size
currentFunc = vector_clear
ref self_size is REF_STACK

line 97: [    self[2] = self_size;]

line 98: [}]

line 99: [void vector_push(void *self, void *element){]
found func vector_push



sig1 = void vector_push(void *self, void *element)
sig2 = (void *self, void *element)
found param self
found param element

line 100: [    assert_arity(ecx, 2);]

line 101: [    assert_type(self,typeof_vector); ]
found reference to self
currentFunc = vector_push
ref self is REF_STACK

line 102: [    //if(malloc_test()){return;}else{P("v_push 1\n");}]
removed string literal ""v_push 1\n""

line 103: [    float array = self[1];]
found local var array (BL = 1)

line 104: [    float self_size = self[2];]
found local var self_size (BL = 1)

line 105: [    float self_capacity = self[3];]
found local var self_capacity (BL = 1)

line 106: [    float element_size = self[4];]
found local var element_size (BL = 1)

line 107: [    //P("v_a: ");P(num2str(array));]
removed string literal ""v_a: ""

line 108: [    //P("\nv_ss: ");P(num2str(self_size));]
removed string literal ""\nv_ss: ""

line 109: [    //P("\nv_sc: ");P(num2str(self_capacity));]
removed string literal ""\nv_sc: ""

line 110: [    //P("\nv_es: ");P(num2str(element_size));P("\n");]
removed string literal ""\nv_es: ""
removed string literal ""\n""

line 111: [    self_size++;]
found reference to self_size
currentFunc = vector_push
ref self_size is REF_STACK

line 112: [    //if(malloc_test()){return;}else{P("v_push 2\n");}]
removed string literal ""v_push 2\n""

line 113: [    if(self_size > self_capacity){]
found reference to self_capacity
currentFunc = vector_push
ref self_capacity is REF_STACK

line 114: [    //if(malloc_test()){return;}else{P("v_push 3\n");}]
removed string literal ""v_push 3\n""

line 115: [        float newsize = self_capacity+1;]
found local var newsize (BL = 2)

line 116: [        newsize = newsize*1.5;]
found reference to newsize
currentFunc = vector_push
ref newsize is REF_STACK

line 117: [        newsize = ceil(newsize);]
found reference to ceil
currentFunc = vector_push
ref ceil is REF_EXT

line 118: [        array = vector_resize(self, newsize)]
found reference to vector_resize
currentFunc = vector_push
ref vector_resize is REF_EXT

line 119: [    //    P("v new array at ");P(num2str(array));P("\n");]
removed string literal ""v new array at ""
removed string literal ""\n""

line 120: [        if(array == 0){Perr("vector: can\'t resize\n"); return;}]
removed string literal ""vector: can\'t resize\n""

line 121: [    //    if(malloc_test()){return;}else{P("v_push 4\n");}]
removed string literal ""v_push 4\n""

line 122: [    }]

line 123: [    if(element_size == 1){]
found reference to element_size
currentFunc = vector_push
ref element_size is REF_STACK

line 124: [    //if(malloc_test()){return;}else{P("v_push 5\n");}]
removed string literal ""v_push 5\n""

line 125: [        array[self_size-1] = element;]
found reference to element
currentFunc = vector_push
ref element is REF_STACK

line 126: [    //    if(malloc_test()){return;}else{P("v_push 6\n");}]
removed string literal ""v_push 6\n""

line 127: [    }else{]

line 128: [    //  if(malloc_test()){return;}else{P("v_push 7\n");}]
removed string literal ""v_push 7\n""

line 129: [        memcpy2(array+(self_size-1)*element_size, element, element_size);]

line 130: [    //  if(malloc_test()){return;}else{P("v_push 8\n");}]
removed string literal ""v_push 8\n""

line 131: [    }]

line 132: [    //if(malloc_test()){return;}else{P("v_push 9\n");}]
removed string literal ""v_push 9\n""

line 133: [    self[2] = self_size;]

line 134: [    //if(malloc_test()){return;}else{P("v_push 10\n");}]
removed string literal ""v_push 10\n""

line 135: [}]

line 136: []

line 137: [float vector_pop(void *self, void *element){]
found func vector_pop



sig1 = float vector_pop(void *self, void *element)
sig2 = (void *self, void *element)
found param self
found param element

line 138: [    assert_type(self,typeof_vector); ]
found reference to self
currentFunc = vector_pop
ref self is REF_STACK

line 139: [    float array = self[1];]
found local var array (BL = 1)

line 140: [    float self_size = self[2];]
found local var self_size (BL = 1)

line 141: [    float self_capacity = self[3];]
found local var self_capacity (BL = 1)

line 142: [    float element_size = self[4];]
found local var element_size (BL = 1)

line 143: [    if(self_size <= 0){error(0);}]
found reference to self_size
currentFunc = vector_pop
ref self_size is REF_STACK
found reference to error
currentFunc = vector_pop
ref error is REF_EXT

line 144: [    if(element != 0){]
found reference to element
currentFunc = vector_pop
ref element is REF_STACK

line 145: [        memcpy2(element, array+self_size*element_size, element_size);]
found reference to element_size
currentFunc = vector_pop
ref element_size is REF_STACK

line 146: [    }]

line 147: [    float R = array[(self_size-1)*element_size];]
found local var R (BL = 1)

line 148: [    self_size--;]

line 149: [    self[2] = self_size;]

line 150: [    return R;]
found reference to R
currentFunc = vector_pop
ref R is REF_STACK

line 151: [}]

line 152: []

line 153: [float vector_size(void *self){assert_type(self,typeof_vector); return self[2];}]
found func vector_size



sig1 = float vector_size(void *self)
sig2 = (void *self)
found param self
found reference to self
currentFunc = vector_size
ref self is REF_STACK

line 154: [float vector_disk_size(void *self){assert_type(self,typeof_vector); return self[2]*self[4];}]
found func vector_disk_size



sig1 = float vector_disk_size(void *self)
sig2 = (void *self)
found param self
found reference to self
currentFunc = vector_disk_size
ref self is REF_STACK

line 155: []

line 156: [float vector_get(void *self, void *element, float pos){]
found func vector_get



sig1 = float vector_get(void *self, void *element, float pos)
sig2 = (void *self, void *element, float pos)
found param self
found param element
found param pos

line 157: [    assert_arity(ecx,3);]

line 158: [    assert_type(self,typeof_vector); ]
found reference to self
currentFunc = vector_get
ref self is REF_STACK

line 159: [    float array = self[1];]
found local var array (BL = 1)

line 160: [    float self_size = self[2];]
found local var self_size (BL = 1)

line 161: [    float self_capacity = self[3];]
found local var self_capacity (BL = 1)

line 162: [    float element_size = self[4];]
found local var element_size (BL = 1)

line 163: [    if((pos < 0) || (pos >= self_size)){error(0);}]
found reference to pos
currentFunc = vector_get
ref pos is REF_STACK
found reference to self_size
currentFunc = vector_get
ref self_size is REF_STACK

line 164: [    if(element != 0){]
found reference to element
currentFunc = vector_get
ref element is REF_STACK

line 165: [        memcpy2(element, array+pos*element_size, element_size);]
found reference to element_size
currentFunc = vector_get
ref element_size is REF_STACK

line 166: [    }]

line 167: [    float R = array[pos*element_size];]
found local var R (BL = 1)

line 168: [    return R;]
found reference to R
currentFunc = vector_get
ref R is REF_STACK

line 169: [}]

line 170: []

line 171: [void vector_set(void *self, void *element, float pos){]
found func vector_set



sig1 = void vector_set(void *self, void *element, float pos)
sig2 = (void *self, void *element, float pos)
found param self
found param element
found param pos

line 172: [    assert_arity(ecx,3);]

line 173: [    assert_type(self,typeof_vector); ]
found reference to self
currentFunc = vector_set
ref self is REF_STACK

line 174: [    float array = self[1];]
found local var array (BL = 1)

line 175: [    float self_size = self[2];]
found local var self_size (BL = 1)

line 176: [    float self_capacity = self[3];]
found local var self_capacity (BL = 1)

line 177: [    float element_size = self[4];]
found local var element_size (BL = 1)

line 178: [    if(pos == self_size){vector_push(self,element); return;}]
found reference to pos
currentFunc = vector_set
ref pos is REF_STACK
found reference to self_size
currentFunc = vector_set
ref self_size is REF_STACK
found reference to vector_push
currentFunc = vector_set
ref vector_push is REF_EXT
found reference to element
currentFunc = vector_set
ref element is REF_STACK

line 179: [    if((pos < 0) || (pos >= self_size)){error(0);}]

line 180: [    if(element_size == 1){]
found reference to element_size
currentFunc = vector_set
ref element_size is REF_STACK

line 181: [        array[pos] = element;]

line 182: [    }else{]

line 183: [        memcpy2(array+pos*element_size, element, element_size);]

line 184: [    }]

line 185: [}]

line 186: []

line 187: [void vector_insert(void *self, void *element, float pos){]
found func vector_insert



sig1 = void vector_insert(void *self, void *element, float pos)
sig2 = (void *self, void *element, float pos)
found param self
found param element
found param pos

line 188: [    assert_arity(ecx,3);]

line 189: [    assert_type(self,typeof_vector); ]
found reference to self
currentFunc = vector_insert
ref self is REF_STACK

line 190: [    float self_size = self[2];]
found local var self_size (BL = 1)

line 191: [    float self_capacity = self[3];]
found local var self_capacity (BL = 1)

line 192: [    float element_size = self[4];]
found local var element_size (BL = 1)

line 193: [    if((pos < 0) || (pos > self_size)){error(0);}]
found reference to pos
currentFunc = vector_insert
ref pos is REF_STACK
found reference to self_size
currentFunc = vector_insert
ref self_size is REF_STACK

line 194: [    if(pos == self_size){vector_push(self, element);}]
found reference to element
currentFunc = vector_insert
ref element is REF_STACK

line 195: [    self_size++;]

line 196: [    if(self_size > self_capacity){]
found reference to self_capacity
currentFunc = vector_insert
ref self_capacity is REF_STACK

line 197: [        float newsize = self_capacity+1;]
found local var newsize (BL = 2)

line 198: [        newsize = newsize*1.5;]
found reference to newsize
currentFunc = vector_insert
ref newsize is REF_STACK

line 199: [        newsize = ceil(newsize);]

line 200: [        array = vector_resize(self, newsize)]

line 201: [        if(vector_resize(self, newsize) == 0){]

line 202: [            return;]

line 203: [        }]

line 204: [    }]

line 205: [    float array = self[1];]
found local var array (BL = 1)

line 206: [    //if(malloc_test()){return;}else{P("insert 1\n");}]
removed string literal ""insert 1\n""

line 207: [    memcpy2(array+(pos+1)*element_size, array+(pos)*element_size,self_size-pos-1);]
found reference to element_size
currentFunc = vector_insert
ref element_size is REF_STACK

line 208: [    //if(malloc_test()){return;}else{P("insert 2\n");}]
removed string literal ""insert 2\n""

line 209: [    if(element_size == 1){]

line 210: [        array[pos] = element;]

line 211: [     //   if(malloc_test()){return;}else{P("insert 3\n");}]
removed string literal ""insert 3\n""

line 212: [    }else{]

line 213: [        memcpy2(array+pos*element_size, element, element_size);]

line 214: [       // if(malloc_test()){return;}else{P("insert 4\n");}]
removed string literal ""insert 4\n""

line 215: [    }]

line 216: [    self[2] = self_size;]

line 217: [}]

line 218: []

line 219: [void vector_remove(void *self, float pos){]
found func vector_remove



sig1 = void vector_remove(void *self, float pos)
sig2 = (void *self, float pos)
found param self
found param pos

line 220: [    assert_arity(ecx,2);]

line 221: [    assert_type(self,typeof_vector); ]
found reference to self
currentFunc = vector_remove
ref self is REF_STACK

line 222: [    float array = self[1];]
found local var array (BL = 1)

line 223: [    float self_size = self[2];]
found local var self_size (BL = 1)

line 224: [    float self_capacity = self[3];]
found local var self_capacity (BL = 1)

line 225: [    float element_size = self[4];]
found local var element_size (BL = 1)

line 226: [    if((pos < 0) || (pos > self_size)){error(0);}]
found reference to pos
currentFunc = vector_remove
ref pos is REF_STACK
found reference to self_size
currentFunc = vector_remove
ref self_size is REF_STACK

line 227: [    if(pos == self_size){vector_pop(self, 0);return;}]
found reference to vector_pop
currentFunc = vector_remove
ref vector_pop is REF_EXT

line 228: [    memcpy2(array+pos*element_size, array+(pos+1)*element_size,self_size-pos);]
found reference to element_size
currentFunc = vector_remove
ref element_size is REF_STACK

line 229: [    self_size--;]

line 230: [    self[2] = self_size;]

line 231: [}]

line 232: []

line 233: [float vector_resize(void *self, float newcap){]
found func vector_resize



sig1 = float vector_resize(void *self, float newcap)
sig2 = (void *self, float newcap)
found param self
found param newcap

line 234: [    assert_type(self,typeof_vector); ]
found reference to self
currentFunc = vector_resize
ref self is REF_STACK

line 235: [    //P2("v_resize: ",newcap,"\n");]
removed string literal ""v_resize: ""
removed string literal ""\n""

line 236: [    //if(malloc_test()){return;}else{P("v_resize 1\n");}]
removed string literal ""v_resize 1\n""

line 237: [    float array = self[1];]
found local var array (BL = 1)

line 238: [    float self_size = self[2];]
found local var self_size (BL = 1)

line 239: [    float self_capacity = self[3];]
found local var self_capacity (BL = 1)

line 240: [    float element_size = self[4];]
found local var element_size (BL = 1)

line 241: [    float oldarray = array;]
found local var oldarray (BL = 1)

line 242: [    //if(malloc_test()){return;}else{P("v_resize 2\n");}]
removed string literal ""v_resize 2\n""

line 243: [    //dbg = 1;]

line 244: [    array = realloc(array, element_size*newcap);]
found reference to realloc
currentFunc = vector_resize
ref realloc is REF_EXT
found reference to element_size
currentFunc = vector_resize
ref element_size is REF_STACK
found reference to newcap
currentFunc = vector_resize
ref newcap is REF_STACK

line 245: [    //dbg = 0;]

line 246: [    //if(malloc_test()){return;}else{P("v_resize 3\n");}]
removed string literal ""v_resize 3\n""

line 247: [    //free(array);]

line 248: [    //array = malloc(element_size*newcap);]

line 249: [    //P2("got ",array,"\n");]
removed string literal ""got ""
removed string literal ""\n""

line 250: [    if(array == 0){return 0;}]

line 251: [    //memcpy(array,oldarray,element_size*self_size);]

line 252: [    self_capacity = newcap;]
found reference to self_capacity
currentFunc = vector_resize
ref self_capacity is REF_STACK

line 253: [    self[1] = array;]

line 254: [    self[2] = self_size;]
found reference to self_size
currentFunc = vector_resize
ref self_size is REF_STACK

line 255: [    self[3] = self_capacity;]

line 256: [    //if(malloc_test()){return;}else{P("v_resize 4\n");}]
removed string literal ""v_resize 4\n""

line 257: [    return array;]

line 258: [}]

line 259: []

line 260: [float vector_array(void *self){]
found func vector_array



sig1 = float vector_array(void *self)
sig2 = (void *self)
found param self

line 261: [    assert_type(self,typeof_vector); ]
found reference to self
currentFunc = vector_array
ref self is REF_STACK

line 262: [    return self[1];]

line 263: [}]

line 264: [ZVECTOR_CONSTANTS:]
found label ZVECTOR_CONSTANTS

line 265: [typeof_vector:db "vector"; db 0;]
removed string literal ""vector""
found label typeof_vector

line 266: [ZVECTOR_VARS:]
found label ZVECTOR_VARS

line 267: [ZVECTOR_END:]
found label ZVECTOR_END

line 268: [#endif]

line 269: []

line 171: [#include <cyclone/libs/zstring.txt>]
found include <cyclone/libs/zstring.txt>
reading file cyclone/libs/zstring.txt

line 1: [//written a long time ago]

line 2: [//last updated August 13th 2015]

line 3: [//string library]

line 4: [//requires <zvector.txt>]

line 5: [#ifndef ZSTRING_GUARD]
#ifndef "ZSTRING_GUARD" (undefined)

line 6: [#define ZSTRING_GUARD]
#defined "ZSTRING_GUARD"

line 7: [#include <cyclone/libs/zvector.txt>]
found include <cyclone/libs/zvector.txt>
reading file cyclone/libs/zvector.txt

line 1: [//written a long time ago]

line 2: [//last updated August 13th 2015]

line 3: [//vector library]

line 4: []

line 5: [// [vector]]

line 6: [// type   vector       //magic value to id this as an object of class vector]

line 7: [// ptr*   array        //pointer to internal array]

line 8: [// int    size         //number of elements currently in array]

line 9: [// int    capacity     //number of elements that the space is reserved for]

line 10: [// int    element_size //size, in bytes, of a single element]

line 11: [// ------------------------]

line 12: [// funcs: ]

line 13: [// void   vector_constructor(self, element_size) //create the vector]

line 14: [// void   vector_clear(self)                     //delete all elements]

line 15: [// void   vector_push(self, element)             //add an element to the end (by value if size=1, else by ref)]

line 16: [// float  vector_pop(self, element)              //return element by pointer]

line 17: [// int    vector_size(self)                      //size of the vector]

line 18: [// float  vector_get(self,element,pos)           //return element at position]

line 19: [// void   vector_set(self,element,pos)           //set element at position to new value]

line 20: [// void   vector_insert(self,element,pos)        //insert an element, moving the rest forward]

line 21: [// float  vector_remove(self,element,pos)        //remove an element, moving the rest back]

line 22: [// void   vector_resize(self, new_size)          //resize the vector's internal storage]

line 23: [// ptr    vector_array(self)                     //pointer to the internal array]

line 24: [#ifndef ZVECTOR_GUARD]
#ifndef "ZVECTOR_GUARD" (defined)

line 25: [#define ZVECTOR_GUARD]

line 26: [ZVECTOR_CODE:]

line 27: [//void *memcpy2(void *dest, void *src, float n) {]

line 28: [//    float I;]

line 29: [//    if(dest < src){]

line 30: [//        for(I = 0; I < n; I++){]

line 31: [//            dest[I] = src[I];]

line 32: [//        }]

line 33: [//    }else{]

line 34: [//        for(I = n-1; I > -1; I--){]

line 35: [//            dest[I] = src[I];]

line 36: [//        }]

line 37: [//    }]

line 38: [//}]

line 39: []

line 40: [float error(float errno){]

line 41: [    Perr("Vector error ");Perr(num2str(errno));Perr("\n");]
removed string literal ""Vector error ""
removed string literal ""\n""

line 42: [    //P("VECTOR ERROR ");P(num2str(errno));P("\n");]
removed string literal ""VECTOR ERROR ""
removed string literal ""\n""

line 43: [    //return errno/0;]

line 44: [    shell_panic();]

line 45: [}]

line 46: [float sizeof_vector = 5;]

line 47: []

line 48: [float vector_new(){]

line 49: [    float v = malloc(sizeof_vector);]

line 50: [    vector_constructor(v,1);]

line 51: [    return v;]

line 52: [}]

line 53: []

line 54: [void vector_constructor(void *self, float element_size){]

line 55: [    assert_arity(ecx,2);]

line 56: [    self[0] = typeof_vector;]

line 57: [    //float size = 10*element_size;]

line 58: [    self[1] = malloc(10*element_size);]

line 59: [    self[2] = 0;]

line 60: [    self[3] = 10;]

line 61: [    self[4] = element_size;]

line 62: [}]

line 63: []

line 64: [void vector_copy_constructor(void *self, void *other){]

line 65: [    assert_type(other, typeof_vector);]

line 66: [    //copy the header]

line 67: [    self[0] = other[0];]

line 68: [    self[1] = other[1];]

line 69: [    self[2] = other[2];]

line 70: [    self[3] = other[3];]

line 71: [    self[4] = other[4];]

line 72: [    //copy the data]

line 73: [    float size = self[2]*self[4];]

line 74: [    float newarray = malloc(size);]

line 75: [    float oldarray = self[1];]

line 76: [    memcpy(newarray,oldarray,size);]

line 77: [    self[1] = newarray;]

line 78: [}]

line 79: []

line 80: [float vector_get_array(void *self){assert_type(self,typeof_vector); return self[1];}]

line 81: [float vector_get_size(void *self){assert_type(self,typeof_vector); return self[2];}]

line 82: [float vector_get_capacity(void *self){assert_type(self,typeof_vector); return self[3];}]

line 83: [float vector_get_element_size(void *self){assert_type(self,typeof_vector); return self[4];}]

line 84: [void vector_set_array(void *self, float n){assert_type(self,typeof_vector); self[1] = n;}]

line 85: [void vector_set_size(void *self, float n){assert_type(self,typeof_vector); self[2] = n;}]

line 86: [void vector_set_capacity(void *self, float n){assert_type(self,typeof_vector); self[3] = n;}]

line 87: [void vector_set_element_size(void *self, float n){assert_type(self,typeof_vector); self[4] = n;}]

line 88: []

line 89: [void vector_destructor(void *self){]

line 90: [    assert_type(self,typeof_vector); ]

line 91: [    free(self[1]);]

line 92: [}]

line 93: [void vector_clear(void *self){]

line 94: [    assert_type(self,typeof_vector); ]

line 95: [    float self_size = self[2];]

line 96: [    self_size = 0;]

line 97: [    self[2] = self_size;]

line 98: [}]

line 99: [void vector_push(void *self, void *element){]

line 100: [    assert_arity(ecx, 2);]

line 101: [    assert_type(self,typeof_vector); ]

line 102: [    //if(malloc_test()){return;}else{P("v_push 1\n");}]
removed string literal ""v_push 1\n""

line 103: [    float array = self[1];]

line 104: [    float self_size = self[2];]

line 105: [    float self_capacity = self[3];]

line 106: [    float element_size = self[4];]

line 107: [    //P("v_a: ");P(num2str(array));]
removed string literal ""v_a: ""

line 108: [    //P("\nv_ss: ");P(num2str(self_size));]
removed string literal ""\nv_ss: ""

line 109: [    //P("\nv_sc: ");P(num2str(self_capacity));]
removed string literal ""\nv_sc: ""

line 110: [    //P("\nv_es: ");P(num2str(element_size));P("\n");]
removed string literal ""\nv_es: ""
removed string literal ""\n""

line 111: [    self_size++;]

line 112: [    //if(malloc_test()){return;}else{P("v_push 2\n");}]
removed string literal ""v_push 2\n""

line 113: [    if(self_size > self_capacity){]

line 114: [    //if(malloc_test()){return;}else{P("v_push 3\n");}]
removed string literal ""v_push 3\n""

line 115: [        float newsize = self_capacity+1;]

line 116: [        newsize = newsize*1.5;]

line 117: [        newsize = ceil(newsize);]

line 118: [        array = vector_resize(self, newsize)]

line 119: [    //    P("v new array at ");P(num2str(array));P("\n");]
removed string literal ""v new array at ""
removed string literal ""\n""

line 120: [        if(array == 0){Perr("vector: can\'t resize\n"); return;}]
removed string literal ""vector: can\'t resize\n""

line 121: [    //    if(malloc_test()){return;}else{P("v_push 4\n");}]
removed string literal ""v_push 4\n""

line 122: [    }]

line 123: [    if(element_size == 1){]

line 124: [    //if(malloc_test()){return;}else{P("v_push 5\n");}]
removed string literal ""v_push 5\n""

line 125: [        array[self_size-1] = element;]

line 126: [    //    if(malloc_test()){return;}else{P("v_push 6\n");}]
removed string literal ""v_push 6\n""

line 127: [    }else{]

line 128: [    //  if(malloc_test()){return;}else{P("v_push 7\n");}]
removed string literal ""v_push 7\n""

line 129: [        memcpy2(array+(self_size-1)*element_size, element, element_size);]

line 130: [    //  if(malloc_test()){return;}else{P("v_push 8\n");}]
removed string literal ""v_push 8\n""

line 131: [    }]

line 132: [    //if(malloc_test()){return;}else{P("v_push 9\n");}]
removed string literal ""v_push 9\n""

line 133: [    self[2] = self_size;]

line 134: [    //if(malloc_test()){return;}else{P("v_push 10\n");}]
removed string literal ""v_push 10\n""

line 135: [}]

line 136: []

line 137: [float vector_pop(void *self, void *element){]

line 138: [    assert_type(self,typeof_vector); ]

line 139: [    float array = self[1];]

line 140: [    float self_size = self[2];]

line 141: [    float self_capacity = self[3];]

line 142: [    float element_size = self[4];]

line 143: [    if(self_size <= 0){error(0);}]

line 144: [    if(element != 0){]

line 145: [        memcpy2(element, array+self_size*element_size, element_size);]

line 146: [    }]

line 147: [    float R = array[(self_size-1)*element_size];]

line 148: [    self_size--;]

line 149: [    self[2] = self_size;]

line 150: [    return R;]

line 151: [}]

line 152: []

line 153: [float vector_size(void *self){assert_type(self,typeof_vector); return self[2];}]

line 154: [float vector_disk_size(void *self){assert_type(self,typeof_vector); return self[2]*self[4];}]

line 155: []

line 156: [float vector_get(void *self, void *element, float pos){]

line 157: [    assert_arity(ecx,3);]

line 158: [    assert_type(self,typeof_vector); ]

line 159: [    float array = self[1];]

line 160: [    float self_size = self[2];]

line 161: [    float self_capacity = self[3];]

line 162: [    float element_size = self[4];]

line 163: [    if((pos < 0) || (pos >= self_size)){error(0);}]

line 164: [    if(element != 0){]

line 165: [        memcpy2(element, array+pos*element_size, element_size);]

line 166: [    }]

line 167: [    float R = array[pos*element_size];]

line 168: [    return R;]

line 169: [}]

line 170: []

line 171: [void vector_set(void *self, void *element, float pos){]

line 172: [    assert_arity(ecx,3);]

line 173: [    assert_type(self,typeof_vector); ]

line 174: [    float array = self[1];]

line 175: [    float self_size = self[2];]

line 176: [    float self_capacity = self[3];]

line 177: [    float element_size = self[4];]

line 178: [    if(pos == self_size){vector_push(self,element); return;}]

line 179: [    if((pos < 0) || (pos >= self_size)){error(0);}]

line 180: [    if(element_size == 1){]

line 181: [        array[pos] = element;]

line 182: [    }else{]

line 183: [        memcpy2(array+pos*element_size, element, element_size);]

line 184: [    }]

line 185: [}]

line 186: []

line 187: [void vector_insert(void *self, void *element, float pos){]

line 188: [    assert_arity(ecx,3);]

line 189: [    assert_type(self,typeof_vector); ]

line 190: [    float self_size = self[2];]

line 191: [    float self_capacity = self[3];]

line 192: [    float element_size = self[4];]

line 193: [    if((pos < 0) || (pos > self_size)){error(0);}]

line 194: [    if(pos == self_size){vector_push(self, element);}]

line 195: [    self_size++;]

line 196: [    if(self_size > self_capacity){]

line 197: [        float newsize = self_capacity+1;]

line 198: [        newsize = newsize*1.5;]

line 199: [        newsize = ceil(newsize);]

line 200: [        array = vector_resize(self, newsize)]

line 201: [        if(vector_resize(self, newsize) == 0){]

line 202: [            return;]

line 203: [        }]

line 204: [    }]

line 205: [    float array = self[1];]

line 206: [    //if(malloc_test()){return;}else{P("insert 1\n");}]
removed string literal ""insert 1\n""

line 207: [    memcpy2(array+(pos+1)*element_size, array+(pos)*element_size,self_size-pos-1);]

line 208: [    //if(malloc_test()){return;}else{P("insert 2\n");}]
removed string literal ""insert 2\n""

line 209: [    if(element_size == 1){]

line 210: [        array[pos] = element;]

line 211: [     //   if(malloc_test()){return;}else{P("insert 3\n");}]
removed string literal ""insert 3\n""

line 212: [    }else{]

line 213: [        memcpy2(array+pos*element_size, element, element_size);]

line 214: [       // if(malloc_test()){return;}else{P("insert 4\n");}]
removed string literal ""insert 4\n""

line 215: [    }]

line 216: [    self[2] = self_size;]

line 217: [}]

line 218: []

line 219: [void vector_remove(void *self, float pos){]

line 220: [    assert_arity(ecx,2);]

line 221: [    assert_type(self,typeof_vector); ]

line 222: [    float array = self[1];]

line 223: [    float self_size = self[2];]

line 224: [    float self_capacity = self[3];]

line 225: [    float element_size = self[4];]

line 226: [    if((pos < 0) || (pos > self_size)){error(0);}]

line 227: [    if(pos == self_size){vector_pop(self, 0);return;}]

line 228: [    memcpy2(array+pos*element_size, array+(pos+1)*element_size,self_size-pos);]

line 229: [    self_size--;]

line 230: [    self[2] = self_size;]

line 231: [}]

line 232: []

line 233: [float vector_resize(void *self, float newcap){]

line 234: [    assert_type(self,typeof_vector); ]

line 235: [    //P2("v_resize: ",newcap,"\n");]
removed string literal ""v_resize: ""
removed string literal ""\n""

line 236: [    //if(malloc_test()){return;}else{P("v_resize 1\n");}]
removed string literal ""v_resize 1\n""

line 237: [    float array = self[1];]

line 238: [    float self_size = self[2];]

line 239: [    float self_capacity = self[3];]

line 240: [    float element_size = self[4];]

line 241: [    float oldarray = array;]

line 242: [    //if(malloc_test()){return;}else{P("v_resize 2\n");}]
removed string literal ""v_resize 2\n""

line 243: [    //dbg = 1;]

line 244: [    array = realloc(array, element_size*newcap);]

line 245: [    //dbg = 0;]

line 246: [    //if(malloc_test()){return;}else{P("v_resize 3\n");}]
removed string literal ""v_resize 3\n""

line 247: [    //free(array);]

line 248: [    //array = malloc(element_size*newcap);]

line 249: [    //P2("got ",array,"\n");]
removed string literal ""got ""
removed string literal ""\n""

line 250: [    if(array == 0){return 0;}]

line 251: [    //memcpy(array,oldarray,element_size*self_size);]

line 252: [    self_capacity = newcap;]

line 253: [    self[1] = array;]

line 254: [    self[2] = self_size;]

line 255: [    self[3] = self_capacity;]

line 256: [    //if(malloc_test()){return;}else{P("v_resize 4\n");}]
removed string literal ""v_resize 4\n""

line 257: [    return array;]

line 258: [}]

line 259: []

line 260: [float vector_array(void *self){]

line 261: [    assert_type(self,typeof_vector); ]

line 262: [    return self[1];]

line 263: [}]

line 264: [ZVECTOR_CONSTANTS:]

line 265: [typeof_vector:db "vector"; db 0;]
removed string literal ""vector""

line 266: [ZVECTOR_VARS:]

line 267: [ZVECTOR_END:]

line 268: [#endif]

line 269: []

line 8: [ZSTRING_CODE:]
found label ZSTRING_CODE

line 9: [//--------------------]

line 10: [//c2str_str: alloc 2;]

line 11: [//float c2str(char C){]

line 12: [//    c2str_str[0] = C;]

line 13: [//    c2str_str[1] = 0;]

line 14: [//    return c2str_str;]

line 15: [//}]

line 16: [// [string]]

line 17: [// wraps [vector]]

line 18: [// ---------]

line 19: [// funcs:]

line 20: [// void   string_constructor(self, str)   //construct a string object]

line 21: [// ptr    string_c_str(self)              //pointer to the internal c string]

line 22: [// void   string_clear(self)              //set to empty string]

line 23: [// void   string_adds(self, *string)      //add another string object]

line 24: [// void   string_addc(self, C)            //add a char.]

line 25: [// void   string_addcs(self, *c_string)   //add a null-terminated c-string.]

line 26: [// void   string_addn(self, N)            //add a number.]

line 27: [// float  string_equals(self, *string)    //compare two string objects]

line 28: [// float  string_length(self)             //how many characters are in the string]

line 29: [// ???]

line 30: []

line 31: [void string_constructor(void *self, char *str){]
found func string_constructor



sig1 = void string_constructor(void *self, char *str)
sig2 = (void *self, char *str)
found param self
found param str

line 32: [//    P("sc 0\n");]
removed string literal ""sc 0\n""

line 33: [//    if(malloc_test()){shell_panic();}]

line 34: [//    P("sc 1\n");]
removed string literal ""sc 1\n""

line 35: [    vector_constructor(self, 1);]
found reference to self
currentFunc = string_constructor
ref self is REF_STACK

line 36: [//    if(malloc_test()){shell_panic();}]

line 37: [//    P("sc 2\n");]
removed string literal ""sc 2\n""

line 38: [    float len = strlen(str);]
found local var len (BL = 1)
found reference to str
currentFunc = string_constructor
ref str is REF_STACK

line 39: [//    if(malloc_test()){shell_panic();}]

line 40: [//    P("sc 3\n");]
removed string literal ""sc 3\n""

line 41: [    vector_resize(self, len+1);]
found reference to len
currentFunc = string_constructor
ref len is REF_STACK

line 42: [//    if(malloc_test()){shell_panic();}]

line 43: [//    P("sc 4\n");]
removed string literal ""sc 4\n""

line 44: [    vector_push(self,0);//S[0] = '\0']
removed character literal "'\0'"

line 45: [//    if(malloc_test()){shell_panic();}]

line 46: [//    P("sc 5\n");]
removed string literal ""sc 5\n""

line 47: [    string_addcs(self, str);]
found reference to string_addcs
currentFunc = string_constructor
ref string_addcs is REF_EXT

line 48: [//    if(malloc_test()){shell_panic();}]

line 49: [//    P("sc 6\n");]
removed string literal ""sc 6\n""

line 50: [}]

line 51: [void string_destructor(void *self){]
found func string_destructor



sig1 = void string_destructor(void *self)
sig2 = (void *self)
found param self

line 52: [    vector_destructor(self);]
found reference to vector_destructor
currentFunc = string_destructor
ref vector_destructor is REF_EXT
found reference to self
currentFunc = string_destructor
ref self is REF_STACK

line 53: [}]

line 54: []

line 55: [float string_c_str(void *self){return vector_array(self);}]
found func string_c_str



sig1 = float string_c_str(void *self)
sig2 = (void *self)
found param self
found reference to vector_array
currentFunc = string_c_str
ref vector_array is REF_EXT
found reference to self
currentFunc = string_c_str
ref self is REF_STACK

line 56: [void string_clear(void *self){vector_clear(self); vector_push(self, 0);}]
found func string_clear



sig1 = void string_clear(void *self)
sig2 = (void *self)
found param self
found reference to vector_clear
currentFunc = string_clear
ref vector_clear is REF_EXT
found reference to self
currentFunc = string_clear
ref self is REF_STACK

line 57: [void string_adds(void *self, void *str){string_addcs(self, vector_array(str));}]
found func string_adds



sig1 = void string_adds(void *self, void *str)
sig2 = (void *self, void *str)
found param self
found param str
found reference to self
currentFunc = string_adds
ref self is REF_STACK
found reference to str
currentFunc = string_adds
ref str is REF_STACK

line 58: [void string_addc(void *self, char C){float CEOF = vector_pop(self,0);vector_push(self, C); vector_push(self, CEOF);}//{string_addcs(self, c2str(C));}]
found func string_addc



sig1 = void string_addc(void *self, char C)
sig2 = (void *self, char C)
found param self
found param C
found reference to CEOF
currentFunc = string_addc
ref CEOF is REF_EXT
found reference to self
currentFunc = string_addc
ref self is REF_STACK
found reference to C
currentFunc = string_addc
ref C is REF_STACK

line 59: [void string_addn(void *self, float N){string_addcs(self, num2str(N));}]
found func string_addn



sig1 = void string_addn(void *self, float N)
sig2 = (void *self, float N)
found param self
found param N
found reference to self
currentFunc = string_addn
ref self is REF_STACK
found reference to N
currentFunc = string_addn
ref N is REF_STACK

line 60: [void string_equals(void *self, void *str){return (strcmp(string_c_str(self), string_c_str(str))==0);}]
found func string_equals



sig1 = void string_equals(void *self, void *str)
sig2 = (void *self, void *str)
found param self
found param str
found reference to string_c_str
currentFunc = string_equals
ref string_c_str is REF_EXT
found reference to self
currentFunc = string_equals
ref self is REF_STACK
found reference to str
currentFunc = string_equals
ref str is REF_STACK

line 61: [void string_equals_cs(void *self, char *str){return (strcmp(string_c_str(self), str)==0);}]
found func string_equals_cs



sig1 = void string_equals_cs(void *self, char *str)
sig2 = (void *self, char *str)
found param self
found param str
found reference to self
currentFunc = string_equals_cs
ref self is REF_STACK
found reference to str
currentFunc = string_equals_cs
ref str is REF_STACK

line 62: [void string_length(void *self){return vector_size(self)-1;}]
found func string_length



sig1 = void string_length(void *self)
sig2 = (void *self)
found param self
found reference to vector_size
currentFunc = string_length
ref vector_size is REF_EXT
found reference to self
currentFunc = string_length
ref self is REF_STACK

line 63: [void string_addcs(void *self, char *c_str){]
found func string_addcs



sig1 = void string_addcs(void *self, char *c_str)
sig2 = (void *self, char *c_str)
found param self
found param c_str

line 64: [    float I = 0;]
found local var I (BL = 1)

line 65: [    float C = 0;]
found local var C (BL = 1)

line 66: [    float CEOF = 0;]
found local var CEOF (BL = 1)

line 67: [    string_addcs_loop:]
found label string_addcs_loop

line 68: [    C = c_str[I];]
found reference to C
currentFunc = string_addcs
ref C is REF_STACK
found reference to c_str
currentFunc = string_addcs
ref c_str is REF_STACK
found reference to I
currentFunc = string_addcs
ref I is REF_STACK

line 69: [    if(C != 0){]

line 70: [        CEOF = vector_pop(self,0);]
found reference to self
currentFunc = string_addcs
ref self is REF_STACK

line 71: [        vector_push(self,C);]

line 72: [        vector_push(self,CEOF);   ]

line 73: [        I++;]

line 74: [        goto string_addcs_loop;]
found reference to string_addcs_loop
currentFunc = string_addcs
ref string_addcs_loop is REF_EXT

line 75: [    }    ]

line 76: [}]

line 77: [float string_find_first_of(void *self, char C){]
found func string_find_first_of



sig1 = float string_find_first_of(void *self, char C)
sig2 = (void *self, char C)
found param self
found param C

line 78: [    float I = 0;]
found local var I (BL = 1)

line 79: [    float S = string_c_str(self);]
found local var S (BL = 1)
found reference to self
currentFunc = string_find_first_of
ref self is REF_STACK

line 80: [    float C1 = S[I];]
found local var C1 (BL = 1)
found reference to S
currentFunc = string_find_first_of
ref S is REF_STACK
found reference to I
currentFunc = string_find_first_of
ref I is REF_STACK

line 81: [    while(C1 != 0){]
found reference to C1
currentFunc = string_find_first_of
ref C1 is REF_STACK

line 82: [        if(C1 == C){return I;}]
found reference to C
currentFunc = string_find_first_of
ref C is REF_STACK

line 83: [        I++;]

line 84: [        C1 = S[I];]

line 85: [    }]

line 86: [    return -1;]

line 87: [}]

line 88: []

line 89: [float string_find_last_of(void *self, char C){]
found func string_find_last_of



sig1 = float string_find_last_of(void *self, char C)
sig2 = (void *self, char C)
found param self
found param C

line 90: [    float I = string_length(self)-1;]
found local var I (BL = 1)
found reference to string_length
currentFunc = string_find_last_of
ref string_length is REF_EXT
found reference to self
currentFunc = string_find_last_of
ref self is REF_STACK

line 91: [    float S = string_c_str(self);]
found local var S (BL = 1)

line 92: [    float C1 = S[I];]
found local var C1 (BL = 1)
found reference to S
currentFunc = string_find_last_of
ref S is REF_STACK
found reference to I
currentFunc = string_find_last_of
ref I is REF_STACK

line 93: [    while(I != -1){]

line 94: [        if(C1 == C){return I;}]
found reference to C1
currentFunc = string_find_last_of
ref C1 is REF_STACK
found reference to C
currentFunc = string_find_last_of
ref C is REF_STACK

line 95: [        I--;]

line 96: [        C1 = S[I];]

line 97: [    }]

line 98: [    return -1;]

line 99: [}]

line 100: []

line 101: [float string_substr(void *self, float start1, float count){]
found func string_substr



sig1 = float string_substr(void *self, float start1, float count)
sig2 = (void *self, float start1, float count)
found param self
found param start1
found param count

line 102: [    float S = malloc(sizeof_vector);]
found local var S (BL = 1)

line 103: [    float maxlen = string_length(self);]
found local var maxlen (BL = 1)
found reference to self
currentFunc = string_substr
ref self is REF_STACK

line 104: [    string_constructor(S,"");]
removed string literal """"
found reference to string_constructor
currentFunc = string_substr
ref string_constructor is REF_EXT
found reference to S
currentFunc = string_substr
ref S is REF_STACK

line 105: [    ]

line 106: [    if(count < 0){count = maxlen;}]
found reference to count
currentFunc = string_substr
ref count is REF_STACK
found reference to maxlen
currentFunc = string_substr
ref maxlen is REF_STACK

line 107: [    if(count == 0){return S;}]

line 108: [    float S1 = string_c_str(self);]
found local var S1 (BL = 1)

line 109: [    string_substr_loop:]
found label string_substr_loop

line 110: [    string_addc(S,S1[start1]);]
found reference to string_addc
currentFunc = string_substr
ref string_addc is REF_EXT
found reference to S1
currentFunc = string_substr
ref S1 is REF_STACK
found reference to start1
currentFunc = string_substr
ref start1 is REF_STACK

line 111: [    start1++;]

line 112: [    count--;]

line 113: [    if(count == 0){return S;}]

line 114: [    goto string_substr_loop;]
found reference to string_substr_loop
currentFunc = string_substr
ref string_substr_loop is REF_EXT

line 115: [//    if(end1 > maxlen){end1 = maxlen;}]

line 116: [//    if(end1 == -1){end1 = maxlen;}]

line 117: [//    if(end1 < start1){return S;}]

line 118: [//    float S1 = string_c_str(self);]

line 119: [//    string_substr_loop:]

line 120: [//    string_addc(S,S1[start1]);]

line 121: [//    start1++;]

line 122: [//    if((end1 > start1)||(end1 == start1)){goto string_substr_loop;}]

line 123: [//    return S;]

line 124: [}]

line 125: []

line 126: []

line 127: [ZSTRING_CONSTANTS:]
found label ZSTRING_CONSTANTS

line 128: [ZSTRING_VARS:]
found label ZSTRING_VARS

line 129: [ZSTRING_END:]
found label ZSTRING_END

line 130: [#endif]

line 131: []

line 172: [#include <cyclone/libs/zlist.txt>]
found include <cyclone/libs/zlist.txt>
reading file cyclone/libs/zlist.txt

line 1: [//written a long time ago]

line 2: [//last updated long time ago]

line 3: [//list library]

line 4: [#ifndef ZLIST_GUARD]
#ifndef "ZLIST_GUARD" (undefined)

line 5: [#define ZLIST_GUARD]
#defined "ZLIST_GUARD"

line 6: [ZLIST_CODE:]
found label ZLIST_CODE

line 7: [//[list]]

line 8: [//---------]

line 9: [//float element_size = list[0]; ]

line 10: [//float first = list[1]; ]

line 11: [//list[0] = element_size;]

line 12: [//list[1] = first;]

line 13: [//---------]

line 14: [//node vars:]

line 15: [//float prev = node[0];]

line 16: [//float next = node[1];]

line 17: [//float datas = node[2];]

line 18: [//---------]

line 19: [//note: list[1] and node[1] are both "next"]
removed string literal ""next""

line 20: [//---------]

line 21: [//funcs:]

line 22: [//-constuctor]

line 23: [//-size]

line 24: [//-empty]

line 25: [//-clear]

line 26: [//-push]

line 27: [//-pop]

line 28: [//-get]

line 29: [//-set]

line 30: [//-insert]

line 31: [//-remove]

line 32: [//-splice]

line 33: [//-move]

line 34: [//-destructor]

line 35: [float sizeof_listnode = 3;]
found global var sizeof_listnode

line 36: [float sizeof_list = 2;]
found global var sizeof_list

line 37: []

line 38: [//initialize list structure]

line 39: [void list_constructor(void *list, float new_element_size){]
found func list_constructor



sig1 = void list_constructor(void *list, float new_element_size)
sig2 = (void *list, float new_element_size)
found param list
found param new_element_size

line 40: [  float element_size = list[0]; ]
found local var element_size (BL = 1)
found reference to list
currentFunc = list_constructor
ref list is REF_STACK

line 41: [  float first = list[1];]
found local var first (BL = 1)

line 42: [  element_size = new_element_size;]
found reference to element_size
currentFunc = list_constructor
ref element_size is REF_STACK
found reference to new_element_size
currentFunc = list_constructor
ref new_element_size is REF_STACK

line 43: [  first = 0;]
found reference to first
currentFunc = list_constructor
ref first is REF_STACK

line 44: [  list[0] = element_size;]

line 45: [  list[1] = first;]

line 46: [}]

line 47: []

line 48: [//initialize listnode structure]

line 49: [void listnode_constructor(void *node){]
found func listnode_constructor



sig1 = void listnode_constructor(void *node)
sig2 = (void *node)
found param node

line 50: [  float prev = node[0];]
found local var prev (BL = 1)
found reference to node
currentFunc = listnode_constructor
ref node is REF_STACK

line 51: [  float next = node[1];]
found local var next (BL = 1)

line 52: [  float datas = node[2];]
found local var datas (BL = 1)

line 53: [  prev = 0;]
found reference to prev
currentFunc = listnode_constructor
ref prev is REF_STACK

line 54: [  next = 0;]
found reference to next
currentFunc = listnode_constructor
ref next is REF_STACK

line 55: [  datas = 0;]
found reference to datas
currentFunc = listnode_constructor
ref datas is REF_STACK

line 56: [  node[0] = prev;]

line 57: [  node[1] = next;]

line 58: [  node[2] = datas;]

line 59: [}]

line 60: []

line 61: [//destroy listnode structure (and any children)]

line 62: [void listnode_destructor(void *node){]
found func listnode_destructor



sig1 = void listnode_destructor(void *node)
sig2 = (void *node)
found param node

line 63: [  float prev = node[0];]
found local var prev (BL = 1)
found reference to node
currentFunc = listnode_destructor
ref node is REF_STACK

line 64: [  float next = node[1];]
found local var next (BL = 1)

line 65: [  float datas = node[2];]
found local var datas (BL = 1)

line 66: [  if(next){]
found reference to next
currentFunc = listnode_destructor
ref next is REF_STACK

line 67: [    listnode_destructor(next);]
found reference to listnode_destructor
currentFunc = listnode_destructor
ref listnode_destructor is REF_EXT

line 68: [    free(next);]

line 69: [  }]

line 70: [  free(datas);]
found reference to datas
currentFunc = listnode_destructor
ref datas is REF_STACK

line 71: [  node[0] = prev;]
found reference to prev
currentFunc = listnode_destructor
ref prev is REF_STACK

line 72: [  node[1] = next;]

line 73: [  node[2] = datas;]

line 74: [}]

line 75: []

line 76: [//return the size of a list]

line 77: [float list_size(void *list){]
found func list_size



sig1 = float list_size(void *list)
sig2 = (void *list)
found param list

line 78: [  float element_size = list[0]; ]
found local var element_size (BL = 1)
found reference to list
currentFunc = list_size
ref list is REF_STACK

line 79: [  float first = list[1]; ]
found local var first (BL = 1)

line 80: [  if(first){]
found reference to first
currentFunc = list_size
ref first is REF_STACK

line 81: [    return list_size_helper(first);]
found reference to list_size_helper
currentFunc = list_size
ref list_size_helper is REF_EXT

line 82: [  }else{]

line 83: [    return 0;]

line 84: [  }]

line 85: [  list[0] = element_size;]
found reference to element_size
currentFunc = list_size
ref element_size is REF_STACK

line 86: [  list[1] = first;]

line 87: [}]

line 88: []

line 89: [//(internal) list_size]

line 90: [float list_size_helper(void *node){]
found func list_size_helper



sig1 = float list_size_helper(void *node)
sig2 = (void *node)
found param node

line 91: [  float prev = node[0];]
found local var prev (BL = 1)
found reference to node
currentFunc = list_size_helper
ref node is REF_STACK

line 92: [  float next = node[1];]
found local var next (BL = 1)

line 93: [  float datas = node[2];]
found local var datas (BL = 1)

line 94: [  if(next){]
found reference to next
currentFunc = list_size_helper
ref next is REF_STACK

line 95: [    return list_size_helper(node)+1;]

line 96: [  }else{]

line 97: [    return 1;]

line 98: [  }]

line 99: [  node[0] = prev;]
found reference to prev
currentFunc = list_size_helper
ref prev is REF_STACK

line 100: [  node[1] = next;]

line 101: [  node[2] = datas;]
found reference to datas
currentFunc = list_size_helper
ref datas is REF_STACK

line 102: [}]

line 103: []

line 104: [//is the list empty? 1/0]

line 105: [float list_empty(void *list){return (list_size(list)==0);}]
found func list_empty



sig1 = float list_empty(void *list)
sig2 = (void *list)
found param list
found reference to list_size
currentFunc = list_empty
ref list_size is REF_EXT
found reference to list
currentFunc = list_empty
ref list is REF_STACK

line 106: []

line 107: [//make the list empty]

line 108: [void list_clear(void *list){]
found func list_clear



sig1 = void list_clear(void *list)
sig2 = (void *list)
found param list

line 109: [  float element_size = list[0]; ]
found local var element_size (BL = 1)
found reference to list
currentFunc = list_clear
ref list is REF_STACK

line 110: [  float first = list[1];]
found local var first (BL = 1)

line 111: [  if(first){]
found reference to first
currentFunc = list_clear
ref first is REF_STACK

line 112: [    listnode_destructor(first);]

line 113: [    free(first);]

line 114: [    first = 0;]

line 115: [  }]

line 116: [  list[0] = element_size;]
found reference to element_size
currentFunc = list_clear
ref element_size is REF_STACK

line 117: [  list[1] = first;]

line 118: [} ]

line 119: []

line 120: [//add an element to the end of a list]

line 121: [void list_push(void *list, float *element){]
found func list_push



sig1 = void list_push(void *list, float *element)
sig2 = (void *list, float *element)
found param list
found param element

line 122: [  float element_size = list[0]; ]
found local var element_size (BL = 1)
found reference to list
currentFunc = list_push
ref list is REF_STACK

line 123: [  float first = list[1];]
found local var first (BL = 1)

line 124: [  if(first){]
found reference to first
currentFunc = list_push
ref first is REF_STACK

line 125: [    list_push_helper(list,first,element);]
found reference to list_push_helper
currentFunc = list_push
ref list_push_helper is REF_EXT
found reference to element
currentFunc = list_push
ref element is REF_STACK

line 126: [  }else{]

line 127: [    first = malloc(sizeof_listnode);]
found reference to sizeof_listnode
currentFunc = list_push
ref sizeof_listnode is REF_EXT

line 128: [    listnode_constructor(first);]
found reference to listnode_constructor
currentFunc = list_push
ref listnode_constructor is REF_EXT

line 129: [    list_push_helper(list,first,element);]

line 130: [  }]

line 131: [  list[0] = element_size;]
found reference to element_size
currentFunc = list_push
ref element_size is REF_STACK

line 132: [  list[1] = first;]

line 133: [}]

line 134: []

line 135: [//(internal) list_push]

line 136: [void list_push_helper(void *list, void *node, float *element){]
found func list_push_helper



sig1 = void list_push_helper(void *list, void *node, float *element)
sig2 = (void *list, void *node, float *element)
found param list
found param node
found param element

line 137: [  float prev = node[0];]
found local var prev (BL = 1)
found reference to node
currentFunc = list_push_helper
ref node is REF_STACK

line 138: [  float next = node[1];]
found local var next (BL = 1)

line 139: [  float datas = node[2];]
found local var datas (BL = 1)

line 140: [  float element_size = list[0]; ]
found local var element_size (BL = 1)
found reference to list
currentFunc = list_push_helper
ref list is REF_STACK

line 141: [  float first = list[1];]
found local var first (BL = 1)

line 142: [  if(datas == 0){]
found reference to datas
currentFunc = list_push_helper
ref datas is REF_STACK

line 143: [    datas = malloc(element_size);]
found reference to element_size
currentFunc = list_push_helper
ref element_size is REF_STACK

line 144: [    memcpy(datas,element,element_size);]
found reference to element
currentFunc = list_push_helper
ref element is REF_STACK

line 145: [  }else{]

line 146: [    next = malloc(sizeof_listnode);]
found reference to next
currentFunc = list_push_helper
ref next is REF_STACK

line 147: [    listnode_constructor(next,element_size);]

line 148: [    list_push_helper(list,next,element);]

line 149: [  }]

line 150: [  node[0] = prev;]
found reference to prev
currentFunc = list_push_helper
ref prev is REF_STACK

line 151: [  node[1] = next;]

line 152: [  node[2] = datas;]

line 153: [  list[0] = element_size;]

line 154: [  list[1] = first;]
found reference to first
currentFunc = list_push_helper
ref first is REF_STACK

line 155: [}]

line 156: []

line 157: [//remove and return the element from the end of the list]

line 158: [float list_pop(void *list, float *element){]
found func list_pop



sig1 = float list_pop(void *list, float *element)
sig2 = (void *list, float *element)
found param list
found param element

line 159: [  float element_size = list[0]; ]
found local var element_size (BL = 1)
found reference to list
currentFunc = list_pop
ref list is REF_STACK

line 160: [  float first = list[1];]
found local var first (BL = 1)

line 161: [  if(first){]
found reference to first
currentFunc = list_pop
ref first is REF_STACK

line 162: [    list_pop_helper(list,first,element);]
found reference to list_pop_helper
currentFunc = list_pop
ref list_pop_helper is REF_EXT
found reference to element
currentFunc = list_pop
ref element is REF_STACK

line 163: [  }else{error(0);}]

line 164: [  list[0] = element_size;]
found reference to element_size
currentFunc = list_pop
ref element_size is REF_STACK

line 165: [  list[1] = first;]

line 166: [}]

line 167: []

line 168: [//have the node remove itself from the list]

line 169: [float node_selfdestruct(void *node){]
found func node_selfdestruct



sig1 = float node_selfdestruct(void *node)
sig2 = (void *node)
found param node

line 170: [  float prev = node[0]; ]
found local var prev (BL = 1)
found reference to node
currentFunc = node_selfdestruct
ref node is REF_STACK

line 171: [  float next = node[1];]
found local var next (BL = 1)

line 172: [  float datas = node[2];]
found local var datas (BL = 1)

line 173: [  float P = prev;]
found local var P (BL = 1)
found reference to prev
currentFunc = node_selfdestruct
ref prev is REF_STACK

line 174: [  float P_next = P[1];]
found local var P_next (BL = 1)

line 175: [  listnode_destructor(node); //self_destruct]

line 176: [  free(P_next);]
found reference to P_next
currentFunc = node_selfdestruct
ref P_next is REF_STACK

line 177: [  P_next = 0;]

line 178: [  node[0] = prev;]

line 179: [  node[1] = next;]
found reference to next
currentFunc = node_selfdestruct
ref next is REF_STACK

line 180: [  node[2] = datas;]
found reference to datas
currentFunc = node_selfdestruct
ref datas is REF_STACK

line 181: [}]

line 182: []

line 183: [//(internal) list_pop]

line 184: [float list_pop_helper(void *list, void *node, float *element){]
found func list_pop_helper



sig1 = float list_pop_helper(void *list, void *node, float *element)
sig2 = (void *list, void *node, float *element)
found param list
found param node
found param element

line 185: [  float element_size = list[0]; ]
found local var element_size (BL = 1)
found reference to list
currentFunc = list_pop_helper
ref list is REF_STACK

line 186: [  float first = list[1];]
found local var first (BL = 1)

line 187: [  float prev = node[0];]
found local var prev (BL = 1)
found reference to node
currentFunc = list_pop_helper
ref node is REF_STACK

line 188: [  float next = node[1];]
found local var next (BL = 1)

line 189: [  float datas = node[2];]
found local var datas (BL = 1)

line 190: [  if(next){]
found reference to next
currentFunc = list_pop_helper
ref next is REF_STACK

line 191: [    list_pop_helper(list,next, element);]
found reference to element
currentFunc = list_pop_helper
ref element is REF_STACK

line 192: [  }else{]

line 193: [    if(datas){]
found reference to datas
currentFunc = list_pop_helper
ref datas is REF_STACK

line 194: [      memcpy(element,datas,element_size);]
found reference to element_size
currentFunc = list_pop_helper
ref element_size is REF_STACK

line 195: [      float R = datas[0];]
found local var R (BL = 3)

line 196: [      listnode_destructor(node);]

line 197: [      free(node);]

line 198: [      return R; ]
found reference to R
currentFunc = list_pop_helper
ref R is REF_STACK

line 199: [      //node_selfdestruct(node); //why this]

line 200: [    }else{error(0);}]

line 201: [  }]

line 202: [  node[0] = prev;]
found reference to prev
currentFunc = list_pop_helper
ref prev is REF_STACK

line 203: [  node[1] = next;]

line 204: [  node[2] = datas;]

line 205: [  list[0] = element_size;]

line 206: [  list[1] = first;]
found reference to first
currentFunc = list_pop_helper
ref first is REF_STACK

line 207: [}]

line 208: []

line 209: [//return an element from the list]

line 210: [float list_get(void *list, float *element, float pos){]
found func list_get



sig1 = float list_get(void *list, float *element, float pos)
sig2 = (void *list, float *element, float pos)
found param list
found param element
found param pos

line 211: [  float element_size = list[0]; ]
found local var element_size (BL = 1)
found reference to list
currentFunc = list_get
ref list is REF_STACK

line 212: [  float first = list[1];]
found local var first (BL = 1)

line 213: [  if(first){]
found reference to first
currentFunc = list_get
ref first is REF_STACK

line 214: [    return list_get_helper(list,first,element,pos);]
found reference to list_get_helper
currentFunc = list_get
ref list_get_helper is REF_EXT
found reference to element
currentFunc = list_get
ref element is REF_STACK
found reference to pos
currentFunc = list_get
ref pos is REF_STACK

line 215: [  }else{error(0);}]

line 216: [  list[0] = element_size;]
found reference to element_size
currentFunc = list_get
ref element_size is REF_STACK

line 217: [  list[1] = first;]

line 218: [}]

line 219: []

line 220: [//(internal) list_get]

line 221: [float list_get_helper(void *list, void *node, void *element, float pos){]
found func list_get_helper



sig1 = float list_get_helper(void *list, void *node, void *element, float pos)
sig2 = (void *list, void *node, void *element, float pos)
found param list
found param node
found param element
found param pos

line 222: [  float element_size = list[0]; ]
found local var element_size (BL = 1)
found reference to list
currentFunc = list_get_helper
ref list is REF_STACK

line 223: [  float first = list[1];]
found local var first (BL = 1)

line 224: [  float prev = node[0];]
found local var prev (BL = 1)
found reference to node
currentFunc = list_get_helper
ref node is REF_STACK

line 225: [  float next = node[1];]
found local var next (BL = 1)

line 226: [  float datas = node[2];]
found local var datas (BL = 1)

line 227: [  if(pos == 0){]
found reference to pos
currentFunc = list_get_helper
ref pos is REF_STACK

line 228: [    if(element_size > 1){]
found reference to element_size
currentFunc = list_get_helper
ref element_size is REF_STACK

line 229: [      if(datas != 0){]
found reference to datas
currentFunc = list_get_helper
ref datas is REF_STACK

line 230: [          memcpy(element,datas,element_size);]
found reference to element
currentFunc = list_get_helper
ref element is REF_STACK

line 231: [      }else{]

line 232: [        error(0);]

line 233: [      }]

line 234: [    }else{]

line 235: [      return datas;]

line 236: [    }]

line 237: [  }else{]

line 238: [    if(next != 0){]
found reference to next
currentFunc = list_get_helper
ref next is REF_STACK

line 239: [      list_get_helper(list,next,element, pos-1);]

line 240: [    }else{]

line 241: [      error(0);]

line 242: [    }]

line 243: [  }]

line 244: [  node[0] = prev;]
found reference to prev
currentFunc = list_get_helper
ref prev is REF_STACK

line 245: [  node[1] = next;]

line 246: [  node[2] = datas;]

line 247: [  list[0] = element_size;]

line 248: [  list[1] = first;]
found reference to first
currentFunc = list_get_helper
ref first is REF_STACK

line 249: [}]

line 250: []

line 251: [//set an element in the list]

line 252: [void list_set(float *list, float *element, float pos){]
found func list_set



sig1 = void list_set(float *list, float *element, float pos)
sig2 = (float *list, float *element, float pos)
found param list
found param element
found param pos

line 253: [  float element_size = list[0]; ]
found local var element_size (BL = 1)
found reference to list
currentFunc = list_set
ref list is REF_STACK

line 254: [  float first = list[1];]
found local var first (BL = 1)

line 255: [  if(first){]
found reference to first
currentFunc = list_set
ref first is REF_STACK

line 256: [    list_set_helper(list,first,element,pos);]
found reference to list_set_helper
currentFunc = list_set
ref list_set_helper is REF_EXT
found reference to element
currentFunc = list_set
ref element is REF_STACK
found reference to pos
currentFunc = list_set
ref pos is REF_STACK

line 257: [  }else{error(0);}]

line 258: [  list[0] = element_size;]
found reference to element_size
currentFunc = list_set
ref element_size is REF_STACK

line 259: [  list[1] = first;]

line 260: [}]

line 261: []

line 262: [//(internal) list_set]

line 263: [void list_set_helper(void *list, void *node, float *element, float pos){]
found func list_set_helper



sig1 = void list_set_helper(void *list, void *node, float *element, float pos)
sig2 = (void *list, void *node, float *element, float pos)
found param list
found param node
found param element
found param pos

line 264: [  float element_size = list[0]; ]
found local var element_size (BL = 1)
found reference to list
currentFunc = list_set_helper
ref list is REF_STACK

line 265: [  float first = list[1];]
found local var first (BL = 1)

line 266: [  float prev = node[0];]
found local var prev (BL = 1)
found reference to node
currentFunc = list_set_helper
ref node is REF_STACK

line 267: [  float next = node[1];]
found local var next (BL = 1)

line 268: [  float datas = node[2];]
found local var datas (BL = 1)

line 269: [  if(pos == 0){]
found reference to pos
currentFunc = list_set_helper
ref pos is REF_STACK

line 270: [    if(element_size > 1){]
found reference to element_size
currentFunc = list_set_helper
ref element_size is REF_STACK

line 271: [      if(datas != 0){]
found reference to datas
currentFunc = list_set_helper
ref datas is REF_STACK

line 272: [        memcpy(datas,element,element_size);]
found reference to element
currentFunc = list_set_helper
ref element is REF_STACK

line 273: [      }else{]

line 274: [        error(0);]

line 275: [      }]

line 276: [    }else{]

line 277: [       datas = element;]

line 278: [    }]

line 279: [  }else{]

line 280: [    if(next != 0){]
found reference to next
currentFunc = list_set_helper
ref next is REF_STACK

line 281: [      list_set_helper(list,next, element, pos-1);]

line 282: [    }else{]

line 283: [      error(0);]

line 284: [    }]

line 285: [  }]

line 286: [  node[0] = prev;]
found reference to prev
currentFunc = list_set_helper
ref prev is REF_STACK

line 287: [  node[1] = next;]

line 288: [  node[2] = datas;]

line 289: [  list[0] = element_size;]

line 290: [  list[1] = first;]
found reference to first
currentFunc = list_set_helper
ref first is REF_STACK

line 291: [}]

line 292: []

line 293: [//insert an element into the list, moving existing elements forward]

line 294: [void list_insert(void *list, float *element, float pos){]
found func list_insert



sig1 = void list_insert(void *list, float *element, float pos)
sig2 = (void *list, float *element, float pos)
found param list
found param element
found param pos

line 295: [  float element_size = list[0]; ]
found local var element_size (BL = 1)
found reference to list
currentFunc = list_insert
ref list is REF_STACK

line 296: [  float first = list[1];]
found local var first (BL = 1)

line 297: [  if(first != 0){]
found reference to first
currentFunc = list_insert
ref first is REF_STACK

line 298: [    list_insert_helper(list, first, element, pos);]
found reference to list_insert_helper
currentFunc = list_insert
ref list_insert_helper is REF_EXT
found reference to element
currentFunc = list_insert
ref element is REF_STACK
found reference to pos
currentFunc = list_insert
ref pos is REF_STACK

line 299: [  }else{error(0);}]

line 300: [  list[0] = element_size;]
found reference to element_size
currentFunc = list_insert
ref element_size is REF_STACK

line 301: [  list[1] = first;]

line 302: [}]

line 303: []

line 304: [//(internal) list_insert]

line 305: [void list_insert_helper(void *list, void *node, float *element, float pos){]
found func list_insert_helper



sig1 = void list_insert_helper(void *list, void *node, float *element, float pos)
sig2 = (void *list, void *node, float *element, float pos)
found param list
found param node
found param element
found param pos

line 306: [  float prev = node[0];]
found local var prev (BL = 1)
found reference to node
currentFunc = list_insert_helper
ref node is REF_STACK

line 307: [  float next = node[1];]
found local var next (BL = 1)

line 308: [  float datas = node[2];]
found local var datas (BL = 1)

line 309: [  float element_size = list[0]; ]
found local var element_size (BL = 1)
found reference to list
currentFunc = list_insert_helper
ref list is REF_STACK

line 310: [  float first = list[1];]
found local var first (BL = 1)

line 311: [  if(pos == 0){]
found reference to pos
currentFunc = list_insert_helper
ref pos is REF_STACK

line 312: [    if(prev != 0){]
found reference to prev
currentFunc = list_insert_helper
ref prev is REF_STACK

line 313: [      float P_next = prev[1]; //aka, node]
found local var P_next (BL = 3)

line 314: [      float P_next_old = P_next;]
found local var P_next_old (BL = 3)
found reference to P_next
currentFunc = list_insert_helper
ref P_next is REF_STACK

line 315: [      P_next = malloc(sizeof_listnode);]

line 316: [      listnode_constructor(P_next);]

line 317: [      prev[1] = P_next;]

line 318: [      float P_next_prev = P_next[0];]
found local var P_next_prev (BL = 3)

line 319: [      float P_next_next = P_next[1];]
found local var P_next_next (BL = 3)

line 320: [      P_next_prev = prev;]
found reference to P_next_prev
currentFunc = list_insert_helper
ref P_next_prev is REF_STACK

line 321: [      P_next_next = P_next_old; //aka, node]
found reference to P_next_next
currentFunc = list_insert_helper
ref P_next_next is REF_STACK
found reference to P_next_old
currentFunc = list_insert_helper
ref P_next_old is REF_STACK

line 322: [      P_next[0] = P_next_prev;]

line 323: [      P_next[1] = P_next_next;]

line 324: [    }else{]

line 325: [      error(0);]

line 326: [    }]

line 327: [  }else{]

line 328: [    if(next != 0){]
found reference to next
currentFunc = list_insert_helper
ref next is REF_STACK

line 329: [      list_insert_helper(list,next,element,pos-1);]
found reference to element
currentFunc = list_insert_helper
ref element is REF_STACK

line 330: [    }else{]

line 331: [      if(pos == 1){]

line 332: [        list_push(list, element);]
found reference to list_push
currentFunc = list_insert_helper
ref list_push is REF_EXT

line 333: [      }else{]

line 334: [        error(0);]

line 335: [      }]

line 336: [    }]

line 337: [  }]

line 338: [  node[0] = prev;]

line 339: [  node[1] = next;]

line 340: [  node[2] = datas;]
found reference to datas
currentFunc = list_insert_helper
ref datas is REF_STACK

line 341: [  list[0] = element_size;]
found reference to element_size
currentFunc = list_insert_helper
ref element_size is REF_STACK

line 342: [  list[1] = first;]
found reference to first
currentFunc = list_insert_helper
ref first is REF_STACK

line 343: [}]

line 344: []

line 345: [//remove an element from the list, returning it, and moving]

line 346: [//existing elements back]

line 347: [void list_remove(void *list, float *element, float pos){]
found func list_remove



sig1 = void list_remove(void *list, float *element, float pos)
sig2 = (void *list, float *element, float pos)
found param list
found param element
found param pos

line 348: [  float element_size = list[0]; ]
found local var element_size (BL = 1)
found reference to list
currentFunc = list_remove
ref list is REF_STACK

line 349: [  float first = list[1];]
found local var first (BL = 1)

line 350: [  if(first != 0){]
found reference to first
currentFunc = list_remove
ref first is REF_STACK

line 351: [    list_remove_helper(list, first, element, pos);]
found reference to list_remove_helper
currentFunc = list_remove
ref list_remove_helper is REF_EXT
found reference to element
currentFunc = list_remove
ref element is REF_STACK
found reference to pos
currentFunc = list_remove
ref pos is REF_STACK

line 352: [  }else{error(0);}]

line 353: [  list[0] = element_size;]
found reference to element_size
currentFunc = list_remove
ref element_size is REF_STACK

line 354: [  list[1] = first;]

line 355: [}]

line 356: []

line 357: []

line 358: [//(internal) list_remove]

line 359: [void list_remove_helper(void *list, void* node, float *element, float pos){]
found func list_remove_helper



sig1 = void list_remove_helper(void *list, void* node, float *element, float pos)
sig2 = (void *list, void* node, float *element, float pos)
found param list
found param node
found param element
found param pos

line 360: [  float prev = node[0];]
found local var prev (BL = 1)
found reference to node
currentFunc = list_remove_helper
ref node is REF_STACK

line 361: [  float next = node[1];]
found local var next (BL = 1)

line 362: [  float datas = node[2];]
found local var datas (BL = 1)

line 363: [  float element_size = list[0]; ]
found local var element_size (BL = 1)
found reference to list
currentFunc = list_remove_helper
ref list is REF_STACK

line 364: [  float first = list[1];]
found local var first (BL = 1)

line 365: [  if(pos == 0){]
found reference to pos
currentFunc = list_remove_helper
ref pos is REF_STACK

line 366: [    if(prev != 0){]
found reference to prev
currentFunc = list_remove_helper
ref prev is REF_STACK

line 367: [        //we are at the node that needs removing]

line 368: [        free(datas);]
found reference to datas
currentFunc = list_remove_helper
ref datas is REF_STACK

line 369: [        float oldprev = prev;]
found local var oldprev (BL = 3)

line 370: [        float oldnext = next;]
found local var oldnext (BL = 3)
found reference to next
currentFunc = list_remove_helper
ref next is REF_STACK

line 371: [        free(node);]

line 372: [        float oldprev_next = oldprev[1];]
found local var oldprev_next (BL = 3)
found reference to oldprev
currentFunc = list_remove_helper
ref oldprev is REF_STACK

line 373: [        float oldnext_prev = 0;]
found local var oldnext_prev (BL = 3)

line 374: [        if(oldnext != 0){oldnext_prev = oldnext[0];}]
found reference to oldnext
currentFunc = list_remove_helper
ref oldnext is REF_STACK
found reference to oldnext_prev
currentFunc = list_remove_helper
ref oldnext_prev is REF_STACK

line 375: [        oldprev_next = oldnext;]
found reference to oldprev_next
currentFunc = list_remove_helper
ref oldprev_next is REF_STACK

line 376: [        oldnext_prev = oldprev;]

line 377: [        oldprev[1] = oldprev_next;]

line 378: [        if(oldnext != 0){oldnext[0] = oldnext_prev;}]

line 379: [    }else{]

line 380: [      error(0);]

line 381: [    }]

line 382: [  }else{]

line 383: [    if(next != 0){]

line 384: [      list_remove_helper(list, next, element, pos-1);]
found reference to element
currentFunc = list_remove_helper
ref element is REF_STACK

line 385: [    }else{]

line 386: [      if(pos == 1){]

line 387: [        list_pop(list, element);]
found reference to list_pop
currentFunc = list_remove_helper
ref list_pop is REF_EXT

line 388: [      }else{]

line 389: [        error(0);]

line 390: [      }]

line 391: [    }]

line 392: [  }]

line 393: [  node[0] = prev;]

line 394: [  node[1] = next;]

line 395: [  node[2] = datas;]

line 396: [  list[0] = element_size;]
found reference to element_size
currentFunc = list_remove_helper
ref element_size is REF_STACK

line 397: [  list[1] = first;]
found reference to first
currentFunc = list_remove_helper
ref first is REF_STACK

line 398: [}]

line 399: []

line 400: [//returns a pointer to the node pos in the list.]

line 401: [float list_getnode(void *list, float pos){]
found func list_getnode



sig1 = float list_getnode(void *list, float pos)
sig2 = (void *list, float pos)
found param list
found param pos

line 402: [    float element_size = list[0];]
found local var element_size (BL = 1)
found reference to list
currentFunc = list_getnode
ref list is REF_STACK

line 403: [    float first = list[1];]
found local var first (BL = 1)

line 404: [    ]

line 405: [    float node = first;]
found local var node (BL = 1)
found reference to first
currentFunc = list_getnode
ref first is REF_STACK

line 406: [    while(pos != 0){]
found reference to pos
currentFunc = list_getnode
ref pos is REF_STACK

line 407: [      float next = node[1];]
found local var next (BL = 2)
found reference to node
currentFunc = list_getnode
ref node is REF_STACK

line 408: [      if(next == 0){error(0);}]
found reference to next
currentFunc = list_getnode
ref next is REF_STACK

line 409: [      node = next;]

line 410: [      pos = pos - 1;]

line 411: [    }]

line 412: [    return node;]

line 413: [}]

line 414: []

line 415: [//cut an element from one list and paste it into the other list,]

line 416: [//without moving the actual data]

line 417: [//node at posfrom will be inserted after the node posto.]

line 418: [void list_splice(void *listfrom, void *listto, float posfrom, float posto){]
found func list_splice



sig1 = void list_splice(void *listfrom, void *listto, float posfrom, float posto)
sig2 = (void *listfrom, void *listto, float posfrom, float posto)
found param listfrom
found param listto
found param posfrom
found param posto

line 419: [  float element_size1 = listfrom[0]; ]
found local var element_size1 (BL = 1)
found reference to listfrom
currentFunc = list_splice
ref listfrom is REF_STACK

line 420: [  float first1 = listfrom[1];]
found local var first1 (BL = 1)

line 421: [  float element_size2 = listto[0]; ]
found local var element_size2 (BL = 1)
found reference to listto
currentFunc = list_splice
ref listto is REF_STACK

line 422: [  float first2 = listto[1];]
found local var first2 (BL = 1)

line 423: [  if(element_size1 != element_size2){error(0);}]
found reference to element_size1
currentFunc = list_splice
ref element_size1 is REF_STACK
found reference to element_size2
currentFunc = list_splice
ref element_size2 is REF_STACK

line 424: [  float nodefrom = list_getnode(listfrom, posfrom);]
found local var nodefrom (BL = 1)
found local var posfrom (BL = 1)

line 425: [  float nodeto = list_getnode(listto, posto);]
found local var nodeto (BL = 1)
found local var posto (BL = 1)

line 426: [  float P1 = nodefrom[0];]
found local var P1 (BL = 1)
found reference to nodefrom
currentFunc = list_splice
ref nodefrom is REF_STACK

line 427: [  float N1 = nodefrom[1];]
found local var N1 (BL = 1)

line 428: [  float N2 = nodeto[1];]
found local var N2 (BL = 1)
found reference to nodeto
currentFunc = list_splice
ref nodeto is REF_STACK

line 429: [  float N2N = N2[1];]
found local var N2N (BL = 1)
found reference to N2
currentFunc = list_splice
ref N2 is REF_STACK

line 430: [  //things that point to nodefrom:]

line 431: [  //1P, 1N]

line 432: [  //1PN = 1, 1NP = 1 (if 1 next)]

line 433: [  //1PN = 1          (if not 1 next)]

line 434: [  //things that point after nodeto:]

line 435: [  //2N = 2N, 2NNP = 2N (if 2 next)]

line 436: [  //2N = 2N            (if not 2 next.next)]

line 437: [  //after the transition:]

line 438: [  //1PN = 1N, 1NP = 1P (if 1 next)]

line 439: [  //1PN = 1N           (if not 1 next) ]

line 440: [  //1P = 2, 1N = 2N]

line 441: [  //2N = 1, 2NNP = 1   (if 2 next.next)]

line 442: [  //2N = 1             (if not 2 next.next)]

line 443: [  float P1N = P1[1];]
found local var P1N (BL = 1)
found reference to P1
currentFunc = list_splice
ref P1 is REF_STACK

line 444: [  if(N1 != 0){]
found reference to N1
currentFunc = list_splice
ref N1 is REF_STACK

line 445: [    P1N = N1;]
found reference to P1N
currentFunc = list_splice
ref P1N is REF_STACK

line 446: [    P1[1] = P1N;]

line 447: [    ]

line 448: [    float N1P = N1[0];]
found local var N1P (BL = 2)

line 449: [    N1P = P1;]
found reference to N1P
currentFunc = list_splice
ref N1P is REF_STACK

line 450: [    N1[0] = N1P;]

line 451: [  }else{]

line 452: [    P1N = N1;]

line 453: [    P1[1] = P1N;]

line 454: [  }]

line 455: [  P1 = nodeto;]

line 456: [  nodefrom[0] = P1;]

line 457: [  N1 = N2;]

line 458: [  nodefrom[1] = N1;]

line 459: [  if(N2N != 0){]
found reference to N2N
currentFunc = list_splice
ref N2N is REF_STACK

line 460: [    N2 = nodefrom;]

line 461: [    nodeto[1] = N2;]

line 462: [    ]

line 463: [    float N2NP = N2N[0];]
found local var N2NP (BL = 2)

line 464: [    N2NP = nodefrom;]
found reference to N2NP
currentFunc = list_splice
ref N2NP is REF_STACK

line 465: [    N2N[0] = N2NP;]

line 466: [  }else{]

line 467: [    N2 = nodefrom;]

line 468: [    nodeto[1] = N2;]

line 469: [  }]

line 470: [  //that's all I guess?]

line 471: [}]

line 472: []

line 473: [//move an element in memory while keeping it at the same position]

line 474: [//in the list]

line 475: [void list_move(void *list, float pos, float *newnode, float *newdatas){]
found func list_move



sig1 = void list_move(void *list, float pos, float *newnode, float *newdatas)
sig2 = (void *list, float pos, float *newnode, float *newdatas)
found param list
found param pos
found param newnode
found param newdatas

line 476: [  float node = list_getnode(list, pos);]
found local var node (BL = 1)
found local var pos (BL = 1)

line 477: [  float element_size = list[0];]
found local var element_size (BL = 1)
found reference to list
currentFunc = list_move
ref list is REF_STACK

line 478: [  float datas = node[2];]
found local var datas (BL = 1)
found reference to node
currentFunc = list_move
ref node is REF_STACK

line 479: [  if(newnode != 0){]
found reference to newnode
currentFunc = list_move
ref newnode is REF_STACK

line 480: [    memcpy(newnode,node,sizeof_listnode);]

line 481: [    node = newnode;]

line 482: [  }]

line 483: [  if(newdatas != 0){]
found reference to newdatas
currentFunc = list_move
ref newdatas is REF_STACK

line 484: [    memcpy(datas,newdatas,element_size);]
found reference to datas
currentFunc = list_move
ref datas is REF_STACK
found reference to element_size
currentFunc = list_move
ref element_size is REF_STACK

line 485: [    datas = newdatas;]

line 486: [  }]

line 487: [  node[2] = datas;]

line 488: [}]

line 489: []

line 490: [//destroy the list]

line 491: [void list_destructor(void *list){]
found func list_destructor



sig1 = void list_destructor(void *list)
sig2 = (void *list)
found param list

line 492: [  float element_size = list[0]; ]
found local var element_size (BL = 1)
found reference to list
currentFunc = list_destructor
ref list is REF_STACK

line 493: [  float first = list[1];]
found local var first (BL = 1)

line 494: [  if(first != 0){listnode_destructor(first);}]
found reference to first
currentFunc = list_destructor
ref first is REF_STACK

line 495: [  list[0] = element_size;]
found reference to element_size
currentFunc = list_destructor
ref element_size is REF_STACK

line 496: [  list[1] = first;]

line 497: [}]

line 498: [//--------]

line 499: [ZLIST_CONSTANTS:]
found label ZLIST_CONSTANTS

line 500: [ZLIST_VARS:]
found label ZLIST_VARS

line 501: [ZLIST_END:]
found label ZLIST_END

line 502: [#endif]

line 503: []

line 173: [#define STRINGTRACKER_TEST]
#defined "STRINGTRACKER_TEST"

line 174: [#include <cyclone/libs/libkeyboard.txt>]
found include <cyclone/libs/libkeyboard.txt>
reading file cyclone/libs/libkeyboard.txt

line 1: [//#define ptrKB 70536 or similar in master program]

line 2: [#ifndef LIBKEYBOARD_GUARD]
#ifndef "LIBKEYBOARD_GUARD" (undefined)

line 3: [#define LIBKEYBOARD_GUARD]
#defined "LIBKEYBOARD_GUARD"

line 4: [// key table stolen from Yevano's keyboard driver.]

line 5: [#define KEY_TAB       9]
#defined "KEY_TAB"

line 6: [#define KEY_ENTER     13]
#defined "KEY_ENTER"

line 7: [#define KEY_UP        17]
#defined "KEY_UP"

line 8: [#define KEY_DOWN      18]
#defined "KEY_DOWN"

line 9: [#define KEY_LEFT      19]
#defined "KEY_LEFT"

line 10: [#define KEY_RIGHT     20]
#defined "KEY_RIGHT"

line 11: [#define KEY_BACKSPACE 127]
#defined "KEY_BACKSPACE"

line 12: [#define KEY_INSERT    147]
#defined "KEY_INSERT"

line 13: [#define KEY_DELETE    148]
#defined "KEY_DELETE"

line 14: [#define KEY_HOME      149]
#defined "KEY_HOME"

line 15: [#define KEY_END       150]
#defined "KEY_END"

line 16: [#define KEY_PAGE_UP   151]
#defined "KEY_PAGE_UP"

line 17: [#define KEY_PAGE_DOWN 152]
#defined "KEY_PAGE_DOWN"

line 18: [#define KEY_SHIFT     154]
#defined "KEY_SHIFT"

line 19: [#define KEY_CTRL      158]
#defined "KEY_CTRL"

line 20: [LIBKEYBOARD_CODE:]
found label LIBKEYBOARD_CODE

line 21: [float ptrKB;]
found global var ptrKB

line 22: [// sets the address of the keyboard]

line 23: [void setKeyboard(float ptr){]
found func setKeyboard



sig1 = void setKeyboard(float ptr)
sig2 = (float ptr)
found param ptr

line 24: [    ptrKB = ptr;]
found reference to ptrKB
currentFunc = setKeyboard
ref ptrKB is REF_EXT
found reference to ptr
currentFunc = setKeyboard
ref ptr is REF_STACK

line 25: [}]

line 26: []

line 27: [// returns if a key is a printable character.]

line 28: [float isPrint1(char c){]
found func isPrint1



sig1 = float isPrint1(char c)
sig2 = (char c)
found param c

line 29: [    return (c > 31) && (c < 127);]
found reference to c
currentFunc = isPrint1
ref c is REF_STACK

line 30: [}]

line 31: []

line 32: [// reads a single key and removes it from kb buffer.]

line 33: [char readKey(){]
found func readKey



sig1 = char readKey()
sig2 = ()

line 34: [    char C = *(ptrKB+1);]
found local var C (BL = 1)

line 35: [    *ptrKB = 0;]

line 36: [    return C;]
found reference to C
currentFunc = readKey
ref C is REF_STACK

line 37: [}]

line 38: []

line 39: [// tells whether or not a key is waiting to be read, but does not read it.]

line 40: [float hasKey(){return *ptrKB;}]
found func hasKey



sig1 = float hasKey()
sig2 = ()

line 41: []

line 42: [// calls custom func for every key currently present in keyboard buffer.]

line 43: [void readKB(void *func){]
found func readKB



sig1 = void readKB(void *func)
sig2 = (void *func)
found param func

line 44: [    while(hasKey()){]
found reference to hasKey
currentFunc = readKB
ref hasKey is REF_EXT

line 45: [        func(readKey());]
found reference to func
currentFunc = readKB
ref func is REF_STACK
found reference to readKey
currentFunc = readKB
ref readKey is REF_EXT

line 46: [    }]

line 47: [}]

line 48: []

line 49: [// waits until a key is pressed.]

line 50: [char waitKey(){]
found func waitKey



sig1 = char waitKey()
sig2 = ()

line 51: [    while(!hasKey()){thread_yield();}]
found reference to thread_yield
currentFunc = waitKey
ref thread_yield is REF_EXT

line 52: [    return readKey();]

line 53: [}]

line 54: []

line 55: [// returns a character the first time it is pressed,]

line 56: [// then, after a delay, every repeat_time seconds]

line 57: [float readKeyTimed_delay_time = 0.5;]
found global var readKeyTimed_delay_time

line 58: [float readKeyTimed_repeat_time = 0.1;]
found global var readKeyTimed_repeat_time

line 59: [float readKeyTimed_keyState = 0; //0 - not seen yet, 1 - seen once, 2 - seen twice or more]
found global var readKeyTimed_keyState

line 60: [float readKeyTimed_lastSeen = 0; //last time this function returned a key]
found global var readKeyTimed_lastSeen

line 61: [float readKeyTimed_lastKey = 0;]
found global var readKeyTimed_lastKey

line 62: [ char readKeyTimed(){]
found func readKeyTimed



sig1 = char readKeyTimed()
sig2 = ()

line 63: [    //char C = ptrKB[1];]

line 64: [    float T;]
found local var T (BL = 1)

line 65: [    if(ptrKB[0]){]

line 66: [        char C = ptrKB[ptrKB[0]];]
found local var C (BL = 2)

line 67: [        if((readKeyTimed_keyState == 0) || (C != readKeyTimed_lastKey)){]
found reference to readKeyTimed_keyState
currentFunc = readKeyTimed
ref readKeyTimed_keyState is REF_EXT
found reference to C
currentFunc = readKeyTimed
ref C is REF_STACK
found reference to readKeyTimed_lastKey
currentFunc = readKeyTimed
ref readKeyTimed_lastKey is REF_EXT

line 68: [            timer eax;]

line 69: [            readKeyTimed_lastSeen = eax;]
found reference to readKeyTimed_lastSeen
currentFunc = readKeyTimed
ref readKeyTimed_lastSeen is REF_EXT

line 70: [            readKeyTimed_lastKey = C;]

line 71: [            readKeyTimed_keyState = 1;]

line 72: [            return C;]

line 73: [        }]

line 74: [        if(readKeyTimed_keyState == 1){]

line 75: [            timer eax;]

line 76: [            T = eax;]
found reference to T
currentFunc = readKeyTimed
ref T is REF_STACK

line 77: [            if((T - readKeyTimed_lastSeen) > readKeyTimed_delay_time){]
found reference to readKeyTimed_delay_time
currentFunc = readKeyTimed
ref readKeyTimed_delay_time is REF_EXT

line 78: [                readKeyTimed_lastSeen = T;]

line 79: [                readKeyTimed_keyState = 2;]

line 80: [                return C;]

line 81: [            }]

line 82: [            return 0;]

line 83: [        }]

line 84: [        if(readKeyTimed_keyState == 2){]

line 85: [            timer eax;]

line 86: [            T = eax;]

line 87: [            if((T - readKeyTimed_lastSeen) > readKeyTimed_repeat_time){]
found reference to readKeyTimed_repeat_time
currentFunc = readKeyTimed
ref readKeyTimed_repeat_time is REF_EXT

line 88: [                readKeyTimed_lastSeen = T;]

line 89: [                return C;]

line 90: [            }]

line 91: [            return 0;]

line 92: [        }]

line 93: [    }]

line 94: [    readKeyTimed_keyState = 0;]

line 95: [    return 0;]

line 96: [}]

line 97: []

line 98: [// Reads a single line from keyboard (until ENTER or 63 chars).]

line 99: [strLinebuff: alloc 64;]
found label strLinebuff

line 100: [char* readline()]
found func readline



sig1 = char* readline()
sig2 = ()

line 101: [{]

line 102: [    char C = waitKey();]
found local var C (BL = 1)
found reference to waitKey
currentFunc = readline
ref waitKey is REF_EXT

line 103: [    float P = strLineBuff;]
found local var P (BL = 1)
found reference to strLineBuff
currentFunc = readline
ref strLineBuff is REF_EXT

line 104: [    while((C != KEY_ENTER) && (P < strLinebuff+63))]
found reference to C
currentFunc = readline
ref C is REF_STACK

line 105: [    {]

line 106: [        *P++ = C;]

line 107: [        C = waitKey();]

line 108: [    }]

line 109: [    *P = 0;]

line 110: [    return strLinebuff;]

line 111: [}]

line 112: [LIBKEYBOARD_CONSTANTS:]
found label LIBKEYBOARD_CONSTANTS

line 113: [LIBKEYBOARD_VARS:]
found label LIBKEYBOARD_VARS

line 114: [LIBKEYBOARD_END:]
found label LIBKEYBOARD_END

line 115: [#endif]

line 116: []

line 175: []

line 176: [//#include <cyclone/libs/class_stringtracker.txt>]

line 177: []

line 178: [//#include <cyclone/progs/prognotepad.txt>]

line 179: [#include <cyclone/progs/shell.txt>]
found include <cyclone/progs/shell.txt>
reading file cyclone/progs/shell.txt

line 1: [// cyclone shell]

line 2: [#ifndef SHELL_GUARD]
#ifndef "SHELL_GUARD" (undefined)

line 3: [#define SHELL_GUARD]
#defined "SHELL_GUARD"

line 4: [SHELL_CODE:]
found label SHELL_CODE

line 5: [#include <cyclone/libs/libutil.txt>]
found include <cyclone/libs/libutil.txt>
reading file cyclone/libs/libutil.txt

line 1: [//libutil - utlity functions like delay(), assert(), etc.]

line 2: [#ifndef LIBUTIL_GUARD]
#ifndef "LIBUTIL_GUARD" (undefined)

line 3: [#define LIBUTIL_GUARD]
#defined "LIBUTIL_GUARD"

line 4: []

line 5: [void assert(float n, float str){]
found func assert



sig1 = void assert(float n, float str)
sig2 = (float n, float str)
found param n
found param str

line 6: [    if(n == 0){]
found reference to n
currentFunc = assert
ref n is REF_STACK

line 7: [        Perr("assertion failed: ");]
removed string literal ""assertion failed: ""

line 8: [        Perr(str);]
found reference to str
currentFunc = assert
ref str is REF_STACK

line 9: [        shell_panic();]

line 10: [    }]

line 11: [}]

line 12: [void assert_type(float self, float t){]
found func assert_type



sig1 = void assert_type(float self, float t)
sig2 = (float self, float t)
found param self
found param t

line 13: [    if(self[0] != t){]
found reference to self
currentFunc = assert_type
ref self is REF_STACK
found reference to t
currentFunc = assert_type
ref t is REF_STACK

line 14: [        Perr("type error: ");]
removed string literal ""type error: ""

line 15: [        Perr(num2str(self));]

line 16: [        Perr(" is not a\n");]
removed string literal "" is not a\n""

line 17: [        Perr(t);]

line 18: [        Perr("\n");]
removed string literal ""\n""

line 19: [        shell_panic();]

line 20: [    }]

line 21: [}]

line 22: []

line 23: [float curticks(){]
found func curticks



sig1 = float curticks()
sig2 = ()

line 24: [    float T;]
found local var T (BL = 1)

line 25: [    cpuget eax,29;]

line 26: [    T = eax;]
found reference to T
currentFunc = curticks
ref T is REF_STACK

line 27: [    return T;]

line 28: [}]

line 29: []

line 30: [float curtime()]
found func curtime



sig1 = float curtime()
sig2 = ()

line 31: [{]

line 32: [    timer eax;]

line 33: [    return eax;]

line 34: [}]

line 35: []

line 36: [float assert_arity(float ecx_here, float num_args){]
found func assert_arity



sig1 = float assert_arity(float ecx_here, float num_args)
sig2 = (float ecx_here, float num_args)
found param ecx_here
found param num_args

line 37: [    if(ecx_here != num_args){]
found reference to ecx_here
currentFunc = assert_arity
ref ecx_here is REF_STACK
found reference to num_args
currentFunc = assert_arity
ref num_args is REF_STACK

line 38: [        Perr("Arity error: func expects ");]
removed string literal ""Arity error: func expects ""

line 39: [        Perr(num2str(num_args));]

line 40: [        Perr(" args, but got ");]
removed string literal "" args, but got ""

line 41: [        Perr(num2str(ecx_here));]

line 42: [        Perr("\n");]
removed string literal ""\n""

line 43: [        shell_panic();]

line 44: [    }]

line 45: [}]

line 46: []

line 47: [#endif]

line 48: []

line 6: []

line 7: [shenter:]
found label shenter

line 8: [void shell(){]
found func shell



sig1 = void shell()
sig2 = ()

line 9: [    out 6,1;]

line 10: [    //P("Hello World!\n");]
removed string literal ""Hello World!\n""

line 11: [    //printf("Starting shell...\n");]
removed string literal ""Starting shell...\n""

line 12: [    P("Starting shell...\n");]
removed string literal ""Starting shell...\n""

line 13: [    initShellCmds();]
found reference to initShellCmds
currentFunc = shell
ref initShellCmds is REF_EXT

line 14: [    P("Starting libs...\n");]
removed string literal ""Starting libs...\n""

line 15: [    initLibraries();]
found reference to initLibraries
currentFunc = shell
ref initLibraries is REF_EXT

line 16: [    P("Refreshing screen...\n");]
removed string literal ""Refreshing screen...\n""

line 17: [    //mcs_screen_force_refresh(); //AdrScreen[2020]=1;]

line 18: [    mcs_screen_set_shift_box(0,mcs_last_x-1,0,mcs_last_y-1); //30x18 screen, last pos is 29x17, subscreen corner therefore at 28x16,]
found reference to mcs_screen_set_shift_box
currentFunc = shell
ref mcs_screen_set_shift_box is REF_EXT

line 19: [                                     //but for some reason we use 27x15.]

line 20: [    //mcs_screen_force_refresh(); //AdrScreen[2020]=1; ]

line 21: [    cls();]
found reference to cls
currentFunc = shell
ref cls is REF_EXT

line 22: [    strcpy(CurDir,"/");]
removed string literal ""/""
found reference to CurDir
currentFunc = shell
ref CurDir is REF_EXT

line 23: [    current_path = CurDir;]
found reference to current_path
currentFunc = shell
ref current_path is REF_EXT

line 24: [    float I = 0;]
found local var I (BL = 1)

line 25: [    for(I=0;I<7;I++)]
found reference to I
currentFunc = shell
ref I is REF_STACK

line 26: [    {]

line 27: [        Print("[dance]\n",(8-I)*100+I*10);]
removed string literal ""[dance]\n""

line 28: [    }]

line 29: [    autorun();]
found reference to autorun
currentFunc = shell
ref autorun is REF_EXT

line 30: [    //printf("mcs_width:  %d\n",mcs_width);]
removed string literal ""mcs_width:  %d\n""

line 31: [    //printf("mcs_height: %d\n",mcs_height);]
removed string literal ""mcs_height: %d\n""

line 32: [    //printf("mcs_last_x: %d\n",mcs_last_x);]
removed string literal ""mcs_last_x: %d\n""

line 33: [    //printf("mcs_last_y: %d\n",mcs_last_y);]
removed string literal ""mcs_last_y: %d\n""

line 34: [    //printf("cs_width:  %d\n",cs_width);]
removed string literal ""cs_width:  %d\n""

line 35: [    //printf("cs_height: %d\n",cs_height);]
removed string literal ""cs_height: %d\n""

line 36: [    //printf("cs_last_x: %d\n",cs_last_x);]
removed string literal ""cs_last_x: %d\n""

line 37: [    //printf("cs_last_y: %d\n",cs_last_y);]
removed string literal ""cs_last_y: %d\n""

line 38: [    RedrawPending = 1;]

line 39: [    while(1)]

line 40: [    {]

line 41: [        out 6,2;]

line 42: [        checkKB();    ]
found reference to checkKB
currentFunc = shell
ref checkKB is REF_EXT

line 43: [        shell_panic_ebp = EBP;]
found reference to shell_panic_ebp
currentFunc = shell
ref shell_panic_ebp is REF_EXT

line 44: [        shell_panic_esp = ESP;]
found reference to shell_panic_esp
currentFunc = shell
ref shell_panic_esp is REF_EXT

line 45: [        thread_yield();]

line 46: [        shell_panic_exit:]
found label shell_panic_exit

line 47: [        ]

line 48: [        extendedModeEnable();]
found reference to extendedModeEnable
currentFunc = shell
ref extendedModeEnable is REF_EXT

line 49: [        interruptsEnable();]
found reference to interruptsEnable
currentFunc = shell
ref interruptsEnable is REF_EXT

line 50: [        listeningToInput = 1;]
found reference to listeningToInput
currentFunc = shell
ref listeningToInput is REF_EXT

line 51: [        ]

line 52: [        if(RedrawPending)]

line 53: [        {]

line 54: [            RedrawPending = 0;]

line 55: [            DrawScrollBar();]
found reference to DrawScrollBar
currentFunc = shell
ref DrawScrollBar is REF_EXT

line 56: [            DrawStatusBar();]
found reference to DrawStatusBar
currentFunc = shell
ref DrawStatusBar is REF_EXT

line 57: [        }]

line 58: [    }]

line 59: [}]

line 60: []

line 61: [void initShellCmds(){]
found func initShellCmds



sig1 = void initShellCmds()
sig2 = ()

line 62: [    CommandList = malloc(sizeof_vector);]
found reference to CommandList
currentFunc = initShellCmds
ref CommandList is REF_EXT

line 63: [    vector_constructor(CommandList,1);]

line 64: [    ]

line 65: [addShellCmd("cls",cls,cls_help);]
removed string literal ""cls""
found reference to addShellCmd
currentFunc = initShellCmds
ref addShellCmd is REF_EXT
found reference to cls_help
currentFunc = initShellCmds
ref cls_help is REF_EXT

line 66: [addShellCmd("help", help, help_help);]
removed string literal ""help""
found reference to help
currentFunc = initShellCmds
ref help is REF_EXT
found reference to help_help
currentFunc = initShellCmds
ref help_help is REF_EXT

line 67: [addShellCmd("heap", heap_status, heap_status_help);]
removed string literal ""heap""
found reference to heap_status
currentFunc = initShellCmds
ref heap_status is REF_EXT
found reference to heap_status_help
currentFunc = initShellCmds
ref heap_status_help is REF_EXT

line 68: [addShellCmd("rpncalc", cmd_rpncalc, rpncalc_help);]
removed string literal ""rpncalc""
found reference to cmd_rpncalc
currentFunc = initShellCmds
ref cmd_rpncalc is REF_EXT
found reference to rpncalc_help
currentFunc = initShellCmds
ref rpncalc_help is REF_EXT

line 69: [addShellCmd("memtest", memtest, memtest_help);]
removed string literal ""memtest""
found reference to memtest
currentFunc = initShellCmds
ref memtest is REF_EXT
found reference to memtest_help
currentFunc = initShellCmds
ref memtest_help is REF_EXT

line 70: [addShellCmd("dump",cmd_dump, dump_help);]
removed string literal ""dump""
found reference to cmd_dump
currentFunc = initShellCmds
ref cmd_dump is REF_EXT
found reference to dump_help
currentFunc = initShellCmds
ref dump_help is REF_EXT

line 71: [addShellCmd("run",  cmd_run, run_help);]
removed string literal ""run""
found reference to cmd_run
currentFunc = initShellCmds
ref cmd_run is REF_EXT
found reference to run_help
currentFunc = initShellCmds
ref run_help is REF_EXT

line 72: [addShellCmd("runbg",  cmd_runbg, runbg_help); ]
removed string literal ""runbg""
found reference to cmd_runbg
currentFunc = initShellCmds
ref cmd_runbg is REF_EXT
found reference to runbg_help
currentFunc = initShellCmds
ref runbg_help is REF_EXT

line 73: [addShellCmd("load", cmd_load, load_help);]
removed string literal ""load""
found reference to cmd_load
currentFunc = initShellCmds
ref cmd_load is REF_EXT
found reference to load_help
currentFunc = initShellCmds
ref load_help is REF_EXT

line 74: [addShellCmd("cd", cmd_cd, cd_help);]
removed string literal ""cd""
found reference to cmd_cd
currentFunc = initShellCmds
ref cmd_cd is REF_EXT
found reference to cd_help
currentFunc = initShellCmds
ref cd_help is REF_EXT

line 75: [addShellCmd("dir",  cmd_dir, dir_help);]
removed string literal ""dir""
found reference to cmd_dir
currentFunc = initShellCmds
ref cmd_dir is REF_EXT
found reference to dir_help
currentFunc = initShellCmds
ref dir_help is REF_EXT

line 76: [addShellCmd("mkdir", cmd_mkdir, mkdir_help);]
removed string literal ""mkdir""
found reference to cmd_mkdir
currentFunc = initShellCmds
ref cmd_mkdir is REF_EXT
found reference to mkdir_help
currentFunc = initShellCmds
ref mkdir_help is REF_EXT

line 77: [addShellCmd("del",  cmd_del, del_help);]
removed string literal ""del""
found reference to cmd_del
currentFunc = initShellCmds
ref cmd_del is REF_EXT
found reference to del_help
currentFunc = initShellCmds
ref del_help is REF_EXT

line 78: [addShellCmd("rn",cmd_rn, rn_help);]
removed string literal ""rn""
found reference to cmd_rn
currentFunc = initShellCmds
ref cmd_rn is REF_EXT
found reference to rn_help
currentFunc = initShellCmds
ref rn_help is REF_EXT

line 79: [addShellCmd("write",  cmd_write, write_help);]
removed string literal ""write""
found reference to cmd_write
currentFunc = initShellCmds
ref cmd_write is REF_EXT
found reference to write_help
currentFunc = initShellCmds
ref write_help is REF_EXT

line 80: [addShellCmd("read",  cmd_read, read_help);]
removed string literal ""read""
found reference to cmd_read
currentFunc = initShellCmds
ref cmd_read is REF_EXT
found reference to read_help
currentFunc = initShellCmds
ref read_help is REF_EXT

line 81: [addShellCmd("info", cmd_info, info_help);]
removed string literal ""info""
found reference to cmd_info
currentFunc = initShellCmds
ref cmd_info is REF_EXT
found reference to info_help
currentFunc = initShellCmds
ref info_help is REF_EXT

line 82: [addShellCmd("hdd", cmd_hdd, hdd_help);]
removed string literal ""hdd""
found reference to cmd_hdd
currentFunc = initShellCmds
ref cmd_hdd is REF_EXT
found reference to hdd_help
currentFunc = initShellCmds
ref hdd_help is REF_EXT

line 83: [addShellCmd("mount", cmd_mount, mount_help);]
removed string literal ""mount""
found reference to cmd_mount
currentFunc = initShellCmds
ref cmd_mount is REF_EXT
found reference to mount_help
currentFunc = initShellCmds
ref mount_help is REF_EXT

line 84: [addShellCmd("format", cmd_format, format_help);]
removed string literal ""format""
found reference to cmd_format
currentFunc = initShellCmds
ref cmd_format is REF_EXT
found reference to format_help
currentFunc = initShellCmds
ref format_help is REF_EXT

line 85: [addShellCmd("gpio", cmd_gpio, gpio_help);]
removed string literal ""gpio""
found reference to cmd_gpio
currentFunc = initShellCmds
ref cmd_gpio is REF_EXT
found reference to gpio_help
currentFunc = initShellCmds
ref gpio_help is REF_EXT

line 86: [addShellCmd("exec", cmd_exec, exec_help);]
removed string literal ""exec""
found reference to cmd_exec
currentFunc = initShellCmds
ref cmd_exec is REF_EXT
found reference to exec_help
currentFunc = initShellCmds
ref exec_help is REF_EXT

line 87: [addShellCmd("symbol", cmd_symbol, symbol_help);]
removed string literal ""symbol""
found reference to cmd_symbol
currentFunc = initShellCmds
ref cmd_symbol is REF_EXT
found reference to symbol_help
currentFunc = initShellCmds
ref symbol_help is REF_EXT

line 88: [addShellCmd("memview", cmd_memview, memview_help);]
removed string literal ""memview""
found reference to cmd_memview
currentFunc = initShellCmds
ref cmd_memview is REF_EXT
found reference to memview_help
currentFunc = initShellCmds
ref memview_help is REF_EXT

line 89: [addShellCmd("fileview", cmd_fileview, fileview_help);]
removed string literal ""fileview""
found reference to cmd_fileview
currentFunc = initShellCmds
ref cmd_fileview is REF_EXT
found reference to fileview_help
currentFunc = initShellCmds
ref fileview_help is REF_EXT

line 90: [addShellCmd("panic",shell_panic, shell_panic_help);]
removed string literal ""panic""
found reference to shell_panic_help
currentFunc = initShellCmds
ref shell_panic_help is REF_EXT

line 91: [addShellCmd("version", printversion, printversion_help);]
removed string literal ""version""
found reference to printversion
currentFunc = initShellCmds
ref printversion is REF_EXT
found reference to printversion_help
currentFunc = initShellCmds
ref printversion_help is REF_EXT

line 92: [addShellCmd("echo",  cmdecho, echo_help);]
removed string literal ""echo""
found reference to cmdecho
currentFunc = initShellCmds
ref cmdecho is REF_EXT
found reference to echo_help
currentFunc = initShellCmds
ref echo_help is REF_EXT

line 93: [addShellCmd("time",  cmdtime, time_help);]
removed string literal ""time""
found reference to cmdtime
currentFunc = initShellCmds
ref cmdtime is REF_EXT
found reference to time_help
currentFunc = initShellCmds
ref time_help is REF_EXT

line 94: [addShellCmd("test",cmdtest, test_help);]
removed string literal ""test""
found reference to cmdtest
currentFunc = initShellCmds
ref cmdtest is REF_EXT
found reference to test_help
currentFunc = initShellCmds
ref test_help is REF_EXT

line 95: [addShellCmd("test2",  cmdtest2, test2_help);]
removed string literal ""test2""
found reference to cmdtest2
currentFunc = initShellCmds
ref cmdtest2 is REF_EXT
found reference to test2_help
currentFunc = initShellCmds
ref test2_help is REF_EXT

line 96: [addShellCmd("test3", cmdtest3, test3_help);]
removed string literal ""test3""
found reference to cmdtest3
currentFunc = initShellCmds
ref cmdtest3 is REF_EXT
found reference to test3_help
currentFunc = initShellCmds
ref test3_help is REF_EXT

line 97: [addShellCmd("test4",cmd_test4, test4_help);]
removed string literal ""test4""
found reference to cmd_test4
currentFunc = initShellCmds
ref cmd_test4 is REF_EXT
found reference to test4_help
currentFunc = initShellCmds
ref test4_help is REF_EXT

line 98: [addShellCmd("test5", cmd_test5, test5_help);]
removed string literal ""test5""
found reference to cmd_test5
currentFunc = initShellCmds
ref cmd_test5 is REF_EXT
found reference to test5_help
currentFunc = initShellCmds
ref test5_help is REF_EXT

line 99: [addShellCmd("test6", cmd_test6, test6_help);]
removed string literal ""test6""
found reference to cmd_test6
currentFunc = initShellCmds
ref cmd_test6 is REF_EXT
found reference to test6_help
currentFunc = initShellCmds
ref test6_help is REF_EXT

line 100: [addShellCmd("test7", cmd_test7, test7_help);]
removed string literal ""test7""
found reference to cmd_test7
currentFunc = initShellCmds
ref cmd_test7 is REF_EXT
found reference to test7_help
currentFunc = initShellCmds
ref test7_help is REF_EXT

line 101: [addShellCmd("ps", cmdps, 0);]
removed string literal ""ps""
found reference to cmdps
currentFunc = initShellCmds
ref cmdps is REF_EXT

line 102: [addShellCmd("yield", cmdyield, 0);]
removed string literal ""yield""
found reference to cmdyield
currentFunc = initShellCmds
ref cmdyield is REF_EXT

line 103: [addShellCmd("trace", cmdtrace, trace_help);]
removed string literal ""trace""
found reference to cmdtrace
currentFunc = initShellCmds
ref cmdtrace is REF_EXT
found reference to trace_help
currentFunc = initShellCmds
ref trace_help is REF_EXT

line 104: [    ]

line 105: [}]

line 106: []

line 107: [void initLibraries(){]
found func initLibraries



sig1 = void initLibraries()
sig2 = ()

line 108: [    libdynamicstruct_initCommands();]
found reference to libdynamicstruct_initCommands
currentFunc = initLibraries
ref libdynamicstruct_initCommands is REF_EXT

line 109: [}]

line 110: []

line 111: [//struct shellCmd]

line 112: [//0: typeof]

line 113: [//1: name (string)]

line 114: [//2: func (function)]

line 115: [//3: help (string)]

line 116: []

line 117: [float sizeof_shellCmd = 4;]
found global var sizeof_shellCmd

line 118: [typeof_shellCmd: db "shellCmd",0;]
removed string literal ""shellCmd""
found label typeof_shellCmd

line 119: []

line 120: [void addShellCmd(float name, float func, float help){]
found func addShellCmd



sig1 = void addShellCmd(float name, float func, float help)
sig2 = (float name, float func, float help)
found param name
found param func
found param help

line 121: [    float CMD = malloc(sizeof_shellCmd);]
found local var CMD (BL = 1)
found reference to sizeof_shellCmd
currentFunc = addShellCmd
ref sizeof_shellCmd is REF_EXT

line 122: [    CMD[0] = typeof_shellCmd;]
found reference to CMD
currentFunc = addShellCmd
ref CMD is REF_STACK
found reference to typeof_shellCmd
currentFunc = addShellCmd
ref typeof_shellCmd is REF_EXT

line 123: [    CMD[1] = name;]
found reference to name
currentFunc = addShellCmd
ref name is REF_STACK

line 124: [    CMD[2] = func;]
found reference to func
currentFunc = addShellCmd
ref func is REF_STACK

line 125: [    CMD[3] = help;]

line 126: [    vector_push(CommandList,CMD);]

line 127: [}]

line 128: []

line 129: [void autorun(){]
found func autorun



sig1 = void autorun()
sig2 = ()

line 130: [    float run = 0;]
found local var run (BL = 1)

line 131: [    in run,1;]
found reference to run
currentFunc = autorun
ref run is REF_STACK

line 132: [    if(run){]

line 133: [        Print("AUTORUN\n",929);]
removed string literal ""AUTORUN\n""

line 134: [        ParseString("echo off");]
removed string literal ""echo off""
found reference to ParseString
currentFunc = autorun
ref ParseString is REF_EXT

line 135: [        ParseString("exec autorun.sh");]
removed string literal ""exec autorun.sh""

line 136: [        ParseString("echo on");]
removed string literal ""echo on""

line 137: [    //ParseString("write bop hi");]
removed string literal ""write bop hi""

line 138: [    //ParseString("write bap ho");]
removed string literal ""write bap ho""

line 139: [    //ParseString("dir");]
removed string literal ""dir""

line 140: [    }]

line 141: [}]

line 142: []

line 143: [void shell_panic(){]
found func shell_panic



sig1 = void shell_panic()
sig2 = ()

line 144: [    Print("\nSHELL PANIC\n",9);]
removed string literal ""\nSHELL PANIC\n""

line 145: [    setallocator(defaultAllocator);]
found reference to setallocator
currentFunc = shell_panic
ref setallocator is REF_EXT

line 146: [    getStackTrace(trace_data);]
found reference to getStackTrace
currentFunc = shell_panic
ref getStackTrace is REF_EXT
found reference to trace_data
currentFunc = shell_panic
ref trace_data is REF_EXT

line 147: [    printStackTrace(trace_data);]
found reference to printStackTrace
currentFunc = shell_panic
ref printStackTrace is REF_EXT

line 148: [    //malloc_init();]

line 149: [    //P("Heap re-initialized\n");]
removed string literal ""Heap re-initialized\n""

line 150: [    MinStrI = 0;]
found reference to MinStrI
currentFunc = shell_panic
ref MinStrI is REF_EXT

line 151: [    MinStr[1] = 0;]
found reference to MinStr
currentFunc = shell_panic
ref MinStr is REF_EXT

line 152: [    Echo = 1;]
found reference to Echo
currentFunc = shell_panic
ref Echo is REF_EXT

line 153: [    RedrawPending = 1;]

line 154: [    ]

line 155: [    extendedModeDisable();]
found reference to extendedModeDisable
currentFunc = shell_panic
ref extendedModeDisable is REF_EXT

line 156: [    interruptsDisable();]
found reference to interruptsDisable
currentFunc = shell_panic
ref interruptsDisable is REF_EXT

line 157: [    ]

line 158: [    if(malloc_test()){]
found reference to malloc_test
currentFunc = shell_panic
ref malloc_test is REF_EXT

line 159: [        P("Heap status:\n");]
removed string literal ""Heap status:\n""

line 160: [        malloc_print_count();]
found reference to malloc_print_count
currentFunc = shell_panic
ref malloc_print_count is REF_EXT

line 161: [        malloc_init();]
found reference to malloc_init
currentFunc = shell_panic
ref malloc_init is REF_EXT

line 162: [        P("Heap re-initialized\n");]
removed string literal ""Heap re-initialized\n""

line 163: [    }]

line 164: [    ]

line 165: [    EBP = shell_panic_ebp;]

line 166: [    ESP = shell_panic_esp;]

line 167: [    jmp shell_panic_exit;]
found reference to shell_panic_exit
currentFunc = shell_panic
ref shell_panic_exit is REF_EXT

line 168: [}]

line 169: [shell_panic_help: db "Escape from the currently executing program back into the shell and re-initialize heap memory. Used when a critical error occurs.\n", db 0;]
removed string literal ""Escape from the currently executing program back into the shell and re-initialize heap memory. Used when a critical error occurs.\n""
found label shell_panic_help

line 170: []

line 171: [void cls(){]
found func cls



sig1 = void cls()
sig2 = ()

line 172: [    mcs_screen_clear();]

line 173: [    memset(ConsoleStrBuff,0,CONSOLE_BUFFER_SIZE);]

line 174: [    //printPtrX = 0;]

line 175: [    //printPtrY = 0;]

line 176: [    //printScrY = 0;]

line 177: [    //RedrawPending = 1;]

line 178: [    printScrX = 0;]

line 179: [    printBuffX = 0;]

line 180: [    printScrY = 0;]

line 181: [    printBuffY = 0;]

line 182: [    printLineOffset = 0;]

line 183: [}]

line 184: [cls_help: db "cleans the screen. Soap will be used.\n", db 0;]
removed string literal ""cleans the screen. Soap will be used.\n""
found label cls_help

line 185: []

line 186: [void drawStatusBar()]
found func drawStatusBar



sig1 = void drawStatusBar()
sig2 = ()

line 187: [{]

line 188: [    char status = "Ready";]
removed string literal ""Ready""
found local var status (BL = 1)

line 189: [    float statCol = 115;]
found local var statCol (BL = 1)

line 190: [    float statTextCol = 999;]
found local var statTextCol (BL = 1)

line 191: [    float I = 0;]
found local var I (BL = 1)

line 192: [    float str = status;]
found local var str (BL = 1)
found reference to status
currentFunc = drawStatusBar
ref status is REF_STACK

line 193: [    if(MinStrI){str = MinStr};    ]
found reference to str
currentFunc = drawStatusBar
ref str is REF_STACK

line 194: [    float C = str[0];]
found local var C (BL = 1)

line 195: [    float len = 0;]
found local var len (BL = 1)

line 196: [    len = strlen(str);//while(C){len++;C = str[len];}]
found reference to len
currentFunc = drawStatusBar
ref len is REF_STACK

line 197: [    //if(len>27){C = str[len-28];}else{C=str[0];}]

line 198: [    float inp = (str!=status);]
found local var inp (BL = 1)

line 199: [    if(inp){statTextCol = 999;}else{statTextCol = 90};]
found reference to inp
currentFunc = drawStatusBar
ref inp is REF_STACK
found reference to statTextCol
currentFunc = drawStatusBar
ref statTextCol is REF_STACK

line 200: [    if(listeningToInput && inp){]

line 201: [        //AdrScreen[2029] = 0.5; //vert scale does nothing :(]

line 202: [        //AdrScreen[2030] = 2;   //hori scale ]

line 203: [        //AdrScreen[2043] = 0.5; //blink rate]

line 204: [        //AdrScreen[2044] = 0.2;//cursor size]

line 205: [        ]

line 206: [          //mcs_set_blink_rate(0.5);]

line 207: [          //mcs_set_cursor_size(0.2);]

line 208: [          //mcs_screen_cursor_enable();    ]

line 209: [        //screen_set_cursor_pos_xy(len+1,16);]

line 210: [          //mcs_screen_set_cursor_pos_xy(len+1,mcs_last_y);]

line 211: [        //AdrScreen[2020] = 1;]

line 212: [        //mcs_screen_force_refresh();]

line 213: [    }else{]

line 214: [        //mcs_screen_cursor_disable();]

line 215: [    }]

line 216: [    float ch;]
found local var ch (BL = 1)

line 217: [    float col;]
found local var col (BL = 1)

line 218: [    float adrx;]
found local var adrx (BL = 1)

line 219: [    float adry;]
found local var adry (BL = 1)

line 220: [    float statlen = mcs_last_x-2;]
found local var statlen (BL = 1)

line 221: [    for(I = 0; I < mcs_last_x; I++)//for(I=0;I<29;I++)]
found reference to I
currentFunc = drawStatusBar
ref I is REF_STACK

line 222: [    {]

line 223: [        if(I < len+inp){]

line 224: [            col = statCol*1000+statTextCol; adry = mcs_last_y;]
found reference to col
currentFunc = drawStatusBar
ref col is REF_STACK
found reference to statCol
currentFunc = drawStatusBar
ref statCol is REF_STACK
found reference to adry
currentFunc = drawStatusBar
ref adry is REF_STACK

line 225: [            if(inp){]

line 226: [                if(I == 0){]

line 227: [                    //AdrScreen[60*17] = '>';]
removed character literal "'>'"

line 228: [                    //AdrScreen[60*17+1] = statCol*1000+statTextCol;]

line 229: [                    ch = '>'; adrx = 0;]
removed character literal "'>'"
found reference to ch
currentFunc = drawStatusBar
ref ch is REF_STACK
found reference to adrx
currentFunc = drawStatusBar
ref adrx is REF_STACK

line 230: [                    mcs_putchar(ch,col,adrx,adry);]

line 231: [                }else{]

line 232: [                    //if(len>27){C = str[I+len-28];}else{C = str[I-1];}]

line 233: [                    if(len>statlen){C = str[I+len-statlen-1];}else{C = str[I-1];}]
found reference to statlen
currentFunc = drawStatusBar
ref statlen is REF_STACK
found reference to C
currentFunc = drawStatusBar
ref C is REF_STACK

line 234: [                    //AdrScreen[60*17+2*I] = C;]

line 235: [                    //AdrScreen[60*17+2*I+1] = statCol*1000+statTextCol;]

line 236: [                    ch = C; adrx = I;]

line 237: [                    mcs_putchar(ch,col,adrx,adry);]

line 238: [                }]

line 239: [            }else{]

line 240: [            ]

line 241: [                    //if(len>27){C = str[I+len-27];}else{C = str[I];}]

line 242: [                    if(len>statlen){C = str[I+len-statlen];}else{C = str[I];}]

line 243: [                    //AdrScreen[60*17+2*I] = C;]

line 244: [                    //AdrScreen[60*17+2*I+1] = statCol*1000+statTextCol;]

line 245: [                    ch = C; adrx = I;]

line 246: [                    mcs_putchar(ch,col,adrx,adry);]

line 247: [            }]

line 248: [        }else{]

line 249: [            //AdrScreen[60*17+2*I] = ' ';]
removed character literal "' '"

line 250: [            //AdrScreen[60*17+2*I+1] = statCol*1000;]

line 251: [            ch = ' '; col = statCol*1000; adrx = I;]
removed character literal "' '"

line 252: [            mcs_putchar(ch,col,adrx,adry); ]

line 253: [        }]

line 254: [        /*]

line 255: [        if(inp)//if(C)]

line 256: [        {]

line 257: [            if(I==0)//if((I==0)&&inp)]

line 258: [            {]

line 259: [                AdrScreen[60*17] = '>';]
removed character literal "'>'"

line 260: [                AdrScreen[60*17+1] = statCol*1000+statTextCol;]

line 261: [            }]

line 262: [            else]

line 263: [            {]

line 264: [                if(len>27){C = str[I+len-27];}else{C = str[I];}]

line 265: [                AdrScreen[60*17+2*I] = C;]

line 266: [                AdrScreen[60*17+2*I+1] = statCol*1000+statTextCol;]

line 267: [                //if(len>27){C = str[I+len-28-inp];}else{C = str[I+1-inp];}]

line 268: [            }]

line 269: [        }]

line 270: [        else]

line 271: [        {]

line 272: [            AdrScreen[60*17+2*I] = ' ';]
removed character literal "' '"

line 273: [            AdrScreen[60*17+2*I+1] = statCol*1000;]

line 274: [        }]

line 275: [        */]

line 276: [    }]

line 277: [    //if(listeningToInput){AdrScreen[60*17+1] = 90*1000;}]

line 278: [}]

line 279: [void drawScrollBar()]
found func drawScrollBar



sig1 = void drawScrollBar()
sig2 = ()

line 280: [{]

line 281: [    //AdrScreen[2*29] = '^';]
removed character literal "'^'"

line 282: [    //AdrScreen[2*29+1] = 115999;]

line 283: [    float ch = '^';]
removed character literal "'^'"
found local var ch (BL = 1)

line 284: [    float col = 115999;]
found local var col (BL = 1)

line 285: [    mcs_putchar(ch,col,mcs_last_x,0);]
found reference to ch
currentFunc = drawScrollBar
ref ch is REF_STACK
found reference to col
currentFunc = drawScrollBar
ref col is REF_STACK

line 286: [    float I = 0;]
found local var I (BL = 1)

line 287: [    float T = 0;]
found local var T (BL = 1)

line 288: [    T = printLineOffset;//printPtrY-printScrY;    //we have 16 positions]
found reference to T
currentFunc = drawScrollBar
ref T is REF_STACK

line 289: [    T = round(mcs_last_y*T/100);//round(18*T/100);        //hmmm]
found reference to round
currentFunc = drawScrollBar
ref round is REF_EXT

line 290: [    T++;]

line 291: [    for(I=1;I<mcs_last_y;I++)]
found reference to I
currentFunc = drawScrollBar
ref I is REF_STACK

line 292: [    {]

line 293: [        if(I!=T)]

line 294: [        {]

line 295: [        //AdrScreen[2*(I*30+29)] = '|';]
removed character literal "'|'"

line 296: [        //AdrScreen[2*(I*30+29)+1] = 115999;]

line 297: [            ch = '|';col = 115999;]
removed character literal "'|'"

line 298: [            mcs_putchar(ch,col,mcs_last_x,I);]

line 299: [        }]

line 300: [    }]

line 301: [    //AdrScreen[2*(17*30+29)] = 'v';]
removed character literal "'v'"

line 302: [    //AdrScreen[2*(17*30+29)+1] = 115999;]

line 303: [    ch = 'v'; col = 115999;]
removed character literal "'v'"

line 304: [    mcs_putchar(ch,col,mcs_last_x,mcs_last_y);]

line 305: [    ]

line 306: [    //AdrScreen[2*(30*T+29)] = ' ';]
removed character literal "' '"

line 307: [    //AdrScreen[2*(30*T+29)+1] = 999000; ]

line 308: [    ch = ' '; col = 999000;]
removed character literal "' '"

line 309: [    mcs_putchar(ch,col,mcs_last_x,T);]

line 310: [}]

line 311: []

line 312: []

line 313: [void Console(char str)]
found func Console



sig1 = void Console(char str)
sig2 = (char str)
found param str

line 314: [{]

line 315: [    strcpy(MinStr, str);]
found reference to str
currentFunc = Console
ref str is REF_STACK

line 316: [    ParseString(MinStr);]

line 317: [}]

line 318: [void ParseStringSilent(char str){]
found func ParseStringSilent



sig1 = void ParseStringSilent(char str)
sig2 = (char str)
found param str

line 319: [    float Echo_prev = Echo;]
found local var Echo_prev (BL = 1)

line 320: [    Echo = 0;]

line 321: [    ParseString(str);]
found reference to str
currentFunc = ParseStringSilent
ref str is REF_STACK

line 322: [    Echo = Echo_prev;]
found reference to Echo_prev
currentFunc = ParseStringSilent
ref Echo_prev is REF_STACK

line 323: [}]

line 324: []

line 325: [str_exe: db "exe",0;]
removed string literal ""exe""
found label str_exe

line 326: [str_c: db "c",0;]
removed string literal ""c""
found label str_c

line 327: [str_txt: db "txt",0;]
removed string literal ""txt""
found label str_txt

line 328: [str_sh: db "sh",0;]
removed string literal ""sh""
found label str_sh

line 329: []

line 330: [void ParseString(char str)]
found func ParseString



sig1 = void ParseString(char str)
sig2 = (char str)
found param str

line 331: [{]

line 332: [    //P("PS[");P(str);P("]\n");]
removed string literal ""PS[""
removed string literal ""]\n""

line 333: [    if(Echo)// &&strcmp(str,"echo off"))]
removed string literal ""echo off""

line 334: [    {]

line 335: [        if(strcmp(str,"echo off") != 0){]
removed string literal ""echo off""
found reference to str
currentFunc = ParseString
ref str is REF_STACK

line 336: [        //Print("User:> ",999);Print(MinStr,999);Print("\n",999);]
removed string literal ""User:> ""
removed string literal ""\n""

line 337: [            P("User:");P(CurDir);P("> ");P(str);P("\n");]
removed string literal ""User:""
removed string literal ""> ""
removed string literal ""\n""

line 338: [        }]

line 339: [    }]

line 340: [    float buff[120];]
found local var buff (BL = 1)

line 341: [    strcpy(buff,str);]
found reference to buff
currentFunc = ParseString
ref buff is REF_STACK

line 342: [    Arr = explode(buff, " ");]
removed string literal "" ""
found reference to Arr
currentFunc = ParseString
ref Arr is REF_EXT
found reference to explode
currentFunc = ParseString
ref explode is REF_EXT

line 343: [    //float I = CommandBuff;]

line 344: [    //float Match = 0;]

line 345: [    //float Ptr;]

line 346: [    //while(I<CommandBuffEnd)]

line 347: [    //{]

line 348: [    //    if(strcmp(Arr[0],I)==0)]

line 349: [    //    {]

line 350: [    //        I = I+strlen(I)+1;]

line 351: [    //        Match = 1;]

line 352: [    //        Ptr = *I;]

line 353: [    //        Ptr();]

line 354: [    //        goto shell_cmd_found;]

line 355: [    //        I++;]

line 356: [    //    }]

line 357: [    //    else]

line 358: [    //    {]

line 359: [    //        I = I+strlen(I)+3;]

line 360: [    //    }]

line 361: [    //}]

line 362: [    float I = 0;]
found local var I (BL = 1)

line 363: [    float size = vector_get_size(CommandList);]
found local var size (BL = 1)
found reference to vector_get_size
currentFunc = ParseString
ref vector_get_size is REF_EXT

line 364: [    float Match = 0;]
found local var Match (BL = 1)

line 365: [    float Ptr;]
found local var Ptr (BL = 1)

line 366: [    for(I = 0; I < size; I++){]
found reference to I
currentFunc = ParseString
ref I is REF_STACK

line 367: [        float CMD = vector_get(CommandList,0,I);]
found local var CMD (BL = 2)
found local var I (BL = 2)

line 368: [        if(strcmp(Arr[0],CMD[1])==0){]
found reference to CMD
currentFunc = ParseString
ref CMD is REF_STACK

line 369: [            Match = 1;]
found reference to Match
currentFunc = ParseString
ref Match is REF_STACK

line 370: [            Ptr = CMD[2];]
found reference to Ptr
currentFunc = ParseString
ref Ptr is REF_STACK

line 371: [            float argc = strlen(Arr)-1;]
found local var argc (BL = 3)

line 372: [            float argv = Arr+1;]
found local var argv (BL = 3)

line 373: [            Ptr(argc, argv);]
found reference to argc
currentFunc = ParseString
ref argc is REF_STACK
found reference to argv
currentFunc = ParseString
ref argv is REF_STACK

line 374: [            goto shell_cmd_found;]
found reference to shell_cmd_found
currentFunc = ParseString
ref shell_cmd_found is REF_EXT

line 375: [        }]

line 376: [    }]

line 377: [    if(!Match)]

line 378: [    {]

line 379: [        //float fullname[80]; getFullname(fullname,Arr[0]);]

line 380: [        float fullname = filepath_abs(Arr[0]);]
found local var fullname (BL = 2)
found reference to filepath_abs
currentFunc = ParseString
ref filepath_abs is REF_EXT

line 381: [        float ext = filepath_extension(fullname);]
found local var ext (BL = 2)
found reference to filepath_extension
currentFunc = ParseString
ref filepath_extension is REF_EXT
found reference to fullname
currentFunc = ParseString
ref fullname is REF_STACK

line 382: [        float buff2[120];]
found local var buff2 (BL = 2)

line 383: [        float Echo_prev = Echo;]
found local var Echo_prev (BL = 2)

line 384: [        if(!ext){]
found reference to ext
currentFunc = ParseString
ref ext is REF_STACK

line 385: [            //figure out how to put it all in a function]

line 386: [            float name2 = concat(fullname,".exe");]
removed string literal "".exe""
found local var name2 (BL = 3)
found reference to concat
currentFunc = ParseString
ref concat is REF_EXT

line 387: [            //first, try as extensionless]

line 388: [            if(fopen(fullname,"r")){]
removed string literal ""r""
found reference to fopen
currentFunc = ParseString
ref fopen is REF_EXT

line 389: [                //printf("condition 1 (ext-less)\n");]
removed string literal ""condition 1 (ext-less)\n""

line 390: [                Echo = 0;]

line 391: [                strcpy(buff2,"read ");]
removed string literal ""read ""
found reference to buff2
currentFunc = ParseString
ref buff2 is REF_STACK

line 392: [                strcpy(buff2+5,fullname);]

line 393: [                ParseString(buff2);]

line 394: [                Echo = Echo_prev;]
found reference to Echo_prev
currentFunc = ParseString
ref Echo_prev is REF_STACK

line 395: [                goto shell_cmd_found;]

line 396: [            }]

line 397: [            //first, try as executable]

line 398: [            if(fopen(name2,"r")){]
removed string literal ""r""
found reference to name2
currentFunc = ParseString
ref name2 is REF_STACK

line 399: [                //printf("condition 2 (as .exe)\n")]
removed string literal ""condition 2 (as .exe)\n""

line 400: [                Echo = 0;]

line 401: [                Ptr = buff2;]

line 402: [                strcpy(ptr,"run ");]
removed string literal ""run ""

line 403: [                ptr += 4;]

line 404: [                strcpy(ptr,name2);]

line 405: [                ptr += strlen(name2);]

line 406: [                if(strlen(Arr)>1){]

line 407: [                    *ptr++ = ' ';]
removed character literal "' '"

line 408: [                    arg_rest(ptr,1);]
found reference to arg_rest
currentFunc = ParseString
ref arg_rest is REF_EXT

line 409: [                }]

line 410: [            ]

line 411: [                ParseString(buff2);]

line 412: [                Echo = Echo_prev;]

line 413: [                goto shell_cmd_found;]

line 414: [            }]

line 415: [          ]

line 416: [        }else{]

line 417: [            if(fopen(fullname,"r")){]
removed string literal ""r""

line 418: [                //printf("ext: [%s]\n",ext);]
removed string literal ""ext: [%s]\n""

line 419: [                float ext_is_exe = strcmp(ext,str_exe)==0;]
found local var ext_is_exe (BL = 4)
found local var str_exe (BL = 4)

line 420: [                float ext_is_c = strcmp(ext,str_c)==0;]
found local var ext_is_c (BL = 4)
found local var str_c (BL = 4)

line 421: [                float ext_is_txt = strcmp(ext,str_txt)==0; //!-1 == 1 ??? WTF]
found local var ext_is_txt (BL = 4)
found local var str_txt (BL = 4)

line 422: [                float ext_is_sh = strcmp(ext,str_sh)==0;]
found local var ext_is_sh (BL = 4)
found local var str_sh (BL = 4)

line 423: [                float c_or_txt = ext_is_c || ext_is_txt;]
found local var c_or_txt (BL = 4)
found reference to ext_is_c
currentFunc = ParseString
ref ext_is_c is REF_STACK
found reference to ext_is_txt
currentFunc = ParseString
ref ext_is_txt is REF_STACK

line 424: [         ]

line 425: [                ]

line 426: [                if(ext_is_exe){]
found reference to ext_is_exe
currentFunc = ParseString
ref ext_is_exe is REF_STACK

line 427: [                    //printf("condition 6 (.exe)\n");]
removed string literal ""condition 6 (.exe)\n""

line 428: [                    Echo = 0;]

line 429: [                    strcpy(buff2,"run ");]
removed string literal ""run ""

line 430: [                    strcpy(buff2+4,str);]

line 431: [                    ParseString(buff2);]

line 432: [                    Echo = Echo_prev;]

line 433: [                    goto shell_cmd_found;]

line 434: [                }]

line 435: [                //if((strcmp(ext,"c")==0)||(strcmp(ext,"txt")==0)) //don't do if(func() || func()) or borks happen]
removed string literal ""c""
removed string literal ""txt""

line 436: [                if(c_or_txt){]
found reference to c_or_txt
currentFunc = ParseString
ref c_or_txt is REF_STACK

line 437: [                    //printf("condition 7 (.c or .txt)\n");]
removed string literal ""condition 7 (.c or .txt)\n""

line 438: [                    Echo = 0;]

line 439: [                    strcpy(buff2,"run notepad.exe ");]
removed string literal ""run notepad.exe ""

line 440: [                    strcpy(buff2+16,str);]

line 441: [                    ParseString(buff2);]

line 442: [                    Echo = Echo_prev;]

line 443: [                    goto shell_cmd_found;]

line 444: [                }]

line 445: [                if(ext_is_sh){]
found reference to ext_is_sh
currentFunc = ParseString
ref ext_is_sh is REF_STACK

line 446: [                    //printf("condition 8 (.sh)\n");]
removed string literal ""condition 8 (.sh)\n""

line 447: [                    Echo = 0;]

line 448: [                    strcpy(buff2,"exec ");]
removed string literal ""exec ""

line 449: [                    strcpy(buff2+5,str);]

line 450: [                    ParseString(buff2);]

line 451: [                    Echo = Echo_prev;]

line 452: [                    goto shell_cmd_found;]

line 453: [                }]

line 454: [            }]

line 455: [        }]

line 456: [        //if(fopen(fullname,"r")){]
removed string literal ""r""

line 457: [        //    float Echo_prev = Echo;]

line 458: [        //    Echo = 0;]

line 459: [        //    float buff2[120];]

line 460: [        //    strcpy(buff2,"run ");]
removed string literal ""run ""

line 461: [        //    strcpy(buff2+4,str);]

line 462: [        //    ParseString(buff2);]

line 463: [        //    Echo = Echo_prev;]

line 464: [        //}else{]

line 465: [            if(R==0){Print("huh?\n",900);}]
removed string literal ""huh?\n""
found reference to R
currentFunc = ParseString
ref R is REF_EXT

line 466: [            if(R==1){Print("wat\n",900);}]
removed string literal ""wat\n""

line 467: [            if(R==2){Print("No, this is patric.\n",900);}]
removed string literal ""No, this is patric.\n""

line 468: [            if(R==3){Print("Unrecognised command\n",900);}]
removed string literal ""Unrecognised command\n""

line 469: [            if(R==4){Print("You do talk nonsense \nsometimes.\n",900);}]
removed string literal ""You do talk nonsense \nsometimes.\n""

line 470: [            if(R==5){Print("I\'m afraid I can\'t \nlet you do that.\n",900);}]
removed string literal ""I\'m afraid I can\'t \nlet you do that.\n""

line 471: [            if(R==6){Print("Who are you?!\n",900);}]
removed string literal ""Who are you?!\n""

line 472: [            if(R==7){Print("Unknown command\n",900);}]
removed string literal ""Unknown command\n""

line 473: [            if(R==8){Print("Syntax Error\n",900);}]
removed string literal ""Syntax Error\n""

line 474: [            if(R==9){Print("ENGLISH MOTHERFUCKER,\nDO YOU SPEAK IT?\n",900);}]
removed string literal ""ENGLISH MOTHERFUCKER,\nDO YOU SPEAK IT?\n""

line 475: [            if(R==10){Print("What you need isnt \nalways what you want.\n",900)}]
removed string literal ""What you need isnt \nalways what you want.\n""

line 476: [            //dosound(0.16, ErrorSound);]

line 477: [             R++;if(R>10){R=0};]

line 478: [        //}]

line 479: [    }]

line 480: [    shell_cmd_found:]
found label shell_cmd_found

line 481: [    if(malloc_test()){]

line 482: [        P("Heap status:\n");]
removed string literal ""Heap status:\n""

line 483: [        malloc_print_count();]

line 484: [        malloc_init();]

line 485: [        P("Heap re-initialized\n");]
removed string literal ""Heap re-initialized\n""

line 486: [    }]

line 487: [    MinStrI=0;]

line 488: [    MinStr[1]=0;]

line 489: [    RedrawPending = 1;]

line 490: [}]

line 491: []

line 492: [void Ps(void *str){Print(string_c_str(str),999);}]
found func Ps



sig1 = void Ps(void *str)
sig2 = (void *str)
found param str
found reference to str
currentFunc = Ps
ref str is REF_STACK

line 493: []

line 494: []

line 495: [void redraw_all(){]
found func redraw_all



sig1 = void redraw_all()
sig2 = ()

line 496: [    //too bork]

line 497: [    //screen_clear();]

line 498: [    //float offs = (printScrY-17)*60;]

line 499: [    //if(offs < 0){offs = 0;}]

line 500: [    //float adrFrom = ConsoleStrBuff+offs;]

line 501: [    //float size = CONSOLE_BUFFER_SIZE-(printPtrY*60+printPtrX*2);]

line 502: [    //if(size > 17*60){size = 17*60;}]

line 503: [    //memcpy(AdrScreen,adrFrom,size);]

line 504: [    //RedrawPending = 1;]

line 505: [    cls();]

line 506: [}]

line 507: []

line 508: [void PrintProgressBar(float percent){]
found func PrintProgressBar



sig1 = void PrintProgressBar(float percent)
sig2 = (float percent)
found param percent

line 509: [    if(percent < 0){percent = 0;}]
found reference to percent
currentFunc = PrintProgressBar
ref percent is REF_STACK

line 510: [    if(percent > 100){percent = 100;}]

line 511: [    float bars = round(percent/5);]
found local var bars (BL = 1)

line 512: [    percent = round(percent);]

line 513: [    P("\r");]
removed string literal ""\r""

line 514: [    float I;]
found local var I (BL = 1)

line 515: [    for(I = 0; I < bars; I++){]
found reference to I
currentFunc = PrintProgressBar
ref I is REF_STACK
found reference to bars
currentFunc = PrintProgressBar
ref bars is REF_STACK

line 516: [        Print(" ",888111);]
removed string literal "" ""

line 517: [    }]

line 518: [    for(I = bars; I < 20; I++){]

line 519: [        Print(" ",222111);]
removed string literal "" ""

line 520: [    }]

line 521: [    P2(" ",percent,"%   ");]
removed string literal "" ""
removed string literal ""%   ""
found reference to P2
currentFunc = PrintProgressBar
ref P2 is REF_EXT

line 522: [}]

line 523: []

line 524: []

line 525: [void ParseKey(char key)]
found func ParseKey



sig1 = void ParseKey(char key)
sig2 = (char key)
found param key

line 526: [{]

line 527: [    float C = isPrint(key);]
found local var C (BL = 1)
found reference to key
currentFunc = ParseKey
ref key is REF_STACK

line 528: [    float A = isAlpha(key);]
found local var A (BL = 1)
found reference to isAlpha
currentFunc = ParseKey
ref isAlpha is REF_EXT

line 529: [    float B = isNum(key);]
found local var B (BL = 1)
found reference to isNum
currentFunc = ParseKey
ref isNum is REF_EXT

line 530: [    float I = 0;]
found local var I (BL = 1)

line 531: [    float numScrolls = 1;]
found local var numScrolls (BL = 1)

line 532: [    if(C)]
found reference to C
currentFunc = ParseKey
ref C is REF_STACK

line 533: [    {]

line 534: [        if(MinStrI<255)]

line 535: [        {]

line 536: [            MinStr[MinStrI++]=key;]

line 537: [            MinStr[MinStrI]=0;]

line 538: [        }]

line 539: [        RedrawPending = 1;]

line 540: [    }]

line 541: [    else]

line 542: [    {]

line 543: [        //if(key==13){ParseString(MinStr);}//enter //enter is key 10 now?]

line 544: [        if(key==10){]

line 545: [            listeningToInput = 0;]

line 546: [            DrawStatusBar();]

line 547: [            ParseString(MinStr);]

line 548: [        }//enter]

line 549: [        if(key==17){for(I = 0; I < numScrolls; I++){ConsoleShiftDown();}}]
found reference to I
currentFunc = ParseKey
ref I is REF_STACK
found reference to numScrolls
currentFunc = ParseKey
ref numScrolls is REF_STACK
found reference to ConsoleShiftDown
currentFunc = ParseKey
ref ConsoleShiftDown is REF_EXT

line 550: [        if(key==18){for(I = 0; I < numScrolls; I++){ConsoleShiftUp();}}]

line 551: [        if(key==127)]

line 552: [        {]

line 553: [            if(MinStrI>0){MinStrI--;}]

line 554: [            MinStr[MinStrI]=0;]

line 555: [            RedrawPending = 1;]

line 556: [        }]

line 557: [    }]

line 558: [}]

line 559: []

line 560: []

line 561: [void checkKB()]
found func checkKB



sig1 = void checkKB()
sig2 = ()

line 562: [{]

line 563: [    while(hasKey())]

line 564: [    {]

line 565: [        float key = readKey();]
found local var key (BL = 2)

line 566: [        ParseKey(key);]
found reference to ParseKey
currentFunc = checkKB
ref ParseKey is REF_EXT
found reference to key
currentFunc = checkKB
ref key is REF_STACK

line 567: [    }]

line 568: [}]

line 569: []

line 570: []

line 571: [float getShellInput()]
found func getShellInput



sig1 = float getShellInput()
sig2 = ()

line 572: [{]

line 573: [    MinStrI = 0;]

line 574: [    MinStr[MinStrI] = 0;]

line 575: [    RedrawPending = 1;]

line 576: [    while(1){]

line 577: [        while(hasKey()){    ]

line 578: [            char key = readKey();]
found local var key (BL = 3)

line 579: [            float C = isPrint(key);]
found local var C (BL = 3)
found reference to key
currentFunc = getShellInput
ref key is REF_STACK

line 580: [            float A = isAlpha(key);]
found local var A (BL = 3)

line 581: [            float B = isNum(key);]
found local var B (BL = 3)

line 582: [            if(C)]
found reference to C
currentFunc = getShellInput
ref C is REF_STACK

line 583: [            {]

line 584: [                if(MinStrI<255)]

line 585: [                {]

line 586: [                    MinStr[MinStrI++]=key;]

line 587: [                    MinStr[MinStrI]=0;]

line 588: [                }]

line 589: [                RedrawPending = 1;]

line 590: [            }]

line 591: [            else]

line 592: [            {]

line 593: [                //if(key==13){ParseString(MinStr);}//enter //enter is key 10 now?]

line 594: [                if(key==10){]

line 595: [                    float str = str_alloc(MinStr);]
found local var str (BL = 5)
found reference to str_alloc
currentFunc = getShellInput
ref str_alloc is REF_EXT

line 596: [                    MinStrI = 1;]

line 597: [                    MinStr[0] = ' ';]
removed character literal "' '"

line 598: [                    MinStr[MinStrI] = 0;]

line 599: [                    ReDrawPending = 1;]

line 600: [                    listeningToInput = 0;]

line 601: [                    DrawStatusBar();]

line 602: [                    return str;]
found reference to str
currentFunc = getShellInput
ref str is REF_STACK

line 603: [                }//enter]

line 604: [                if(key==127)]

line 605: [                {]

line 606: [                    if(MinStrI>0){MinStrI--;}]

line 607: [                    MinStr[MinStrI]=0;]

line 608: [                    RedrawPending = 1;]

line 609: [                }]

line 610: [            }]

line 611: [        }]

line 612: [        if(RedrawPending)]

line 613: [        {]

line 614: [            RedrawPending = 0;]

line 615: [            DrawStatusBar();]

line 616: [        }]

line 617: [    }]

line 618: [}]

line 619: []

line 620: [str_y: db "y",db 0;]
removed string literal ""y""
found label str_y

line 621: [str_n: db "n",db 0;]
removed string literal ""n""
found label str_n

line 622: []

line 623: [float getYN(){]
found func getYN



sig1 = float getYN()
sig2 = ()

line 624: [    getYNloop:]
found label getYNloop

line 625: [    float str = getShellInput();]
found local var str (BL = 1)
found reference to getShellInput
currentFunc = getYN
ref getShellInput is REF_EXT

line 626: [    if(strcmp(str,str_y)==0){]
found reference to str
currentFunc = getYN
ref str is REF_STACK
found reference to str_y
currentFunc = getYN
ref str_y is REF_EXT

line 627: [        printf("entered \'y\'\n");]
removed string literal ""entered \'y\'\n""

line 628: [        return 1;]

line 629: [    }]

line 630: [    if(strcmp(str,str_n)==0){]
found reference to str_n
currentFunc = getYN
ref str_n is REF_EXT

line 631: [        printf("entered \'n\'\n");]
removed string literal ""entered \'n\'\n""

line 632: [        return 0;]

line 633: [    }]

line 634: [    printf("enter 'y' or 'n'\n");]
removed string literal ""enter 'y' or 'n'\n""

line 635: [    goto getYNloop;]
found reference to getYNloop
currentFunc = getYN
ref getYNloop is REF_EXT

line 636: [}]

line 637: [//float getKeyPending(){]

line 638: [//    char C = AdrKB[1]]

line 639: [//    if(C){AdrKB[0] = 0;}]

line 640: [//    return C;]

line 641: [//}]

line 642: []

line 643: [void help()]
found func help



sig1 = void help()
sig2 = ()

line 644: [{]

line 645: [    float argc = strlen(Arr);]
found local var argc (BL = 1)

line 646: [    float I;]
found local var I (BL = 1)

line 647: [    float Match;]
found local var Match (BL = 1)

line 648: [    float size;]
found local var size (BL = 1)

line 649: [    float CMD;]
found local var CMD (BL = 1)

line 650: [    float name;]
found local var name (BL = 1)

line 651: [    float helpstr;]
found local var helpstr (BL = 1)

line 652: [    if(argc == 1){]
found reference to argc
currentFunc = help
ref argc is REF_STACK

line 653: [        //I = CommandBuff;]

line 654: [        Match = 0;]
found reference to Match
currentFunc = help
ref Match is REF_STACK

line 655: [        //while(I<CommandBuffEnd)]

line 656: [        //{]

line 657: [        //    Print(I,90);]

line 658: [        //    Print(" ",90);]
removed string literal "" ""

line 659: [        //    I = I+strlen(I)+3;]

line 660: [        //}]

line 661: [        size = vector_get_size(CommandList);]

line 662: [        for(I = 0; I < size; I++){]
found reference to I
currentFunc = help
ref I is REF_STACK

line 663: [            CMD = vector_get(CommandList,0,I);]
found reference to CMD
currentFunc = help
ref CMD is REF_STACK
found reference to vector_get
currentFunc = help
ref vector_get is REF_EXT

line 664: [            name = CMD[1];]
found reference to name
currentFunc = help
ref name is REF_STACK

line 665: [            helpstr = CMD[3];]
found reference to helpstr
currentFunc = help
ref helpstr is REF_STACK

line 666: [            Print(name,90);]

line 667: [            if(helpstr){]

line 668: [                Print(" ",90);]
removed string literal "" ""

line 669: [                Print(helpstr,999);]

line 670: [            }]

line 671: [            Print("\n",999);]
removed string literal ""\n""

line 672: [        }]

line 673: [        ]

line 674: [        Print("\n",90);]
removed string literal ""\n""

line 675: [        P("type help <command> for command description\n");]
removed string literal ""type help <command> for command description\n""

line 676: [    }else{]

line 677: [        size = vector_get_size(CommandList);]

line 678: [        ]

line 679: [        //I = CommandBuff;]

line 680: [        Match = 0;]

line 681: [        for(I = 0; I < size; I++){]

line 682: [            CMD = vector_get(CommandList,0,I);]

line 683: [            name = CMD[1];]

line 684: [            helpstr = CMD[3];]

line 685: [            if(strcmp(Arr[1],name) == 0){]

line 686: [                Match = 1;]

line 687: [                if(helpstr){]

line 688: [                    P(helpstr);]

line 689: [                }else{]

line 690: [                    P("no help for this command is available.\n");]
removed string literal ""no help for this command is available.\n""

line 691: [                }]

line 692: [                return;]

line 693: [            }]

line 694: [        }]

line 695: [        //while(I<CommandBuffEnd)]

line 696: [        //{]

line 697: [        //    if(strcmp(Arr[1],I)==0)]

line 698: [        //    {]

line 699: [        //        I = I+strlen(I)+2;]

line 700: [        //        Match = 1;]

line 701: [        //        float str = *I;]

line 702: [        //        if(str){]

line 703: [        //            P(str);]

line 704: [        //        }else{]

line 705: [        //            P("no help for this command is available.\n");]
removed string literal ""no help for this command is available.\n""

line 706: [        //        }]

line 707: [        //        return;]

line 708: [        //    }]

line 709: [        //    else]

line 710: [        //    {]

line 711: [        //        I = I+strlen(I)+3;]

line 712: [        //    }]

line 713: [        //}]

line 714: [        ]

line 715: [        P("unknown command, can't help.\n");]
removed string literal ""unknown command, can't help.\n""

line 716: [        ]

line 717: [    }]

line 718: [}]

line 719: []

line 720: [help_help: db "helps with console commands. \"help\" for list of commands or \"help <command>\" for help with specific command.\n", db 0;]
removed string literal ""helps with console commands. \"help\" for list of commands or \"help <command>\" for help with specific command.\n""
found label help_help

line 721: []

line 722: [void cmdtest()]
found func cmdtest



sig1 = void cmdtest()
sig2 = ()

line 723: [{]

line 724: [    //float I = 0;]

line 725: [    //for(I = 0; I < 10; I++){]

line 726: [    //    P2("\rI = ",I,"");]
removed string literal ""\rI = ""
removed string literal """"

line 727: [    //    delay(1);]

line 728: [    //}]

line 729: [    //P("\ndone\n");]
removed string literal ""\ndone\n""

line 730: [    //redraw_all();]

line 731: [    out 6,3;]

line 732: [    float main_thread = thread_create(shell,0);]
found local var main_thread (BL = 1)
found reference to thread_create
currentFunc = cmdtest
ref thread_create is REF_EXT
found reference to shell
currentFunc = cmdtest
ref shell is REF_EXT

line 733: [    thread_enter(main_thread); //never returns.]
found reference to thread_enter
currentFunc = cmdtest
ref thread_enter is REF_EXT
found reference to main_thread
currentFunc = cmdtest
ref main_thread is REF_STACK

line 734: [}]

line 735: [test_help: db "tests thread creation\n", db 0;]
removed string literal ""tests thread creation\n""
found label test_help

line 736: []

line 737: [void cmdtest2(){]
found func cmdtest2



sig1 = void cmdtest2()
sig2 = ()

line 738: [    ]

line 739: [    //float t_esp = esp;]

line 740: [    //float t_ss = ss;]

line 741: [    //float t_ebp = ebp;]

line 742: [    //P2("ESP = ",t_esp,"\n");]
removed string literal ""ESP = ""
removed string literal ""\n""

line 743: [    //P2("SS = ",t_ss,"\n");]
removed string literal ""SS = ""
removed string literal ""\n""

line 744: [    //P2("EBP = ",t_ebp,"\n");]
removed string literal ""EBP = ""
removed string literal ""\n""

line 745: [    float args = malloc(2);]
found local var args (BL = 1)

line 746: [    args[0] = 0;]
found reference to args
currentFunc = cmdtest2
ref args is REF_STACK

line 747: [    args[1] = 1;]

line 748: [    float thread2 = thread_create(multitask_test,args);]
found local var thread2 (BL = 1)
found local var args (BL = 1)

line 749: [    //thread_enter(thread2);]

line 750: [    float argc = strlen(Arr);]
found local var argc (BL = 1)

line 751: [    if(argc > 1){]
found reference to argc
currentFunc = cmdtest2
ref argc is REF_STACK

line 752: [        if(strcmp(Arr[1],"y")==0){]
removed string literal ""y""

line 753: [            P("going through yield\n");]
removed string literal ""going through yield\n""

line 754: [            thread_yield();]

line 755: [            return;]

line 756: [        }]

line 757: [        if(strcmp(Arr[1],"e")==0){]
removed string literal ""e""

line 758: [            P("going through enter\n");]
removed string literal ""going through enter\n""

line 759: [            thread_enter(thread2);]
found reference to thread2
currentFunc = cmdtest2
ref thread2 is REF_STACK

line 760: [            return;]

line 761: [        }]

line 762: [    }]

line 763: [    P("going default\n");]
removed string literal ""going default\n""

line 764: [    thread_yield();]

line 765: [}]

line 766: [test2_help: db "tests thread switching\n", db 0;]
removed string literal ""tests thread switching\n""
found label test2_help

line 767: []

line 768: [void cmdtest3(){]
found func cmdtest3



sig1 = void cmdtest3()
sig2 = ()

line 769: [    float argc = strlen(Arr);]
found local var argc (BL = 1)

line 770: [    if(argc > 1){]
found reference to argc
currentFunc = cmdtest3
ref argc is REF_STACK

line 771: [        float num = str2num(Arr[1]);]
found local var num (BL = 2)
found reference to str2num
currentFunc = cmdtest3
ref str2num is REF_EXT

line 772: [        printf("firing int %d\n",num);]
removed string literal ""firing int %d\n""
found reference to num
currentFunc = cmdtest3
ref num is REF_STACK

line 773: [        int num;]

line 774: [    }else{]

line 775: [        printf("executing 0\n");]
removed string literal ""executing 0\n""

line 776: [        db 0;]

line 777: [    }]

line 778: [}]

line 779: [test3_help: db "tests interrupts\n", db 0;]
removed string literal ""tests interrupts\n""
found label test3_help

line 780: []

line 781: [trace_data:]
found label trace_data

line 782: [alloc 80;]

line 783: []

line 784: [void cmdtrace(){]
found func cmdtrace



sig1 = void cmdtrace()
sig2 = ()

line 785: [    getStackTrace(trace_data);]

line 786: [    printStackTrace(trace_data);]

line 787: [}]

line 788: [trace_help: db "prints a stack trace\n", db 0;]
removed string literal ""prints a stack trace\n""
found label trace_help

line 789: []

line 790: [void cmdyield(){]
found func cmdyield



sig1 = void cmdyield()
sig2 = ()

line 791: [    thread_yield();]

line 792: [}]

line 793: []

line 794: [void cmdps(){]
found func cmdps



sig1 = void cmdps()
sig2 = ()

line 795: [    print_threads();]
found reference to print_threads
currentFunc = cmdps
ref print_threads is REF_EXT

line 796: [}]

line 797: []

line 798: [void printversion()]
found func printversion



sig1 = void printversion()
sig2 = ()

line 799: [{]

line 800: [ //   P("August 24, 2015\n");]
removed string literal ""August 24, 2015\n""

line 801: [   // P("Official designation:\n");]
removed string literal ""Official designation:\n""

line 802: [    P(OSname);P("\n");]
removed string literal ""\n""
found reference to OSname
currentFunc = printversion
ref OSname is REF_EXT

line 803: [    P2("Size: ", End/1024 ," kB\n");]
removed string literal ""Size: ""
removed string literal "" kB\n""
found reference to End
currentFunc = printversion
ref End is REF_EXT

line 804: [    P2("AdrEB: ",AdrEB,"\n");]
removed string literal ""AdrEB: ""
removed string literal ""\n""

line 805: [    P2("AdrRAM ",AdrRam,"\n");]
removed string literal ""AdrRAM ""
removed string literal ""\n""

line 806: [    P2("AdrKb: ",AdrKb,"\n");]
removed string literal ""AdrKb: ""
removed string literal ""\n""

line 807: [    P2("AdrScreen: ",AdrScreen,"\n");]
removed string literal ""AdrScreen: ""
removed string literal ""\n""

line 808: [    P2("AdrHDD: ",AdrHDD,"\n");]
removed string literal ""AdrHDD: ""
removed string literal ""\n""

line 809: [    P2("AdrPort: ",AdrPort,"\n");]
removed string literal ""AdrPort: ""
removed string literal ""\n""

line 810: [}]

line 811: [printversion_help: db "prints OS version and configuration\n", db 0;]
removed string literal ""prints OS version and configuration\n""
found label printversion_help

line 812: []

line 813: [void cmdecho()]
found func cmdecho



sig1 = void cmdecho()
sig2 = ()

line 814: [{]

line 815: [    if(strcmp(Arr[1],"off")==0){Echo = 0;}]
removed string literal ""off""

line 816: [    else]

line 817: [    {]

line 818: [        if(strcmp(Arr[1],"on")==0){Echo = 1;}]
removed string literal ""on""

line 819: [        else]

line 820: [        {]

line 821: [            //float argc = strlen(Arr);]

line 822: [            //P2("echo argc = ",argc,"\n");]
removed string literal ""echo argc = ""
removed string literal ""\n""

line 823: [            ]

line 824: [            ]

line 825: [            float I = 1;]
found local var I (BL = 3)

line 826: [            float S = Arr[I++];]
found local var S (BL = 3)
found reference to I
currentFunc = cmdecho
ref I is REF_STACK

line 827: [            while(S)]
found reference to S
currentFunc = cmdecho
ref S is REF_STACK

line 828: [            {]

line 829: [                Print(S,90);]

line 830: [                Print(" ",90);]
removed string literal "" ""

line 831: [                S = Arr[I++];   ]

line 832: [            }]

line 833: [            Print("\n",90);]
removed string literal ""\n""

line 834: [        }]

line 835: [    }]

line 836: [}]

line 837: [echo_help: db "echoes input. \"echo off\" to turn off and \"echo on\" to turn on.\n", db 0;]
removed string literal ""echoes input. \"echo off\" to turn off and \"echo on\" to turn on.\n""
found label echo_help

line 838: []

line 839: [//void delay(float time)]

line 840: [//{]

line 841: [//    preserve edx;]

line 842: [//    timer edx;]

line 843: [//    float T = edx;]

line 844: [//    while((edx-T)<time)]

line 845: [//    {]

line 846: [//        timer edx;]

line 847: [//    }]

line 848: [//    zap edx;]

line 849: [//}]

line 850: []

line 851: [float arg_rest(float buff, float n){]
found func arg_rest



sig1 = float arg_rest(float buff, float n)
sig2 = (float buff, float n)
found param buff
found param n

line 852: [    float argc = strlen(Arr);]
found local var argc (BL = 1)

line 853: [    float I;]
found local var I (BL = 1)

line 854: [    for(I = n; I < argc; I++){]
found reference to I
currentFunc = arg_rest
ref I is REF_STACK
found reference to n
currentFunc = arg_rest
ref n is REF_STACK
found reference to argc
currentFunc = arg_rest
ref argc is REF_STACK

line 855: [        strcpy(buff,Arr[I]);]
found reference to buff
currentFunc = arg_rest
ref buff is REF_STACK

line 856: [        buff += strlen(Arr[I]);]

line 857: [        if((I+1) < argc){*buff++ = ' ';}]
removed character literal "' '"

line 858: [    }]

line 859: [    *buff = 0;]

line 860: [}]

line 861: []

line 862: [void cmdtime()]
found func cmdtime



sig1 = void cmdtime()
sig2 = ()

line 863: [{]

line 864: [    float argc = strlen(Arr);]
found local var argc (BL = 1)

line 865: [    if(argc > 1){]
found reference to argc
currentFunc = cmdtime
ref argc is REF_STACK

line 866: [        curticks();]
found reference to curticks
currentFunc = cmdtime
ref curticks is REF_EXT

line 867: [        curticks(); //for some reason the first time curticks is called, it gives weird results]

line 868: [        float time1 = curtime();]
found local var time1 (BL = 2)
found reference to curtime
currentFunc = cmdtime
ref curtime is REF_EXT

line 869: [        float ticks1 = curticks();]
found local var ticks1 (BL = 2)

line 870: [        float cmd2[80]; arg_rest(cmd2,1);]
found local var cmd2 (BL = 2)
found reference to cmd2
currentFunc = cmdtime
ref cmd2 is REF_STACK

line 871: [        float ticks2 = curticks();]
found local var ticks2 (BL = 2)

line 872: [        ParseStringSilent(cmd2);]
found reference to ParseStringSilent
currentFunc = cmdtime
ref ParseStringSilent is REF_EXT

line 873: [        float time2 = curtime();]
found local var time2 (BL = 2)

line 874: [        float dtime = time2-time1;]
found local var dtime (BL = 2)
found reference to time2
currentFunc = cmdtime
ref time2 is REF_STACK
found reference to time1
currentFunc = cmdtime
ref time1 is REF_STACK

line 875: [        float dticks = ticks2-ticks1;]
found local var dticks (BL = 2)
found reference to ticks2
currentFunc = cmdtime
ref ticks2 is REF_STACK
found reference to ticks1
currentFunc = cmdtime
ref ticks1 is REF_STACK

line 876: [        P2("T: ",dtime,"s ");]
removed string literal ""T: ""
removed string literal ""s ""
found reference to dtime
currentFunc = cmdtime
ref dtime is REF_STACK

line 877: [        P2("/ ",dticks," ticks\n");]
removed string literal ""/ ""
removed string literal "" ticks\n""
found reference to dticks
currentFunc = cmdtime
ref dticks is REF_STACK

line 878: [    }else{]

line 879: [        float time = curtime();]
found local var time (BL = 2)

line 880: [        time = eax;]
found reference to time
currentFunc = cmdtime
ref time is REF_STACK

line 881: [        //Print(num2str(eax),90);Print("\n",90);]
removed string literal ""\n""

line 882: [        P2("Time since start: ",time," seconds\n");]
removed string literal ""Time since start: ""
removed string literal "" seconds\n""

line 883: [    }]

line 884: [}]

line 885: [time_help: db "tells the current time in seconds since CPU start, or times the execution of a command.\n", db 0;]
removed string literal ""tells the current time in seconds since CPU start, or times the execution of a command.\n""
found label time_help

line 886: []

line 887: [void cmd_test4()]
found func cmd_test4



sig1 = void cmd_test4()
sig2 = ()

line 888: [{]

line 889: [    float mem = malloc(10000);]
found local var mem (BL = 1)

line 890: [    float time1 = 0;]
found local var time1 (BL = 1)

line 891: [    float time2 = 0;]
found local var time2 (BL = 1)

line 892: [    float delta = 0;]
found local var delta (BL = 1)

line 893: [    float ptr = 0;]
found local var ptr (BL = 1)

line 894: [    float I = 0;]
found local var I (BL = 1)

line 895: [    for(I = 0; I < 100; I++){]
found reference to I
currentFunc = cmd_test4
ref I is REF_STACK

line 896: [        timer eax;]

line 897: [        mov time1, eax;]
found reference to time1
currentFunc = cmd_test4
ref time1 is REF_STACK

line 898: [        ptr = mem+100*I;]
found reference to ptr
currentFunc = cmd_test4
ref ptr is REF_STACK
found reference to mem
currentFunc = cmd_test4
ref mem is REF_STACK

line 899: [        *ptr = 1;]

line 900: [        *ptr = 0;]

line 901: [        timer eax;]

line 902: [        mov time2, eax;]
found reference to time2
currentFunc = cmd_test4
ref time2 is REF_STACK

line 903: [        delta = time2-time1;]
found reference to delta
currentFunc = cmd_test4
ref delta is REF_STACK

line 904: [        printf("ptr %d, time %d\n",ptr,delta);]
removed string literal ""ptr %d, time %d\n""

line 905: [    }]

line 906: [    free(mem);]

line 907: [}]

line 908: [test4_help: db "tests R/W speed\n", db 0;]
removed string literal ""tests R/W speed\n""
found label test4_help

line 909: []

line 910: [void cmd_test5()]
found func cmd_test5



sig1 = void cmd_test5()
sig2 = ()

line 911: [{]

line 912: [    float argc = strlen(Arr);]
found local var argc (BL = 1)

line 913: [    if(argc>1){]
found reference to argc
currentFunc = cmd_test5
ref argc is REF_STACK

line 914: [        float binary = 0;]
found local var binary (BL = 2)

line 915: [        if(argc>2){]

line 916: [            if(!strcmp(Arr[2],"-b")){binary = 1;}]
removed string literal ""-b""
found reference to binary
currentFunc = cmd_test5
ref binary is REF_STACK

line 917: [        }]

line 918: []

line 919: [        float fullname = filepath_abs(Arr[1]);]
found local var fullname (BL = 2)

line 920: [        float F = fopen(fullname,"r");]
removed string literal ""r""
found local var F (BL = 2)
found reference to fullname
currentFunc = cmd_test5
ref fullname is REF_STACK

line 921: [        if(!F){Print("Can't open ",900); Print(fullname,900); Print("\n",900);return;}]
removed string literal ""Can't open ""
removed string literal ""\n""
found reference to F
currentFunc = cmd_test5
ref F is REF_STACK

line 922: [        ]

line 923: [        ds_read_definition(F);]
found reference to ds_read_definition
currentFunc = cmd_test5
ref ds_read_definition is REF_EXT

line 924: [        ]

line 925: [        float type = ds_get_typeinfo("test");]
removed string literal ""test""
found local var type (BL = 2)
found reference to ds_get_typeinfo
currentFunc = cmd_test5
ref ds_get_typeinfo is REF_EXT

line 926: [        float dyn = ds_new(type);]
found local var dyn (BL = 2)
found reference to ds_new
currentFunc = cmd_test5
ref ds_new is REF_EXT
found reference to type
currentFunc = cmd_test5
ref type is REF_STACK

line 927: [        //ptr string name]

line 928: [        ds_set(dyn, "*name", stralloc("MyAwesomeTest"));]
removed string literal ""*name""
removed string literal ""MyAwesomeTest""
found reference to ds_set
currentFunc = cmd_test5
ref ds_set is REF_EXT
found reference to dyn
currentFunc = cmd_test5
ref dyn is REF_STACK
found reference to stralloc
currentFunc = cmd_test5
ref stralloc is REF_EXT

line 929: [        //[3] float vec]

line 930: [        ds_set(dyn, "vec[0]", 5);]
removed string literal ""vec[0]""

line 931: [        float arr = ds_get_ref(dyn, "vec");]
removed string literal ""vec""
found local var arr (BL = 2)
found reference to ds_get_ref
currentFunc = cmd_test5
ref ds_get_ref is REF_EXT

line 932: [        ds_set_index(arr, 1, 3);]
found reference to ds_set_index
currentFunc = cmd_test5
ref ds_set_index is REF_EXT

line 933: [        //float size]

line 934: [        float size = 4;]
found local var size (BL = 2)

line 935: [        ds_set(dyn, "size", size);]
removed string literal ""size""

line 936: [        //float num]

line 937: [        ds_set(dyn, "num", 2);]
removed string literal ""num""

line 938: [        //float where]

line 939: [        float ptrword = ds_get(dyn, "where");]
removed string literal ""where""
found local var ptrword (BL = 2)
found reference to ds_get
currentFunc = cmd_test5
ref ds_get is REF_EXT

line 940: [        //ptr [size] float arr1]

line 941: [        float arr1 = ds_get_ref(dyn, "*arr1");]
removed string literal ""*arr1""
found local var arr1 (BL = 2)

line 942: [        float I;]
found local var I (BL = 2)

line 943: [        for(I = 0; I < size; I++){]
found reference to I
currentFunc = cmd_test5
ref I is REF_STACK

line 944: [            ds_set_index(arr1, I, I);]
found reference to arr1
currentFunc = cmd_test5
ref arr1 is REF_STACK

line 945: [        }]

line 946: [        //[0] cs boop boops;]

line 947: [        float type2 = ds_get_typeinfo("boop");]
removed string literal ""boop""
found local var type2 (BL = 2)

line 948: [        ]

line 949: [        float boop;]
found local var boop (BL = 2)

line 950: [        for(I = 0; I < 5; I++){]

line 951: [            boop = ds_new(type2);]
found reference to boop
currentFunc = cmd_test5
ref boop is REF_STACK
found reference to type2
currentFunc = cmd_test5
ref type2 is REF_STACK

line 952: [            ds_set(boop, "adr", I);]
removed string literal ""adr""

line 953: [            ds_set(boop, "name", stralloc("hi"));]
removed string literal ""name""
removed string literal ""hi""

line 954: [            ds_push(dyn, "boops", boop);]
removed string literal ""boops""
found reference to ds_push
currentFunc = cmd_test5
ref ds_push is REF_EXT

line 955: [        }]

line 956: [        //cs vector v;]

line 957: [        float v = malloc(sizeof_vector);]
found local var v (BL = 2)

line 958: [        vector_constructor(v,1);]
found reference to v
currentFunc = cmd_test5
ref v is REF_STACK

line 959: [        ds_set(dyn,"V",v);]
removed string literal ""V""

line 960: [        //float word]

line 961: [        *ptrword = 6;]
found reference to ptrword
currentFunc = cmd_test5
ref ptrword is REF_STACK

line 962: [        //variant what(num);]

line 963: [        ds_set(dyn, "hi", stralloc("hello"));]
removed string literal ""hi""
removed string literal ""hello""

line 964: [        //union noms happy]

line 965: [        ds_set(dyn, "happy.apple", stralloc("horse"));]
removed string literal ""happy.apple""
removed string literal ""horse""

line 966: [        //done]

line 967: [        ds_print(dyn);]
found reference to ds_print
currentFunc = cmd_test5
ref ds_print is REF_EXT

line 968: [    }else{]

line 969: [        P("usage: test5 filename\n");]
removed string literal ""usage: test5 filename\n""

line 970: [    }]

line 971: [}]

line 972: [test5_help: db "tests dynamic struct parsing\n", db 0;]
removed string literal ""tests dynamic struct parsing\n""
found label test5_help

line 973: []

line 974: []

line 975: [void test6_reset(float buff){]
found func test6_reset



sig1 = void test6_reset(float buff)
sig2 = (float buff)
found param buff

line 976: [    float I;]
found local var I (BL = 1)

line 977: [    for(I = 0; I < 50; I++){]
found reference to I
currentFunc = test6_reset
ref I is REF_STACK

line 978: [        buff[I] = 15; //fancy star symbol]
found reference to buff
currentFunc = test6_reset
ref buff is REF_STACK

line 979: [    }]

line 980: [}]

line 981: []

line 982: [void test6_print(float buff, float record){]
found func test6_print



sig1 = void test6_print(float buff, float record)
sig2 = (float buff, float record)
found param buff
found param record

line 983: [    printf("record = %d\n",record);]
removed string literal ""record = %d\n""
found reference to record
currentFunc = test6_print
ref record is REF_STACK

line 984: [    if(record){]

line 985: [        float typeof = record[0];]
found local var typeof (BL = 2)

line 986: [        float size = record[1];]
found local var size (BL = 2)

line 987: [        if(!typeof){typeof = "<null>";}]
removed string literal ""<null>""
found reference to typeof
currentFunc = test6_print
ref typeof is REF_STACK

line 988: [        printf("typeof = %s\n",typeof);]
removed string literal ""typeof = %s\n""

line 989: [        printf("size = %d\n",size);]
removed string literal ""size = %d\n""

line 990: [    }]

line 991: [    float I;]
found local var I (BL = 1)

line 992: [    for(I = 0; I < 50; I++){]
found reference to I
currentFunc = test6_print
ref I is REF_STACK

line 993: [        float C = buff[I];]
found local var C (BL = 2)
found reference to buff
currentFunc = test6_print
ref buff is REF_STACK

line 994: [        float pcolor = 999;]
found local var pcolor (BL = 2)

line 995: [        //if(isPrint(C) == 0){pcolor = 555;}]

line 996: [        printf("%e%m%c",1,pcolor,C);]
removed string literal ""%e%m%c""
found reference to pcolor
currentFunc = test6_print
ref pcolor is REF_STACK
found reference to C
currentFunc = test6_print
ref C is REF_STACK

line 997: [    }]

line 998: [    printf("\n");]
removed string literal ""\n""

line 999: [    if(record){]

line 1000: [        if(size < 50){]

line 1001: [            for(I = 0; I < size; I++){]

line 1002: [                printf(" ");]
removed string literal "" ""

line 1003: [            }]

line 1004: [            printf("^");]
removed string literal ""^""

line 1005: [        }]

line 1006: [    }]

line 1007: [    printf("\n");]
removed string literal ""\n""

line 1008: [}]

line 1009: []

line 1010: [float test6_myalloc(float n, float buff){]
found func test6_myalloc



sig1 = float test6_myalloc(float n, float buff)
sig2 = (float n, float buff)
found param n
found param buff

line 1011: [    assert_arity(ecx,2);]

line 1012: [    printf("allc.malloc(%d, %d) = %d\n",n,buff,buff);]
removed string literal ""allc.malloc(%d, %d) = %d\n""
found reference to n
currentFunc = test6_myalloc
ref n is REF_STACK
found reference to buff
currentFunc = test6_myalloc
ref buff is REF_STACK

line 1013: [    return buff;]

line 1014: [}]

line 1015: [float test6_myrealloc(float p, float n, float buff){]
found func test6_myrealloc



sig1 = float test6_myrealloc(float p, float n, float buff)
sig2 = (float p, float n, float buff)
found param p
found param n
found param buff

line 1016: [    assert_arity(ecx,3);]

line 1017: [    printf("alc.reallod(%d, %d, %d) = %d\n",p,n,buff,buff);]
removed string literal ""alc.reallod(%d, %d, %d) = %d\n""
found reference to n
currentFunc = test6_myrealloc
ref n is REF_STACK
found reference to buff
currentFunc = test6_myrealloc
ref buff is REF_STACK

line 1018: [    return buff;    ]

line 1019: [}]

line 1020: [float test6_myfree(float p, float buff){]
found func test6_myfree



sig1 = float test6_myfree(float p, float buff)
sig2 = (float p, float buff)
found param p
found param buff

line 1021: [    assert_arity(ecx,2);]

line 1022: [    printf("alc.free(%d,%d) = 0\n",p,buff);]
removed string literal ""alc.free(%d,%d) = 0\n""
found reference to buff
currentFunc = test6_myfree
ref buff is REF_STACK

line 1023: [    return 0;]

line 1024: [}]

line 1025: []

line 1026: [void cmd_test6()]
found func cmd_test6



sig1 = void cmd_test6()
sig2 = ()

line 1027: [{]

line 1028: [    float testnum = 0;]
found local var testnum (BL = 1)

line 1029: [    float buff = malloc(50);]
found local var buff (BL = 1)

line 1030: [    printf("buff = %d\n",buff);]
removed string literal ""buff = %d\n""
found reference to buff
currentFunc = cmd_test6
ref buff is REF_STACK

line 1031: [    float helloworld = "Hello World!";]
removed string literal ""Hello World!""
found local var helloworld (BL = 1)

line 1032: [    float hwlen = strlen(helloworld);]
found local var hwlen (BL = 1)
found reference to helloworld
currentFunc = cmd_test6
ref helloworld is REF_STACK

line 1033: [    float apple = "Apple";]
removed string literal ""Apple""
found local var apple (BL = 1)

line 1034: [    float aplen = strlen(apple);]
found local var aplen (BL = 1)
found reference to apple
currentFunc = cmd_test6
ref apple is REF_STACK

line 1035: [    ]

line 1036: [    float allc = allocator_new();]
found local var allc (BL = 1)
found reference to allocator_new
currentFunc = cmd_test6
ref allocator_new is REF_EXT

line 1037: [    allocator_set_impl(allc, buff);]
found reference to allocator_set_impl
currentFunc = cmd_test6
ref allocator_set_impl is REF_EXT
found reference to allc
currentFunc = cmd_test6
ref allc is REF_STACK

line 1038: [    allocator_set_malloc(allc,test6_myalloc);]
found reference to test6_myalloc
currentFunc = cmd_test6
ref test6_myalloc is REF_EXT

line 1039: [    allocator_set_realloc(allc,test6_myrealloc);]
found reference to test6_myrealloc
currentFunc = cmd_test6
ref test6_myrealloc is REF_EXT

line 1040: [    allocator_set_free(allc,test6_myfree);]
found reference to test6_myfree
currentFunc = cmd_test6
ref test6_myfree is REF_EXT

line 1041: [    setallocator(allc);]

line 1042: [    if(malloc_test()==0){printf("malloc_test %d ok\n",testnum++);}]
removed string literal ""malloc_test %d ok\n""
found reference to testnum
currentFunc = cmd_test6
ref testnum is REF_STACK

line 1043: [    printf("we got %mfun %mc%mo%ml%mo%mr%ms%m now!\n",90,900,950,90,99,9,909,999);]
removed string literal ""we got %mfun %mc%mo%ml%mo%mr%ms%m now!\n""

line 1044: [    printf("hw = [%s], hwlen = %d\n",helloworld,hwlen);]
removed string literal ""hw = [%s], hwlen = %d\n""
found reference to hwlen
currentFunc = cmd_test6
ref hwlen is REF_STACK

line 1045: [    if(malloc_test()==0){printf("malloc_test %d ok\n",testnum++);}]
removed string literal ""malloc_test %d ok\n""

line 1046: [    test6_reset(buff);]
found reference to test6_reset
currentFunc = cmd_test6
ref test6_reset is REF_EXT

line 1047: [    if(malloc_test()==0){printf("malloc_test %d ok\n",testnum++);}]
removed string literal ""malloc_test %d ok\n""

line 1048: [    ]

line 1049: [    float record = buff;]
found local var record (BL = 1)

line 1050: [    printf("r = %d\n",record);]
removed string literal ""r = %d\n""
found reference to record
currentFunc = cmd_test6
ref record is REF_STACK

line 1051: [    record_constructor(record,3);]
found reference to record_constructor
currentFunc = cmd_test6
ref record_constructor is REF_EXT

line 1052: [    printf("r = %d\n",record);]
removed string literal ""r = %d\n""

line 1053: [    if(malloc_test()==0){printf("malloc_test %d ok\n",testnum++);}]
removed string literal ""malloc_test %d ok\n""

line 1054: [    test6_print(buff,record);]
found reference to test6_print
currentFunc = cmd_test6
ref test6_print is REF_EXT

line 1055: [    ]

line 1056: [    if(malloc_test()==0){printf("malloc_test %d ok\n",testnum++);}]
removed string literal ""malloc_test %d ok\n""

line 1057: [    ]

line 1058: [    printf("adding hw\n");]
removed string literal ""adding hw\n""

line 1059: [    record = record_push_array(record,helloworld,hwlen);]
found reference to record_push_array
currentFunc = cmd_test6
ref record_push_array is REF_EXT

line 1060: [    printf("r = %d\n",record);]
removed string literal ""r = %d\n""

line 1061: [    if(malloc_test()==0){printf("malloc_test %d ok\n",testnum++);}]
removed string literal ""malloc_test %d ok\n""

line 1062: [    //expected output: "[Hello World!]"]
removed string literal ""[Hello World!]""

line 1063: [    test6_print(buff,buff);]

line 1064: [    test6_print(record,record);]

line 1065: [    printf("r = %d\n",record);]
removed string literal ""r = %d\n""

line 1066: [    if(malloc_test()==0){printf("malloc_test %d ok\n",testnum++);}]
removed string literal ""malloc_test %d ok\n""

line 1067: [    ]

line 1068: [    printf("setting ap\n");]
removed string literal ""setting ap\n""

line 1069: [    printf("r = %d\n",record);]
removed string literal ""r = %d\n""

line 1070: [    record_set_array(record,6,apple,aplen);]
found reference to record_set_array
currentFunc = cmd_test6
ref record_set_array is REF_EXT
found reference to aplen
currentFunc = cmd_test6
ref aplen is REF_STACK

line 1071: [    if(malloc_test()==0){printf("malloc_test %d ok\n",testnum++);}]
removed string literal ""malloc_test %d ok\n""

line 1072: [    //expected output: "[Hello Apple!]"]
removed string literal ""[Hello Apple!]""

line 1073: [    ]

line 1074: [    test6_print(record,record);]

line 1075: [    if(malloc_test()==0){printf("malloc_test %d ok\n",testnum++);}]
removed string literal ""malloc_test %d ok\n""

line 1076: [    ]

line 1077: [    printf("removing middle\n");]
removed string literal ""removing middle\n""

line 1078: [    record_remove_array(record,3,5);]
found reference to record_remove_array
currentFunc = cmd_test6
ref record_remove_array is REF_EXT

line 1079: [    if(malloc_test()==0){printf("malloc_test %d ok\n",testnum++);}]
removed string literal ""malloc_test %d ok\n""

line 1080: [    //expected output: "[Helple!]"]
removed string literal ""[Helple!]""

line 1081: [    ]

line 1082: [    test6_print(record,record);]

line 1083: [    if(malloc_test()==0){printf("malloc_test %d ok\n",testnum++);}]
removed string literal ""malloc_test %d ok\n""

line 1084: [    ]

line 1085: [    setallocator(defaultAllocator);]

line 1086: [    if(malloc_test()==0){printf("malloc_test %d ok\n",testnum++);}]
removed string literal ""malloc_test %d ok\n""

line 1087: [    //also we should check if null-termination really happens later.]

line 1088: [    printf("done\n");]
removed string literal ""done\n""

line 1089: [    ]

line 1090: [}]

line 1091: [test6_help: db "tests the record library\n", db 0;]
removed string literal ""tests the record library\n""
found label test6_help

line 1092: []

line 1093: [void derpKind_constructor(float this){]
found func derpKind_constructor



sig1 = void derpKind_constructor(float this)
sig2 = (float this)
found param this

line 1094: [    mset(this,"fluff",10);]
removed string literal ""fluff""
found reference to mset
currentFunc = derpKind_constructor
ref mset is REF_EXT
found reference to this
currentFunc = derpKind_constructor
ref this is REF_STACK

line 1095: [    printf("derpKind constructed\n");]
removed string literal ""derpKind constructed\n""

line 1096: [}]

line 1097: []

line 1098: [void derpKind_moo(float this){]
found func derpKind_moo



sig1 = void derpKind_moo(float this)
sig2 = (float this)
found param this

line 1099: [    float fluff = mget(this,"fluff");]
removed string literal ""fluff""
found local var fluff (BL = 1)
found reference to mget
currentFunc = derpKind_moo
ref mget is REF_EXT
found reference to this
currentFunc = derpKind_moo
ref this is REF_STACK

line 1100: [    printf("derpKind says %d moo\n",fluff);]
removed string literal ""derpKind says %d moo\n""
found reference to fluff
currentFunc = derpKind_moo
ref fluff is REF_STACK

line 1101: [}]

line 1102: []

line 1103: [float derpKind_bar(float this, float a, float b){]
found func derpKind_bar



sig1 = float derpKind_bar(float this, float a, float b)
sig2 = (float this, float a, float b)
found param this
found param a
found param b

line 1104: [    printf("derpKind says %d + %d = %d\n",a,b,a+b);]
removed string literal ""derpKind says %d + %d = %d\n""
found reference to a
currentFunc = derpKind_bar
ref a is REF_STACK
found reference to b
currentFunc = derpKind_bar
ref b is REF_STACK

line 1105: [    return a+b;]

line 1106: [}]

line 1107: []

line 1108: [void cmd_test7(){]
found func cmd_test7



sig1 = void cmd_test7()
sig2 = ()

line 1109: [    printf("testing classes\n");]
removed string literal ""testing classes\n""

line 1110: [    printf("test 1\n");]
removed string literal ""test 1\n""

line 1111: [    float derpKind = class_new("derpKind");]
removed string literal ""derpKind""
found local var derpKind (BL = 1)
found reference to class_new
currentFunc = cmd_test7
ref class_new is REF_EXT

line 1112: [    printf("test 2\n");]
removed string literal ""test 2\n""

line 1113: [    class_add_member(derpKind,"fluff");]
removed string literal ""fluff""
found reference to class_add_member
currentFunc = cmd_test7
ref class_add_member is REF_EXT
found reference to derpKind
currentFunc = cmd_test7
ref derpKind is REF_STACK

line 1114: [    printf("test 3\n");]
removed string literal ""test 3\n""

line 1115: [    class_add_method(derpKind,str_constructor,derpKind_constructor);]
found reference to class_add_method
currentFunc = cmd_test7
ref class_add_method is REF_EXT
found reference to str_constructor
currentFunc = cmd_test7
ref str_constructor is REF_EXT
found reference to derpKind_constructor
currentFunc = cmd_test7
ref derpKind_constructor is REF_EXT

line 1116: [    printf("test 4\n");]
removed string literal ""test 4\n""

line 1117: [    class_add_method(derpKind,"moo",derpKind_moo);    ]
removed string literal ""moo""
found reference to derpKind_moo
currentFunc = cmd_test7
ref derpKind_moo is REF_EXT

line 1118: [    printf("test 5\n");]
removed string literal ""test 5\n""

line 1119: [    class_add_method(derpKind,"bar",derpKind_bar);]
removed string literal ""bar""
found reference to derpKind_bar
currentFunc = cmd_test7
ref derpKind_bar is REF_EXT

line 1120: [    printf("test 5.1\n");]
removed string literal ""test 5.1\n""

line 1121: [    float derp = new(derpKind);]
found local var derp (BL = 1)
found reference to new
currentFunc = cmd_test7
ref new is REF_EXT

line 1122: [    printf("test 6\n");]
removed string literal ""test 6\n""

line 1123: [    mcall(derp,"moo");]
removed string literal ""moo""
found reference to mcall
currentFunc = cmd_test7
ref mcall is REF_EXT
found reference to derp
currentFunc = cmd_test7
ref derp is REF_STACK

line 1124: [    printf("test 7\n");]
removed string literal ""test 7\n""

line 1125: [    mset(derp,"fluff",999);]
removed string literal ""fluff""

line 1126: [    printf("test 8\n");]
removed string literal ""test 8\n""

line 1127: [    mcall(derp,"moo");]
removed string literal ""moo""

line 1128: [    printf("test 9\n");]
removed string literal ""test 9\n""

line 1129: [    float ans = mcall(derp,"bar",1,2);]
removed string literal ""bar""
found local var ans (BL = 1)

line 1130: [    printf("test 10\n");]
removed string literal ""test 10\n""

line 1131: [    printf("... got %d\n",ans);]
removed string literal ""... got %d\n""
found reference to ans
currentFunc = cmd_test7
ref ans is REF_STACK

line 1132: [    printf("test 11\n");]
removed string literal ""test 11\n""

line 1133: [    printf("done\n");]
removed string literal ""done\n""

line 1134: [}]

line 1135: [test7_help: db "tests the class system\n", db 0;]
removed string literal ""tests the class system\n""
found label test7_help

line 1136: []

line 1137: [//add the current directory string to the file name]

line 1138: [/*]

line 1139: [void getFullName(float buff, float str){]

line 1140: [    float strI = buff;]

line 1141: [    strcpy(strI,CurDir);]

line 1142: [    strI = strI + strlen(CurDir);]

line 1143: [    strcpy(strI,str);]

line 1144: [}]

line 1145: [*/]

line 1146: [//use filepath_abs instead]

line 1147: []

line 1148: []

line 1149: [//#ifdef PROGNOTEPAD_GUARD]

line 1150: [//]

line 1151: [//void notepad_start(){]

line 1152: [//    if(strlen(Arr)>1){]

line 1153: [//        notepad(Arr[1]);]

line 1154: [//    }else{]

line 1155: [//        notepad(0);]

line 1156: [//    }]

line 1157: [//}]

line 1158: [//notepad_help: db "launches the notepad program. \"notepad <filename>\" to edit an existing file, or \"notepad\" for an empty file.\n", db 0;]
removed string literal ""launches the notepad program. \"notepad <filename>\" to edit an existing file, or \"notepad\" for an empty file.\n""

line 1159: [//]

line 1160: [//#endif]

line 1161: []

line 1162: []

line 1163: []

line 1164: [void heap_status(){]
found func heap_status



sig1 = void heap_status()
sig2 = ()

line 1165: [    float A;]
found local var A (BL = 1)

line 1166: [    float B;]
found local var B (BL = 1)

line 1167: [    float C;]
found local var C (BL = 1)

line 1168: [    float D;]
found local var D (BL = 1)

line 1169: [    malloc_count(&A,&B,&C,&D);]
found reference to A
currentFunc = heap_status
ref A is REF_STACK
found reference to B
currentFunc = heap_status
ref B is REF_STACK
found reference to C
currentFunc = heap_status
ref C is REF_STACK
found reference to D
currentFunc = heap_status
ref D is REF_STACK

line 1170: [    P2("heap at ",malloc_disk,"\n");]
removed string literal ""heap at ""
removed string literal ""\n""

line 1171: [    P2("free space: ",A/1024," kB\n");]
removed string literal ""free space: ""
removed string literal "" kB\n""

line 1172: [    P2("used space: ",B/1024," kB\n");]
removed string literal ""used space: ""
removed string literal "" kB\n""

line 1173: [    P2("free blocks: ",C,"\n");]
removed string literal ""free blocks: ""
removed string literal ""\n""

line 1174: [    P2("used blocks: ",D,"\n");]
removed string literal ""used blocks: ""
removed string literal ""\n""

line 1175: [    if(!malloc_test()){P("heap is healthy\n");}else{Print("HEAP CORRUPTED\n",900);}]
removed string literal ""heap is healthy\n""
removed string literal ""HEAP CORRUPTED\n""

line 1176: [}]

line 1177: []

line 1178: [heap_status_help: db "reports RAM / malloc status.\n", db 0;]
removed string literal ""reports RAM / malloc status.\n""
found label heap_status_help

line 1179: []

line 1180: []

line 1181: []

line 1182: [void cmd_rpncalc(){]
found func cmd_rpncalc



sig1 = void cmd_rpncalc()
sig2 = ()

line 1183: [    float argc = strlen(Arr);]
found local var argc (BL = 1)

line 1184: [    //P2("argc = ",argc,"\n");]
removed string literal ""argc = ""
removed string literal ""\n""

line 1185: [    if(argc == 1){]
found reference to argc
currentFunc = cmd_rpncalc
ref argc is REF_STACK

line 1186: [        P("Usage: rpncalc 1 2 +\n");]
removed string literal ""Usage: rpncalc 1 2 +\n""

line 1187: [    }]

line 1188: [    float argstack = malloc(50); //can't stack[50]? wat]
found local var argstack (BL = 1)

line 1189: [    float argstackI = 0;]
found local var argstackI (BL = 1)

line 1190: [    float I;]
found local var I (BL = 1)

line 1191: [    for(I = 1; I < argc; I++){]
found reference to I
currentFunc = cmd_rpncalc
ref I is REF_STACK

line 1192: [        //P2("arg ",I," = ");]
removed string literal ""arg ""
removed string literal "" = ""

line 1193: [        float str = Arr[I];]
found local var str (BL = 2)

line 1194: [        //P(str)]

line 1195: [        //P("\n");]
removed string literal ""\n""

line 1196: [        float C = str[0];]
found local var C (BL = 2)
found reference to str
currentFunc = cmd_rpncalc
ref str is REF_STACK

line 1197: [        if(isNum(C)){]
found reference to C
currentFunc = cmd_rpncalc
ref C is REF_STACK

line 1198: [            //P("is num\n");]
removed string literal ""is num\n""

line 1199: [            float num = str2num(str);]
found local var num (BL = 3)

line 1200: [            //P2("str2num = ",num,"\n");]
removed string literal ""str2num = ""
removed string literal ""\n""

line 1201: [            //P2("argstack = ",argstack,"\n");]
removed string literal ""argstack = ""
removed string literal ""\n""

line 1202: [            //P2("argstackI = ",argstackI,"\n");]
removed string literal ""argstackI = ""
removed string literal ""\n""

line 1203: [            argstack[argstackI] = num;]
found reference to argstack
currentFunc = cmd_rpncalc
ref argstack is REF_STACK
found reference to argstackI
currentFunc = cmd_rpncalc
ref argstackI is REF_STACK
found reference to num
currentFunc = cmd_rpncalc
ref num is REF_STACK

line 1204: [            //P("done numming\n");]
removed string literal ""done numming\n""

line 1205: [            argstackI++;]

line 1206: [        }else{]

line 1207: [            //P("is not num\n");]
removed string literal ""is not num\n""

line 1208: [            if(argstackI < 2){]

line 1209: [                P("stack underflow. Remember to use RPN notation\n");]
removed string literal ""stack underflow. Remember to use RPN notation\n""

line 1210: [                return;]

line 1211: [            }]

line 1212: [            argstackI--;]

line 1213: [            float arg2 = argstack[argstackI];]
found local var arg2 (BL = 3)

line 1214: [            argstackI--;]

line 1215: [            float arg1 = argstack[argstackI];]
found local var arg1 (BL = 3)

line 1216: [            float arg3 = 0;]
found local var arg3 (BL = 3)

line 1217: [            if(C == '+'){]
removed character literal "'+'"

line 1218: [                arg3 = arg1 + arg2;]
found reference to arg3
currentFunc = cmd_rpncalc
ref arg3 is REF_STACK
found reference to arg1
currentFunc = cmd_rpncalc
ref arg1 is REF_STACK
found reference to arg2
currentFunc = cmd_rpncalc
ref arg2 is REF_STACK

line 1219: [                P2("",arg1," + ");]
removed string literal """"
removed string literal "" + ""

line 1220: [                P2("",arg2," = ");]
removed string literal """"
removed string literal "" = ""

line 1221: [                P2("",arg3,"\n");]
removed string literal """"
removed string literal ""\n""

line 1222: [                goto rpncalc_good;]
found reference to rpncalc_good
currentFunc = cmd_rpncalc
ref rpncalc_good is REF_EXT

line 1223: [            }]

line 1224: [            if(C == '-'){]
removed character literal "'-'"

line 1225: [                arg3 = arg1 - arg2;]

line 1226: [                P2("",arg1," - ");]
removed string literal """"
removed string literal "" - ""

line 1227: [                P2("",arg2," = ");]
removed string literal """"
removed string literal "" = ""

line 1228: [                P2("",arg3,"\n");]
removed string literal """"
removed string literal ""\n""

line 1229: [                goto rpncalc_good;]

line 1230: [            }]

line 1231: [            if(C == '*'){]
removed character literal "'*'"

line 1232: [                arg3 = arg1 * arg2;]

line 1233: [                P2("",arg1," * ");]
removed string literal """"
removed string literal "" * ""

line 1234: [                P2("",arg2," = ");]
removed string literal """"
removed string literal "" = ""

line 1235: [                P2("",arg3,"\n");]
removed string literal """"
removed string literal ""\n""

line 1236: [                goto rpncalc_good;]

line 1237: [            }]

line 1238: [            if(C == '/'){]
removed character literal "'/'"

line 1239: [                arg3 = arg1 / arg2;]

line 1240: [                P2("",arg1," / ");]
removed string literal """"
removed string literal "" / ""

line 1241: [                P2("",arg2," = ");]
removed string literal """"
removed string literal "" = ""

line 1242: [                P2("",arg3,"\n");]
removed string literal """"
removed string literal ""\n""

line 1243: [                goto rpncalc_good;]

line 1244: [            }]

line 1245: [            if(C == '^'){]
removed character literal "'^'"

line 1246: [                arg3 = arg1 ^^ arg2;]

line 1247: [                P2("",arg1," ^ ");]
removed string literal """"
removed string literal "" ^ ""

line 1248: [                P2("",arg2," = ");]
removed string literal """"
removed string literal "" = ""

line 1249: [                P2("",arg3,"\n");]
removed string literal """"
removed string literal ""\n""

line 1250: [                goto rpncalc_good;]

line 1251: [            }]

line 1252: [            P("unknown operator:\n");]
removed string literal ""unknown operator:\n""

line 1253: [            P(str);]

line 1254: [            return;]

line 1255: [            rpncalc_good:]
found label rpncalc_good

line 1256: [            argstack[argstackI] = arg3;]

line 1257: [            argstackI++;]

line 1258: [        }]

line 1259: [    }]

line 1260: [    P("result:\n");]
removed string literal ""result:\n""

line 1261: [    for(I = 0; I < argstackI; I++){]

line 1262: [        P2("",argstack[I]," ");]
removed string literal """"
removed string literal "" ""

line 1263: [    }]

line 1264: [    P("\n");]
removed string literal ""\n""

line 1265: [}]

line 1266: []

line 1267: [rpncalc_help: db "reverse polish notation calculator. \"rpncalc 2 3 * 4 +\" to calculate (2 * 3) + 4.\n", db 0;]
removed string literal ""reverse polish notation calculator. \"rpncalc 2 3 * 4 +\" to calculate (2 * 3) + 4.\n""
found label rpncalc_help

line 1268: []

line 1269: [void cmd_cd(){]
found func cmd_cd



sig1 = void cmd_cd()
sig2 = ()

line 1270: [    float argc = strlen(Arr);]
found local var argc (BL = 1)

line 1271: [    if(argc>1){]
found reference to argc
currentFunc = cmd_cd
ref argc is REF_STACK

line 1272: [        float str2 = malloc(sizeof_vector);]
found local var str2 (BL = 2)

line 1273: [        string_constructor(str2,"");]
removed string literal """"
found reference to str2
currentFunc = cmd_cd
ref str2 is REF_STACK

line 1274: [        float str = Arr[1];]
found local var str (BL = 2)

line 1275: [        float len = strlen(str);]
found local var len (BL = 2)
found reference to str
currentFunc = cmd_cd
ref str is REF_STACK

line 1276: [        if(str[0] == '/'){]
removed character literal "'/'"

line 1277: [            //abs path]

line 1278: [        }else{]

line 1279: [            //relative path]

line 1280: [            string_addcs(str2,CurDir);]

line 1281: [        }]

line 1282: [            if(str[len-1] == '/'){str[len-1] = 0;}]
removed character literal "'/'"
found reference to len
currentFunc = cmd_cd
ref len is REF_STACK

line 1283: [            string_addcs(str2,str);]

line 1284: [            string_addcs(str2,"/");]
removed string literal ""/""

line 1285: [            str = string_c_str(str2);]

line 1286: [        ]

line 1287: [        strcpy(CurDir,str);]

line 1288: [        current_path = CurDir;]

line 1289: [        P("Changing dir to ");P(str);P("\n");]
removed string literal ""Changing dir to ""
removed string literal ""\n""

line 1290: [    }else{]

line 1291: [        P("Current directory: ");P(CurDir);P("\n");]
removed string literal ""Current directory: ""
removed string literal ""\n""

line 1292: [    }]

line 1293: [}]

line 1294: [cd_help: db "\"cd\" to report current directory.\n\"cd <path>\" to change dir to <current dir>/<path>\n\"cd /<path>\" to change dir to <path>\n", db 0;]
removed string literal ""\"cd\" to report current directory.\n\"cd <path>\" to change dir to <current dir>/<path>\n\"cd /<path>\" to change dir to <path>\n""
found label cd_help

line 1295: []

line 1296: [void cmd_dir(){]
found func cmd_dir



sig1 = void cmd_dir()
sig2 = ()

line 1297: [    //Print("Listing...\n",990);]
removed string literal ""Listing...\n""

line 1298: [    //FilesystemList(CurDir);]

line 1299: [    float files = flist(CurDir);]
found local var files (BL = 1)
found reference to flist
currentFunc = cmd_dir
ref flist is REF_EXT

line 1300: [    float size = vector_get_size(files);]
found local var size (BL = 1)
found reference to files
currentFunc = cmd_dir
ref files is REF_STACK

line 1301: [    float I;]
found local var I (BL = 1)

line 1302: [    for(I = 0; I < size; I++){]
found reference to I
currentFunc = cmd_dir
ref I is REF_STACK

line 1303: [        float str = vector_get(files,0,I);]
found local var str (BL = 2)
found local var I (BL = 2)

line 1304: [        P(str);P(" ");]
removed string literal "" ""
found reference to str
currentFunc = cmd_dir
ref str is REF_STACK

line 1305: [    }]

line 1306: [    P("\n");]
removed string literal ""\n""

line 1307: [}]

line 1308: [dir_help: db "list the files in the current directory.\n";]
removed string literal ""list the files in the current directory.\n""
found label dir_help

line 1309: []

line 1310: [void cmd_mkdir(){]
found func cmd_mkdir



sig1 = void cmd_mkdir()
sig2 = ()

line 1311: [    float argc = strlen(Arr);]
found local var argc (BL = 1)

line 1312: [    if(argc>1){]
found reference to argc
currentFunc = cmd_mkdir
ref argc is REF_STACK

line 1313: [        Print("Making Dir...\n",990);]
removed string literal ""Making Dir...\n""

line 1314: [        //float fullname[80];]

line 1315: [        //float strI = fullname;]

line 1316: [        //strcpy(strI,CurDir);]

line 1317: [        //strI = strI + strlen(CurDir);]

line 1318: [        //strcpy(strI,Arr[1]);]

line 1319: [        ]

line 1320: [        //float fullname[80]; getFullname(fullname, Arr[1]);]

line 1321: [        ]

line 1322: [        //FilesystemMkDir(fullname);]

line 1323: [    }else{]

line 1324: [        P("usage: mkdir dirname\n");]
removed string literal ""usage: mkdir dirname\n""

line 1325: [    }]

line 1326: [}]

line 1327: [mkdir_help: db "\"mkdir <name>\" to make a new directory \"name\".\n", db 0;]
removed string literal ""\"mkdir <name>\" to make a new directory \"name\".\n""
found label mkdir_help

line 1328: []

line 1329: [void cmd_del(){]
found func cmd_del



sig1 = void cmd_del()
sig2 = ()

line 1330: [    float argc = strlen(Arr);]
found local var argc (BL = 1)

line 1331: [    if(argc>1){]
found reference to argc
currentFunc = cmd_del
ref argc is REF_STACK

line 1332: [        float name = Arr[1];]
found local var name (BL = 2)

line 1333: [        float fp = fopen(name,"r");]
removed string literal ""r""
found local var fp (BL = 2)
found reference to name
currentFunc = cmd_del
ref name is REF_STACK

line 1334: [        if(!fp){printf("no such file: [%s]\n",name); return;}]
removed string literal ""no such file: [%s]\n""
found reference to fp
currentFunc = cmd_del
ref fp is REF_STACK

line 1335: [        printf("removing [%s]\n",name);]
removed string literal ""removing [%s]\n""

line 1336: [        fdelete(name);]
found reference to fdelete
currentFunc = cmd_del
ref fdelete is REF_EXT

line 1337: [    }else{]

line 1338: [        P("usage: del filename\n");]
removed string literal ""usage: del filename\n""

line 1339: [    }]

line 1340: [}]

line 1341: [del_help: db "\"del <name>\" to delete the file \"name\".\n", db 0;]
removed string literal ""\"del <name>\" to delete the file \"name\".\n""
found label del_help

line 1342: []

line 1343: [void cmd_rn(){]
found func cmd_rn



sig1 = void cmd_rn()
sig2 = ()

line 1344: [    float argc = strlen(Arr);]
found local var argc (BL = 1)

line 1345: [    if(argc > 2){]
found reference to argc
currentFunc = cmd_rn
ref argc is REF_STACK

line 1346: [        float name1 = Arr[1];]
found local var name1 (BL = 2)

line 1347: [        float name2 = Arr[2];]
found local var name2 (BL = 2)

line 1348: [        float fp1 = fopen(name1,"r");]
removed string literal ""r""
found local var fp1 (BL = 2)
found reference to name1
currentFunc = cmd_rn
ref name1 is REF_STACK

line 1349: [        if(!fp1){printf("no such file: [%s]\n",name1); return;}]
removed string literal ""no such file: [%s]\n""
found reference to fp1
currentFunc = cmd_rn
ref fp1 is REF_STACK

line 1350: [        float fp2 = fopen(name2,"r");]
removed string literal ""r""
found local var fp2 (BL = 2)
found reference to name2
currentFunc = cmd_rn
ref name2 is REF_STACK

line 1351: [        if(fp2){]
found reference to fp2
currentFunc = cmd_rn
ref fp2 is REF_STACK

line 1352: [            printf("overwrite file [%s]? Y/N\n",name2);]
removed string literal ""overwrite file [%s]? Y/N\n""

line 1353: [            if(getYN() == 1){]
found reference to getYN
currentFunc = cmd_rn
ref getYN is REF_EXT

line 1354: [                fdelete(name2);]

line 1355: [            }else{]

line 1356: [                return;]

line 1357: [            }]

line 1358: [        }]

line 1359: [        printf("renaming [%s] to [%s]\n",name1,name2);]
removed string literal ""renaming [%s] to [%s]\n""

line 1360: [        frename(name1,name2);]
found reference to frename
currentFunc = cmd_rn
ref frename is REF_EXT

line 1361: [    }]

line 1362: [}]

line 1363: [rn_help: db "\"rn <name1> <name2>\" to rename the file \"name1\" to \"name2\".\n", db 0;]
removed string literal ""\"rn <name1> <name2>\" to rename the file \"name1\" to \"name2\".\n""
found label rn_help

line 1364: []

line 1365: [void cmd_write(){]
found func cmd_write



sig1 = void cmd_write()
sig2 = ()

line 1366: [    float argc = strlen(Arr);]
found local var argc (BL = 1)

line 1367: [    if(argc>1){]
found reference to argc
currentFunc = cmd_write
ref argc is REF_STACK

line 1368: [        //float fullname[80];]

line 1369: [        //float strI = fullname;]

line 1370: [        //strcpy(strI,CurDir);]

line 1371: [        //strI = strI + strlen(CurDir);]

line 1372: [        //strcpy(strI,Arr[1]);]

line 1373: [        //float fullname[80]; getFullname(fullname, Arr[1]);]

line 1374: [        float fullname = filepath_abs(Arr[1]);]
found local var fullname (BL = 2)

line 1375: [        float F = fopen(fullname,"w");]
removed string literal ""w""
found local var F (BL = 2)
found reference to fullname
currentFunc = cmd_write
ref fullname is REF_STACK

line 1376: [        float I;]
found local var I (BL = 2)

line 1377: [        float err = 0;]
found local var err (BL = 2)

line 1378: [        float str = 0;]
found local var str (BL = 2)

line 1379: [        float len = 0;]
found local var len (BL = 2)

line 1380: [        if(!F){Print("Can't open ",900); Print(fullname,900); Print("\n",900);return;}]
removed string literal ""Can't open ""
removed string literal ""\n""
found reference to F
currentFunc = cmd_write
ref F is REF_STACK

line 1381: [        if(argc>2){]

line 1382: [                    //ParseString("heap");]
removed string literal ""heap""

line 1383: [            for(I = 2; I < argc; I++){]
found reference to I
currentFunc = cmd_write
ref I is REF_STACK

line 1384: [                str = Arr[I];]
found reference to str
currentFunc = cmd_write
ref str is REF_STACK

line 1385: [                len = strlen(str);]
found reference to len
currentFunc = cmd_write
ref len is REF_STACK

line 1386: [                //FileWrite(str,len,1,F);]

line 1387: [                err = !fwrite(str,len,F);]
found reference to err
currentFunc = cmd_write
ref err is REF_STACK
found reference to fwrite
currentFunc = cmd_write
ref fwrite is REF_EXT

line 1388: [                if(err){Print("fwrite error\n",900);}]
removed string literal ""fwrite error\n""

line 1389: [                //ParseString("heap");]
removed string literal ""heap""

line 1390: [                fwrite(" ",1,F);]
removed string literal "" ""

line 1391: [                //ParseString("heap");]
removed string literal ""heap""

line 1392: [                //FilePutC(F,' ');]
removed character literal "' '"

line 1393: [            }]

line 1394: [        }else{]

line 1395: [            //line by line mode]

line 1396: [            I = 0;]

line 1397: [            while(1){]

line 1398: [                printf(">");]
removed string literal "">""

line 1399: [                str = getShellInput();]

line 1400: [                if(strcmp(str,"/end")==0){]
removed string literal ""/end""

line 1401: [                    printf("\rfile write done\n");]
removed string literal ""\rfile write done\n""

line 1402: [                    break;]

line 1403: [                }]

line 1404: [                //str = unescapeStr(str);]

line 1405: [                printf("%s\n",str);]
removed string literal ""%s\n""

line 1406: [                if(I){fwrite("\n",1,F);}]
removed string literal ""\n""

line 1407: [                len = strlen(str);]

line 1408: [                fwrite(str,len,F);]

line 1409: [                I++;]

line 1410: [            }]

line 1411: [        }]

line 1412: [        //FilePutC(F,0);]

line 1413: [    }else{]

line 1414: [        P("usage: write filename content\n");]
removed string literal ""usage: write filename content\n""

line 1415: [    }]

line 1416: [}]

line 1417: [write_help: db "\"write <filename> <content>\" to write <content> to a file <filename>, creating it if it doesn't exist.\n"]
removed string literal ""\"write <filename> <content>\" to write <content> to a file <filename>, creating it if it doesn't exist.\n""
found label write_help

line 1418: ["\"write <filename>\" to enter multi-line mode. type /end to finish.\n", db 0;]
removed string literal ""\"write <filename>\" to enter multi-line mode. type /end to finish.\n""

line 1419: []

line 1420: []

line 1421: [//reads up to len-1 characters into buff, stopping at the first space character]

line 1422: [//found after at least one non-space character was seen. returns true if anything was read,]

line 1423: [//false otherwise (e.g. end of string).]

line 1424: [float readword(float ptr, float buff, float len){]
found func readword



sig1 = float readword(float ptr, float buff, float len)
sig2 = (float ptr, float buff, float len)
found param ptr
found param buff
found param len

line 1425: [    ]

line 1426: [    float inp = *ptr;]
found local var inp (BL = 1)
found reference to ptr
currentFunc = readword
ref ptr is REF_STACK

line 1427: [    if(*inp == 0){return 0;}]
found reference to inp
currentFunc = readword
ref inp is REF_STACK

line 1428: [    float hasword = 0;]
found local var hasword (BL = 1)

line 1429: [    float I = 0;]
found local var I (BL = 1)

line 1430: [    readword_loop:]
found label readword_loop

line 1431: [    float C = *inp;]
found local var C (BL = 1)

line 1432: [    if(!C){goto readword_end;}]
found reference to C
currentFunc = readword
ref C is REF_STACK
found reference to readword_end
currentFunc = readword
ref readword_end is REF_EXT

line 1433: [    if(isspace(C)){]
found reference to isspace
currentFunc = readword
ref isspace is REF_EXT

line 1434: [        if(hasword){goto readword_end;}]
found reference to hasword
currentFunc = readword
ref hasword is REF_STACK

line 1435: [    }else{]

line 1436: [        hasword = 1;]

line 1437: [    }]

line 1438: [    buff[I++] = C;]
found reference to buff
currentFunc = readword
ref buff is REF_STACK
found reference to I
currentFunc = readword
ref I is REF_STACK

line 1439: [    inp++;]

line 1440: [    if(I >= len){goto readword_end;}]
found reference to len
currentFunc = readword
ref len is REF_STACK

line 1441: [    goto readword_loop;]
found reference to readword_loop
currentFunc = readword
ref readword_loop is REF_EXT

line 1442: [    readword_end:]
found label readword_end

line 1443: [    buff[I] = 0;]

line 1444: [    *ptr = inp;]

line 1445: [    return 1;]

line 1446: [}]

line 1447: []

line 1448: [void cmd_read(){]
found func cmd_read



sig1 = void cmd_read()
sig2 = ()

line 1449: [    float argc = strlen(Arr);]
found local var argc (BL = 1)

line 1450: [    if(argc>1){]
found reference to argc
currentFunc = cmd_read
ref argc is REF_STACK

line 1451: [        float binary = 0;]
found local var binary (BL = 2)

line 1452: [        if(argc>2){]

line 1453: [            if(!strcmp(Arr[2],"-b")){binary = 1;}]
removed string literal ""-b""
found reference to binary
currentFunc = cmd_read
ref binary is REF_STACK

line 1454: [        }]

line 1455: [        //float fullname[80];]

line 1456: [        //float strI = fullname;]

line 1457: [        //strcpy(strI,CurDir);]

line 1458: [        //strI = strI + strlen(CurDir);]

line 1459: [        //strcpy(strI,Arr[1]);]

line 1460: [        //float fullname[80]; getFullname(fullname, Arr[1]);]

line 1461: [        float fullname = filepath_abs(Arr[1]);]
found local var fullname (BL = 2)

line 1462: [        float F = fopen(fullname,"r");]
removed string literal ""r""
found local var F (BL = 2)
found reference to fullname
currentFunc = cmd_read
ref fullname is REF_STACK

line 1463: [        if(!F){Print("Can't open ",900); Print(fullname,900); Print("\n",900);return;}]
removed string literal ""Can't open ""
removed string literal ""\n""
found reference to F
currentFunc = cmd_read
ref F is REF_STACK

line 1464: [        float err = 0;]
found local var err (BL = 2)

line 1465: [        float size = fsize(F);]
found local var size (BL = 2)
found reference to fsize
currentFunc = cmd_read
ref fsize is REF_EXT

line 1466: [        float str = malloc(size+1);]
found local var str (BL = 2)

line 1467: [        err = !fread(str,size,F);//FileRead(str,size,1,F);]
found reference to err
currentFunc = cmd_read
ref err is REF_STACK
found reference to fread
currentFunc = cmd_read
ref fread is REF_EXT
found reference to str
currentFunc = cmd_read
ref str is REF_STACK

line 1468: [        if(err){Print("fread error\n",900);}]
removed string literal ""fread error\n""

line 1469: [        if(binary){]

line 1470: [            float I = 0;]
found local var I (BL = 3)

line 1471: [            for(I = 0; I < size; I++){]
found reference to I
currentFunc = cmd_read
ref I is REF_STACK

line 1472: [                float C = str[I];]
found local var C (BL = 4)

line 1473: [                printf("%d: %d",I,C);]
removed string literal ""%d: %d""
found reference to C
currentFunc = cmd_read
ref C is REF_STACK

line 1474: [                if((C > 32) && (C < 128)){]

line 1475: [                    printf(" \'%c\'",C);]
removed string literal "" \'%c\'""

line 1476: [                }]

line 1477: [                printf("\n");]
removed string literal ""\n""

line 1478: [                //P2("",I,": "); P2("",str[I],"\n");]
removed string literal """"
removed string literal "": ""
removed string literal """"
removed string literal ""\n""

line 1479: [            }]

line 1480: [        }else{]

line 1481: [            str[size] = 0;]

line 1482: [            float buff[80];]
found local var buff (BL = 3)

line 1483: [            float ptr = str;]
found local var ptr (BL = 3)

line 1484: [            while(readword(&ptr,buff,30)){]
found reference to readword
currentFunc = cmd_read
ref readword is REF_EXT
found reference to ptr
currentFunc = cmd_read
ref ptr is REF_STACK
found reference to buff
currentFunc = cmd_read
ref buff is REF_STACK

line 1485: [                printword(buff);]
found reference to printword
currentFunc = cmd_read
ref printword is REF_EXT

line 1486: [                //printf("[%s]\n",buff);]
removed string literal ""[%s]\n""

line 1487: [            }]

line 1488: [            //P(str);P("\n");]
removed string literal ""\n""

line 1489: [        }]

line 1490: [    }else{]

line 1491: [        P("usage: read filename [-b]\n");]
removed string literal ""usage: read filename [-b]\n""

line 1492: [    }]

line 1493: [}]

line 1494: [read_help: db "\"read <filename> [-b]\" to read a file and display it as text.\n-b: read the file as binary.\n", db 0;]
removed string literal ""\"read <filename> [-b]\" to read a file and display it as text.\n-b: read the file as binary.\n""
found label read_help

line 1495: []

line 1496: [void cmd_info(){]
found func cmd_info



sig1 = void cmd_info()
sig2 = ()

line 1497: [    float argc = strlen(Arr);]
found local var argc (BL = 1)

line 1498: [    if(argc>1){]
found reference to argc
currentFunc = cmd_info
ref argc is REF_STACK

line 1499: [        //float fullname[80]; getFullname(fullname, Arr[1]);]

line 1500: [        float fullname = filepath_abs(Arr[1]);]
found local var fullname (BL = 2)

line 1501: [        //float strI = fullname;]

line 1502: [        //strcpy(strI,CurDir);]

line 1503: [        //strI = strI + strlen(CurDir);]

line 1504: [        //strcpy(strI,Arr[1]);]

line 1505: [        ]

line 1506: [        float F = fopen(fullname,"r");]
removed string literal ""r""
found local var F (BL = 2)
found reference to fullname
currentFunc = cmd_info
ref fullname is REF_STACK

line 1507: [        if(!F){Print("Can't open ",900); Print(fullname,900); Print("\n",900);return;}]
removed string literal ""Can't open ""
removed string literal ""\n""
found reference to F
currentFunc = cmd_info
ref F is REF_STACK

line 1508: [        float err = 0;]
found local var err (BL = 2)

line 1509: [        float size = fsize(F);]
found local var size (BL = 2)

line 1510: [        if(size < 10000){]

line 1511: [            P2("size: ",size," B\n");]
removed string literal ""size: ""
removed string literal "" B\n""

line 1512: [        }else{]

line 1513: [            P2("size: ",size/1024," kB\n");]
removed string literal ""size: ""
removed string literal "" kB\n""

line 1514: [        }]

line 1515: [    }else{]

line 1516: [        P("usage: info filename\n");]
removed string literal ""usage: info filename\n""

line 1517: [    }]

line 1518: [}]

line 1519: [info_help: db "\"info <filename>\" to display file info.\n", db 0;]
removed string literal ""\"info <filename>\" to display file info.\n""
found label info_help

line 1520: []

line 1521: [void cmd_hdd(){]
found func cmd_hdd



sig1 = void cmd_hdd()
sig2 = ()

line 1522: [    float sizeused = filesystem_get_size();]
found local var sizeused (BL = 1)
found reference to filesystem_get_size
currentFunc = cmd_hdd
ref filesystem_get_size is REF_EXT

line 1523: [    float sizetotal = size_HDD;]
found local var sizetotal (BL = 1)

line 1524: [    float sizefree = sizetotal-sizeused;]
found local var sizefree (BL = 1)
found reference to sizetotal
currentFunc = cmd_hdd
ref sizetotal is REF_STACK
found reference to sizeused
currentFunc = cmd_hdd
ref sizeused is REF_STACK

line 1525: [    ]

line 1526: [    ]

line 1527: [    printf("HDD size: %d kB\n",sizetotal/1024);]
removed string literal ""HDD size: %d kB\n""

line 1528: [    printf("used:     %d kB\n",sizeused/1024);]
removed string literal ""used:     %d kB\n""

line 1529: [    printf("free:     %d kB\n",sizefree/1024);]
removed string literal ""free:     %d kB\n""
found reference to sizefree
currentFunc = cmd_hdd
ref sizefree is REF_STACK

line 1530: [    ]

line 1531: [}]

line 1532: [hdd_help: db "prints HDD used/free/total size\n", db 0;]
removed string literal ""prints HDD used/free/total size\n""
found label hdd_help

line 1533: []

line 1534: [void cmd_mount(){]
found func cmd_mount



sig1 = void cmd_mount()
sig2 = ()

line 1535: [    Print("Reading FS from disk\n",90);]
removed string literal ""Reading FS from disk\n""

line 1536: [    filesystem_read(AdrHDD);]
found reference to filesystem_read
currentFunc = cmd_mount
ref filesystem_read is REF_EXT

line 1537: [    Print("Done\n",90);]
removed string literal ""Done\n""

line 1538: [}]

line 1539: [mount_help: db "read the filesystem from (dupable HDD) disk to RAM, overwriting the current contents.\n", db 0;]
removed string literal ""read the filesystem from (dupable HDD) disk to RAM, overwriting the current contents.\n""
found label mount_help

line 1540: []

line 1541: [void cmd_format(){]
found func cmd_format



sig1 = void cmd_format()
sig2 = ()

line 1542: [    Print("Writing FS to disk\n",90);]
removed string literal ""Writing FS to disk\n""

line 1543: [    filesystem_write(AdrHDD);]
found reference to filesystem_write
currentFunc = cmd_format
ref filesystem_write is REF_EXT

line 1544: [    Print("Done\n",90);]
removed string literal ""Done\n""

line 1545: [}]

line 1546: [format_help: db "write the filesystem from RAM to (dupable HDD) disk. Remember to save the laptop with Advanced Duplicator, or data will still be lost when the HDD is deleted.\n", db 0;]
removed string literal ""write the filesystem from RAM to (dupable HDD) disk. Remember to save the laptop with Advanced Duplicator, or data will still be lost when the HDD is deleted.\n""
found label format_help

line 1547: []

line 1548: [void cmd_gpio(){]
found func cmd_gpio



sig1 = void cmd_gpio()
sig2 = ()

line 1549: [    float I = 0;]
found local var I (BL = 1)

line 1550: [    for(I = 0; I < 8; I++){]
found reference to I
currentFunc = cmd_gpio
ref I is REF_STACK

line 1551: [        P2("GPIO ",I,": ");]
removed string literal ""GPIO ""
removed string literal "": ""

line 1552: [        float a = 0;]
found local var a (BL = 2)

line 1553: [        in a, I;]
found reference to a
currentFunc = cmd_gpio
ref a is REF_STACK

line 1554: [        P2("",a,"\n");]
removed string literal """"
removed string literal ""\n""

line 1555: [    }]

line 1556: [}]

line 1557: [gpio_help: db "report the inputs from the IO bus\n", db 0;]
removed string literal ""report the inputs from the IO bus\n""
found label gpio_help

line 1558: []

line 1559: [void cmd_exec(){]
found func cmd_exec



sig1 = void cmd_exec()
sig2 = ()

line 1560: [    //P("cmdexec\n");]
removed string literal ""cmdexec\n""

line 1561: [    float argc = strlen(Arr);]
found local var argc (BL = 1)

line 1562: [    if(argc == 1){]
found reference to argc
currentFunc = cmd_exec
ref argc is REF_STACK

line 1563: [        P("usage: exec file.sh\n");]
removed string literal ""usage: exec file.sh\n""

line 1564: [        return;]

line 1565: [    }]

line 1566: [    //float fullname[80]; getFullname(fullname,Arr[1]);]

line 1567: [    float fullname = filepath_abs(Arr[1]);]
found local var fullname (BL = 1)

line 1568: [    float fp = fopen(fullname,"r");]
removed string literal ""r""
found local var fp (BL = 1)
found reference to fullname
currentFunc = cmd_exec
ref fullname is REF_STACK

line 1569: [    if(!fp){Perr("can't open file ");Perr(fullname);Perr("\n");return;}]
removed string literal ""can't open file ""
removed string literal ""\n""
found reference to fp
currentFunc = cmd_exec
ref fp is REF_STACK

line 1570: [    float str2 = malloc(80);]
found local var str2 (BL = 1)

line 1571: [    float strI = 0;]
found local var strI (BL = 1)

line 1572: [    char C = 0;]
found local var C (BL = 1)

line 1573: [    fread(&C,1,fp);]
found reference to C
currentFunc = cmd_exec
ref C is REF_STACK

line 1574: [    str2[strI++] = C;]
found reference to str2
currentFunc = cmd_exec
ref str2 is REF_STACK
found reference to strI
currentFunc = cmd_exec
ref strI is REF_STACK

line 1575: [    while(C){]

line 1576: [        C = 0;]

line 1577: [        fread(&C,1,fp);]

line 1578: [        if((C == 0)||(C == 10)){]

line 1579: [            str2[strI] = 0;]

line 1580: [            if(strI){]

line 1581: [                strI = 0;]

line 1582: [                //P("exec [");P(str2);P("]\n");]
removed string literal ""exec [""
removed string literal ""]\n""

line 1583: [                ParseString(str2);]

line 1584: [                //P("string execed\n");]
removed string literal ""string execed\n""

line 1585: [            }]

line 1586: [        }else{]

line 1587: [            str2[strI] = C;]

line 1588: [            strI++;]

line 1589: [        }]

line 1590: [    }]

line 1591: [    ]

line 1592: [}]

line 1593: [exec_help: db "\"exec <filename>\" to execute a shell script as if typed into the console line by line.\n", db 0;]
removed string literal ""\"exec <filename>\" to execute a shell script as if typed into the console line by line.\n""
found label exec_help

line 1594: []

line 1595: [//dumps a non-executable floppy to a file. first cell must be file size. It is removed when copying.]

line 1596: [void cmd_dump(){]
found func cmd_dump



sig1 = void cmd_dump()
sig2 = ()

line 1597: [    float argc = strlen(Arr);]
found local var argc (BL = 1)

line 1598: [    if(argc == 1){]
found reference to argc
currentFunc = cmd_dump
ref argc is REF_STACK

line 1599: [        P("usage: dump filename\n");]
removed string literal ""usage: dump filename\n""

line 1600: [        return;]

line 1601: [    }]

line 1602: [    ]

line 1603: [    float size = AdrPort[0];//-1;]
found local var size (BL = 1)

line 1604: [    if(!size){Perr("can't read floppy\n");return;}]
removed string literal ""can't read floppy\n""

line 1605: [    //float fullname[80]; getFullName(fullname,Arr[1]);]

line 1606: [    float fullname = filepath_abs(Arr[1]);]
found local var fullname (BL = 1)

line 1607: [    float fp = fopen(fullname,"w");]
removed string literal ""w""
found local var fp (BL = 1)
found reference to fullname
currentFunc = cmd_dump
ref fullname is REF_STACK

line 1608: [    if(!fp){Perr("can't open file\n");return;}]
removed string literal ""can't open file\n""
found reference to fp
currentFunc = cmd_dump
ref fp is REF_STACK

line 1609: [    P2("floppy size: ",size," B\n");]
removed string literal ""floppy size: ""
removed string literal "" B\n""

line 1610: [    fresize(size,fp);]
found reference to fresize
currentFunc = cmd_dump
ref fresize is REF_EXT

line 1611: [    float ptrFrom = AdrPort;//+1;]
found local var ptrFrom (BL = 1)

line 1612: [    float sizeleft = size;]
found local var sizeleft (BL = 1)

line 1613: [    float sizedone = 0;]
found local var sizedone (BL = 1)

line 1614: [    float step = 500;]
found local var step (BL = 1)

line 1615: [    while(sizeleft){]
found reference to sizeleft
currentFunc = cmd_dump
ref sizeleft is REF_STACK

line 1616: [        float dsize;]
found local var dsize (BL = 2)

line 1617: [        if(sizeleft > step){dsize = step;}else{dsize = sizeleft;}]
found reference to step
currentFunc = cmd_dump
ref step is REF_STACK
found reference to dsize
currentFunc = cmd_dump
ref dsize is REF_STACK

line 1618: [        sizeleft = sizeleft - dsize;]

line 1619: [        sizedone = sizedone+dsize;]
found reference to sizedone
currentFunc = cmd_dump
ref sizedone is REF_STACK

line 1620: [        float percent = sizedone*100/size;]
found local var percent (BL = 2)

line 1621: [        fwrite(ptrFrom,dsize,fp);]
found reference to ptrFrom
currentFunc = cmd_dump
ref ptrFrom is REF_STACK

line 1622: [        ptrFrom = ptrFrom+dsize;]

line 1623: [        //P2("read ",sizedone," B ");]
removed string literal ""read ""
removed string literal "" B ""

line 1624: [        //P2("(",percent," %)\n");]
removed string literal ""(""
removed string literal "" %)\n""

line 1625: [        PrintProgressBar(percent);]
found reference to PrintProgressBar
currentFunc = cmd_dump
ref PrintProgressBar is REF_EXT
found reference to percent
currentFunc = cmd_dump
ref percent is REF_STACK

line 1626: [    }]

line 1627: [    P("\ndone\n");]
removed string literal ""\ndone\n""

line 1628: [    //fseek(fp,0,0);]

line 1629: [    //float n = 10;]

line 1630: [    //fwrite(&n,1,fp);]

line 1631: [    //P2("dumped ",size," bytes\n");]
removed string literal ""dumped ""
removed string literal "" bytes\n""

line 1632: [}]

line 1633: [dump_help: db "\"dump <filename>\" to dump the contents of a non-executable floppy to a file. First cell must be file size.",db 0; //It is removed when copying.\n", db 0;]
removed string literal ""\"dump <filename>\" to dump the contents of a non-executable floppy to a file. First cell must be file size.""
found label dump_help

line 1634: []

line 1635: [void progtest(){]
found func progtest



sig1 = void progtest()
sig2 = ()

line 1636: [    P("Progtest called\n");]
removed string literal ""Progtest called\n""

line 1637: [}]

line 1638: []

line 1639: [//returns whether the pointer is pointing to a string.]

line 1640: [//a string is a sequence of printable characters terminated with a 0.]

line 1641: [float isString(float ptr){]
found func isString



sig1 = float isString(float ptr)
sig2 = (float ptr)
found param ptr

line 1642: [    float C = *ptr++;]
found local var C (BL = 1)
found reference to ptr
currentFunc = isString
ref ptr is REF_STACK

line 1643: [    if(C == 0){return 0;}]
found reference to C
currentFunc = isString
ref C is REF_STACK

line 1644: [    if(!isPrint(C)){return 0;}]

line 1645: [    while(1){]

line 1646: [        C = *ptr++;]

line 1647: [        if(C == 0){return 1;}]

line 1648: [        if(!isPrint(C)){return 0;}]

line 1649: [    }]

line 1650: [}]

line 1651: []

line 1652: [void cmd_symbol(){]
found func cmd_symbol



sig1 = void cmd_symbol()
sig2 = ()

line 1653: [    float argc = strlen(Arr);]
found local var argc (BL = 1)

line 1654: [    if(argc > 1){]
found reference to argc
currentFunc = cmd_symbol
ref argc is REF_STACK

line 1655: [        float name = Arr[1];]
found local var name (BL = 2)

line 1656: [        float func = findFuncByName(name);]
found local var func (BL = 2)
found reference to findFuncByName
currentFunc = cmd_symbol
ref findFuncByName is REF_EXT
found reference to name
currentFunc = cmd_symbol
ref name is REF_STACK

line 1657: [        if(func){]
found reference to func
currentFunc = cmd_symbol
ref func is REF_STACK

line 1658: [            printf("Func [%s] @ %d\n",name,func);]
removed string literal ""Func [%s] @ %d\n""

line 1659: [        }else{]

line 1660: [            float var = findVarByName(name);]
found local var var (BL = 3)
found reference to findVarByName
currentFunc = cmd_symbol
ref findVarByName is REF_EXT

line 1661: [            if(var){]
found reference to var
currentFunc = cmd_symbol
ref var is REF_STACK

line 1662: [                printf("Var [%s] @ %d = %d\n",name,var,*var);]
removed string literal ""Var [%s] @ %d = %d\n""

line 1663: [                if(isString(var)){]
found reference to isString
currentFunc = cmd_symbol
ref isString is REF_EXT

line 1664: [                    printf("\"%s\"\n",var);]
removed string literal ""\"%s\"\n""

line 1665: [                }]

line 1666: [            }else{]

line 1667: [                printf("symbol not found\n");]
removed string literal ""symbol not found\n""

line 1668: [            }]

line 1669: [        }]

line 1670: [        ]

line 1671: [    }else{]

line 1672: [        P("usage: symbol <name>\n");]
removed string literal ""usage: symbol <name>\n""

line 1673: [    }]

line 1674: [}]

line 1675: [symbol_help: db "\"symbol <name>\" to print symbol (function or variable) info\n", db 0;]
removed string literal ""\"symbol <name>\" to print symbol (function or variable) info\n""
found label symbol_help

line 1676: []

line 1677: [void cmd_load(){]
found func cmd_load



sig1 = void cmd_load()
sig2 = ()

line 1678: [    float argc = strlen(Arr);]
found local var argc (BL = 1)

line 1679: [    if(argc>1){]
found reference to argc
currentFunc = cmd_load
ref argc is REF_STACK

line 1680: [        float fullname = filepath_abs(Arr[1]);]
found local var fullname (BL = 2)

line 1681: [        float proginfo = program_load(fullname);]
found local var proginfo (BL = 2)
found reference to program_load
currentFunc = cmd_load
ref program_load is REF_EXT
found reference to fullname
currentFunc = cmd_load
ref fullname is REF_STACK

line 1682: [        addToLoadedPrograms(proginfo);]
found reference to addToLoadedPrograms
currentFunc = cmd_load
ref addToLoadedPrograms is REF_EXT
found reference to proginfo
currentFunc = cmd_load
ref proginfo is REF_STACK

line 1683: [        printf("loaded:\n");]
removed string literal ""loaded:\n""

line 1684: [        printProgInfo(proginfo);]
found reference to printProgInfo
currentFunc = cmd_load
ref printProgInfo is REF_EXT

line 1685: [    }else{]

line 1686: [        P("usage: load filename\n");]
removed string literal ""usage: load filename\n""

line 1687: [    }]

line 1688: [}]

line 1689: [load_help: db "\"load <filename>\" loads and links a program but does not run it.\n", db 0;]
removed string literal ""\"load <filename>\" loads and links a program but does not run it.\n""
found label load_help

line 1690: []

line 1691: []

line 1692: [void cmd_run(){]
found func cmd_run



sig1 = void cmd_run()
sig2 = ()

line 1693: [    printf("running...\n");]
removed string literal ""running...\n""

line 1694: [    float argc = strlen(Arr);]
found local var argc (BL = 1)

line 1695: [    if(argc>1){]
found reference to argc
currentFunc = cmd_run
ref argc is REF_STACK

line 1696: [        //float fullname[80]; getFullname(fullname,Arr[1]);]

line 1697: [        float fullname = filepath_abs(Arr[1]);]
found local var fullname (BL = 2)

line 1698: [        //float strI = fullname;]

line 1699: [        //strcpy(strI,CurDir);]

line 1700: [        //strI = strI + strlen(CurDir);]

line 1701: [        //strcpy(strI,Arr[1]);]

line 1702: [        float proginfo = getLoadedProgram(fullname);]
found local var proginfo (BL = 2)
found reference to getLoadedProgram
currentFunc = cmd_run
ref getLoadedProgram is REF_EXT
found reference to fullname
currentFunc = cmd_run
ref fullname is REF_STACK

line 1703: [        if(!proginfo){]
found reference to proginfo
currentFunc = cmd_run
ref proginfo is REF_STACK

line 1704: [            printf("program [%s] not yet loaded. use \"load %s\" first.\n",fullname,Arr[1]);]
removed string literal ""program [%s] not yet loaded. use \"load %s\" first.\n""

line 1705: [            //proginfo = program_load(fullname);]

line 1706: [            //addToLoadedPrograms(proginfo);]

line 1707: [        }]

line 1708: [        if(proginfo){]

line 1709: [            printf("ok, is loaded\n");]
removed string literal ""ok, is loaded\n""

line 1710: [            program_run(proginfo,argc-1,Arr+1);]
found reference to program_run
currentFunc = cmd_run
ref program_run is REF_EXT

line 1711: [            //redraw_all();]

line 1712: [        }]

line 1713: [    }else{]

line 1714: [        P("usage: run filename\n");]
removed string literal ""usage: run filename\n""

line 1715: [    }]

line 1716: [}]

line 1717: []

line 1718: [run_help: db "\"run <filename>\" to run a program\n", db 0;]
removed string literal ""\"run <filename>\" to run a program\n""
found label run_help

line 1719: []

line 1720: [//captures command line arguments and puts them on the heap;]

line 1721: [//optionally adds a padding for additional arguments.]

line 1722: [float package_args(float pad, float argc, float argv){]
found func package_args



sig1 = float package_args(float pad, float argc, float argv)
sig2 = (float pad, float argc, float argv)
found param pad
found param argc
found param argv

line 1723: [    //1) calc the size of the arguments]

line 1724: [    float L = 0;]
found local var L (BL = 1)

line 1725: [    float I;]
found local var I (BL = 1)

line 1726: [    for(I = 0; I < argc; I++){]
found reference to I
currentFunc = package_args
ref I is REF_STACK
found reference to argc
currentFunc = package_args
ref argc is REF_STACK

line 1727: [        L = L + strlen(argv[I]);]
found reference to L
currentFunc = package_args
ref L is REF_STACK
found reference to argv
currentFunc = package_args
ref argv is REF_STACK

line 1728: [    }]

line 1729: [    //2) store arguments ]

line 1730: [    float args = malloc(pad+argc*2+1);]
found local var args (BL = 1)
found reference to pad
currentFunc = package_args
ref pad is REF_STACK

line 1731: [    //float argI = 0;]

line 1732: [    float argsI = pad+argc+1;]
found local var argsI (BL = 1)

line 1733: [    ]

line 1734: [    for(I = 0; I < argc; I++){]

line 1735: [        args[pad+I] = argsI;             //pointer to string]
found reference to args
currentFunc = package_args
ref args is REF_STACK
found reference to argsI
currentFunc = package_args
ref argsI is REF_STACK

line 1736: [        strcpy(argsI,argv[I]);           //string itself]

line 1737: [        argsI = argsI + strlen(argv[I]); //move current pointer]

line 1738: [    }]

line 1739: [    args[argc] = 0;]

line 1740: [    return args;]

line 1741: [}]

line 1742: []

line 1743: [void cmd_runbg(){]
found func cmd_runbg



sig1 = void cmd_runbg()
sig2 = ()

line 1744: [    float argc = strlen(Arr);]
found local var argc (BL = 1)

line 1745: [    if(argc>1){]
found reference to argc
currentFunc = cmd_runbg
ref argc is REF_STACK

line 1746: [        //float fullname[80]; getFullname(fullname,Arr[1]);]

line 1747: [        float fullname = filepath_abs(Arr[1]);]
found local var fullname (BL = 2)

line 1748: [        //float strI = fullname;]

line 1749: [        //strcpy(strI,CurDir);]

line 1750: [        //strI = strI + strlen(CurDir);]

line 1751: [        //strcpy(strI,Arr[1]);]

line 1752: [        float proginfo = getLoadedProgram(fullname);]
found local var proginfo (BL = 2)
found reference to fullname
currentFunc = cmd_runbg
ref fullname is REF_STACK

line 1753: [        if(!proginfo){]
found reference to proginfo
currentFunc = cmd_runbg
ref proginfo is REF_STACK

line 1754: [            proginfo = program_load(fullname);]

line 1755: [            addToLoadedPrograms(proginfo);]

line 1756: [        }]

line 1757: [        if(proginfo){]

line 1758: [            float args = package_args(1,argc-1,Arr+1);]
found local var args (BL = 3)
found local var argc (BL = 3)
found local var Arr (BL = 3)

line 1759: [            args[0] = proginfo;]
found reference to args
currentFunc = cmd_runbg
ref args is REF_STACK

line 1760: [            float thread1 = thread_create(program_run_background,args);]
found local var thread1 (BL = 3)
found local var args (BL = 3)

line 1761: [            thread_run(thread1);]
found reference to thread_run
currentFunc = cmd_runbg
ref thread_run is REF_EXT
found reference to thread1
currentFunc = cmd_runbg
ref thread1 is REF_STACK

line 1762: [            //redraw_all();]

line 1763: [        }]

line 1764: [    }else{]

line 1765: [        P("usage: runbg filename\n");]
removed string literal ""usage: runbg filename\n""

line 1766: [    }]

line 1767: [}]

line 1768: []

line 1769: [runbg_help: db "\"runbg <filename>\" to run a program as a separate process and return control immediately", db 0;]
removed string literal ""\"runbg <filename>\" to run a program as a separate process and return control immediately""
found label runbg_help

line 1770: []

line 1771: [//      wtf is this even]

line 1772: [//    float fp = fopen(Arr[1],"r");]
removed string literal ""r""

line 1773: [//    if(!fp){Perr("can't open file\n");return;}]
removed string literal ""can't open file\n""

line 1774: [//    float size = 0;]

line 1775: [//    fread(&size,1,fp);]

line 1776: [//    size = size-10;]

line 1777: [//    float ptr_main = 0;]

line 1778: [//    fread(&ptr_main,1,fp);]

line 1779: [//    fseek(fp,10,0);]

line 1780: [//    if(size > programslot_size){Perr("program too big\n");return;}]
removed string literal ""program too big\n""

line 1781: [//    //P2("ptr_main = ",ptr_main,"\n");]
removed string literal ""ptr_main = ""
removed string literal ""\n""

line 1782: [//    //float prog = malloc(size);]

line 1783: [//    if(programslot != 0){Perr("programslot not at 0\n");return;}]
removed string literal ""programslot not at 0\n""

line 1784: [//    float prog = programslot+10;]

line 1785: [//    fread(prog,size,fp);]

line 1786: [//    prog[0] = ParseString;]

line 1787: [//    prog[1] = progtest;]

line 1788: [//    //ptr_main = ptr_main+prog;]

line 1789: [//    //P2("calling ",ptr_main,"\n");]
removed string literal ""calling ""
removed string literal ""\n""

line 1790: [//    ptr_main();]

line 1791: [////    callf ptr_main, prog;]

line 1792: []

line 1793: [void cmd_fileview(){]
found func cmd_fileview



sig1 = void cmd_fileview()
sig2 = ()

line 1794: [    float argc = strlen(Arr);]
found local var argc (BL = 1)

line 1795: [    if(argc==4){]
found reference to argc
currentFunc = cmd_fileview
ref argc is REF_STACK

line 1796: [        float file = Arr[1];]
found local var file (BL = 2)

line 1797: [        float fp = fopen(file,"r");]
removed string literal ""r""
found local var fp (BL = 2)
found reference to file
currentFunc = cmd_fileview
ref file is REF_STACK

line 1798: [        if(!fp){printf("can't open file %s\n",file);return;}]
removed string literal ""can't open file %s\n""
found reference to fp
currentFunc = cmd_fileview
ref fp is REF_STACK

line 1799: [        ]

line 1800: [        float from = str2num(Arr[2]);]
found local var from (BL = 2)

line 1801: [        float len = str2num(Arr[3]);]
found local var len (BL = 2)

line 1802: [        float to = from+len;]
found local var to (BL = 2)
found reference to from
currentFunc = cmd_fileview
ref from is REF_STACK
found reference to len
currentFunc = cmd_fileview
ref len is REF_STACK

line 1803: [        P2("fileview ",len," bytes\n");]
removed string literal ""fileview ""
removed string literal "" bytes\n""

line 1804: [        ]

line 1805: [        float I;]
found local var I (BL = 2)

line 1806: [        //float str[2];]

line 1807: [        //str[1] = 0;]

line 1808: [        //float str2[11];]

line 1809: [        //str2[10] = 0;]

line 1810: [        float buff[1];]
found local var buff (BL = 2)

line 1811: [        for(I = from; I <= to; I++){]
found reference to I
currentFunc = cmd_fileview
ref I is REF_STACK
found reference to to
currentFunc = cmd_fileview
ref to is REF_STACK

line 1812: [            fseek(fp,I,0);]
found reference to fseek
currentFunc = cmd_fileview
ref fseek is REF_EXT

line 1813: [            if(fread(buff,1,fp)){]
found reference to buff
currentFunc = cmd_fileview
ref buff is REF_STACK

line 1814: [                printf("%d: %d\n",I,buff[0]);]
removed string literal ""%d: %d\n""

line 1815: [            }else{]

line 1816: [                printf("EOF\n");]
removed string literal ""EOF\n""

line 1817: [                return;]

line 1818: [            }]

line 1819: [            //P2("",I,": ");]
removed string literal """"
removed string literal "": ""

line 1820: [            //P2("",*I," ");]
removed string literal """"
removed string literal "" ""

line 1821: [            //str[0] = *I;]

line 1822: [            //P(str);]

line 1823: [            //strncpy(str2,*I,10);]

line 1824: [            //P(" [");]
removed string literal "" [""

line 1825: [            //P(str2);]

line 1826: [            //P("]\n");]
removed string literal ""]\n""

line 1827: [        }]

line 1828: [    }else{]

line 1829: [        P("Usage: fileview <file> <from> <len>\n");]
removed string literal ""Usage: fileview <file> <from> <len>\n""

line 1830: [    }]

line 1831: [}]

line 1832: [fileview_help: db "\"fileview <file> <from> <len>\" displays binary file contents\n", db 0;]
removed string literal ""\"fileview <file> <from> <len>\" displays binary file contents\n""
found label fileview_help

line 1833: []

line 1834: [void cmd_memview(){]
found func cmd_memview



sig1 = void cmd_memview()
sig2 = ()

line 1835: [    float argc = strlen(Arr);]
found local var argc (BL = 1)

line 1836: [    if(argc==3){]
found reference to argc
currentFunc = cmd_memview
ref argc is REF_STACK

line 1837: [        float from = str2num(Arr[1]);]
found local var from (BL = 2)

line 1838: [        float len = str2num(Arr[2]);]
found local var len (BL = 2)

line 1839: [        float to = from+len;]
found local var to (BL = 2)
found reference to from
currentFunc = cmd_memview
ref from is REF_STACK
found reference to len
currentFunc = cmd_memview
ref len is REF_STACK

line 1840: [        P2("Memview ",len," bytes\n");]
removed string literal ""Memview ""
removed string literal "" bytes\n""

line 1841: [        ]

line 1842: [        float I;]
found local var I (BL = 2)

line 1843: [        float str[2];]
found local var str (BL = 2)

line 1844: [        str[1] = 0;]
found reference to str
currentFunc = cmd_memview
ref str is REF_STACK

line 1845: [        float str2[11];]
found local var str2 (BL = 2)

line 1846: [        str2[10] = 0;]
found reference to str2
currentFunc = cmd_memview
ref str2 is REF_STACK

line 1847: [        for(I = from; I <= to; I++){]
found reference to I
currentFunc = cmd_memview
ref I is REF_STACK
found reference to to
currentFunc = cmd_memview
ref to is REF_STACK

line 1848: [            P2("",I,": ");]
removed string literal """"
removed string literal "": ""

line 1849: [            P2("",*I," ");]
removed string literal """"
removed string literal "" ""

line 1850: [            str[0] = *I;]

line 1851: [            P(str);]

line 1852: [            strncpy(str2,*I,10);]
found reference to strncpy
currentFunc = cmd_memview
ref strncpy is REF_EXT

line 1853: [            P(" [");]
removed string literal "" [""

line 1854: [            P(str2);]

line 1855: [            P("]\n");]
removed string literal ""]\n""

line 1856: [        }]

line 1857: [    }else{]

line 1858: [        P("Usage: memview <from> <len>\n");]
removed string literal ""Usage: memview <from> <len>\n""

line 1859: [    }]

line 1860: [}]

line 1861: [memview_help: db "\"memview <from> <len>\" displays the contents of <len> bytes of RAM starting from address <from>. Mind the paging.\n", db 0;]
removed string literal ""\"memview <from> <len>\" displays the contents of <len> bytes of RAM starting from address <from>. Mind the paging.\n""
found label memview_help

line 1862: []

line 1863: [float memtest_hlp(float adr){]
found func memtest_hlp



sig1 = float memtest_hlp(float adr)
sig2 = (float adr)
found param adr

line 1864: [    adr[0] = 1;]
found reference to adr
currentFunc = memtest_hlp
ref adr is REF_STACK

line 1865: [    if(adr[0] == 1){]

line 1866: [      adr[0] = 0;]

line 1867: [        if(adr[0] == 0){]

line 1868: [          return 1;        ]

line 1869: [        }]

line 1870: [      }]

line 1871: [    return 0;]

line 1872: [}]

line 1873: []

line 1874: [void memtest(){]
found func memtest



sig1 = void memtest()
sig2 = ()

line 1875: [    float argc = strlen(Arr);]
found local var argc (BL = 1)

line 1876: [    float adr = End;]
found local var adr (BL = 1)

line 1877: [    if(argc==2){]
found reference to argc
currentFunc = memtest
ref argc is REF_STACK

line 1878: [        adr = str2num(Arr[1]);]
found reference to adr
currentFunc = memtest
ref adr is REF_STACK

line 1879: [        P2("testing memory at ", adr, "\n");]
removed string literal ""testing memory at ""
removed string literal ""\n""

line 1880: [        if(memtest_hlp(adr)){]
found reference to memtest_hlp
currentFunc = memtest
ref memtest_hlp is REF_EXT

line 1881: [            P("SUCCESS\n");]
removed string literal ""SUCCESS\n""

line 1882: [        }else{]

line 1883: [            P("FAILED\n");]
removed string literal ""FAILED\n""

line 1884: [        }]

line 1885: [    }else{]

line 1886: [        float I = 0;]
found local var I (BL = 2)

line 1887: [        while(1){]

line 1888: [            P2("testing ",adr,"\n");]
removed string literal ""testing ""
removed string literal ""\n""

line 1889: [            for(I = 0; I < 1000; I++){]
found reference to I
currentFunc = memtest
ref I is REF_STACK

line 1890: [                if(memtest_hlp(adr)){]

line 1891: [                    adr++;]

line 1892: [                }else{]

line 1893: [                    P2("found the end at ",adr,"\n");]
removed string literal ""found the end at ""
removed string literal ""\n""

line 1894: [                }]

line 1895: [            }]

line 1896: [        }]

line 1897: [    }]

line 1898: [    ]

line 1899: [}]

line 1900: [memtest_help: db "\"memtest <address>\" checks if <address> is write-able. \"memtest\" does this for the first 1000 bytes.\n";]
removed string literal ""\"memtest <address>\" checks if <address> is write-able. \"memtest\" does this for the first 1000 bytes.\n""
found label memtest_help

line 1901: [db "used to figure out of the hardware platform actually has RAM installed.\n", db 0;]
removed string literal ""used to figure out of the hardware platform actually has RAM installed.\n""

line 1902: []

line 1903: [//void cmd_wsi(){]

line 1904: [//    float argc = strlen(Arr);]

line 1905: [//    wsi(argc,Arr);]

line 1906: [//}]

line 1907: []

line 1908: []

line 1909: [SHELL_CONSTANTS:]
found label SHELL_CONSTANTS

line 1910: [CommandBuff:]
found label CommandBuff

line 1911: [//db "cls", db 0, db cls, db cls_help;]
removed string literal ""cls""

line 1912: [//db "help", db 0, db help, db help_help;]
removed string literal ""help""

line 1913: [//db "heap", db 0, db heap_status, db heap_status_help;]
removed string literal ""heap""

line 1914: [//db "rpncalc", db 0, db cmd_rpncalc, db rpncalc_help;]
removed string literal ""rpncalc""

line 1915: [//db "memtest",db 0, db memtest, db memtest_help;]
removed string literal ""memtest""

line 1916: [//db "dump",db 0, db cmd_dump, db dump_help;]
removed string literal ""dump""

line 1917: [//db "run", db 0, db cmd_run, db run_help;]
removed string literal ""run""

line 1918: [//db "runbg", db 0, db cmd_runbg, db runbg_help; ]
removed string literal ""runbg""

line 1919: [//db "load", db 0, db cmd_load, db load_help;]
removed string literal ""load""

line 1920: [////db "FS",db 0,db FScheck,]
removed string literal ""FS""

line 1921: [////db "FSinit",db 0, db FSinit,]
removed string literal ""FSinit""

line 1922: [////db "File", db 0, db FSfile,]
removed string literal ""File""

line 1923: [////db "dir", db 0, db Dir,]
removed string literal ""dir""

line 1924: [////db "cd", db 0, db changeDir,]
removed string literal ""cd""

line 1925: [////db "md", db 0, db makeDir,]
removed string literal ""md""

line 1926: [////db "mf", db 0, db makeFile]
removed string literal ""mf""

line 1927: [////db "del", db 0, db DirDel,]
removed string literal ""del""

line 1928: [////db "format", db 0, db consFormat,]
removed string literal ""format""

line 1929: [////db "s_set", db 0, db s_test_init,]
removed string literal ""s_set""

line 1930: [////db "s_get", db 0, db s_test_get,]
removed string literal ""s_get""

line 1931: [////db "s_put", db 0, db s_test_put,]
removed string literal ""s_put""

line 1932: [////db "s_close", db 0, db s_test_close,]
removed string literal ""s_close""

line 1933: [////db "folder", db 0, db csreadFolder,]
removed string literal ""folder""

line 1934: [////db "append", db 0, db fileAppend,]
removed string literal ""append""

line 1935: [////db "fsll", db 0, db showFSLL,]
removed string literal ""fsll""

line 1936: [////db "file", db 0, db csreadFile,]
removed string literal ""file""

line 1937: [////db "rename", db 0, db DirRename,]
removed string literal ""rename""

line 1938: []

line 1939: [//db "cd", db 0, db cmd_cd, db cd_help;]
removed string literal ""cd""

line 1940: [//db "dir", db 0, db cmd_dir, db dir_help;]
removed string literal ""dir""

line 1941: [//db "mkdir", db 0, db cmd_mkdir, db mkdir_help;]
removed string literal ""mkdir""

line 1942: [//db "del", db 0, db cmd_del, db del_help;]
removed string literal ""del""

line 1943: [//db "rn", db 0, db cmd_rn, db rn_help;]
removed string literal ""rn""

line 1944: [//db "write", db 0, db cmd_write, db write_help;]
removed string literal ""write""

line 1945: [//db "read", db 0, db cmd_read, db read_help;]
removed string literal ""read""

line 1946: [//db "info", db 0, db cmd_info, db info_help;]
removed string literal ""info""

line 1947: [//db "hdd", db 0, db cmd_hdd, db hdd_help;]
removed string literal ""hdd""

line 1948: [//db "mount", db 0, db cmd_mount, db mount_help;]
removed string literal ""mount""

line 1949: [//db "format", db 0, db cmd_format, db format_help;]
removed string literal ""format""

line 1950: [//db "gpio", db 0, db cmd_gpio, db gpio_help;]
removed string literal ""gpio""

line 1951: [//db "exec", db 0, db cmd_exec, db exec_help;]
removed string literal ""exec""

line 1952: [////db "asm", db 0, db cmd_asm, db asm_help;]
removed string literal ""asm""

line 1953: [////db "compile", db 0, db cmd_compile, db compile_help;]
removed string literal ""compile""

line 1954: []

line 1955: [////db "disasm", db 0, db cmd_disasm, db disasm_help;]
removed string literal ""disasm""

line 1956: [//db "symbol", db 0, db cmd_symbol, db symbol_help;]
removed string literal ""symbol""

line 1957: [////db "wsi", db 0, db cmd_wsi, db 0;]
removed string literal ""wsi""

line 1958: []

line 1959: [////db "crc", db 0, db cmd_crc, db crc_help;]
removed string literal ""crc""

line 1960: [////db "checksum", db 0, db cmd_checksum, db checksum_help;]
removed string literal ""checksum""

line 1961: [//db "memview", db 0, db cmd_memview, db memview_help;]
removed string literal ""memview""

line 1962: [//db "fileview", db 0, db cmd_fileview, db fileview_help;]
removed string literal ""fileview""

line 1963: [//db "panic", db 0, db shell_panic, db shell_panic_help;]
removed string literal ""panic""

line 1964: [//db "version", db 0, db printversion, db printversion_help;]
removed string literal ""version""

line 1965: [////db "exit", db 0, db test,]
removed string literal ""exit""

line 1966: [//db "echo", db 0, db cmdecho, db echo_help;]
removed string literal ""echo""

line 1967: [////db "sound", db 0, db cmdsound;]
removed string literal ""sound""

line 1968: [//db "time", db 0, db cmdtime, db time_help;]
removed string literal ""time""

line 1969: [//db "test", db 0, db cmdtest, db test_help;]
removed string literal ""test""

line 1970: [//db "test2", db 0, db cmdtest2, db test2_help;]
removed string literal ""test2""

line 1971: [//db "test3", db 0, db cmdtest3, db test3_help;]
removed string literal ""test3""

line 1972: [//db "test4", db 0, db cmd_test4, db test4_help;]
removed string literal ""test4""

line 1973: [//db "test5", db 0, db cmd_test5, db test5_help;]
removed string literal ""test5""

line 1974: [//db "ps", db 0, db cmdps, db 0;]
removed string literal ""ps""

line 1975: [//db "yield", db 0, db cmdyield, db 0;]
removed string literal ""yield""

line 1976: [//db "trace", db 0, db cmdtrace, db trace_help;]
removed string literal ""trace""

line 1977: [////#ifdef PROGNOTEPAD_GUARD]

line 1978: [////db "notepad", db 0, db notepad_start, db notepad_help;]
removed string literal ""notepad""

line 1979: [////#endif]

line 1980: [////db "memview", db 0, db test,]
removed string literal ""memview""

line 1981: [////db "semaphore", db 0, db test,]
removed string literal ""semaphore""

line 1982: [////db "beep", db 0, db test,]
removed string literal ""beep""

line 1983: [////db "pony", db 0, db test,]
removed string literal ""pony""

line 1984: [////db "moduleload", db 0, db test,]
removed string literal ""moduleload""

line 1985: [////db "modulelist", db 0, db test,]
removed string literal ""modulelist""

line 1986: [////db "exec", db 0, db test,]
removed string literal ""exec""

line 1987: [////db "consoleSuspend", db 0, db test,]
removed string literal ""consoleSuspend""

line 1988: [////db "consoleResume", db 0, db test;]
removed string literal ""consoleResume""

line 1989: [CommandBuffEnd:]
found label CommandBuffEnd

line 1990: []

line 1991: [//#include <libstring.txt>]

line 1992: [//#include <libnumber.txt>]

line 1993: [//#include <zmalloc.txt>]

line 1994: [//#include <zvector.txt>]

line 1995: [//#include <zstring.txt>]

line 1996: [//#include <zlist.txt>]

line 1997: [//#define STRINGTRACKER_TEST]

line 1998: [//#include <class_stringtracker.txt>]

line 1999: [//#include <libconsolescreen.txt>]

line 2000: [//#include <libkeyboard.txt>]

line 2001: [//#include <prognotepad.txt>]

line 2002: [//#include <shell.txt>]

line 2003: [//#include <stackalloc.txt>]

line 2004: [/*]

line 2005: [SHELL_VARS:]

line 2006: [CRC_areas:]

line 2007: [db LIBSTRING_CODE; db LIBSTRING_VARS; db 0; db 0;]

line 2008: [db LIBNUMBER_CODE; db LIBNUMBER_VARS; db 0; db 0;]

line 2009: [db ZMALLOC_CODE; db ZMALLOC_VARS; db 0; db 0;]

line 2010: [db ZVECTOR_CODE; db ZVECTOR_VARS; db 0; db 0;]

line 2011: [db ZSTRING_CODE; db ZSTRING_VARS; db 0; db 0;]

line 2012: [db ZLIST_CODE; db ZLIST_VARS; db 0; db 0;]

line 2013: [db STRINGTRACKER_CODE; db STRINGTRACKER_VARS; db 0; db 0;]

line 2014: [db LIBCONSOLESCREEN_CODE; db LIBCONSOLESCREEN_VARS; db 0; db 0;]

line 2015: [db LIBKEYBOARD_CODE; db LIBKEYBOARD_VARS; db 0; db 0;]

line 2016: [//db PROGNOTEPAD_CODE; db PROGNOTEPAD_VARS; db 0; db 0;]

line 2017: [db SHELL_CODE; db SHELL_VARS; db 0; db 0;]

line 2018: [db STACKALLOC_CODE; db STACKALLOC_VARS; db 0; db 0;]

line 2019: [db LIBCRC_CODE; db LIBCRC_VARS; db 0; db 0;]

line 2020: [CRC_end:]

line 2021: [*/]

line 2022: [float CommandList = 0;]
found global var CommandList

line 2023: []

line 2024: [float checksum_prev_first = 0;]
found global var checksum_prev_first

line 2025: [float checksum_previous = 0;]
found global var checksum_previous

line 2026: [float crc_prev_first = 0;]
found global var crc_prev_first

line 2027: [float crc_previous = 0;]
found global var crc_previous

line 2028: [float shell_panic_ebp;]
found global var shell_panic_ebp

line 2029: [float shell_panic_esp;]
found global var shell_panic_esp

line 2030: [float R = 0;]
found global var R

line 2031: [float Echo = 1;]
found global var Echo

line 2032: [float Arr = 0;]
found global var Arr

line 2033: [float PKSI = 0;]
found global var PKSI

line 2034: [float listeningToInput = 0;]
found global var listeningToInput

line 2035: []

line 2036: [float numModules = 0;]
found global var numModules

line 2037: [mems:alloc 5;//used by test 1]
found label mems

line 2038: [CurDir:alloc 60;]
found label CurDir

line 2039: [float MinStrI = 0;]
found global var MinStrI

line 2040: [MinStr:alloc 256;]
found label MinStr

line 2041: [//Header:alloc 9000]

line 2042: [SHELL_END:]
found label SHELL_END

line 2043: [#endif]

line 2044: []

line 2045: []

line 180: [//#include <cyclone/libs/libcrc.txt>]

line 181: [//////#include <filesystem.txt>]

line 182: [#include <cyclone/libs/fs_support.txt>]
found include <cyclone/libs/fs_support.txt>
reading file cyclone/libs/fs_support.txt

line 1: [//proposed standards:]

line 2: [//Disk format:]

line 3: [// starting on byte 0 should be a c_string indicating the type of the filesystem currently on disk.]

line 4: [//]

line 5: [//FS API:]

line 6: [// suggested:]

line 7: [//  void fs_init(params)]

line 8: [//   initializes the RAM portion of the filesystem]

line 9: [//]

line 10: [//  void fs_format(params)]

line 11: [//   install an empty filesystem on the disk]

line 12: [//]

line 13: [//  void fs_write_to_disk(params)]

line 14: [//   write fs state from RAM to disk (or sync/update)]

line 15: [//]

line 16: [//  void fs_read_from_disk(params)]

line 17: [//   read fs state from disk to RAM (or sync/update)]

line 18: [//]

line 19: [// necessary:]

line 20: [//  file_handle fopen(char *filename, char *mode)]

line 21: [//      returns file_handle on success]

line 22: [//      returns 0 on failure]

line 23: [//]

line 24: [//  fwrite(ptr *from, int size, file_handle *fp)]

line 25: [//      1 - success, 0 - failure]

line 26: [//]

line 27: [//  fread(ptr *to, int size, file_handle *fp)]

line 28: [//      1 - success, 0 - failure]

line 29: [//]

line 30: [//  feof(file_handle *fp)]

line 31: [//      returns 1 if r/w ptr reached the end of file.]

line 32: [//]

line 33: [// weakly defined:]

line 34: [//  fputc(file_handle *fp, char C)]

line 35: [//  freadc(file_handle *fp, char C)]

line 36: [//]

line 37: [// provided:]

line 38: [//  file_handle:]

line 39: [//    0 - typeid]

line 40: [//    1 - r/w ptr, relative to beginning of file]

line 41: [//    2 - implementation-defined   ]

line 42: [//]

line 43: [//  translate_fopen_mode(char *mode, out *read, *write, *data, *from, *nofile)]

line 44: [//    tells you the meaning of *mode.]

line 45: [//    modes  |read|write|data   |from  |no file]

line 46: [//    ------------------------------------------]

line 47: [//    "r"    |read|     |keep   |start |error]
removed string literal ""r""

line 48: [//    "w"    |    |write|discard|start |new file]
removed string literal ""w""

line 49: [//    "r+"   |read|write|keep   |start |error]
removed string literal ""r+""

line 50: [//    "w+"   |read|write|discard|start |new file]
removed string literal ""w+""

line 51: [//    "a"    |    |write|keep   |end   |new file]
removed string literal ""a""

line 52: [//    "a+"   |read|write|keep   |end   |new file]
removed string literal ""a+""

line 53: [//]

line 54: [//  int filepath_legal(char *filename)   ]

line 55: [//   returns 1 if filepath is legal.]

line 56: [//   legal filepaths:]

line 57: [//   -contain only letters, numbers, and slashes '/'.]
removed character literal "'/'"

line 58: [//   -do not contain two slashes in a row "//"]
removed string literal ""//""

line 59: [//]

line 60: [//  char *current_path;]

line 61: [//   path to the "current" folder, from which relative paths originate.   ]
removed string literal ""current""

line 62: [//]

line 63: [//  char *filepath_abs(char *filename)]

line 64: [//   translates relative path into absolute one.]

line 65: [//]

line 66: [//  void filepath_decimate(char *filename, out *folders[], out *name, out *is_abs)]

line 67: [//   -returns an array of c_strings, each corresponding to a dir in the path]

line 68: [//   -if there is anything after the final slash, returns that as the *name of the file.]

line 69: [//    else it is a path to folder.]

line 70: [//   -sets *is_abs to true if the first symbol is a slash, false otherwise.]

line 71: [//   ]

line 72: [//  char *filename_extension(char *filename)]

line 73: [//   -returns the substring after the last dot '.']
removed character literal "'.'"

line 74: [//]

line 75: [//  char *filepath_base(char *filename)]

line 76: [//   -returns the file's name without extension.]

line 77: []

line 78: [#ifndef file_handle_GUARD]
#ifndef "file_handle_GUARD" (undefined)

line 79: [#define file_handle_GUARD]
#defined "file_handle_GUARD"

line 80: []

line 81: [//generated using:]

line 82: [//skeleton file_handle rw_ptr imp -canary -nomalloc ]

line 83: []

line 84: [//struct file_handle]

line 85: [//    0: canary]

line 86: [//    1: rw_ptr]

line 87: [//    2: imp]

line 88: [//]

line 89: []

line 90: [str_file_handle: db "file_handle",0;]
removed string literal ""file_handle""
found label str_file_handle

line 91: []

line 92: [#ifndef CANARY_GUARD]
#ifndef "CANARY_GUARD" (undefined)

line 93: [#define CANARY_GUARD]
#defined "CANARY_GUARD"

line 94: [void check_canary(float this, float canary){]
found func check_canary



sig1 = void check_canary(float this, float canary)
sig2 = (float this, float canary)
found param this
found param canary

line 95: [   if(this[0] != canary){]
found reference to this
currentFunc = check_canary
ref this is REF_STACK
found reference to canary
currentFunc = check_canary
ref canary is REF_STACK

line 96: [        shell_panic();]

line 97: [   }]

line 98: [}]

line 99: [#endif]

line 100: []

line 101: [//float sizeof_file_handle(){return 3};]

line 102: [float sizeof_file_handle = 3;]
found global var sizeof_file_handle

line 103: [//default constructor]

line 104: [void file_handle_constructor(float this){]
found func file_handle_constructor



sig1 = void file_handle_constructor(float this)
sig2 = (float this)
found param this

line 105: [    this[0] = str_file_handle;]
found reference to this
currentFunc = file_handle_constructor
ref this is REF_STACK
found reference to str_file_handle
currentFunc = file_handle_constructor
ref str_file_handle is REF_EXT

line 106: [    this[1] = 0;]

line 107: [    this[2] = 0;]

line 108: [}]

line 109: []

line 110: [//copy constructor]

line 111: [void file_handle_copy_constructor(float this, float that){]
found func file_handle_copy_constructor



sig1 = void file_handle_copy_constructor(float this, float that)
sig2 = (float this, float that)
found param this
found param that

line 112: [    this[0] = that[0];]
found reference to this
currentFunc = file_handle_copy_constructor
ref this is REF_STACK
found reference to that
currentFunc = file_handle_copy_constructor
ref that is REF_STACK

line 113: [    this[1] = that[1];]

line 114: [    this[2] = that[2];]

line 115: [    check_canary(this,str_file_handle);]
found reference to check_canary
currentFunc = file_handle_copy_constructor
ref check_canary is REF_EXT

line 116: [}]

line 117: []

line 118: [//default destructor]

line 119: [void file_handle_destructor(float this){check_canary(this,str_file_handle);]
found func file_handle_destructor



sig1 = void file_handle_destructor(float this)
sig2 = (float this)
found param this
found reference to this
currentFunc = file_handle_destructor
ref this is REF_STACK

line 120: [    check_canary(this,str_file_handle);]

line 121: [    //add your code here]

line 122: [}]

line 123: []

line 124: [//getters]

line 125: [float file_handle_get_canary(float this){check_canary(this,str_file_handle);return this[0];}]
found func file_handle_get_canary



sig1 = float file_handle_get_canary(float this)
sig2 = (float this)
found param this
found reference to this
currentFunc = file_handle_get_canary
ref this is REF_STACK

line 126: [float file_handle_get_rw_ptr(float this){check_canary(this,str_file_handle);return this[1];}]
found func file_handle_get_rw_ptr



sig1 = float file_handle_get_rw_ptr(float this)
sig2 = (float this)
found param this
found reference to this
currentFunc = file_handle_get_rw_ptr
ref this is REF_STACK

line 127: [float file_handle_get_imp(float this){check_canary(this,str_file_handle);return this[2];}]
found func file_handle_get_imp



sig1 = float file_handle_get_imp(float this)
sig2 = (float this)
found param this
found reference to this
currentFunc = file_handle_get_imp
ref this is REF_STACK

line 128: []

line 129: [//setters]

line 130: [void file_handle_set_canary(float this, float N){check_canary(this,str_file_handle);this[0] = N;}]
found func file_handle_set_canary



sig1 = void file_handle_set_canary(float this, float N)
sig2 = (float this, float N)
found param this
found param N
found reference to this
currentFunc = file_handle_set_canary
ref this is REF_STACK
found reference to N
currentFunc = file_handle_set_canary
ref N is REF_STACK

line 131: [void file_handle_set_rw_ptr(float this, float N){check_canary(this,str_file_handle);this[1] = N;}]
found func file_handle_set_rw_ptr



sig1 = void file_handle_set_rw_ptr(float this, float N)
sig2 = (float this, float N)
found param this
found param N
found reference to this
currentFunc = file_handle_set_rw_ptr
ref this is REF_STACK
found reference to N
currentFunc = file_handle_set_rw_ptr
ref N is REF_STACK

line 132: [void file_handle_set_imp(float this, float N){check_canary(this,str_file_handle);this[2] = N;}]
found func file_handle_set_imp



sig1 = void file_handle_set_imp(float this, float N)
sig2 = (float this, float N)
found param this
found param N
found reference to this
currentFunc = file_handle_set_imp
ref this is REF_STACK
found reference to N
currentFunc = file_handle_set_imp
ref N is REF_STACK

line 133: []

line 134: [#endif]

line 135: []

line 136: [void translate_fopen_mode(char *mode, float *read, float *write, float *keepdata, float *from, float *newfile){]
found func translate_fopen_mode



sig1 = void translate_fopen_mode(char *mode, float *read, float *write, float *keepdata, float *from, float *newfile)
sig2 = (char *mode, float *read, float *write, float *keepdata, float *from, float *newfile)
found param mode
found param read
found param write
found param keepdata
found param from
found param newfile

line 137: [    if(strcmp(mode,"r")==0){  ]
removed string literal ""r""
found reference to mode
currentFunc = translate_fopen_mode
ref mode is REF_STACK

line 138: [        *read = 1;]
found reference to read
currentFunc = translate_fopen_mode
ref read is REF_STACK

line 139: [        *write = 0;]
found reference to write
currentFunc = translate_fopen_mode
ref write is REF_STACK

line 140: [        *keepdata = 1;]
found reference to keepdata
currentFunc = translate_fopen_mode
ref keepdata is REF_STACK

line 141: [        *from = 0;]
found reference to from
currentFunc = translate_fopen_mode
ref from is REF_STACK

line 142: [        *newfile = 0;]
found reference to newfile
currentFunc = translate_fopen_mode
ref newfile is REF_STACK

line 143: [        return;]

line 144: [    }]

line 145: [      if(strcmp(mode,"w")==0){  ]
removed string literal ""w""

line 146: [        *read = 0;]

line 147: [        *write = 1;]

line 148: [        *keepdata = 0;]

line 149: [        *from = 0;]

line 150: [        *newfile = 1;]

line 151: [        return;]

line 152: [    }]

line 153: [        if(strcmp(mode,"r+")==0){  ]
removed string literal ""r+""

line 154: [        *read = 1;]

line 155: [        *write = 1;]

line 156: [        *keepdata = 1;]

line 157: [        *from = 0;]

line 158: [        *newfile = 0;]

line 159: [        return;]

line 160: [    }]

line 161: [        if(strcmp(mode,"w+")==0){  ]
removed string literal ""w+""

line 162: [        *read = 1;]

line 163: [        *write = 1;]

line 164: [        *keepdata = 0;]

line 165: [        *from = 0;]

line 166: [        *newfile = 1;]

line 167: [        return;]

line 168: [    }]

line 169: [        if(strcmp(mode,"a")==0){  ]
removed string literal ""a""

line 170: [        *read = 0;]

line 171: [        *write = 1;]

line 172: [        *keepdata = 1;]

line 173: [        *from = 1;]

line 174: [        *newfile = 1;]

line 175: [        return;]

line 176: [    }]

line 177: [        if(strcmp(mode,"a+")==0){  ]
removed string literal ""a+""

line 178: [        *read = 1;]

line 179: [        *write = 1;]

line 180: [        *keepdata = 1;]

line 181: [        *from = 1;]

line 182: [        *newfile = 1;]

line 183: [        return;]

line 184: [    }  ]

line 185: [    *read = 0;]

line 186: [    *write = 0;]

line 187: [    *keepdata = 0;]

line 188: [    *from = 0;]

line 189: [    *newfile = 0;]

line 190: [    return;]

line 191: [}]

line 192: []

line 193: []

line 194: []

line 195: [float filepath_legal(char *filename){]
found func filepath_legal



sig1 = float filepath_legal(char *filename)
sig2 = (char *filename)
found param filename

line 196: [    float I = 0;]
found local var I (BL = 1)

line 197: [    while(filename[I] != 0){]
found reference to filename
currentFunc = filepath_legal
ref filename is REF_STACK
found reference to I
currentFunc = filepath_legal
ref I is REF_STACK

line 198: [        float C = filename[I];]
found local var C (BL = 2)

line 199: [        I++;]

line 200: [        if(isalpha(C) && (C!= '/')){return 0;}  ]
removed character literal "'/'"
found reference to C
currentFunc = filepath_legal
ref C is REF_STACK

line 201: [    }]

line 202: [    return 1;]

line 203: [}]

line 204: []

line 205: [char current_path = 0;]
found global var current_path

line 206: []

line 207: [char *filepath_abs(char *filename){]
found func filepath_abs



sig1 = char *filepath_abs(char *filename)
sig2 = (char *filename)
found param filename

line 208: [    if(filename[0] == '/'){return filename;}]
removed character literal "'/'"
found reference to filename
currentFunc = filepath_abs
ref filename is REF_STACK

line 209: [    //float len1 = strlen(current_path);]

line 210: [    //float len2 = strlen(filename);]

line 211: [    //float abspath = malloc(len1+len2+2);]

line 212: [    //strcpy(abspath,current_path);]

line 213: [    //abspath[len1] = '/';]
removed character literal "'/'"

line 214: [    //strcpy(abspath+len1+1,filename);]

line 215: [    float abspath = concat(current_path,filename);]
found local var abspath (BL = 1)
found local var filename (BL = 1)

line 216: [    float len = strlen(abspath);]
found local var len (BL = 1)
found reference to abspath
currentFunc = filepath_abs
ref abspath is REF_STACK

line 217: [    stack_return(abspath,len+1,1);]
found reference to len
currentFunc = filepath_abs
ref len is REF_STACK

line 218: [}]

line 219: []

line 220: [void filepath_decimate(char *filename, float *folders, char *name, float *is_abs){]
found func filepath_decimate



sig1 = void filepath_decimate(char *filename, float *folders, char *name, float *is_abs)
sig2 = (char *filename, float *folders, char *name, float *is_abs)
found param filename
found param folders
found param name
found param is_abs

line 221: [    //filename = str_stack_copy(filename);]

line 222: [    *folders = 0;]
found reference to folders
currentFunc = filepath_decimate
ref folders is REF_STACK

line 223: [    *name = 0;]
found reference to name
currentFunc = filepath_decimate
ref name is REF_STACK

line 224: [    *is_abs = 0;]
found reference to is_abs
currentFunc = filepath_decimate
ref is_abs is REF_STACK

line 225: [    float len = strlen(filename);]
found local var len (BL = 1)
found reference to filename
currentFunc = filepath_decimate
ref filename is REF_STACK

line 226: [    //P2(".len = ",len,"\n");]
removed string literal "".len = ""
removed string literal ""\n""

line 227: [    float is_file = 1;]
found local var is_file (BL = 1)

line 228: [    float dir_arr = malloc(12+len);]
found local var dir_arr (BL = 1)
found reference to len
currentFunc = filepath_decimate
ref len is REF_STACK

line 229: [    strcpy(dir_arr+11,filename);]
found reference to dir_arr
currentFunc = filepath_decimate
ref dir_arr is REF_STACK

line 230: [    filename = dir_arr+11;]

line 231: [    float dir_arr_I = 0;]
found local var dir_arr_I (BL = 1)

line 232: [    if(filename[len-1] == '/'){is_file = 0;filename[len-1] = 0;}]
removed character literal "'/'"
found reference to is_file
currentFunc = filepath_decimate
ref is_file is REF_STACK

line 233: [    if(filename[0] == '/'){*is_abs = 1; filename++;}]
removed character literal "'/'"

line 234: [    //P2(".is_file = ",is_file,"\n");    ]
removed string literal "".is_file = ""
removed string literal ""\n""

line 235: [        ]

line 236: [    float I = 0;]
found local var I (BL = 1)

line 237: [    fp_dec_loop:]
found label fp_dec_loop

line 238: [    //P("loop\n");]
removed string literal ""loop\n""

line 239: [    I = cstr_find_first_of(filename, '/');]
removed character literal "'/'"
found reference to I
currentFunc = filepath_decimate
ref I is REF_STACK
found reference to cstr_find_first_of
currentFunc = filepath_decimate
ref cstr_find_first_of is REF_EXT

line 240: [    //P2(".I = ",I,"\n");]
removed string literal "".I = ""
removed string literal ""\n""

line 241: [    if(I == -1){]

line 242: [        if(is_file){]

line 243: [            //P(".1(isfile)\n");]
removed string literal "".1(isfile)\n""

line 244: [            //len = strlen(filename);]

line 245: [            *name = filename;//stack_return(filename,len+1,4);]

line 246: [        }]

line 247: [        //P2(".1dir_arr_I = ",dir_arr_I,"\n");]
removed string literal "".1dir_arr_I = ""
removed string literal ""\n""

line 248: [        dir_arr[dir_arr_I] = 0;]
found reference to dir_arr_I
currentFunc = filepath_decimate
ref dir_arr_I is REF_STACK

line 249: [    }else{]

line 250: [        //P2(".2dir_arr_I = ",dir_arr_I,"\n");]
removed string literal "".2dir_arr_I = ""
removed string literal ""\n""

line 251: [        filename[I] = 0;]

line 252: [        dir_arr[dir_arr_I] = filename;]

line 253: [        dir_arr_I++;]

line 254: [        //*I = 0;]

line 255: [        filename = filename+I+1;]

line 256: [        goto fp_dec_loop;]
found reference to fp_dec_loop
currentFunc = filepath_decimate
ref fp_dec_loop is REF_EXT

line 257: [    }]

line 258: [    //P2(".3dir_arr_I = ",dir_arr_I,"\n");]
removed string literal "".3dir_arr_I = ""
removed string literal ""\n""

line 259: [    *folders = dir_arr;//stack_return(dir_arr,10,4);]

line 260: [    //P(".done\n");]
removed string literal "".done\n""

line 261: [}]

line 262: []

line 263: [char *filepath_extension(char *filename){]
found func filepath_extension



sig1 = char *filepath_extension(char *filename)
sig2 = (char *filename)
found param filename

line 264: [    float I = cstr_find_last_of(filename,'.');]
removed character literal "'.'"
found local var I (BL = 1)
found reference to cstr_find_last_of
currentFunc = filepath_extension
ref cstr_find_last_of is REF_EXT
found reference to filename
currentFunc = filepath_extension
ref filename is REF_STACK

line 265: [    if(I == -1){]
found reference to I
currentFunc = filepath_extension
ref I is REF_STACK

line 266: [        return 0;]

line 267: [    }else{]

line 268: [        return filename+I+1;]

line 269: [    }]

line 270: [}]

line 271: []

line 272: [char *filepath_base(char *filename){]
found func filepath_base



sig1 = char *filepath_base(char *filename)
sig2 = (char *filename)
found param filename

line 273: [    float folders;]
found local var folders (BL = 1)

line 274: [    float name;]
found local var name (BL = 1)

line 275: [    float is_abs;]
found local var is_abs (BL = 1)

line 276: [    filepath_decimate(filename, &folders, &name, &is_abs);]
found reference to filepath_decimate
currentFunc = filepath_base
ref filepath_decimate is REF_EXT
found reference to filename
currentFunc = filepath_base
ref filename is REF_STACK
found reference to folders
currentFunc = filepath_base
ref folders is REF_STACK
found reference to name
currentFunc = filepath_base
ref name is REF_STACK
found reference to is_abs
currentFunc = filepath_base
ref is_abs is REF_STACK

line 277: [    float I = cstr_find_last_of(name,'.');]
removed character literal "'.'"
found local var I (BL = 1)

line 278: [    if(I == -1){return name;}]
found reference to I
currentFunc = filepath_base
ref I is REF_STACK

line 279: [    else{name[I] = 0; return name;}]

line 280: [}]

line 281: []

line 183: [#include <cyclone/libs/lightfs2.txt>]
found include <cyclone/libs/lightfs2.txt>
reading file cyclone/libs/lightfs2.txt

line 1: [//lightfs2 -alternative]

line 2: []

line 3: [float files = 0;]
found global var files

line 4: [float filenames = 0;]
found global var filenames

line 5: [str_backslash:]
found label str_backslash

line 6: [db "/",0;]
removed string literal ""/""

line 7: [void filesystem_init(){]
found func filesystem_init



sig1 = void filesystem_init()
sig2 = ()

line 8: [    //P("fs init\n");]
removed string literal ""fs init\n""

line 9: [    current_path = str_backslash;]
found reference to str_backslash
currentFunc = filesystem_init
ref str_backslash is REF_EXT

line 10: [    files = malloc(100);]
found reference to files
currentFunc = filesystem_init
ref files is REF_EXT

line 11: [    if(!files){P("can't init fs (1)!\n");return;}]
removed string literal ""can't init fs (1)!\n""

line 12: [    filenames = malloc(100);]
found reference to filenames
currentFunc = filesystem_init
ref filenames is REF_EXT

line 13: [    if(!filenames){P("can't init fs (2)!\n");return;}]
removed string literal ""can't init fs (2)!\n""

line 14: [    float I;]
found local var I (BL = 1)

line 15: [    for(I = 0; I < 100; I++){]
found reference to I
currentFunc = filesystem_init
ref I is REF_STACK

line 16: [        files[I] = 0;]

line 17: [    }]

line 18: [}]

line 19: []

line 20: [float find_file(char *filename){]
found func find_file



sig1 = float find_file(char *filename)
sig2 = (char *filename)
found param filename

line 21: [    //P("find file [");P(filename);P("]\n");]
removed string literal ""find file [""
removed string literal ""]\n""

line 22: [    float I;]
found local var I (BL = 1)

line 23: [    for(I = 0; I < 100; I++){]
found reference to I
currentFunc = find_file
ref I is REF_STACK

line 24: [        if(files[I]){]

line 25: [            float str = filenames[I];]
found local var str (BL = 3)

line 26: [            float compare = strcmp(str,filename);]
found local var compare (BL = 3)
found local var filename (BL = 3)

line 27: [            //P("str = ");P(str);P("\n");]
removed string literal ""str = ""
removed string literal ""\n""

line 28: [            //P2("compare = ",compare,"\n");]
removed string literal ""compare = ""
removed string literal ""\n""

line 29: [            if(compare == 0){]
found reference to compare
currentFunc = find_file
ref compare is REF_STACK

line 30: [                return I;]

line 31: [            }]

line 32: [        }]

line 33: [    }]

line 34: [    return -1;]

line 35: [}]

line 36: []

line 37: [float find_free(){]
found func find_free



sig1 = float find_free()
sig2 = ()

line 38: [    float I;]
found local var I (BL = 1)

line 39: [    for(I = 0; I < 100; I++){]
found reference to I
currentFunc = find_free
ref I is REF_STACK

line 40: [        if(!files[I]){]

line 41: [            return I;]

line 42: [        }]

line 43: [    }]

line 44: [    return -1;]

line 45: [}]

line 46: []

line 47: [float fopen(char *filename, char *mode){]
found func fopen



sig1 = float fopen(char *filename, char *mode)
sig2 = (char *filename, char *mode)
found param filename
found param mode

line 48: [    filename = filepath_abs(filename);]
found reference to filename
currentFunc = fopen
ref filename is REF_STACK

line 49: [    //P("fopen [");P(filename);P("]\n");]
removed string literal ""fopen [""
removed string literal ""]\n""

line 50: [    float write = 0;]
found local var write (BL = 1)

line 51: [    float read = 0;]
found local var read (BL = 1)

line 52: [    float keepdata = 0;]
found local var keepdata (BL = 1)

line 53: [    float from = 0;]
found local var from (BL = 1)

line 54: [    float newfile = 0;]
found local var newfile (BL = 1)

line 55: [    translate_fopen_mode(mode, &read, &write, &keepdata, &from, &newfile);]
found reference to translate_fopen_mode
currentFunc = fopen
ref translate_fopen_mode is REF_EXT
found reference to mode
currentFunc = fopen
ref mode is REF_STACK
found reference to read
currentFunc = fopen
ref read is REF_STACK
found reference to write
currentFunc = fopen
ref write is REF_STACK
found reference to keepdata
currentFunc = fopen
ref keepdata is REF_STACK
found reference to from
currentFunc = fopen
ref from is REF_STACK
found reference to newfile
currentFunc = fopen
ref newfile is REF_STACK

line 56: [    //P2("write = ",write,"\n");]
removed string literal ""write = ""
removed string literal ""\n""

line 57: [    //P2("read = ",read,"\n");]
removed string literal ""read = ""
removed string literal ""\n""

line 58: [    //P2("keep = ",keepdata,"\n");]
removed string literal ""keep = ""
removed string literal ""\n""

line 59: [    //P2("from = ",from,"\n");]
removed string literal ""from = ""
removed string literal ""\n""

line 60: [    //P2("newfile = ",newfile,"\n");]
removed string literal ""newfile = ""
removed string literal ""\n""

line 61: [    float f_index = find_file(filename);]
found local var f_index (BL = 1)
found reference to find_file
currentFunc = fopen
ref find_file is REF_EXT

line 62: [    //P2("f_index = ",f_index,"\n");]
removed string literal ""f_index = ""
removed string literal ""\n""

line 63: [    float body = 0;]
found local var body (BL = 1)

line 64: [    if(f_index==-1){]
found reference to f_index
currentFunc = fopen
ref f_index is REF_STACK

line 65: [        if(newfile){]

line 66: [            f_index = find_free();]
found reference to find_free
currentFunc = fopen
ref find_free is REF_EXT

line 67: [            //P2("free = ",f_index,"\n");]
removed string literal ""free = ""
removed string literal ""\n""

line 68: [            if(f_index==-1){return -1;}]

line 69: [            body = malloc(sizeof_vector);]
found reference to body
currentFunc = fopen
ref body is REF_STACK

line 70: [            files[f_index] = body;]

line 71: [            vector_constructor(body,1);]

line 72: [            float len = strlen(filename);]
found local var len (BL = 3)

line 73: [            float filename_str = malloc(len+1);]
found local var filename_str (BL = 3)
found reference to len
currentFunc = fopen
ref len is REF_STACK

line 74: [            strcpy(filename_str,filename);]
found reference to filename_str
currentFunc = fopen
ref filename_str is REF_STACK

line 75: [            filenames[f_index] = filename_str;]

line 76: [        }else{]

line 77: [            return -1;]

line 78: [        }]

line 79: [    }]

line 80: [    body = files[f_index];]

line 81: [    if(!keepdata){]

line 82: [        vector_clear(body);]

line 83: [    }]

line 84: [    float size = vector_get_size(body);]
found local var size (BL = 1)

line 85: [    float fp = malloc(sizeof_file_handle);]
found local var fp (BL = 1)
found reference to sizeof_file_handle
currentFunc = fopen
ref sizeof_file_handle is REF_EXT

line 86: [    file_handle_constructor(fp);]
found reference to file_handle_constructor
currentFunc = fopen
ref file_handle_constructor is REF_EXT
found reference to fp
currentFunc = fopen
ref fp is REF_STACK

line 87: [    file_handle_set_imp(fp,body);]
found reference to file_handle_set_imp
currentFunc = fopen
ref file_handle_set_imp is REF_EXT

line 88: [    if(from){]

line 89: [        file_handle_set_rw_ptr(fp,size);]
found reference to file_handle_set_rw_ptr
currentFunc = fopen
ref file_handle_set_rw_ptr is REF_EXT

line 90: [    }]

line 91: [    return fp;   ]

line 92: [}]

line 93: []

line 94: [//fwrite: writes <size> bytes from <from> to <fp>]

line 95: [//byte *from]

line 96: [//int size]

line 97: [//fileHandle *fp]

line 98: [float fwrite(float *from, float size, float *fp){]
found func fwrite



sig1 = float fwrite(float *from, float size, float *fp)
sig2 = (float *from, float size, float *fp)
found param from
found param size
found param fp

line 99: [    //P("fwrite\n");]
removed string literal ""fwrite\n""

line 100: [    if(!fp){return 0;}]
found reference to fp
currentFunc = fwrite
ref fp is REF_STACK

line 101: [    float body = file_handle_get_imp(fp);]
found local var body (BL = 1)
found reference to file_handle_get_imp
currentFunc = fwrite
ref file_handle_get_imp is REF_EXT

line 102: [    //P2("body = ",body,"\n");]
removed string literal ""body = ""
removed string literal ""\n""

line 103: [    float idx = file_handle_get_rw_ptr(fp);]
found local var idx (BL = 1)
found reference to file_handle_get_rw_ptr
currentFunc = fwrite
ref file_handle_get_rw_ptr is REF_EXT

line 104: [    //P2("size = ",size,"\n");]
removed string literal ""size = ""
removed string literal ""\n""

line 105: [    ]

line 106: [    ]

line 107: [    //while(size--){]

line 108: [    //    //P2("idx = ",idx,"\n");]
removed string literal ""idx = ""
removed string literal ""\n""

line 109: [    //    vector_set(body,*from,idx);]

line 110: [    //    idx++;]

line 111: [    //    from++;]

line 112: [    //}]

line 113: [    float curcapacity = vector_get_capacity(body);]
found local var curcapacity (BL = 1)
found reference to vector_get_capacity
currentFunc = fwrite
ref vector_get_capacity is REF_EXT
found reference to body
currentFunc = fwrite
ref body is REF_STACK

line 114: [    ]

line 115: [    float cursize = vector_get_size(body);]
found local var cursize (BL = 1)

line 116: [    float newsize = idx+size;]
found local var newsize (BL = 1)
found reference to idx
currentFunc = fwrite
ref idx is REF_STACK

line 117: [    ]

line 118: [    if(newsize > curcapacity){]
found reference to newsize
currentFunc = fwrite
ref newsize is REF_STACK
found reference to curcapacity
currentFunc = fwrite
ref curcapacity is REF_STACK

line 119: [        float newcapacity = newsize*1.5;]
found local var newcapacity (BL = 2)

line 120: [        vector_resize(body,newcapacity);]
found reference to newcapacity
currentFunc = fwrite
ref newcapacity is REF_STACK

line 121: [    }]

line 122: [    ]

line 123: [    if(newsize > cursize){]
found reference to cursize
currentFunc = fwrite
ref cursize is REF_STACK

line 124: [        vector_set_size(body,newsize);]
found reference to vector_set_size
currentFunc = fwrite
ref vector_set_size is REF_EXT

line 125: [    }]

line 126: [    ]

line 127: [    float arr = vector_get_array(body);]
found local var arr (BL = 1)
found reference to vector_get_array
currentFunc = fwrite
ref vector_get_array is REF_EXT

line 128: [    float ptr = arr;]
found local var ptr (BL = 1)

line 129: [    ptr += idx;]
found reference to ptr
currentFunc = fwrite
ref ptr is REF_STACK

line 130: [    mov esi,from;]
found reference to from
currentFunc = fwrite
ref from is REF_STACK

line 131: [    mov edi,ptr;]

line 132: [    mcopy size;]

line 133: [    ]

line 134: [    //printf("fwrite(%d,%d,%d)\n",from,size,fp);]
removed string literal ""fwrite(%d,%d,%d)\n""

line 135: [    //printf("body %d\n",body);]
removed string literal ""body %d\n""

line 136: [    //printf("idx %d\n",idx);]
removed string literal ""idx %d\n""

line 137: [    //printf("cursize %d\n",cursize);]
removed string literal ""cursize %d\n""

line 138: [    //printf("newsize %d\n",newsize);]
removed string literal ""newsize %d\n""

line 139: [    //printf("newsize2 %d\n",newsize2);]
removed string literal ""newsize2 %d\n""

line 140: [    //printf("arr %d\n", arr);]
removed string literal ""arr %d\n""

line 141: [    //printf("ptr %d\n",ptr);]
removed string literal ""ptr %d\n""

line 142: [    ptr += size;]

line 143: [    ptr -= arr;]

line 144: [    //printf("ptrf %d\n",ptr);]
removed string literal ""ptrf %d\n""

line 145: [    ]

line 146: [    file_handle_set_rw_ptr(fp,ptr);]

line 147: [    //shell_panic();]

line 148: [    return 1;]

line 149: [}]

line 150: []

line 151: [//resizes the file to a given size (for faster writes)]

line 152: [float fresize(float size, float *fp){]
found func fresize



sig1 = float fresize(float size, float *fp)
sig2 = (float size, float *fp)
found param size
found param fp

line 153: [    if(!fp){return 0;}]
found reference to fp
currentFunc = fresize
ref fp is REF_STACK

line 154: [    float body = file_handle_get_imp(fp);]
found local var body (BL = 1)

line 155: [    vector_resize(body,size);]
found reference to body
currentFunc = fresize
ref body is REF_STACK

line 156: [    return 1;]

line 157: [}]

line 158: []

line 159: [//read <size> bytes to buffer <to> from <fp>.]

line 160: [//returns 1 if read sucessful, 0 otherwise (EOF reached before size.)]

line 161: [float fread(float *to, float size, float *fp){]
found func fread



sig1 = float fread(float *to, float size, float *fp)
sig2 = (float *to, float size, float *fp)
found param to
found param size
found param fp

line 162: [    //P("fread\n");]
removed string literal ""fread\n""

line 163: [    if(!fp){return 0;}]
found reference to fp
currentFunc = fread
ref fp is REF_STACK

line 164: [    float body = file_handle_get_imp(fp);]
found local var body (BL = 1)

line 165: [    float idx = file_handle_get_rw_ptr(fp);]
found local var idx (BL = 1)

line 166: [    float end = vector_get_size(body);]
found local var end (BL = 1)
found reference to body
currentFunc = fread
ref body is REF_STACK

line 167: [    float arr = vector_get_array(body);]
found local var arr (BL = 1)

line 168: [    ]

line 169: [    if(size > end){return 0;}]

line 170: [    float ptr = arr;]
found local var ptr (BL = 1)

line 171: [    ptr += idx;]
found reference to ptr
currentFunc = fread
ref ptr is REF_STACK
found reference to idx
currentFunc = fread
ref idx is REF_STACK

line 172: [    mov esi,ptr;]

line 173: [    mov edi,to;]
found reference to to
currentFunc = fread
ref to is REF_STACK

line 174: [    mcopy size;]

line 175: [    ]

line 176: [    /* alright this is some slow-ass bullshit]

line 177: [    while(size--){]

line 178: [        if(idx == end){return 0;}]

line 179: [        else{]

line 180: [            float C = vector_get(body,0,idx);]

line 181: [            *to = C;]

line 182: [            idx++;]

line 183: [            to++;]

line 184: [        }]

line 185: [    }]

line 186: [    */]

line 187: [     ]

line 188: [    ]

line 189: [    ]

line 190: [    //file_handle_set_rw_ptr(fp,idx);]

line 191: [    ptr += size;]

line 192: [    ptr -= arr;]

line 193: [    file_handle_set_rw_ptr(fp,ptr);]

line 194: [    return 1;]

line 195: [}]

line 196: []

line 197: [void frename(float name1, float name2){]
found func frename



sig1 = void frename(float name1, float name2)
sig2 = (float name1, float name2)
found param name1
found param name2

line 198: [    name1 = filepath_abs(name1);]
found reference to name1
currentFunc = frename
ref name1 is REF_STACK

line 199: [    name2 = filepath_abs(name2);]
found reference to name2
currentFunc = frename
ref name2 is REF_STACK

line 200: [    float file1_index = find_file(name1);]
found local var file1_index (BL = 1)

line 201: [    float file2_index = find_file(name2);]
found local var file2_index (BL = 1)

line 202: [    if(file2_index != -1){printf("file still exists: [%s]\n",name2); return;}]
removed string literal ""file still exists: [%s]\n""
found reference to file2_index
currentFunc = frename
ref file2_index is REF_STACK

line 203: [    if(file1_index == -1){printf("no such file: [%s]\n",name1); return;}]
removed string literal ""no such file: [%s]\n""
found reference to file1_index
currentFunc = frename
ref file1_index is REF_STACK

line 204: [    free(filenames[file1_index]);]

line 205: [    filenames[file1_index] = str_alloc(name2);]

line 206: [}]

line 207: []

line 208: [float fgetstring(float *fp, float *str, float num){]
found func fgetstring



sig1 = float fgetstring(float *fp, float *str, float num)
sig2 = (float *fp, float *str, float num)
found param fp
found param str
found param num

line 209: [    if(!fp){return 0;}]
found reference to fp
currentFunc = fgetstring
ref fp is REF_STACK

line 210: [    if(num<2){return 0;}]
found reference to num
currentFunc = fgetstring
ref num is REF_STACK

line 211: [    float body = file_handle_get_imp(fp);]
found local var body (BL = 1)

line 212: [    float idx = file_handle_get_rw_ptr(fp);]
found local var idx (BL = 1)

line 213: [    float end = vector_get_size(body);]
found local var end (BL = 1)
found reference to body
currentFunc = fgetstring
ref body is REF_STACK

line 214: [    if(idx >= end){return 0;}]
found reference to idx
currentFunc = fgetstring
ref idx is REF_STACK

line 215: [    float ptr = vector_get_array(body);]
found local var ptr (BL = 1)

line 216: [    float len = 0;]
found local var len (BL = 1)

line 217: [    float nread = 0;]
found local var nread (BL = 1)

line 218: [    float strptr = str;]
found local var strptr (BL = 1)
found reference to str
currentFunc = fgetstring
ref str is REF_STACK

line 219: [    fgetsloop:]
found label fgetsloop

line 220: [        float C = ptr[idx];]
found local var C (BL = 1)
found reference to ptr
currentFunc = fgetstring
ref ptr is REF_STACK

line 221: [        float previdx = idx;]
found local var previdx (BL = 1)

line 222: [        idx++;]

line 223: [        nread++;]
found reference to nread
currentFunc = fgetstring
ref nread is REF_STACK

line 224: [        if(C == 0){goto fgets_end;}]
found reference to C
currentFunc = fgetstring
ref C is REF_STACK
found reference to fgets_end
currentFunc = fgetstring
ref fgets_end is REF_EXT

line 225: [        if(previdx == end){goto fgets_end;}]
found reference to previdx
currentFunc = fgetstring
ref previdx is REF_STACK

line 226: [        if(C == 10){goto fgets_end;}]

line 227: [        if(nread == num){goto fgets_end;}]

line 228: [        *strptr++ = C;]
found reference to strptr
currentFunc = fgetstring
ref strptr is REF_STACK

line 229: [        goto fgetsloop;]
found reference to fgetsloop
currentFunc = fgetstring
ref fgetsloop is REF_EXT

line 230: [    fgets_end:]
found label fgets_end

line 231: [    *strptr = 0;]

line 232: [    file_handle_set_rw_ptr(fp,idx);]

line 233: [    return str;]

line 234: [}]

line 235: []

line 236: [float feof(float fp){]
found func feof



sig1 = float feof(float fp)
sig2 = (float fp)
found param fp

line 237: [    if(!fp){return 1;}]
found reference to fp
currentFunc = feof
ref fp is REF_STACK

line 238: [    float body = file_handle_get_imp(fp);]
found local var body (BL = 1)

line 239: [    float idx = file_handle_get_rw_ptr(fp);]
found local var idx (BL = 1)

line 240: [    float end = vector_get_size(body);]
found local var end (BL = 1)
found reference to body
currentFunc = feof
ref body is REF_STACK

line 241: [    if(idx == end){return 1;}]
found reference to idx
currentFunc = feof
ref idx is REF_STACK

line 242: [    else{return 0;}]

line 243: [}]

line 244: []

line 245: [float fsize(float fp){]
found func fsize



sig1 = float fsize(float fp)
sig2 = (float fp)
found param fp

line 246: [    if(!fp){return 1;}]
found reference to fp
currentFunc = fsize
ref fp is REF_STACK

line 247: [    float body = file_handle_get_imp(fp);]
found local var body (BL = 1)

line 248: [    float end = vector_get_size(body);]
found local var end (BL = 1)
found reference to body
currentFunc = fsize
ref body is REF_STACK

line 249: [    return end;]

line 250: [}]

line 251: []

line 252: [//set the read-write pointer to <offs>.]

line 253: [//<origin> = 0: offset relative to beginning of file.]

line 254: [//<origin> = 1: offset relative to end of file.]

line 255: [void fseek(float fp, float offs, float origin){]
found func fseek



sig1 = void fseek(float fp, float offs, float origin)
sig2 = (float fp, float offs, float origin)
found param fp
found param offs
found param origin

line 256: [    if(!fp){return;}]
found reference to fp
currentFunc = fseek
ref fp is REF_STACK

line 257: [    if(!origin){]
found reference to origin
currentFunc = fseek
ref origin is REF_STACK

line 258: [        file_handle_set_rw_ptr(fp,offs);]
found reference to offs
currentFunc = fseek
ref offs is REF_STACK

line 259: [    }else{]

line 260: [        float size = fsize(fp);]
found local var size (BL = 2)

line 261: [        file_handle_set_rw_ptr(fp,size+offs);]

line 262: [    }]

line 263: [}]

line 264: []

line 265: [//return the current read-write pointer relative to beginning of file.]

line 266: [float ftell(float fp){]
found func ftell



sig1 = float ftell(float fp)
sig2 = (float fp)
found param fp

line 267: [    if(!fp){return -1;}]
found reference to fp
currentFunc = ftell
ref fp is REF_STACK

line 268: [    return file_handle_get_rw_ptr(fp);]

line 269: [}]

line 270: []

line 271: [float flist(char *filepath){//ignoring path]
found func flist



sig1 = float flist(char *filepath)
sig2 = (char *filepath)
found param filepath

line 272: [    float I;]
found local var I (BL = 1)

line 273: [    float V = malloc(sizeof_vector);]
found local var V (BL = 1)

line 274: [    vector_constructor(V,1);]
found reference to V
currentFunc = flist
ref V is REF_STACK

line 275: [    float fplen = strlen(filepath);]
found local var fplen (BL = 1)
found reference to filepath
currentFunc = flist
ref filepath is REF_STACK

line 276: [    for(I = 0; I < 100; I++){]
found reference to I
currentFunc = flist
ref I is REF_STACK

line 277: [        if(files[I]){]

line 278: [            float str = filenames[I];]
found local var str (BL = 3)

line 279: [            if(strncmp(filepath,str,fplen)==0){]
found reference to strncmp
currentFunc = flist
ref strncmp is REF_EXT
found reference to str
currentFunc = flist
ref str is REF_STACK
found reference to fplen
currentFunc = flist
ref fplen is REF_STACK

line 280: [                vector_push(V,str);]

line 281: [            }]

line 282: [        }]

line 283: [    }]

line 284: [    return V;]

line 285: [}]

line 286: []

line 287: [void fdelete(char *filepath){]
found func fdelete



sig1 = void fdelete(char *filepath)
sig2 = (char *filepath)
found param filepath

line 288: [    filepath = filepath_abs(filepath);]
found reference to filepath
currentFunc = fdelete
ref filepath is REF_STACK

line 289: [    float idx = find_file(filepath);]
found local var idx (BL = 1)

line 290: [    if(idx == -1){printf("no such file: [%s]\n",filepath); return;}]
removed string literal ""no such file: [%s]\n""
found reference to idx
currentFunc = fdelete
ref idx is REF_STACK

line 291: [    float body = files[idx];]
found local var body (BL = 1)

line 292: [    vector_clear(body);]
found reference to body
currentFunc = fdelete
ref body is REF_STACK

line 293: [    free(body);]

line 294: [    files[idx] = 0;]

line 295: [    float str = filenames[idx];]
found local var str (BL = 1)

line 296: [    free(str);]
found reference to str
currentFunc = fdelete
ref str is REF_STACK

line 297: [    filenames[idx] = 0;]

line 298: [}]

line 299: []

line 300: [float vector_get_linear_size(float V){]
found func vector_get_linear_size



sig1 = float vector_get_linear_size(float V)
sig2 = (float V)
found param V

line 301: [    float size = vector_get_size(V);]
found local var size (BL = 1)
found reference to V
currentFunc = vector_get_linear_size
ref V is REF_STACK

line 302: [    return size+sizeof_vector;]

line 303: [}]

line 304: [//creates a new, linearized vector at pos]

line 305: [float vector_move(float *V, float *newpos){]
found func vector_move



sig1 = float vector_move(float *V, float *newpos)
sig2 = (float *V, float *newpos)
found param V
found param newpos

line 306: [    //P("vm 1\n");    ]
removed string literal ""vm 1\n""

line 307: [    float size = vector_get_size(V);]
found local var size (BL = 1)
found reference to V
currentFunc = vector_move
ref V is REF_STACK

line 308: [    //P("vm 2\n");    ]
removed string literal ""vm 2\n""

line 309: [    float dat = vector_get_array(V);  ]
found local var dat (BL = 1)

line 310: [    //P("vm 3\n");     ]
removed string literal ""vm 3\n""

line 311: [    memcpy(newpos,V,sizeof_vector);]
found reference to newpos
currentFunc = vector_move
ref newpos is REF_STACK

line 312: [    //P("vm 4\n");    ]
removed string literal ""vm 4\n""

line 313: [    //free(V);]

line 314: [    //P("vm 5\n");    ]
removed string literal ""vm 5\n""

line 315: [    V = newpos;]

line 316: [    //P("vm 6\n");    ]
removed string literal ""vm 6\n""

line 317: [    newpos = newpos+sizeof_vector;]

line 318: [    //P("vm 7\n");    ]
removed string literal ""vm 7\n""

line 319: [    memcpy(newpos,dat,size);]
found reference to dat
currentFunc = vector_move
ref dat is REF_STACK

line 320: [    //P("vm 8\n");    ]
removed string literal ""vm 8\n""

line 321: [    vector_set_capacity(V,size);]
found reference to vector_set_capacity
currentFunc = vector_move
ref vector_set_capacity is REF_EXT

line 322: [    //P("vm 9\n");    ]
removed string literal ""vm 9\n""

line 323: [    vector_set_array(V,newpos);]
found reference to vector_set_array
currentFunc = vector_move
ref vector_set_array is REF_EXT

line 324: [    //P("vm 10\n");    ]
removed string literal ""vm 10\n""

line 325: [    //free(dat);]

line 326: [    //P("vm 12\n");    ]
removed string literal ""vm 12\n""

line 327: [    return V;]

line 328: [}]

line 329: [float vector_linearize(float V){]
found func vector_linearize



sig1 = float vector_linearize(float V)
sig2 = (float V)
found param V

line 330: [    float size = vector_get_linear_size(V);]
found local var size (BL = 1)
found reference to vector_get_linear_size
currentFunc = vector_linearize
ref vector_get_linear_size is REF_EXT
found reference to V
currentFunc = vector_linearize
ref V is REF_STACK

line 331: [    float newpos = malloc(size);]
found local var newpos (BL = 1)

line 332: [    vector_move(V,newpos);]
found reference to vector_move
currentFunc = vector_linearize
ref vector_move is REF_EXT
found reference to newpos
currentFunc = vector_linearize
ref newpos is REF_STACK

line 333: [    return newpos;]

line 334: [}]

line 335: [float vector_delinearize(float V){]
found func vector_delinearize



sig1 = float vector_delinearize(float V)
sig2 = (float V)
found param V

line 336: [    //P("vd 1\n");]
removed string literal ""vd 1\n""

line 337: [    float newV = malloc(sizeof_vector);]
found local var newV (BL = 1)

line 338: [    //P("vd 2\n");]
removed string literal ""vd 2\n""

line 339: [    memcpy(newV,V,sizeof_vector);]
found reference to newV
currentFunc = vector_delinearize
ref newV is REF_STACK
found reference to V
currentFunc = vector_delinearize
ref V is REF_STACK

line 340: [    //P("vd 3\n");]
removed string literal ""vd 3\n""

line 341: [    V = newV;]

line 342: [    float size = vector_get_size(V);]
found local var size (BL = 1)

line 343: [    //P("vd 4\n");]
removed string literal ""vd 4\n""

line 344: [    float dat = vector_get_array(V);]
found local var dat (BL = 1)

line 345: [    //P("vd 5\n");]
removed string literal ""vd 5\n""

line 346: [    float newdat = malloc(size);]
found local var newdat (BL = 1)

line 347: [    //P("vd 6\n");]
removed string literal ""vd 6\n""

line 348: [    memcpy(newdat,dat,size);]
found reference to newdat
currentFunc = vector_delinearize
ref newdat is REF_STACK
found reference to dat
currentFunc = vector_delinearize
ref dat is REF_STACK

line 349: [    //P("vd 7\n");]
removed string literal ""vd 7\n""

line 350: [    vector_set_array(V,newdat);]

line 351: [    //P("vd 8\n");]
removed string literal ""vd 8\n""

line 352: [    return V;   ]

line 353: [}]

line 354: []

line 355: [float filesystem_get_size(){]
found func filesystem_get_size



sig1 = float filesystem_get_size()
sig2 = ()

line 356: [    float size = 200;]
found local var size (BL = 1)

line 357: [    float I =0;]
found local var I (BL = 1)

line 358: [    for(I = 0; I < 100; I++){]
found reference to I
currentFunc = filesystem_get_size
ref I is REF_STACK

line 359: [        if(files[I]){]

line 360: [            size = size+vector_get_linear_size(files[I]);]

line 361: [            size = size+strlen(filenames[I])+1;]

line 362: [        }]

line 363: [    }]

line 364: [    return size;]

line 365: [}]

line 366: []

line 367: [//incremental copy (increments ptr by the size copied)]

line 368: [float inc_cpy(float *ptr, float from, float size){]
found func inc_cpy



sig1 = float inc_cpy(float *ptr, float from, float size)
sig2 = (float *ptr, float from, float size)
found param ptr
found param from
found param size

line 369: [    memcpy(*ptr,from,size);]
found reference to ptr
currentFunc = inc_cpy
ref ptr is REF_STACK
found reference to from
currentFunc = inc_cpy
ref from is REF_STACK

line 370: [    *ptr = *ptr+size;]

line 371: [}]

line 372: []

line 373: [float inc_move(float *ptr, float *from, float size){]
found func inc_move



sig1 = float inc_move(float *ptr, float *from, float size)
sig2 = (float *ptr, float *from, float size)
found param ptr
found param from
found param size

line 374: [    float oldptr = *ptr;]
found local var oldptr (BL = 1)
found reference to ptr
currentFunc = inc_move
ref ptr is REF_STACK

line 375: [    inc_cpy(ptr,*from,size);]
found reference to inc_cpy
currentFunc = inc_move
ref inc_cpy is REF_EXT
found reference to from
currentFunc = inc_move
ref from is REF_STACK

line 376: [    //free(*from);]

line 377: [    *from = oldptr;]
found reference to oldptr
currentFunc = inc_move
ref oldptr is REF_STACK

line 378: [}]

line 379: []

line 380: [float filesystem_move(float newpos){]
found func filesystem_move



sig1 = float filesystem_move(float newpos)
sig2 = (float newpos)
found param newpos

line 381: [    //P("fm 1\n");]
removed string literal ""fm 1\n""

line 382: [    float ptr = newpos;]
found local var ptr (BL = 1)
found reference to newpos
currentFunc = filesystem_move
ref newpos is REF_STACK

line 383: [    float oldfiles = files;]
found local var oldfiles (BL = 1)

line 384: [    float oldfilenames = filenames;]
found local var oldfilenames (BL = 1)

line 385: [    //P("fm 2\n");]
removed string literal ""fm 2\n""

line 386: [    inc_move(&ptr,&files,100);]
found reference to inc_move
currentFunc = filesystem_move
ref inc_move is REF_EXT
found reference to ptr
currentFunc = filesystem_move
ref ptr is REF_STACK

line 387: [    //P("fm 3\n");]
removed string literal ""fm 3\n""

line 388: [    inc_move(&ptr,&filenames,100);]

line 389: [    //P("fm 4\n");]
removed string literal ""fm 4\n""

line 390: [    float I;]
found local var I (BL = 1)

line 391: [    //P("fm 5\n");]
removed string literal ""fm 5\n""

line 392: [    for(I = 0; I < 100; I++){]
found reference to I
currentFunc = filesystem_move
ref I is REF_STACK

line 393: [    //P("fm 6\n");]
removed string literal ""fm 6\n""

line 394: [        if(files[I]){]

line 395: [    //P("fm 7\n");]
removed string literal ""fm 7\n""

line 396: [            float V = files[I];]
found local var V (BL = 3)

line 397: [    //P("fm 8\n");]
removed string literal ""fm 8\n""

line 398: [            float size = vector_get_linear_size(V);]
found local var size (BL = 3)
found reference to V
currentFunc = filesystem_move
ref V is REF_STACK

line 399: [    //P("fm 9\n");]
removed string literal ""fm 9\n""

line 400: [            V = vector_move(V,ptr);]

line 401: [    //P("fm 10\n");]
removed string literal ""fm 10\n""

line 402: [            files[I] = V;]

line 403: [    //P("fm 11\n");]
removed string literal ""fm 11\n""

line 404: [            ptr = ptr+size;]

line 405: [    //P("fm 12\n");]
removed string literal ""fm 12\n""

line 406: [            V = filenames[I];]

line 407: [            //P2("filename ",I,":\n");]
removed string literal ""filename ""
removed string literal "":\n""

line 408: [            //P("[");P(filenames[I]);P("]\n");]
removed string literal ""[""
removed string literal ""]\n""

line 409: [    //P("fm 13\n");]
removed string literal ""fm 13\n""

line 410: [            size = strlen(V)+1;]

line 411: [    //P("fm 14\n");]
removed string literal ""fm 14\n""

line 412: [            filenames[I] = ptr;]

line 413: [    //P("fm 15\n");]
removed string literal ""fm 15\n""

line 414: [            inc_cpy(&ptr,V,size);]

line 415: [            //P("after moving:\n");]
removed string literal ""after moving:\n""

line 416: [            //P("[");P(filenames[I]);P("]\n");]
removed string literal ""[""
removed string literal ""]\n""

line 417: [    //P("fm 16\n");]
removed string literal ""fm 16\n""

line 418: [        }]

line 419: [    //P("fm 17\n");]
removed string literal ""fm 17\n""

line 420: [    }]

line 421: [    //P("fm 18\n");]
removed string literal ""fm 18\n""

line 422: [    files = oldfiles;]
found reference to oldfiles
currentFunc = filesystem_move
ref oldfiles is REF_STACK

line 423: [    filenames = oldfilenames;]
found reference to oldfilenames
currentFunc = filesystem_move
ref oldfilenames is REF_STACK

line 424: [}]

line 425: []

line 426: [void filesystem_write(float disk){]
found func filesystem_write



sig1 = void filesystem_write(float disk)
sig2 = (float disk)
found param disk

line 427: [    //P("fw 1\n");]
removed string literal ""fw 1\n""

line 428: [    strcpy(disk,"lightfs2");]
removed string literal ""lightfs2""
found reference to disk
currentFunc = filesystem_write
ref disk is REF_STACK

line 429: [    //P("fw 2\n");]
removed string literal ""fw 2\n""

line 430: [    disk = disk + strlen("lightfs2")+1;]
removed string literal ""lightfs2""

line 431: [    //P("fw 3\n");]
removed string literal ""fw 3\n""

line 432: [    float size = filesystem_get_size();]
found local var size (BL = 1)

line 433: [    //P("fw 4\n");]
removed string literal ""fw 4\n""

line 434: [    *disk = size;]

line 435: [    disk++;]

line 436: [    //P("fw 5\n");]
removed string literal ""fw 5\n""

line 437: [    filesystem_move(disk);]
found reference to filesystem_move
currentFunc = filesystem_write
ref filesystem_move is REF_EXT

line 438: [    //P("fw 6\n");]
removed string literal ""fw 6\n""

line 439: [}]

line 440: []

line 441: [float str_delinearize(float str){]
found func str_delinearize



sig1 = float str_delinearize(float str)
sig2 = (float str)
found param str

line 442: [    float size = strlen(str);]
found local var size (BL = 1)
found reference to str
currentFunc = str_delinearize
ref str is REF_STACK

line 443: [    float newstr = malloc(size+1);]
found local var newstr (BL = 1)

line 444: [    strcpy(newstr,str);]
found reference to newstr
currentFunc = str_delinearize
ref newstr is REF_STACK

line 445: [    return newstr;]

line 446: [}]

line 447: []

line 448: [void filesystem_read(float disk){]
found func filesystem_read



sig1 = void filesystem_read(float disk)
sig2 = (float disk)
found param disk

line 449: [    //PrintStringXY(0,6,"oh fuck");]
removed string literal ""oh fuck""

line 450: [    //P("fr 1\n");]
removed string literal ""fr 1\n""

line 451: [    if(strcmp(disk,"lightfs2")){]
removed string literal ""lightfs2""
found reference to disk
currentFunc = filesystem_read
ref disk is REF_STACK

line 452: [        Print("Error: not a lightfs2 disk\n",900);]
removed string literal ""Error: not a lightfs2 disk\n""

line 453: [        return;]

line 454: [    }]

line 455: [    disk = disk+strlen("lightfs2")+1;]
removed string literal ""lightfs2""

line 456: [    //P("fr 2\n");]
removed string literal ""fr 2\n""

line 457: [    float fssize = *disk;]
found local var fssize (BL = 1)

line 458: [    disk++;]

line 459: [    memcpy(files,disk,100);]

line 460: [    //files = disk;]

line 461: [    disk = disk+100;]

line 462: [    memcpy(filenames,disk,100);]

line 463: [    //filenames = disk;]

line 464: [    disk = disk+100;]

line 465: [    //P("fr 3\n");]
removed string literal ""fr 3\n""

line 466: [    float I;]
found local var I (BL = 1)

line 467: [    for(I = 0; I < 100; I++){]
found reference to I
currentFunc = filesystem_read
ref I is REF_STACK

line 468: [    //P("fr 4\n");]
removed string literal ""fr 4\n""

line 469: [        float V = files[I];]
found local var V (BL = 2)

line 470: [        if(V){]
found reference to V
currentFunc = filesystem_read
ref V is REF_STACK

line 471: [    //P("fr 5\n");]
removed string literal ""fr 5\n""

line 472: [            //this check will be broken if location of typeof_vector changes within kernel]

line 473: [            //assert_type(V,typeof_vector);]

line 474: [            V[0] = typeof_vector;]

line 475: [    //P("fr 5.5\n");]
removed string literal ""fr 5.5\n""

line 476: [            files[I] = vector_delinearize(V); //this is needed for mem to be free-able.]
found reference to vector_delinearize
currentFunc = filesystem_read
ref vector_delinearize is REF_EXT

line 477: [    //P("fr 6\n");]
removed string literal ""fr 6\n""

line 478: [            V = filenames[I];]

line 479: [    //P("fr 7\n");]
removed string literal ""fr 7\n""

line 480: [            filenames[I] = str_delinearize(V);]
found reference to str_delinearize
currentFunc = filesystem_read
ref str_delinearize is REF_EXT

line 481: [    //P("fr 8\n");]
removed string literal ""fr 8\n""

line 482: [        }]

line 483: [    //P("fr 9\n");]
removed string literal ""fr 9\n""

line 484: [    }]

line 485: [    //P("fr 10\n");]
removed string literal ""fr 10\n""

line 486: [}]

line 487: []

line 184: []

line 185: [//#include <cyclone/progs/assembler.txt>]

line 186: []

line 187: [#include <cyclone/libs/libpaging.txt>]
found include <cyclone/libs/libpaging.txt>
reading file cyclone/libs/libpaging.txt

line 1: [//paging library]

line 2: []

line 3: [#define page_disabled 1]
#defined "page_disabled"

line 4: [#define page_remapped 2]
#defined "page_remapped"

line 5: [#define page_trap 4]
#defined "page_trap"

line 6: [#define page_override 8]
#defined "page_override"

line 7: [#define page_reserved 16]
#defined "page_reserved"

line 8: [#define page_no_read 32]
#defined "page_no_read"

line 9: [#define page_no_write 64]
#defined "page_no_write"

line 10: [#define page_no_exec 128]
#defined "page_no_exec"

line 11: []

line 12: [void initPaging(float PT,float size,float flags, float runlevel){]
found func initPaging



sig1 = void initPaging(float PT,float size,float flags, float runlevel)
sig2 = (float PT,float size,float flags, float runlevel)
found param PT
found param size
found param flags
found param runlevel

line 13: [    setPageTable(PT,size);]
found reference to setPageTable
currentFunc = initPaging
ref setPageTable is REF_EXT
found reference to PT
currentFunc = initPaging
ref PT is REF_STACK

line 14: [    float I;]
found local var I (BL = 1)

line 15: [    for(I = -1; I < size; I++){]
found reference to I
currentFunc = initPaging
ref I is REF_STACK

line 16: [        mapPage(PT,I,I,flags,runlevel);]
found reference to mapPage
currentFunc = initPaging
ref mapPage is REF_EXT
found reference to flags
currentFunc = initPaging
ref flags is REF_STACK
found reference to runlevel
currentFunc = initPaging
ref runlevel is REF_STACK

line 17: [    }]

line 18: [}]

line 19: []

line 20: [void setPageTable(float PT,float size){]
found func setPageTable



sig1 = void setPageTable(float PT,float size)
sig2 = (float PT,float size)
found param PT
found param size

line 21: [    CPUSET 37,PT;]
found reference to PT
currentFunc = setPageTable
ref PT is REF_STACK

line 22: [    CPUSET 38,size;]

line 23: [}]

line 24: []

line 25: [void getPage(float PT, float page){]
found func getPage



sig1 = void getPage(float PT, float page)
sig2 = (float PT, float page)
found param PT
found param page

line 26: [    page = page+1;]
found reference to page
currentFunc = getPage
ref page is REF_STACK

line 27: [    page = page*2;]

line 28: [    page = PT+page;]
found reference to PT
currentFunc = getPage
ref PT is REF_STACK

line 29: [    return page;]

line 30: [}]

line 31: []

line 32: [void setPageFlags(float page, float flags){]
found func setPageFlags



sig1 = void setPageFlags(float page, float flags)
sig2 = (float page, float flags)
found param page
found param flags

line 33: [    float runlevel = *page;]
found local var runlevel (BL = 1)
found reference to page
currentFunc = setPageFlags
ref page is REF_STACK

line 34: [    runlevel = runlevel/256;]
found reference to runlevel
currentFunc = setPageFlags
ref runlevel is REF_STACK

line 35: [    fint runlevel;]

line 36: [    *page = flags+256*runlevel;]
found reference to flags
currentFunc = setPageFlags
ref flags is REF_STACK

line 37: [}]

line 38: []

line 39: [float getPageFlags(float page){]
found func getPageFlags



sig1 = float getPageFlags(float page)
sig2 = (float page)
found param page

line 40: [    float flags = *page;]
found local var flags (BL = 1)
found reference to page
currentFunc = getPageFlags
ref page is REF_STACK

line 41: [    flags = flags%256;]
found reference to flags
currentFunc = getPageFlags
ref flags is REF_STACK

line 42: [    fint flags;]

line 43: [    return flags;]

line 44: [}]

line 45: []

line 46: [void setPageRunLevel(float page, float level){]
found func setPageRunLevel



sig1 = void setPageRunLevel(float page, float level)
sig2 = (float page, float level)
found param page
found param level

line 47: [    float flags = *page;]
found local var flags (BL = 1)
found reference to page
currentFunc = setPageRunLevel
ref page is REF_STACK

line 48: [    flags = flags%256;]
found reference to flags
currentFunc = setPageRunLevel
ref flags is REF_STACK

line 49: [    fint flags;]

line 50: [    *page = flags+256*level;]
found reference to level
currentFunc = setPageRunLevel
ref level is REF_STACK

line 51: [}]

line 52: []

line 53: [float getPageRunlevel(float page){]
found func getPageRunlevel



sig1 = float getPageRunlevel(float page)
sig2 = (float page)
found param page

line 54: [    float runlevel = *page;]
found local var runlevel (BL = 1)
found reference to page
currentFunc = getPageRunlevel
ref page is REF_STACK

line 55: [    runlevel = runlevel/256;]
found reference to runlevel
currentFunc = getPageRunlevel
ref runlevel is REF_STACK

line 56: [    fint runlevel;]

line 57: [    return runlevel;;]

line 58: [}]

line 59: []

line 60: [void setPageMapping(float page, float phys){page[1] = phys;}]
found func setPageMapping



sig1 = void setPageMapping(float page, float phys)
sig2 = (float page, float phys)
found param page
found param phys
found reference to page
currentFunc = setPageMapping
ref page is REF_STACK
found reference to phys
currentFunc = setPageMapping
ref phys is REF_STACK

line 61: [float getPageMapping(float page){return page[1];}]
found func getPageMapping



sig1 = float getPageMapping(float page)
sig2 = (float page)
found param page
found reference to page
currentFunc = getPageMapping
ref page is REF_STACK

line 62: []

line 63: [void reportPage(float pageTable, float pageID){]
found func reportPage



sig1 = void reportPage(float pageTable, float pageID)
sig2 = (float pageTable, float pageID)
found param pageTable
found param pageID

line 64: [    float page = getPage(pageTable,pageID);]
found local var page (BL = 1)
found local var pageID (BL = 1)

line 65: [    float flags = getPageFlags(page);]
found local var flags (BL = 1)
found reference to getPageFlags
currentFunc = reportPage
ref getPageFlags is REF_EXT
found reference to page
currentFunc = reportPage
ref page is REF_STACK

line 66: [    float level = getPageRunlevel(page);]
found local var level (BL = 1)
found reference to getPageRunlevel
currentFunc = reportPage
ref getPageRunlevel is REF_EXT

line 67: [    float phys = getPageMapping(page);]
found local var phys (BL = 1)
found reference to getPageMapping
currentFunc = reportPage
ref getPageMapping is REF_EXT

line 68: [    P("P%d: phys  = %d\n",pageID,phys);]
removed string literal ""P%d: phys  = %d\n""
found reference to pageID
currentFunc = reportPage
ref pageID is REF_STACK
found reference to phys
currentFunc = reportPage
ref phys is REF_STACK

line 69: [    P("P%d: flags = %d\n",pageID,flags);]
removed string literal ""P%d: flags = %d\n""
found reference to flags
currentFunc = reportPage
ref flags is REF_STACK

line 70: [    P("P%d: level = %d\n",pageID,level);]
removed string literal ""P%d: level = %d\n""
found reference to level
currentFunc = reportPage
ref level is REF_STACK

line 71: [}]

line 72: []

line 73: [float toPage(float addr){]
found func toPage



sig1 = float toPage(float addr)
sig2 = (float addr)
found param addr

line 74: [    addr = addr/128;]
found reference to addr
currentFunc = toPage
ref addr is REF_STACK

line 75: [    fint addr;]

line 76: [    return addr;]

line 77: [}]

line 78: []

line 79: []

line 80: [void copyPage(float pageto, float pagefrom){]
found func copyPage



sig1 = void copyPage(float pageto, float pagefrom)
sig2 = (float pageto, float pagefrom)
found param pageto
found param pagefrom

line 81: [    *pageto++ = *pagefrom++;]
found reference to pageto
currentFunc = copyPage
ref pageto is REF_STACK
found reference to pagefrom
currentFunc = copyPage
ref pagefrom is REF_STACK

line 82: [    *pageto = *pagefrom;]

line 83: [}]

line 84: []

line 85: [void mapPage(float PT, float virt, float phys, float flags, float runlevel){]
found func mapPage



sig1 = void mapPage(float PT, float virt, float phys, float flags, float runlevel)
sig2 = (float PT, float virt, float phys, float flags, float runlevel)
found param PT
found param virt
found param phys
found param flags
found param runlevel

line 86: [    //float ptr = virt+1;]

line 87: [    //ptr = ptr*2+1;]

line 88: [    //PT[ptr] = phys;]

line 89: [    ]

line 90: [    //setPageFlags(phys,flags);]

line 91: [    //setPageRunLevel(phys, runlevel);]

line 92: [    float page = getPage(PT,virt);]
found local var page (BL = 1)
found local var virt (BL = 1)

line 93: [    setPageMapping(page,phys);]
found reference to setPageMapping
currentFunc = mapPage
ref setPageMapping is REF_EXT
found reference to page
currentFunc = mapPage
ref page is REF_STACK
found reference to phys
currentFunc = mapPage
ref phys is REF_STACK

line 94: [    setPageFlags(page,flags);]
found reference to setPageFlags
currentFunc = mapPage
ref setPageFlags is REF_EXT
found reference to flags
currentFunc = mapPage
ref flags is REF_STACK

line 95: [    setPageRunlevel(page,runlevel);]
found reference to setPageRunlevel
currentFunc = mapPage
ref setPageRunlevel is REF_EXT
found reference to runlevel
currentFunc = mapPage
ref runlevel is REF_STACK

line 96: [}]

line 97: []

line 98: [void setMemoryRunlevel(float PT, float from, float to, float level){]
found func setMemoryRunlevel



sig1 = void setMemoryRunlevel(float PT, float from, float to, float level)
sig2 = (float PT, float from, float to, float level)
found param PT
found param from
found param to
found param level

line 99: [    float pagefrom = toPage(from);]
found local var pagefrom (BL = 1)
found reference to toPage
currentFunc = setMemoryRunlevel
ref toPage is REF_EXT
found reference to from
currentFunc = setMemoryRunlevel
ref from is REF_STACK

line 100: [    float pageto = toPage(to);]
found local var pageto (BL = 1)
found reference to to
currentFunc = setMemoryRunlevel
ref to is REF_STACK

line 101: [    float I;]
found local var I (BL = 1)

line 102: [    for(I = pagefrom; I < pageto; I++){]
found reference to I
currentFunc = setMemoryRunlevel
ref I is REF_STACK
found reference to pagefrom
currentFunc = setMemoryRunlevel
ref pagefrom is REF_STACK
found reference to pageto
currentFunc = setMemoryRunlevel
ref pageto is REF_STACK

line 103: [        float page = getPage(PT,I);]
found local var page (BL = 2)
found local var I (BL = 2)

line 104: [        setPageRunlevel(page,level);]
found reference to page
currentFunc = setMemoryRunlevel
ref page is REF_STACK
found reference to level
currentFunc = setMemoryRunlevel
ref level is REF_STACK

line 105: [    }]

line 106: [}]

line 107: [void setMemoryMapping(float PT, float from, float to, float target){]
found func setMemoryMapping



sig1 = void setMemoryMapping(float PT, float from, float to, float target)
sig2 = (float PT, float from, float to, float target)
found param PT
found param from
found param to
found param target

line 108: [    float pagefrom = from;//toPage(from);]
found local var pagefrom (BL = 1)
found reference to from
currentFunc = setMemoryMapping
ref from is REF_STACK

line 109: [    float pageto = to;//toPage(to);]
found local var pageto (BL = 1)
found reference to to
currentFunc = setMemoryMapping
ref to is REF_STACK

line 110: [    float pagetarget = target;//toPage(target);]
found local var pagetarget (BL = 1)
found reference to target
currentFunc = setMemoryMapping
ref target is REF_STACK

line 111: [    float pageoffset = pagetarget-pagefrom;]
found local var pageoffset (BL = 1)
found reference to pagetarget
currentFunc = setMemoryMapping
ref pagetarget is REF_STACK
found reference to pagefrom
currentFunc = setMemoryMapping
ref pagefrom is REF_STACK

line 112: [    float I;]
found local var I (BL = 1)

line 113: [    for(I = pagefrom; I <= pageto; I++){]
found reference to I
currentFunc = setMemoryMapping
ref I is REF_STACK
found reference to pageto
currentFunc = setMemoryMapping
ref pageto is REF_STACK

line 114: [        float page = getPage(PT,I);]
found local var page (BL = 2)
found local var I (BL = 2)

line 115: [        float newpagetarget = I+pageoffset;]
found local var newpagetarget (BL = 2)
found reference to pageoffset
currentFunc = setMemoryMapping
ref pageoffset is REF_STACK

line 116: [        setPageMapping(page,newpagetarget);]
found reference to page
currentFunc = setMemoryMapping
ref page is REF_STACK
found reference to newpagetarget
currentFunc = setMemoryMapping
ref newpagetarget is REF_STACK

line 117: [        //P("mapped page %d to %d\n",I,newpagetarget);]
removed string literal ""mapped page %d to %d\n""

line 118: [    }]

line 119: [}]

line 120: []

line 121: [void pagingEnable(){STM;}]
found func pagingEnable



sig1 = void pagingEnable()
sig2 = ()

line 122: [void pagingDisable(){CLM;}]
found func pagingDisable



sig1 = void pagingDisable()
sig2 = ()

line 123: []

line 124: []

line 188: [#include <cyclone/libs/libthread.txt>]
found include <cyclone/libs/libthread.txt>
reading file cyclone/libs/libthread.txt

line 1: [#ifndef LIBTHREAD_GUARD]
#ifndef "LIBTHREAD_GUARD" (undefined)

line 2: [#define LIBTHREAD_GUARD]
#defined "LIBTHREAD_GUARD"

line 3: [//creates and manages threads]

line 4: [#include <cyclone/libs/zthread.txt>]
found include <cyclone/libs/zthread.txt>
reading file cyclone/libs/zthread.txt

line 1: [#ifndef thread_GUARD]
#ifndef "thread_GUARD" (undefined)

line 2: [#define thread_GUARD]
#defined "thread_GUARD"

line 3: []

line 4: [//generated using:]

line 5: [//skeleton thread entry args time ip stack regs -canary ]

line 6: []

line 7: [//struct thread]

line 8: [//    0: canary]

line 9: [//    1: entry]

line 10: [//    2: args]

line 11: [//    3: time]

line 12: [//    4: ip]

line 13: [//    5: stack]

line 14: [//    6: regs]

line 15: [//]

line 16: []

line 17: [str_thread: db "thread",0;]
removed string literal ""thread""
found label str_thread

line 18: []

line 19: [#ifndef CANARY_GUARD]
#ifndef "CANARY_GUARD" (defined)

line 20: [#define CANARY_GUARD]

line 21: [void error(){int 1;}]

line 22: [void check_canary(float this, float canary){]

line 23: [   if(this[0] != canary){]

line 24: [        error();]

line 25: [   }]

line 26: [}]

line 27: [#endif]

line 28: []

line 29: [float sizeof_thread(){return 7};]
found func sizeof_thread



sig1 = float sizeof_thread()
sig2 = ()

line 30: []

line 31: [//default constructor]

line 32: [void thread_constructor(float this){]
found func thread_constructor



sig1 = void thread_constructor(float this)
sig2 = (float this)
found param this

line 33: [    this[0] = str_thread;]
found reference to this
currentFunc = thread_constructor
ref this is REF_STACK
found reference to str_thread
currentFunc = thread_constructor
ref str_thread is REF_EXT

line 34: [    this[1] = 0;]

line 35: [    this[2] = 0;]

line 36: [    this[3] = 0;]

line 37: [    this[4] = 0;]

line 38: [    this[5] = 0;]

line 39: [    this[6] = 0;]

line 40: [}]

line 41: []

line 42: [//copy constructor]

line 43: [void thread_copy_constructor(float this, float that){]
found func thread_copy_constructor



sig1 = void thread_copy_constructor(float this, float that)
sig2 = (float this, float that)
found param this
found param that

line 44: [    this[0] = that[0];]
found reference to this
currentFunc = thread_copy_constructor
ref this is REF_STACK
found reference to that
currentFunc = thread_copy_constructor
ref that is REF_STACK

line 45: [    this[1] = that[1];]

line 46: [    this[2] = that[2];]

line 47: [    this[3] = that[3];]

line 48: [    this[4] = that[4];]

line 49: [    this[5] = that[5];]

line 50: [    this[6] = that[6];]

line 51: [    check_canary(this,str_thread);]

line 52: [}]

line 53: []

line 54: [//default destructor]

line 55: [void thread_destructor(float this){check_canary(this,str_thread);]
found func thread_destructor



sig1 = void thread_destructor(float this)
sig2 = (float this)
found param this
found reference to this
currentFunc = thread_destructor
ref this is REF_STACK

line 56: [    check_canary(this,str_thread);]

line 57: [    //add your code here]

line 58: [}]

line 59: []

line 60: [//equivalent to "new thread"]
removed string literal ""new thread""

line 61: [float thread_new(){]
found func thread_new



sig1 = float thread_new()
sig2 = ()

line 62: [    float size = sizeof_thread();]
found local var size (BL = 1)
found reference to sizeof_thread
currentFunc = thread_new
ref sizeof_thread is REF_EXT

line 63: [    float p = malloc(size);]
found local var p (BL = 1)

line 64: [    thread_constructor(p);]
found reference to thread_constructor
currentFunc = thread_new
ref thread_constructor is REF_EXT

line 65: [    return p;]

line 66: [}]

line 67: []

line 68: [//equivalent to "delete thread"]
removed string literal ""delete thread""

line 69: [void thread_delete(float this){]
found func thread_delete



sig1 = void thread_delete(float this)
sig2 = (float this)
found param this

line 70: [    thread_destructor(this);]
found reference to thread_destructor
currentFunc = thread_delete
ref thread_destructor is REF_EXT
found reference to this
currentFunc = thread_delete
ref this is REF_STACK

line 71: [    free(this);]

line 72: [}]

line 73: []

line 74: [//getters]

line 75: [float thread_get_canary(float this){check_canary(this,str_thread);return this[0];}]
found func thread_get_canary



sig1 = float thread_get_canary(float this)
sig2 = (float this)
found param this
found reference to this
currentFunc = thread_get_canary
ref this is REF_STACK

line 76: [float thread_get_entry(float this){check_canary(this,str_thread);return this[1];}]
found func thread_get_entry



sig1 = float thread_get_entry(float this)
sig2 = (float this)
found param this
found reference to this
currentFunc = thread_get_entry
ref this is REF_STACK

line 77: [float thread_get_args(float this){check_canary(this,str_thread);return this[2];}]
found func thread_get_args



sig1 = float thread_get_args(float this)
sig2 = (float this)
found param this
found reference to this
currentFunc = thread_get_args
ref this is REF_STACK

line 78: [float thread_get_time(float this){check_canary(this,str_thread);return this[3];}]
found func thread_get_time



sig1 = float thread_get_time(float this)
sig2 = (float this)
found param this
found reference to this
currentFunc = thread_get_time
ref this is REF_STACK

line 79: [float thread_get_ip(float this){check_canary(this,str_thread);return this[4];}]
found func thread_get_ip



sig1 = float thread_get_ip(float this)
sig2 = (float this)
found param this
found reference to this
currentFunc = thread_get_ip
ref this is REF_STACK

line 80: [float thread_get_stack(float this){check_canary(this,str_thread);return this[5];}]
found func thread_get_stack



sig1 = float thread_get_stack(float this)
sig2 = (float this)
found param this
found reference to this
currentFunc = thread_get_stack
ref this is REF_STACK

line 81: [float thread_get_regs(float this){check_canary(this,str_thread);return this[6];}]
found func thread_get_regs



sig1 = float thread_get_regs(float this)
sig2 = (float this)
found param this
found reference to this
currentFunc = thread_get_regs
ref this is REF_STACK

line 82: []

line 83: [//setters]

line 84: [void thread_set_canary(float this, float N){check_canary(this,str_thread);this[0] = N;}]
found func thread_set_canary



sig1 = void thread_set_canary(float this, float N)
sig2 = (float this, float N)
found param this
found param N
found reference to this
currentFunc = thread_set_canary
ref this is REF_STACK
found reference to N
currentFunc = thread_set_canary
ref N is REF_STACK

line 85: [void thread_set_entry(float this, float N){check_canary(this,str_thread);this[1] = N;}]
found func thread_set_entry



sig1 = void thread_set_entry(float this, float N)
sig2 = (float this, float N)
found param this
found param N
found reference to this
currentFunc = thread_set_entry
ref this is REF_STACK
found reference to N
currentFunc = thread_set_entry
ref N is REF_STACK

line 86: [void thread_set_args(float this, float N){check_canary(this,str_thread);this[2] = N;}]
found func thread_set_args



sig1 = void thread_set_args(float this, float N)
sig2 = (float this, float N)
found param this
found param N
found reference to this
currentFunc = thread_set_args
ref this is REF_STACK
found reference to N
currentFunc = thread_set_args
ref N is REF_STACK

line 87: [void thread_set_time(float this, float N){check_canary(this,str_thread);this[3] = N;}]
found func thread_set_time



sig1 = void thread_set_time(float this, float N)
sig2 = (float this, float N)
found param this
found param N
found reference to this
currentFunc = thread_set_time
ref this is REF_STACK
found reference to N
currentFunc = thread_set_time
ref N is REF_STACK

line 88: [void thread_set_ip(float this, float N){check_canary(this,str_thread);this[4] = N;}]
found func thread_set_ip



sig1 = void thread_set_ip(float this, float N)
sig2 = (float this, float N)
found param this
found param N
found reference to this
currentFunc = thread_set_ip
ref this is REF_STACK
found reference to N
currentFunc = thread_set_ip
ref N is REF_STACK

line 89: [void thread_set_stack(float this, float N){check_canary(this,str_thread);this[5] = N;}]
found func thread_set_stack



sig1 = void thread_set_stack(float this, float N)
sig2 = (float this, float N)
found param this
found param N
found reference to this
currentFunc = thread_set_stack
ref this is REF_STACK
found reference to N
currentFunc = thread_set_stack
ref N is REF_STACK

line 90: [void thread_set_regs(float this, float N){check_canary(this,str_thread);this[6] = N;}]
found func thread_set_regs



sig1 = void thread_set_regs(float this, float N)
sig2 = (float this, float N)
found param this
found param N
found reference to this
currentFunc = thread_set_regs
ref this is REF_STACK
found reference to N
currentFunc = thread_set_regs
ref N is REF_STACK

line 91: []

line 92: [#endif]

line 93: []

line 5: []

line 6: [float threadpool = 0;]
found global var threadpool

line 7: [float cur_thread = 0;]
found global var cur_thread

line 8: []

line 9: [float thread_stack_size = 5000;]
found global var thread_stack_size

line 10: []

line 11: [float initThreads(){]
found func initThreads



sig1 = float initThreads()
sig2 = ()

line 12: [    threadpool = malloc(sizeof_vector);]
found reference to threadpool
currentFunc = initThreads
ref threadpool is REF_EXT

line 13: [    vector_constructor(threadpool,1);]

line 14: [    P("threads initialized\n");]
removed string literal ""threads initialized\n""

line 15: [}]

line 16: []

line 17: [void regs_set_to_entry(float regs, float stack, float entry, float args){]
found func regs_set_to_entry



sig1 = void regs_set_to_entry(float regs, float stack, float entry, float args)
sig2 = (float regs, float stack, float entry, float args)
found param regs
found param stack
found param entry
found param args

line 18: [    //stack / EBP+2 / argument 1: args]

line 19: [    //        EBP+1 / prev IP:    thread_exit_func]

line 20: [    //        EBP+0 / prev EBP:   0]

line 21: [    //ESP+0 / EBP-1 / local var1: 0]

line 22: [    ]

line 23: [    //regTable:]

line 24: [    //0: eax;]

line 25: [    //1: ebx;]

line 26: [    //2: ecx;]

line 27: [    //3: edx;]

line 28: [    //4: esi;]

line 29: [    //5: edi;]

line 30: [    //6: esp;]

line 31: [    //7: ebp;]

line 32: [    //8: cs;]

line 33: [    //9: ss;]

line 34: [    //10: ds;]

line 35: [    //11: es;]

line 36: [    //12: gs;]

line 37: [    //13: fs;]

line 38: [    //14: ks;]

line 39: [    //15: ls;]

line 40: [    //16-47: r0-r31;]

line 41: [    memset(regs,0,48);]
found reference to regs
currentFunc = regs_set_to_entry
ref regs is REF_STACK

line 42: [    float t_esp = stack+thread_stack_size-2000;]
found local var t_esp (BL = 1)
found reference to stack
currentFunc = regs_set_to_entry
ref stack is REF_STACK
found reference to thread_stack_size
currentFunc = regs_set_to_entry
ref thread_stack_size is REF_EXT

line 43: [    regs[6] = t_esp; //ESP]
found reference to t_esp
currentFunc = regs_set_to_entry
ref t_esp is REF_STACK

line 44: [    regs[7] = t_esp+10;]

line 45: [    regs[2] = 1; //ecx; 1 argument.]

line 46: [    ]

line 47: [    t_esp[3] = args;]
found reference to args
currentFunc = regs_set_to_entry
ref args is REF_STACK

line 48: [    t_esp[2] = 0//ebpprev (ebp?);]

line 49: [    t_esp[1] = thread_exit_func;//(ip prev?);]
found reference to thread_exit_func
currentFunc = regs_set_to_entry
ref thread_exit_func is REF_EXT

line 50: [    t_esp[0] = 0;]

line 51: [}]

line 52: []

line 53: [float thread_run(float thread){]
found func thread_run



sig1 = float thread_run(float thread)
sig2 = (float thread)
found param thread

line 54: [    P("thread_run\n");]
removed string literal ""thread_run\n""

line 55: [    //usually this is for turning the thread on,]

line 56: [    //and we should already be in a thread]

line 57: [    //(copying a thread is not implemented).]

line 58: [    thread_yield();]

line 59: [}]

line 60: [//#pragma set OutputFinalListing true]

line 61: [//#pragma set OutputToFile true]

line 62: [float thread_enter(float thread){]
found func thread_enter



sig1 = float thread_enter(float thread)
sig2 = (float thread)
found param thread

line 63: [    //P("thread_enter\n");]
removed string literal ""thread_enter\n""

line 64: [    cur_thread = thread;]
found reference to cur_thread
currentFunc = thread_enter
ref cur_thread is REF_EXT
found reference to thread
currentFunc = thread_enter
ref thread is REF_STACK

line 65: [    float t_regs = thread_get_regs(thread);]
found local var t_regs (BL = 1)
found reference to thread_get_regs
currentFunc = thread_enter
ref thread_get_regs is REF_EXT

line 66: [    float t_ip = thread_get_ip(thread);]
found local var t_ip (BL = 1)
found reference to thread_get_ip
currentFunc = thread_enter
ref thread_get_ip is REF_EXT

line 67: [    cpuset 9,9999999; //set ESZ to 10 MB or so (remove underflow protection)]

line 68: [     ]

line 69: [    //purpose: go away from current stack towards a heap stack, so that the new thread doesn't fuck with the old one's stack.    ]

line 70: [    mov r0, t_regs; //[eax:6] is t_esp; [eax:7] is t_ebp = t_esp+10.]
found reference to t_regs
currentFunc = thread_enter
ref t_regs is REF_STACK

line 71: [    mov r1, t_ip;]
found reference to t_ip
currentFunc = thread_enter
ref t_ip is REF_STACK

line 72: [   //mov r2, [ebp:1]; //ip prev]

line 73: [    mov ebp, [r0:7];]
found label r0

line 74: [    mov esp, [r0:6];]
found label r0

line 75: [    //push r2;]

line 76: [    call r1;]

line 77: [    P("thread_enter end\n");]
removed string literal ""thread_enter end\n""

line 78: [    ret; //avoid spurous leave]

line 79: [}]

line 80: []

line 81: [void multitask_test(float argc, float argv){]
found func multitask_test



sig1 = void multitask_test(float argc, float argv)
sig2 = (float argc, float argv)
found param argc
found param argv

line 82: [    P("MT test\n");]
removed string literal ""MT test\n""

line 83: [    out 7,200;]

line 84: [    float word = "boop";]
removed string literal ""boop""
found local var word (BL = 1)

line 85: [    float period = 1;]
found local var period (BL = 1)

line 86: [    float count = 10;]
found local var count (BL = 1)

line 87: [    float col = randint2(3,9)*100+randint2(3,9)*10+randint2(3,9);]
found local var col (BL = 1)
found reference to randint2
currentFunc = multitask_test
ref randint2 is REF_EXT

line 88: [    //if(argc > 1){word = argv[1];}]

line 89: [    //if(argc > 2){period = str2num(argv[2]);}]

line 90: [    //if(argc > 3){count = str2num(argv[3]);}]

line 91: [    //if(argc > 4){col = str2num(argv[4]);}]

line 92: [    ]

line 93: [    float I = 0;]
found local var I (BL = 1)

line 94: [    for(I = 0; I < count; I++){]
found reference to I
currentFunc = multitask_test
ref I is REF_STACK
found reference to count
currentFunc = multitask_test
ref count is REF_STACK

line 95: [        Print(word,col);]
found reference to word
currentFunc = multitask_test
ref word is REF_STACK
found reference to col
currentFunc = multitask_test
ref col is REF_STACK

line 96: [        Print(num2str(I),col);]

line 97: [        Print(" ",col);]
removed string literal "" ""

line 98: [        thread_yield();//delay(period);]

line 99: [    }]

line 100: [}]

line 101: []

line 102: []

line 103: [//    out 7,1  ;]

line 104: [//    out 7,2  ;   ]

line 105: [//    out 7,3  ;  ]

line 106: [//    out 7,4  ;  ]

line 107: [//    out 7,5  ;  ]

line 108: [//    out 7,6  ;  ]

line 109: [//    out 7,7  ;  ]

line 110: [//    out 7,8  ;  ]

line 111: [//    out 7,9  ;  ]

line 112: [//    out 7,10 ;  ]

line 113: [//    out 7,11 ;  ]

line 114: [//    out 7,12 ;  ]

line 115: [//    out 7,13 ;  ]

line 116: [//    out 7,14 ;  ]

line 117: [//    out 7,15 ;  ]

line 118: [//    out 7,16 ;  ]

line 119: [//    out 7,17 ;  ]

line 120: [//    out 7,18 ;  ]

line 121: [//    out 7,19 ;  ]

line 122: [//    out 7,20 ;  ]

line 123: [//    out 7,21 ;  ]

line 124: [//    out 7,22 ;  ]

line 125: [//    out 7,23 ;  ]

line 126: [//    out 7,24 ;  ]

line 127: [//    out 7,25 ;  ]

line 128: [//    out 7,26 ;  ]

line 129: [//    out 7,27 ;  ]

line 130: [//    out 7,28 ;  ]

line 131: [//    out 7,29 ;  ]

line 132: [//    out 7,30 ;  ]

line 133: [//    out 7,31 ;  ]

line 134: [//    out 7,32 ;  ]

line 135: [//    out 7,33 ;  ]

line 136: [//    out 7,34 ;  ]

line 137: []

line 138: [//stack grows by a "doomed" leaf that happens ]
removed string literal ""doomed""

line 139: [float thread_yield(){]
found func thread_yield



sig1 = float thread_yield()
sig2 = ()

line 140: [    //out 7,101;]

line 141: [    //P("thread_yield enter\n");]
removed string literal ""thread_yield enter\n""

line 142: [    float nthreads = vector_get_size(threadpool);]
found local var nthreads (BL = 1)

line 143: [    if(nthreads < 2){return;}]
found reference to nthreads
currentFunc = thread_yield
ref nthreads is REF_STACK

line 144: [    //out 7,102;]

line 145: [    float thread = cur_thread;]
found local var thread (BL = 1)

line 146: [    float regs = thread_get_regs(thread);]
found local var regs (BL = 1)
found reference to thread
currentFunc = thread_yield
ref thread is REF_STACK

line 147: [    //out 7,103;]

line 148: [    thread_set_ip(thread, thread_yield_end);]
found reference to thread_set_ip
currentFunc = thread_yield
ref thread_set_ip is REF_EXT
found reference to thread_yield_end
currentFunc = thread_yield
ref thread_yield_end is REF_EXT

line 149: [    //out 7,104;]

line 150: [    //pusha;]

line 151: [//    regs[0] = eax;]

line 152: [//    regs[1] = ebx;]

line 153: [//    regs[2] = ecx;]

line 154: [//    regs[3] = edx;]

line 155: [//    regs[4] = esi;]

line 156: [//    regs[5] = edi;]

line 157: [//    regs[6] = esp;]

line 158: [//    regs[7] = ebp;]

line 159: [//    regs[8] = cs;]

line 160: [//    regs[9] = ss;]

line 161: [//    regs[10] = ds;]

line 162: [//    regs[11] = es;]

line 163: [//    regs[12] = gs;]

line 164: [//    regs[13] = fs;]

line 165: [//    regs[14] = ks;]

line 166: [//    regs[15] = ls;]

line 167: [    mov r0, regs;]
found reference to regs
currentFunc = thread_yield
ref regs is REF_STACK

line 168: [    mov [r0:7], ebp;]
found label r0

line 169: [    mov [r0:6], esp;]
found label r0

line 170: [    ]

line 171: [    //out 7,105;]

line 172: [    //float len = vector_get_size(threadpool);]

line 173: [    //out 7,106;]

line 174: [    //if(len == 0){Perr("thread_yield: no threads to yield to\n"); shell_panic();}]
removed string literal ""thread_yield: no threads to yield to\n""

line 175: [    //out 7,107;]

line 176: [    float I = 0;]
found local var I (BL = 1)

line 177: [    float thread2 = -1;]
found local var thread2 (BL = 1)

line 178: [    //out 7,108;]

line 179: [    for(I = 0; I < nthreads; I++){]
found reference to I
currentFunc = thread_yield
ref I is REF_STACK

line 180: [        thread2 = vector_get(threadpool,0,I);]
found reference to thread2
currentFunc = thread_yield
ref thread2 is REF_STACK

line 181: [    //out 7,109;]

line 182: [        if(thread2 == thread){]

line 183: [    //out 7,110;]

line 184: [            goto start_next_thread;]
found reference to start_next_thread
currentFunc = thread_yield
ref start_next_thread is REF_EXT

line 185: [        }]

line 186: [    }]

line 187: [    Perr("thread_yield: can't find current thread\n"); shell_panic();]
removed string literal ""thread_yield: can't find current thread\n""

line 188: [    //out 7,111;]

line 189: [    start_next_thread:]
found label start_next_thread

line 190: [    //out 7,112;]

line 191: [    I = I+1;]

line 192: [    if(I >= nthreads){I = 0;}]

line 193: [    thread2 = vector_get(threadpool,0,I);]

line 194: [    //out 7,113;]

line 195: [    thread_enter(thread2);]

line 196: [    ]

line 197: [    //out 7,114;]

line 198: [    thread_yield_end:]
found label thread_yield_end

line 199: [    //out 7,115;]

line 200: [    //P("thread_yield end\n");]
removed string literal ""thread_yield end\n""

line 201: [    //out 7,116;]

line 202: [}]

line 203: []

line 204: [void print_threads(){]
found func print_threads



sig1 = void print_threads()
sig2 = ()

line 205: [    float num = vector_get_size(threadpool);]
found local var num (BL = 1)

line 206: [    P2("Num threads: ",num,"\n");]
removed string literal ""Num threads: ""
removed string literal ""\n""
found reference to num
currentFunc = print_threads
ref num is REF_STACK

line 207: [    float I = 0;]
found local var I (BL = 1)

line 208: [    for(I = 0; I < num; I++){]
found reference to I
currentFunc = print_threads
ref I is REF_STACK

line 209: [        float T = vector_get(threadpool,0,I);]
found local var T (BL = 2)
found local var I (BL = 2)

line 210: [        P2("thread ",I,": ");]
removed string literal ""thread ""
removed string literal "": ""

line 211: [        float t_entry = thread_get_entry(T);]
found local var t_entry (BL = 2)
found reference to thread_get_entry
currentFunc = print_threads
ref thread_get_entry is REF_EXT
found reference to T
currentFunc = print_threads
ref T is REF_STACK

line 212: [        P2("",t_entry," ");]
removed string literal """"
removed string literal "" ""
found reference to t_entry
currentFunc = print_threads
ref t_entry is REF_STACK

line 213: [        if(T == cur_thread){]

line 214: [            P("<-- cur");]
removed string literal ""<-- cur""

line 215: [        }]

line 216: [        P("\n");]
removed string literal ""\n""

line 217: [    }]

line 218: [}]

line 219: []

line 220: [float thread_exit_func(){]
found func thread_exit_func



sig1 = float thread_exit_func()
sig2 = ()

line 221: [    P("thread_exit_func\n");]
removed string literal ""thread_exit_func\n""

line 222: [    //like yield, but more final]

line 223: [    //to be implemented]

line 224: [    //while(1){}]

line 225: [    //while(1){thread_yield();}]

line 226: [    shell_panic();]

line 227: [}]

line 228: []

line 229: [//creates a thread and returns a pointer to its descriptor]

line 230: [float thread_create(float entry, float args){]
found func thread_create



sig1 = float thread_create(float entry, float args)
sig2 = (float entry, float args)
found param entry
found param args

line 231: [    P("thread_create enter\n");]
removed string literal ""thread_create enter\n""

line 232: [    float thread = thread_new();]
found local var thread (BL = 1)
found reference to thread_new
currentFunc = thread_create
ref thread_new is REF_EXT

line 233: [    float stack = malloc(thread_stack_size);]
found local var stack (BL = 1)

line 234: [    float regs = malloc(50);]
found local var regs (BL = 1)

line 235: [    if(!stack){Perr("insufficient RAM to make a thread");}]
removed string literal ""insufficient RAM to make a thread""
found reference to stack
currentFunc = thread_create
ref stack is REF_STACK

line 236: [    thread_set_entry(thread,entry);]
found reference to thread_set_entry
currentFunc = thread_create
ref thread_set_entry is REF_EXT
found reference to thread
currentFunc = thread_create
ref thread is REF_STACK
found reference to entry
currentFunc = thread_create
ref entry is REF_STACK

line 237: [    thread_set_args(thread,args);]
found reference to thread_set_args
currentFunc = thread_create
ref thread_set_args is REF_EXT
found reference to args
currentFunc = thread_create
ref args is REF_STACK

line 238: [    thread_set_time(thread,0);]
found reference to thread_set_time
currentFunc = thread_create
ref thread_set_time is REF_EXT

line 239: [    thread_set_ip(thread,entry);]

line 240: [    thread_set_stack(thread,stack);]
found reference to thread_set_stack
currentFunc = thread_create
ref thread_set_stack is REF_EXT

line 241: [    thread_set_regs(thread,regs);]
found reference to thread_set_regs
currentFunc = thread_create
ref thread_set_regs is REF_EXT
found reference to regs
currentFunc = thread_create
ref regs is REF_STACK

line 242: [    regs_set_to_entry(regs,stack,entry,args);]
found reference to regs_set_to_entry
currentFunc = thread_create
ref regs_set_to_entry is REF_EXT

line 243: [    vector_push(threadpool,thread);]

line 244: [    P("thread_create exit\n");]
removed string literal ""thread_create exit\n""

line 245: [    return thread;]

line 246: [}]

line 247: []

line 248: []

line 249: [void delay(float time)]
found func delay



sig1 = void delay(float time)
sig2 = (float time)
found param time

line 250: [{]

line 251: [    preserve edx;]

line 252: [    timer edx;]

line 253: [    float T = edx;]
found local var T (BL = 1)

line 254: [    while((edx-T)<time)]
found reference to T
currentFunc = delay
ref T is REF_STACK
found reference to time
currentFunc = delay
ref time is REF_STACK

line 255: [    {]

line 256: [        thread_yield();]

line 257: [        timer edx;]

line 258: [    }]

line 259: [    zap edx;]

line 260: [}]

line 261: []

line 262: []

line 263: [#endif]

line 264: []

line 189: [#include <cyclone/libs/libinterrupt.txt>]
found include <cyclone/libs/libinterrupt.txt>
reading file cyclone/libs/libinterrupt.txt

line 1: [//interrupts]

line 2: []

line 3: []

line 4: [#define int_set_cmpr 8]
#defined "int_set_cmpr"

line 5: [#define int_dont_set_cs 16]
#defined "int_dont_set_cs"

line 6: [#define int_enabled 32]
#defined "int_enabled"

line 7: [#define int_external 64]
#defined "int_external"

line 8: [#define int_NewPTE 128]
#defined "int_NewPTE"

line 9: [#define int_NewPTE2 256]
#defined "int_NewPTE2"

line 10: [#define int_extra_regs 512]
#defined "int_extra_regs"

line 11: []

line 12: [//IT - interrupt table pointer, alloc size*4]

line 13: [//interrupts from <first> to <size> will be set to "handler" with "flags"]
removed string literal ""handler""
removed string literal ""flags""

line 14: [void initInterrupts(float IT, float first, float size, float handler, float flags){]
found func initInterrupts



sig1 = void initInterrupts(float IT, float first, float size, float handler, float flags)
sig2 = (float IT, float first, float size, float handler, float flags)
found param IT
found param first
found param size
found param handler
found param flags

line 15: [    cpuset 52,size;]

line 16: [    lidtr IT;]
found reference to IT
currentFunc = initInterrupts
ref IT is REF_STACK

line 17: [    float I;]
found local var I (BL = 1)

line 18: [    for(I = first; I < size; I++){]
found reference to I
currentFunc = initInterrupts
ref I is REF_STACK
found reference to first
currentFunc = initInterrupts
ref first is REF_STACK

line 19: [        addInterruptHandler(IT,I,handler,flags);]
found reference to addInterruptHandler
currentFunc = initInterrupts
ref addInterruptHandler is REF_EXT
found reference to handler
currentFunc = initInterrupts
ref handler is REF_STACK
found reference to flags
currentFunc = initInterrupts
ref flags is REF_STACK

line 20: [    }]

line 21: [}]

line 22: []

line 23: [//void init_interrupt_table(){]

line 24: [//    cpuset 52,256; //256 entries]

line 25: [//    lidtr interruptTable;]

line 26: [//}]

line 27: [//]

line 28: [//void setup_interrupts(){]

line 29: [//    float I;]

line 30: [//    float flags = int_enabled;//+int_external;]

line 31: [//    for(I = 4; I < 256; I++){]

line 32: [//        addInterruptHandler(I,referenceIntHandler,flags);]

line 33: [//    }]

line 34: [//    float pagefrom = toPage(intHandlersStart);]

line 35: [//    float pageto = toPage(intHandlersEnd);]

line 36: [//    for(I = pagefrom; I <= pageto; I++){]

line 37: [//        float page = getPage(pageTable,I);]

line 38: [//        setPageRunlevel(page,0);]

line 39: [//       //P("set page %d to runlevel 0\n",I);]
removed string literal ""set page %d to runlevel 0\n""

line 40: [//    }]

line 41: [//    //P("elevated pages %d to %d\n",pagefrom,pageto);]
removed string literal ""elevated pages %d to %d\n""

line 42: [//}]

line 43: [//bit]

line 44: [//0   1   2   3   4   5   6   7]

line 45: [//1   2   4   8  16  32  64 128]

line 46: []

line 47: [//bit]

line 48: [//0 interrupt handler ip]

line 49: [//3 cmpr reg will be set to 1]

line 50: [//4 int should not set CS]

line 51: [//5 int enabled]

line 52: [//6 int is an external int]

line 53: []

line 54: [void addInterruptHandler(float IT, float num, float func,float flags){]
found func addInterruptHandler



sig1 = void addInterruptHandler(float IT, float num, float func,float flags)
sig2 = (float IT, float num, float func,float flags)
found param IT
found param num
found param func
found param flags

line 55: [    float pint = IT+4*num;]
found local var pint (BL = 1)
found reference to IT
currentFunc = addInterruptHandler
ref IT is REF_STACK
found reference to num
currentFunc = addInterruptHandler
ref num is REF_STACK

line 56: [    //float flags = int_enabled;]

line 57: [    pint[0] = func;]
found reference to pint
currentFunc = addInterruptHandler
ref pint is REF_STACK
found reference to func
currentFunc = addInterruptHandler
ref func is REF_STACK

line 58: [    pint[1] = 0;]

line 59: [    pint[2] = 0;]

line 60: [    pint[3] = flags;]
found reference to flags
currentFunc = addInterruptHandler
ref flags is REF_STACK

line 61: [}]

line 62: [float numInts = 0;]
found global var numInts

line 63: []

line 64: [alloc 128;]

line 65: [intHandlersStart:]
found label intHandlersStart

line 66: [void defaultIntHandler(){]
found func defaultIntHandler



sig1 = void defaultIntHandler()
sig2 = ()

line 67: [    float LADD; cpuget LADD,27;]
found local var LADD (BL = 1)
found reference to LADD
currentFunc = defaultIntHandler
ref LADD is REF_STACK

line 68: [    float LINT; cpuget LINT,28;]
found local var LINT (BL = 1)
found reference to LINT
currentFunc = defaultIntHandler
ref LINT is REF_STACK

line 69: [    //float MEMADDR; cpuget MEMADDR,63;]

line 70: [    float prevCS; mov prevCS, EBP:#1;]
found label EBP

line 71: [    float prevIP; mov prevIP, EBP:#2;]
found label EBP

line 72: [    //float prevCol = PrintCol; PrintCol = 990111;]

line 73: [    printf("INT %d:%d from %d:%d\n",LINT,LADD,prevIP,prevCS);]
removed string literal ""INT %d:%d from %d:%d\n""
found reference to prevIP
currentFunc = defaultIntHandler
ref prevIP is REF_EXT
found reference to prevCS
currentFunc = defaultIntHandler
ref prevCS is REF_EXT

line 74: [    float str = intnum_to_str(LINT);]
found local var str (BL = 1)
found reference to intnum_to_str
currentFunc = defaultIntHandler
ref intnum_to_str is REF_EXT

line 75: [    printf("%s\n",str);]
removed string literal ""%s\n""
found reference to str
currentFunc = defaultIntHandler
ref str is REF_STACK

line 76: [    //PrintCol = prevCol;]

line 77: [    //cpuset 27,LADD;]

line 78: [    //cpuset 28,LINT;]

line 79: [    //cpuset 63,MEMADDR;]

line 80: [    leave;]

line 81: [    iret;]

line 82: [}]

line 83: [void stopIntHandler(){]
found func stopIntHandler



sig1 = void stopIntHandler()
sig2 = ()

line 84: [    CLM;]

line 85: [    clef;   ]

line 86: [    float LADD; cpuget LADD,27;]
found local var LADD (BL = 1)
found reference to LADD
currentFunc = stopIntHandler
ref LADD is REF_STACK

line 87: [    float LINT; cpuget LINT,28;]
found local var LINT (BL = 1)
found reference to LINT
currentFunc = stopIntHandler
ref LINT is REF_STACK

line 88: [    float prevCS; mov prevCS, EBP:#1;]
found label EBP

line 89: [    float prevIP; mov prevIP, EBP:#2;]
found label EBP

line 90: [    //float prevCol = PrintCol; PrintCol = 900111;]

line 91: [    printf("INT %d:%d from %d:%d\n",LINT,LADD,prevIP,prevCS);]
removed string literal ""INT %d:%d from %d:%d\n""

line 92: [    float str = intnum_to_str(LINT);]
found local var str (BL = 1)

line 93: [    printf("%s\n",str);]
removed string literal ""%s\n""
found reference to str
currentFunc = stopIntHandler
ref str is REF_STACK

line 94: [    printf("Press any key to reset\n");]
removed string literal ""Press any key to reset\n""

line 95: [    while(*AdrKB == 0){}]

line 96: [    //PrintCol = prevCol;]

line 97: [    int 0;]

line 98: [    leave;]

line 99: [    iret;]

line 100: [}]

line 101: [void errIntHandler(){]
found func errIntHandler



sig1 = void errIntHandler()
sig2 = ()

line 102: [    float LADD; cpuget LADD,27;]
found local var LADD (BL = 1)
found reference to LADD
currentFunc = errIntHandler
ref LADD is REF_STACK

line 103: [    float LINT; cpuget LINT,28;]
found local var LINT (BL = 1)
found reference to LINT
currentFunc = errIntHandler
ref LINT is REF_STACK

line 104: [    float prevCS; mov prevCS, EBP:#1;]
found label EBP

line 105: [    float prevIP; mov prevIP, EBP:#2;]
found label EBP

line 106: [    interruptsDisable();]

line 107: [    extendedModeDisable();]

line 108: [    //printf("INT %d:%d from %d:%d\n",LINT,LADD,prevIP,prevCS);]
removed string literal ""INT %d:%d from %d:%d\n""

line 109: [    float str = intnum_to_str(LINT);]
found local var str (BL = 1)

line 110: [    //printf("%s\n",str);]
removed string literal ""%s\n""

line 111: [    printf("Kernel received interrupt\n%d:%d, IP = %d\n\"%s\"\n",LINT,LADD,prevIP,str);]
removed string literal ""Kernel received interrupt\n%d:%d, IP = %d\n\"%s\"\n""
found reference to str
currentFunc = errIntHandler
ref str is REF_STACK

line 112: [    ]

line 113: [    mov EBP, EBP:#0; //return to previous frame for a correct trace]
found label EBP

line 114: [    shell_panic();]

line 115: [    //leave;]

line 116: [    //iret;]

line 117: [}]

line 118: [//]

line 119: [//void readOverrideHandler(){]

line 120: [//    float LADD; cpuget LADD,27;]

line 121: [//    float MEMADDR; cpuget MEMADDR,63;]

line 122: [//    LADD++;]

line 123: [//    //cpuset 27,LADD;]

line 124: [//    //cpuset 63,MEMADDR;]

line 125: [//    leave;]

line 126: [//    iret;]

line 127: [//}]

line 128: [//void writeOverrideHandler(){]

line 129: [//    float LADD; cpuget LADD,27;]

line 130: [//    float MEMADDR; cpuget MEMADDR,63;]

line 131: [//    //cpuset 27,1337;]

line 132: [//    //cpuset 63,MEMADDR;]

line 133: [//    leave;]

line 134: [//    iret;]

line 135: [//}]

line 136: [//]

line 137: [//void noReadHandler(){]

line 138: [//    out 7,5;]

line 139: [//    float LADD; cpuget LADD,27;]

line 140: [//    float LINT; cpuget LINT,28;]

line 141: [//    float page = LADD/128;]

line 142: [//    fint page;]

line 143: [//    P("INT: access to %d\npage %d: read forbidden\n",LADD,page);]
removed string literal ""INT: access to %d\npage %d: read forbidden\n""

line 144: [//    leave;]

line 145: [//    iret;]

line 146: [//}]

line 147: [//]

line 148: [//void noWriteHandler(){]

line 149: [//    out 7,6;]

line 150: [//    float LADD; cpuget LADD,27;]

line 151: [//    float LINT; cpuget LINT,28;]

line 152: [//    float page = LADD/128;]

line 153: [//    fint page;]

line 154: [//    P("INT: access to %d\npage %d: write forbidden\n",LADD,page);]
removed string literal ""INT: access to %d\npage %d: write forbidden\n""

line 155: [//    leave;]

line 156: [//    iret;]

line 157: [//}]

line 158: [//]

line 159: [//void trapHandler(){]

line 160: [//    out 7,7; //traps are hot]

line 161: [//    float LADD; cpuget LADD,27;]

line 162: [//    float LINT; cpuget LINT,28;]

line 163: [//    float page = LADD/128;]

line 164: [//    fint page;]

line 165: [//    P("INT: access to %d\npage %d: trapped\n",LADD,page);]
removed string literal ""INT: access to %d\npage %d: trapped\n""

line 166: [//    leave;]

line 167: [//    iret;]

line 168: [//}]

line 169: [//]

line 170: [//void noExecHandler(){]

line 171: [//    out 7,18;]

line 172: [//    delay(3);]

line 173: [//    float LADD; cpuget LADD,27;]

line 174: [//    float LINT; cpuget LINT,28;]

line 175: [//    float str = intnum_to_str(LINT);]

line 176: [//    clearScreen();]

line 177: [//    PrintX = 0;PrintY = 0;]

line 178: [//    P("Interrupt %d:%d\n%s\n",LINT,LADD,str);]
removed string literal ""Interrupt %d:%d\n%s\n""

line 179: [//    float IH_IP;]

line 180: [//    float IH_CS;]

line 181: [//    mov IH_CS, EBP:#1;]

line 182: [//    mov IH_IP, EBP:#2;]

line 183: [//    float prevEBP; mov prevEBP,EBP:#0;]

line 184: [//    P("called from %d:%d\n",IH_IP,IH_CS);]
removed string literal ""called from %d:%d\n""

line 185: [//    float RET_IP; mov RET_IP,EBP:#3;]

line 186: [//    P("return to:%d\n",RET_IP);]
removed string literal ""return to:%d\n""

line 187: [//    P("let me try... call(%d)\n",LADD);]
removed string literal ""let me try... call(%d)\n""

line 188: [//    delay(2);]

line 189: [//    out 7,19;]

line 190: [//    LADD(12);]

line 191: [//    out 7,20;]

line 192: [//    P("returned from noexec\n");]
removed string literal ""returned from noexec\n""

line 193: [//    delay(2);]

line 194: [//    mov EBP:#2,IH_CS;]

line 195: [//    mov ESP,EBP:1;]

line 196: [//    mov EBP,prevEBP;]

line 197: [//    //leave;]

line 198: [////    P("stack:\n");]
removed string literal ""stack:\n""

line 199: [////    float I;]

line 200: [////    for(I = 0; I< 10; I++){]

line 201: [////        float N;]

line 202: [////        mov N,ebp;]

line 203: [////        N = N[I];]

line 204: [////        P("%d: %d\n",I,N); ]
removed string literal ""%d: %d\n""

line 205: [////    }]

line 206: [//    //while(1){}]

line 207: [//    //leave;]

line 208: [//    iret;]

line 209: [//}]

line 210: [//]

line 211: [//void referenceIntHandler(){]

line 212: [//    float LADD; cpuget LADD,27;]

line 213: [//    float LINT; cpuget LINT,28;]

line 214: [//    float str = intnum_to_str(LINT);]

line 215: [//    P("Interrupt %d:%d\n%s\n",LINT,LADD,str);]
removed string literal ""Interrupt %d:%d\n%s\n""

line 216: [//    leave;]

line 217: [//    iret;]

line 218: [//}]

line 219: [//]

line 220: [//void defaultIntHandler(){]

line 221: [//    out 7,3;]

line 222: [//    //cli; //disable interrupts]

line 223: [//    out 0, 999;]

line 224: [//    out 1, 999;]

line 225: [//    out 2, 999;]

line 226: [//    numInts++;]

line 227: [//    out 4, numInts;]

line 228: [//    float argc = ecx;]

line 229: [//    float LADD = 110;]

line 230: [//    float LINT = 111;]

line 231: [//    float inten = 112;]

line 232: [//    float intr = 113;]

line 233: [//    cpuget LADD,27; //privileged instruction]

line 234: [//    cpuget LINT,28;]

line 235: [//    cpuget inten,32;]

line 236: [//    cpuget intr,47;]

line 237: [//    out 1, LADD;]

line 238: [//    P("Default int handler\n");]
removed string literal ""Default int handler\n""

line 239: [//    P("LADD = %d\n",LADD);]
removed string literal ""LADD = %d\n""

line 240: [//    P("LINT = %d\n",LINT);]
removed string literal ""LINT = %d\n""

line 241: [//    float str = intnum_to_str(LINT);]

line 242: [//    P("%s\n",str);]
removed string literal ""%s\n""

line 243: [//    cpuset 27,1337;]

line 244: [//    //cpuset 42,0; //memrq]

line 245: [//    //P("IF = %d\n",inten);]
removed string literal ""IF = %d\n""

line 246: [//    //P("INTR = %d\n",intr);]
removed string literal ""INTR = %d\n""

line 247: [//    //P("int return\n");]
removed string literal ""int return\n""

line 248: [//    //extret for external interrupt return]

line 249: [//    //nmiret for non-maskable interrupt]

line 250: [//    //iret for normal interrupts]

line 251: [//    out 2, 111;]

line 252: [//    leave;]

line 253: [//    //sti;]

line 254: [//    iret;]

line 255: [//}]

line 256: [intHandlersEnd:]
found label intHandlersEnd

line 257: [alloc 128;]

line 258: [//extret is new name for nmiret]

line 259: [//also iretp changes page table (PTBL)]

line 260: [void extendedModeEnable(){stef;}]
found func extendedModeEnable



sig1 = void extendedModeEnable()
sig2 = ()

line 261: [void extendedModeDisable(){clef;}]
found func extendedModeDisable



sig1 = void extendedModeDisable()
sig2 = ()

line 262: [void interruptsEnable(){sti;}]
found func interruptsEnable



sig1 = void interruptsEnable()
sig2 = ()

line 263: [void interruptsDisable(){cli;}]
found func interruptsDisable



sig1 = void interruptsDisable()
sig2 = ()

line 264: [//#define interruptsDisable clef]

line 265: [//void interruptsEnable(){]

line 266: [//    stef;]

line 267: [//    sti;]

line 268: [//}]

line 269: [//]

line 270: [//void interruptsDisable(){]

line 271: [//    cli;]

line 272: [//    clef;]

line 273: [//}]

line 274: []

line 275: [//interruptTable:]

line 276: [//alloc 4*256;]

line 277: []

line 278: [float intnum_to_str(float num){]
found func intnum_to_str



sig1 = float intnum_to_str(float num)
sig2 = (float num)
found param num

line 279: [    if(num < 0){return str_int_default;}]
found reference to num
currentFunc = intnum_to_str
ref num is REF_STACK
found reference to str_int_default
currentFunc = intnum_to_str
ref str_int_default is REF_EXT

line 280: [    if(num > 31){return str_int_default;}]

line 281: [    return intnames[num];]
found reference to intnames
currentFunc = intnum_to_str
ref intnames is REF_EXT

line 282: [}]

line 283: []

line 284: [intnames:]
found label intnames

line 285: [db str_int0;]
found reference to str_int0
no currentFunc
ref str_int0 is REF_EXT

line 286: [db str_int1;]
found reference to str_int1
no currentFunc
ref str_int1 is REF_EXT

line 287: [db str_int2;]
found reference to str_int2
no currentFunc
ref str_int2 is REF_EXT

line 288: [db str_int3;]
found reference to str_int3
no currentFunc
ref str_int3 is REF_EXT

line 289: [db str_int4;]
found reference to str_int4
no currentFunc
ref str_int4 is REF_EXT

line 290: [db str_int5;]
found reference to str_int5
no currentFunc
ref str_int5 is REF_EXT

line 291: [db str_int6;]
found reference to str_int6
no currentFunc
ref str_int6 is REF_EXT

line 292: [db str_int7;]
found reference to str_int7
no currentFunc
ref str_int7 is REF_EXT

line 293: [db str_int8;]
found reference to str_int8
no currentFunc
ref str_int8 is REF_EXT

line 294: [db str_int9;]
found reference to str_int9
no currentFunc
ref str_int9 is REF_EXT

line 295: [db str_int10;]
found reference to str_int10
no currentFunc
ref str_int10 is REF_EXT

line 296: [db str_int11;]
found reference to str_int11
no currentFunc
ref str_int11 is REF_EXT

line 297: [db str_int12;]
found reference to str_int12
no currentFunc
ref str_int12 is REF_EXT

line 298: [db str_int13;]
found reference to str_int13
no currentFunc
ref str_int13 is REF_EXT

line 299: [db str_int14;]
found reference to str_int14
no currentFunc
ref str_int14 is REF_EXT

line 300: [db str_int15;]
found reference to str_int15
no currentFunc
ref str_int15 is REF_EXT

line 301: [db str_int_default;]

line 302: [db str_int17;]
found reference to str_int17
no currentFunc
ref str_int17 is REF_EXT

line 303: [db str_int_default;]

line 304: [db str_int_default;]

line 305: [db str_int_default;]

line 306: [db str_int_default;]

line 307: [db str_int_default;]

line 308: [db str_int23;]
found reference to str_int23
no currentFunc
ref str_int23 is REF_EXT

line 309: [db str_int_default;]

line 310: [db str_int_default;]

line 311: [db str_int_default;]

line 312: [db str_int_default;]

line 313: [db str_int28;]
found reference to str_int28
no currentFunc
ref str_int28 is REF_EXT

line 314: [db str_int29;]
found reference to str_int29
no currentFunc
ref str_int29 is REF_EXT

line 315: [db str_int30;]
found reference to str_int30
no currentFunc
ref str_int30 is REF_EXT

line 316: [db str_int31;]
found reference to str_int31
no currentFunc
ref str_int31 is REF_EXT

line 317: []

line 318: [str_int_default: db "User interrupt",0;]
removed string literal ""User interrupt""
found label str_int_default

line 319: [str_int0: db	"Reset",0;]
removed string literal ""Reset""
found label str_int0

line 320: [str_int1: db	"Halt",0;]
removed string literal ""Halt""
found label str_int1

line 321: [str_int2: db	"End of program execution",0;]
removed string literal ""End of program execution""
found label str_int2

line 322: [str_int3: db	"Division by zero",0;]
removed string literal ""Division by zero""
found label str_int3

line 323: [str_int4: db "Unknown opcode",0;]
removed string literal ""Unknown opcode""
found label str_int4

line 324: [str_int5: db	"Internal processor error",0;]
removed string literal ""Internal processor error""
found label str_int5

line 325: [str_int6: db	"Stack error (overflow/underflow)",0;]
removed string literal ""Stack error (overflow/underflow)""
found label str_int6

line 326: [str_int7: db	"Memory read/write fault",0;]
removed string literal ""Memory read/write fault""
found label str_int7

line 327: [str_int8: db	"MemBus fault",0;]
removed string literal ""MemBus fault""
found label str_int8

line 328: [str_int9: db	"Write access violation (page protection)",0;]
removed string literal ""Write access violation (page protection)""
found label str_int9

line 329: [str_int10: db	"Port read/write fault",0;]
removed string literal ""Port read/write fault""
found label str_int10

line 330: [str_int11: db	"Page acccess violation (page protection)",0;]
removed string literal ""Page acccess violation (page protection)""
found label str_int11

line 331: [str_int12: db	"Read access violation (page protection)",0;]
removed string literal ""Read access violation (page protection)""
found label str_int12

line 332: [str_int13: db	"General processor fault",0;]
removed string literal ""General processor fault""
found label str_int13

line 333: [str_int14: db	"Execute access violation (page protection)",0;]
removed string literal ""Execute access violation (page protection)""
found label str_int14

line 334: [str_int15: db	"Address space violation",0;]
removed string literal ""Address space violation""
found label str_int15

line 335: [str_int17: db	"Frame instruction limit (GPU only)",0;]
removed string literal ""Frame instruction limit (GPU only)""
found label str_int17

line 336: [str_int23: db	"String read error (GPU only)",0;]
removed string literal ""String read error (GPU only)""
found label str_int23

line 337: [str_int28: db "Page read access trap",0;]
removed string literal ""Page read access trap""
found label str_int28

line 338: [str_int29: db	"Page write access trap",0;]
removed string literal ""Page write access trap""
found label str_int29

line 339: [str_int30: db	"Page access trap",0;]
removed string literal ""Page access trap""
found label str_int30

line 340: [str_int31: db	"Debug trap",0;]
removed string literal ""Debug trap""
found label str_int31

line 341: []

line 190: [#include <cyclone/libs/librecord.txt>]
found include <cyclone/libs/librecord.txt>
reading file cyclone/libs/librecord.txt

line 1: [#ifndef LIB_RECORD_GUARD]
#ifndef "LIB_RECORD_GUARD" (undefined)

line 2: [#define LIB_RECORD_GUARD]
#defined "LIB_RECORD_GUARD"

line 3: [// lib record]

line 4: [//]

line 5: [// a record is number (indicating the size of the whole record) followed by a blob of data, followed by zero.]

line 6: [// data can be added or removed from a record - this results in a reallocation - the record returns a new pointer to itself]

line 7: [// and the old one becomes invalid.]

line 8: [//]

line 9: [// record[0] = typename]

line 10: [// record[1] = size]

line 11: [// record[2..size-2] = data]

line 12: [// record[size-1] = 0]

line 13: [//]

line 14: [//record.new();                         //creates a new record]

line 15: [//record.constructor(size);             //constructs a record]

line 16: [//record.destructor();                  //invalidates the record (used internally for the "destroy" part of teleportation)]
removed string literal ""destroy""

line 17: [//record.shrink();                      //reduces the record's allocation to it's actual size]

line 18: [//record.move(dest);                    //moves the record to a new place]

line 19: [//record.push(byte);                    //appends a value to the end of the record and returns the new pointer to the record]

line 20: [//record.push_aray(bytes, num);         //appends an array of values to the end of the record]

line 21: [//record.pop();                         //pops a value from the record and returns that value. does not reallocate.]

line 22: [//record.pop_array(num);                //pops an array of values from the record and stack-returns it. does not reallocate.]

line 23: [//record.get_array(index, dest, num);   //returns an array of elements beginning at some index.]

line 24: [//record.get(index);                    //returns a signle element at some index.]

line 25: [//record.set(index, val);               //sets a single element]

line 26: [//record.set_array(index, vals, num);   //sets an array of elements]

line 27: [//record.insert(index, val);            //inserts a single element before the given index, pushing current elements forward]

line 28: [//record.insert_array(index, vals, num);//inserts an array of elements before the given index, pushing current contents forward.]

line 29: [//record.remove(index);                 //remove a single element at the given index]

line 30: [//record.remove_array(index, num);      //removes an array of elements at the given index, moving the next elements back.]

line 31: []

line 32: [typeof_record: db "record",0;]
removed string literal ""record""
found label typeof_record

line 33: []

line 34: [//creates a new record of a given size]

line 35: [float record_new(){]
found func record_new



sig1 = float record_new()
sig2 = ()

line 36: [    assert_arity(ecx,0);]

line 37: [    float record  = malloc(3);]
found local var record (BL = 1)

line 38: [    record_constructor(record,3);]
found reference to record
currentFunc = record_new
ref record is REF_STACK

line 39: [    return record;]

line 40: [}]

line 41: []

line 42: [//constructs the record]

line 43: [void record_constructor(float record, float size){]
found func record_constructor



sig1 = void record_constructor(float record, float size)
sig2 = (float record, float size)
found param record
found param size

line 44: [    assert_arity(ecx,2);]

line 45: [    assert(size >= 3, "size >=3");]
removed string literal ""size >=3""
found reference to assert
currentFunc = record_constructor
ref assert is REF_EXT

line 46: [    record[0] = typeof_record;]
found reference to record
currentFunc = record_constructor
ref record is REF_STACK
found reference to typeof_record
currentFunc = record_constructor
ref typeof_record is REF_EXT

line 47: [    record[1] = size;]

line 48: [    //record[size-1] = 0;]

line 49: [    float idx = size-1;]
found local var idx (BL = 1)

line 50: [    record[idx] = 0;]
found reference to idx
currentFunc = record_constructor
ref idx is REF_STACK

line 51: [}]

line 52: []

line 53: [//deconstructs the record]

line 54: [void record_destructor(float record){]
found func record_destructor



sig1 = void record_destructor(float record)
sig2 = (float record)
found param record

line 55: [    assert_arity(ecx,1);]

line 56: [    assert_type(record,typeof_record);]
found reference to record
currentFunc = record_destructor
ref record is REF_STACK

line 57: [    record[0] = 0;]

line 58: [    record[1] = 0;]

line 59: [}]

line 60: []

line 61: [//reduces the record's allocation to it's actual size]

line 62: [float record_shrink(float record){]
found func record_shrink



sig1 = float record_shrink(float record)
sig2 = (float record)
found param record

line 63: [    assert_arity(ecx,1);]

line 64: [    assert_type(record,typeof_record);]
found reference to record
currentFunc = record_shrink
ref record is REF_STACK

line 65: [    float size = record[1];]
found local var size (BL = 1)

line 66: [    float oldrecord = record;]
found local var oldrecord (BL = 1)

line 67: [    record = realloc(record,size);]

line 68: [    record_destructor(oldrecord);]
found reference to record_destructor
currentFunc = record_shrink
ref record_destructor is REF_EXT
found reference to oldrecord
currentFunc = record_shrink
ref oldrecord is REF_STACK

line 69: [    return record;]

line 70: [}]

line 71: []

line 72: [//appends a value to the end of the record and returns the new pointer to the record]

line 73: [float record_push(float record, float byte){]
found func record_push



sig1 = float record_push(float record, float byte)
sig2 = (float record, float byte)
found param record
found param byte

line 74: [    assert_arity(ecx,2);]

line 75: [    assert_type(record,typeof_record);]
found reference to record
currentFunc = record_push
ref record is REF_STACK

line 76: [    return record_push_array(record,&byte,1);]
found reference to byte
currentFunc = record_push
ref byte is REF_STACK

line 77: [}]

line 78: []

line 79: [//appends an array of values to the end of the record]

line 80: [float record_push_array(float record, float bytes, float num){]
found func record_push_array



sig1 = float record_push_array(float record, float bytes, float num)
sig2 = (float record, float bytes, float num)
found param record
found param bytes
found param num

line 81: [    assert_arity(ecx,3);]

line 82: [    assert_type(record,typeof_record);]
found reference to record
currentFunc = record_push_array
ref record is REF_STACK

line 83: [    float size = record[1];]
found local var size (BL = 1)

line 84: [    float newsize = size+num;]
found local var newsize (BL = 1)
found reference to num
currentFunc = record_push_array
ref num is REF_STACK

line 85: [    float oldrecord = record;]
found local var oldrecord (BL = 1)

line 86: [    if(malloc_test() == 0){printf("rpa_ malloc test 1\n");}]
removed string literal ""rpa_ malloc test 1\n""

line 87: [    record = realloc(record,size);]

line 88: [    if(malloc_test() == 0){printf("rpa_ malloc test 2\n");}]
removed string literal ""rpa_ malloc test 2\n""

line 89: [    //record_destructor(oldrecord);]

line 90: [    float dest = record+size-1;]
found local var dest (BL = 1)

line 91: [    printf("memcpy(%d,%d,%d)\n",dest,bytes,num);]
removed string literal ""memcpy(%d,%d,%d)\n""
found reference to dest
currentFunc = record_push_array
ref dest is REF_STACK
found reference to bytes
currentFunc = record_push_array
ref bytes is REF_STACK

line 92: [    memcpy(dest,bytes,num);]

line 93: [    if(malloc_test() == 0){printf("rpa_ malloc test 3\n");}]
removed string literal ""rpa_ malloc test 3\n""

line 94: [    record[newsize-1] = 0;]
found reference to newsize
currentFunc = record_push_array
ref newsize is REF_STACK

line 95: [    if(malloc_test() == 0){printf("rpa_ malloc test 4\n");}]
removed string literal ""rpa_ malloc test 4\n""

line 96: [    record[1] = newsize;]

line 97: [    if(malloc_test() == 0){printf("rpa_ malloc test 5\n");}]
removed string literal ""rpa_ malloc test 5\n""

line 98: [    return record;]

line 99: [}]

line 100: []

line 101: [//pops a value from the record and returns that value. does not reallocate.]

line 102: [float record_pop(float record){]
found func record_pop



sig1 = float record_pop(float record)
sig2 = (float record)
found param record

line 103: [    assert_arity(ecx,1);]

line 104: [    assert_type(record,typeof_record);]
found reference to record
currentFunc = record_pop
ref record is REF_STACK

line 105: [    float size = record[1];]
found local var size (BL = 1)

line 106: [    float num = record[size-2];]
found local var num (BL = 1)

line 107: [    record[size-2] = 0;]

line 108: [    record[1] = size-1;]

line 109: [    return num;]
found reference to num
currentFunc = record_pop
ref num is REF_STACK

line 110: [}]

line 111: []

line 112: [//pops an array of values from the record and stack-returns it. does not reallocate.]

line 113: [float record_pop_array(float record, float num){]
found func record_pop_array



sig1 = float record_pop_array(float record, float num)
sig2 = (float record, float num)
found param record
found param num

line 114: [    assert_arity(ecx,2);]

line 115: [    assert_type(record,typeof_record);]
found reference to record
currentFunc = record_pop_array
ref record is REF_STACK

line 116: [    float size = record[1];]
found local var size (BL = 1)

line 117: [    float index = size-num;]
found local var index (BL = 1)
found reference to num
currentFunc = record_pop_array
ref num is REF_STACK

line 118: [    float buffer = stack_alloc(num);]
found local var buffer (BL = 1)

line 119: [    record_get_array(record,index,buffer,num);]
found reference to record_get_array
currentFunc = record_pop_array
ref record_get_array is REF_EXT
found reference to index
currentFunc = record_pop_array
ref index is REF_STACK
found reference to buffer
currentFunc = record_pop_array
ref buffer is REF_STACK

line 120: [    return record_remove_array(record,index,num);]

line 121: [}]

line 122: []

line 123: [//returns an array of elements beginning at some index.]

line 124: [void record_get_array(float record, float index, float dest, float num){]
found func record_get_array



sig1 = void record_get_array(float record, float index, float dest, float num)
sig2 = (float record, float index, float dest, float num)
found param record
found param index
found param dest
found param num

line 125: [    assert_arity(ecx,4);]

line 126: [    assert_type(record,typeof_record);]
found reference to record
currentFunc = record_get_array
ref record is REF_STACK

line 127: [    float source = record+2+index;]
found local var source (BL = 1)
found reference to index
currentFunc = record_get_array
ref index is REF_STACK

line 128: [    memcpy(dest,source,num);]
found reference to dest
currentFunc = record_get_array
ref dest is REF_STACK
found reference to source
currentFunc = record_get_array
ref source is REF_STACK
found reference to num
currentFunc = record_get_array
ref num is REF_STACK

line 129: [}]

line 130: []

line 131: [//returns a signle element at some index.]

line 132: [float record_get(float record, float index){]
found func record_get



sig1 = float record_get(float record, float index)
sig2 = (float record, float index)
found param record
found param index

line 133: [    assert_arity(ecx,2);]

line 134: [    assert_type(record,typeof_record);]
found reference to record
currentFunc = record_get
ref record is REF_STACK

line 135: [    index += 2;]
found reference to index
currentFunc = record_get
ref index is REF_STACK

line 136: [    return record[index];]

line 137: [}]

line 138: []

line 139: [//sets a single element]

line 140: [void record_set(float record, float index, float val){]
found func record_set



sig1 = void record_set(float record, float index, float val)
sig2 = (float record, float index, float val)
found param record
found param index
found param val

line 141: [    assert_arity(ecx,3);]

line 142: [    assert_type(record,typeof_record);]
found reference to record
currentFunc = record_set
ref record is REF_STACK

line 143: [    index += 2;]
found reference to index
currentFunc = record_set
ref index is REF_STACK

line 144: [    record[index] = val;]
found reference to val
currentFunc = record_set
ref val is REF_STACK

line 145: [}]

line 146: []

line 147: [//sets an array of elements]

line 148: [void record_set_array(float record, float index, float vals, float num){]
found func record_set_array



sig1 = void record_set_array(float record, float index, float vals, float num)
sig2 = (float record, float index, float vals, float num)
found param record
found param index
found param vals
found param num

line 149: [    assert_arity(ecx,4);]

line 150: [    assert_type(record,typeof_record);]
found reference to record
currentFunc = record_set_array
ref record is REF_STACK

line 151: [    index += 2;]
found reference to index
currentFunc = record_set_array
ref index is REF_STACK

line 152: [    float dest = record+index;]
found local var dest (BL = 1)

line 153: [    memcpy(dest,vals,num);]
found reference to dest
currentFunc = record_set_array
ref dest is REF_STACK
found reference to vals
currentFunc = record_set_array
ref vals is REF_STACK
found reference to num
currentFunc = record_set_array
ref num is REF_STACK

line 154: [}]

line 155: []

line 156: [//inserts a single element before the given index, pushing current elements forward]

line 157: [float record_insert(float record, float index, float val){]
found func record_insert



sig1 = float record_insert(float record, float index, float val)
sig2 = (float record, float index, float val)
found param record
found param index
found param val

line 158: [    assert_arity(ecx,3);]

line 159: [    assert_type(record,typeof_record);]
found reference to record
currentFunc = record_insert
ref record is REF_STACK

line 160: [    return record_insert_array(record,index,&val,1);]
found reference to record_insert_array
currentFunc = record_insert
ref record_insert_array is REF_EXT
found reference to index
currentFunc = record_insert
ref index is REF_STACK
found reference to val
currentFunc = record_insert
ref val is REF_STACK

line 161: [}]

line 162: []

line 163: [//inserts an array of elements before the given index, pushing current contents forward.]

line 164: [float record_insert_array(float record, float index, float vals, float num){]
found func record_insert_array



sig1 = float record_insert_array(float record, float index, float vals, float num)
sig2 = (float record, float index, float vals, float num)
found param record
found param index
found param vals
found param num

line 165: [    assert_arity(ecx,4);]

line 166: [    assert_type(record,typeof_record);]
found reference to record
currentFunc = record_insert_array
ref record is REF_STACK

line 167: [    float size = record[1];]
found local var size (BL = 1)

line 168: [    float newsize = size+num;]
found local var newsize (BL = 1)
found reference to num
currentFunc = record_insert_array
ref num is REF_STACK

line 169: [    float oldrecord = record;]
found local var oldrecord (BL = 1)

line 170: [    record = realloc(record,size);]

line 171: [    record_destructor(oldrecord);]
found reference to oldrecord
currentFunc = record_insert_array
ref oldrecord is REF_STACK

line 172: [    index++;]
found reference to index
currentFunc = record_insert_array
ref index is REF_STACK

line 173: [    float curback = record+2+index;]
found local var curback (BL = 1)

line 174: [    float newback = record+2+index+num;]
found local var newback (BL = 1)

line 175: [    float backsize = size-2-index;]
found local var backsize (BL = 1)

line 176: [    memcpy(newback,curback,backsize);]
found reference to newback
currentFunc = record_insert_array
ref newback is REF_STACK
found reference to curback
currentFunc = record_insert_array
ref curback is REF_STACK
found reference to backsize
currentFunc = record_insert_array
ref backsize is REF_STACK

line 177: [    memcpy(curback,vals,num);]
found reference to vals
currentFunc = record_insert_array
ref vals is REF_STACK

line 178: [    record[1] = newsize;]
found reference to newsize
currentFunc = record_insert_array
ref newsize is REF_STACK

line 179: [    return record;]

line 180: [}]

line 181: []

line 182: [float record_remove(float record, float index){]
found func record_remove



sig1 = float record_remove(float record, float index)
sig2 = (float record, float index)
found param record
found param index

line 183: [    assert_arity(ecx,2);]

line 184: [    assert_type(record,typeof_record);]
found reference to record
currentFunc = record_remove
ref record is REF_STACK

line 185: [    return record_remove_array(record, index, 1);]
found reference to index
currentFunc = record_remove
ref index is REF_STACK

line 186: [}]

line 187: []

line 188: [//removes an array of elements after the given index, moving the next elements back.]

line 189: [float record_remove_array(float record, float index, float num){]
found func record_remove_array



sig1 = float record_remove_array(float record, float index, float num)
sig2 = (float record, float index, float num)
found param record
found param index
found param num

line 190: [    assert_arity(ecx,3);]

line 191: [    assert_type(record,typeof_record);]
found reference to record
currentFunc = record_remove_array
ref record is REF_STACK

line 192: [    float size = record[1];]
found local var size (BL = 1)

line 193: [    float newsize = size-num;]
found local var newsize (BL = 1)
found reference to num
currentFunc = record_remove_array
ref num is REF_STACK

line 194: [    float newback = record+2+index;]
found local var newback (BL = 1)
found reference to index
currentFunc = record_remove_array
ref index is REF_STACK

line 195: [    printf("newback = %d\n",newback);]
removed string literal ""newback = %d\n""
found reference to newback
currentFunc = record_remove_array
ref newback is REF_STACK

line 196: [    float curback = record+2+index+num;    ]
found local var curback (BL = 1)

line 197: [    printf("curback = %d\n",curback);]
removed string literal ""curback = %d\n""
found reference to curback
currentFunc = record_remove_array
ref curback is REF_STACK

line 198: [    float backsize= size-2-index-num;]
found local var backsize (BL = 1)

line 199: [    printf("backsize = %d\n",backsize);]
removed string literal ""backsize = %d\n""
found reference to backsize
currentFunc = record_remove_array
ref backsize is REF_STACK

line 200: [    memcpy(newback,curback,backsize);]

line 201: [    record[1] = newsize;]
found reference to newsize
currentFunc = record_remove_array
ref newsize is REF_STACK

line 202: [    return record;]

line 203: [}]

line 204: []

line 205: [//returns the amount of useful data inside the record]

line 206: [float record_length(float record){]
found func record_length



sig1 = float record_length(float record)
sig2 = (float record)
found param record

line 207: [    return record[1]-3;]
found reference to record
currentFunc = record_length
ref record is REF_STACK

line 208: [}]

line 209: []

line 210: [#endif]

line 211: []

line 212: []

line 213: []

line 214: []

line 215: []

line 216: []

line 217: []

line 191: [#include <cyclone/libs/libclass.txt>]
found include <cyclone/libs/libclass.txt>
reading file cyclone/libs/libclass.txt

line 1: [//]

line 2: [// class stuff]

line 3: [//]

line 4: [// - structs have a pointer-to-typename thing]

line 5: [// - classes also have a pointer-to-typeinfo]

line 6: [// ]

line 7: [// class typeinfo contains:]

line 8: [//  0 - typename(class)]

line 9: [//  1 - classname]

line 10: [//  2 - vector<pair<varname>> member vars;]

line 11: [//  3 - vector<pair<funcname,funcptr>> methods;]

line 12: [//  4 - vector<typeinfo*> parent_classes;]

line 13: [//]

line 14: []

line 15: [typeof_class: db "class", 0;]
removed string literal ""class""
found label typeof_class

line 16: [float sizeof_class = 5;]
found global var sizeof_class

line 17: []

line 18: [typeof_class_instance: db "class_instance",0;]
removed string literal ""class_instance""
found label typeof_class_instance

line 19: []

line 20: [float class_new(float name){]
found func class_new



sig1 = float class_new(float name)
sig2 = (float name)
found param name

line 21: [    float C = malloc(sizeof_class);]
found local var C (BL = 1)
found reference to sizeof_class
currentFunc = class_new
ref sizeof_class is REF_EXT

line 22: [    class_constructor(C,name);]
found reference to class_constructor
currentFunc = class_new
ref class_constructor is REF_EXT
found reference to C
currentFunc = class_new
ref C is REF_STACK
found reference to name
currentFunc = class_new
ref name is REF_STACK

line 23: [    return C;]

line 24: [}]

line 25: []

line 26: [float class_constructor(float this, float name){]
found func class_constructor



sig1 = float class_constructor(float this, float name)
sig2 = (float this, float name)
found param this
found param name

line 27: [    assert_arity(ecx,2);]

line 28: [    this[0] = typeof_class;]
found reference to this
currentFunc = class_constructor
ref this is REF_STACK
found reference to typeof_class
currentFunc = class_constructor
ref typeof_class is REF_EXT

line 29: [    this[1] = name;]
found reference to name
currentFunc = class_constructor
ref name is REF_STACK

line 30: [    this[2] = vector_new();]
found reference to vector_new
currentFunc = class_constructor
ref vector_new is REF_EXT

line 31: [    this[3] = vector_new();]

line 32: [    this[4] = vector_new();]

line 33: [}]

line 34: []

line 35: [void class_add_member(float this, float name){]
found func class_add_member



sig1 = void class_add_member(float this, float name)
sig2 = (float this, float name)
found param this
found param name

line 36: [    assert_arity(ecx,2);]

line 37: [    assert_type(this,typeof_class);]
found reference to this
currentFunc = class_add_member
ref this is REF_STACK

line 38: [    float members = this[2];]
found local var members (BL = 1)

line 39: [    vector_push(members,name);]
found reference to members
currentFunc = class_add_member
ref members is REF_STACK
found reference to name
currentFunc = class_add_member
ref name is REF_STACK

line 40: [}]

line 41: []

line 42: [void class_add_method(float this, float name, float func){]
found func class_add_method



sig1 = void class_add_method(float this, float name, float func)
sig2 = (float this, float name, float func)
found param this
found param name
found param func

line 43: [    assert_arity(ecx,3);]

line 44: [    assert_type(this,typeof_class);]
found reference to this
currentFunc = class_add_method
ref this is REF_STACK

line 45: [    float functions = this[3];]
found local var functions (BL = 1)

line 46: [    vector_push(functions,name);]
found reference to functions
currentFunc = class_add_method
ref functions is REF_STACK
found reference to name
currentFunc = class_add_method
ref name is REF_STACK

line 47: [    vector_push(functions,func);]
found reference to func
currentFunc = class_add_method
ref func is REF_STACK

line 48: [}]

line 49: []

line 50: [float class_get_size(float class){]
found func class_get_size



sig1 = float class_get_size(float class)
sig2 = (float class)
found param class

line 51: [    float members = class[2];]
found local var members (BL = 1)
found reference to class
currentFunc = class_get_size
ref class is REF_STACK

line 52: [    float methods = class[3];]
found local var methods (BL = 1)

line 53: [    float size = 2;]
found local var size (BL = 1)

line 54: [    size += vector_get_size(members);]
found reference to members
currentFunc = class_get_size
ref members is REF_STACK

line 55: [    size += vector_get_size(methods);]
found reference to methods
currentFunc = class_get_size
ref methods is REF_STACK

line 56: [    return size;]

line 57: [}]

line 58: []

line 59: [float mcall(float instance, float name){//,...)]
found func mcall



sig1 = float mcall(float instance, float name)
sig2 = (float instance, float name)
found param instance
found param name

line 60: [    float arity = ecx;]
found local var arity (BL = 1)

line 61: [    assert_type(instance,typeof_class_instance);]
found reference to instance
currentFunc = mcall
ref instance is REF_STACK
found reference to typeof_class_instance
currentFunc = mcall
ref typeof_class_instance is REF_EXT

line 62: [    float class = instance[1];]
found local var class (BL = 1)

line 63: [    assert_type(class,typeof_class);]
found reference to class
currentFunc = mcall
ref class is REF_STACK

line 64: [    float functions = class[3];]
found local var functions (BL = 1)

line 65: [    float size = vector_size(functions);]
found local var size (BL = 1)
found reference to functions
currentFunc = mcall
ref functions is REF_STACK

line 66: [    float I = 0;]
found local var I (BL = 1)

line 67: [    for(I = 0; I < size; I = I+2){]
found reference to I
currentFunc = mcall
ref I is REF_STACK

line 68: [        float fname = vector_get(functions,0,I);]
found local var fname (BL = 2)
found local var I (BL = 2)

line 69: [        float fptr = vector_get(functions,0,I+1);]
found local var fptr (BL = 2)
found local var I (BL = 2)

line 70: [        if(strcmp(fname,name) == 0){]
found reference to fname
currentFunc = mcall
ref fname is REF_STACK
found reference to name
currentFunc = mcall
ref name is REF_STACK

line 71: [            float J = 0;]
found local var J (BL = 3)

line 72: [            float dp = &name-&instance; //probably 1 or -1, direction to the right on the argument list]
found local var dp (BL = 3)

line 73: [            ]

line 74: [            for(J = arity-1; J >= 2; J--){]
found reference to J
currentFunc = mcall
ref J is REF_STACK
found reference to arity
currentFunc = mcall
ref arity is REF_STACK

line 75: [                float parg = &instance+J*dp;]
found local var parg (BL = 4)
found reference to dp
currentFunc = mcall
ref dp is REF_STACK

line 76: [                float arg = *parg;]
found local var arg (BL = 4)
found reference to parg
currentFunc = mcall
ref parg is REF_STACK

line 77: [                push arg;]
found reference to arg
currentFunc = mcall
ref arg is REF_STACK

line 78: [            }]

line 79: [            float newarity = arity-2 /*this func args, instance+name*/ + 1 /*new func args, instance*/;]
found local var newarity (BL = 3)
found local var instance (BL = 3)

line 80: [            push instance;]

line 81: [            mov ecx, newarity;]
found reference to newarity
currentFunc = mcall
ref newarity is REF_STACK

line 82: [            call fptr;]
found reference to fptr
currentFunc = mcall
ref fptr is REF_STACK

line 83: [            float res = eax;]
found local var res (BL = 3)

line 84: [            return res;]
found reference to res
currentFunc = mcall
ref res is REF_STACK

line 85: [        }]

line 86: [    }]

line 87: [    float classname = class[1];]
found local var classname (BL = 1)

line 88: [    printf("%mError: no method [%s] in class [%s]\n",900,name,classname);]
removed string literal ""%mError: no method [%s] in class [%s]\n""
found reference to classname
currentFunc = mcall
ref classname is REF_STACK

line 89: [    shell_panic();]

line 90: [}]

line 91: []

line 92: [float mget(float instance, float name){]
found func mget



sig1 = float mget(float instance, float name)
sig2 = (float instance, float name)
found param instance
found param name

line 93: [    assert_type(instance,typeof_class_instance);]
found reference to instance
currentFunc = mget
ref instance is REF_STACK

line 94: [    float class = instance[1];]
found local var class (BL = 1)

line 95: [    assert_type(class,typeof_class);]
found reference to class
currentFunc = mget
ref class is REF_STACK

line 96: [    float members = class[2];]
found local var members (BL = 1)

line 97: [    float size = vector_size(members);]
found local var size (BL = 1)
found reference to members
currentFunc = mget
ref members is REF_STACK

line 98: [    float I = 0;]
found local var I (BL = 1)

line 99: [    for(I = 0; I < size; I = I+1){]
found reference to I
currentFunc = mget
ref I is REF_STACK

line 100: [        float mname = vector_get(members,0,I);]
found local var mname (BL = 2)
found local var I (BL = 2)

line 101: [        if(strcmp(mname,name) == 0){]
found reference to mname
currentFunc = mget
ref mname is REF_STACK
found reference to name
currentFunc = mget
ref name is REF_STACK

line 102: [            float res = instance[2+I];]
found local var res (BL = 3)

line 103: [            return res;]
found reference to res
currentFunc = mget
ref res is REF_STACK

line 104: [        }]

line 105: [    }]

line 106: [    float classname = class[1];]
found local var classname (BL = 1)

line 107: [    printf("%mError: no member [%s] in class [%s]\n",900,name,classname);]
removed string literal ""%mError: no member [%s] in class [%s]\n""
found reference to classname
currentFunc = mget
ref classname is REF_STACK

line 108: [    shell_panic();]

line 109: [}]

line 110: []

line 111: [void mset(float instance, float name, float val){]
found func mset



sig1 = void mset(float instance, float name, float val)
sig2 = (float instance, float name, float val)
found param instance
found param name
found param val

line 112: [    assert_type(instance,typeof_class_instance);]
found reference to instance
currentFunc = mset
ref instance is REF_STACK

line 113: [    float class = instance[1];]
found local var class (BL = 1)

line 114: [    assert_type(class,typeof_class);]
found reference to class
currentFunc = mset
ref class is REF_STACK

line 115: [    float members = class[2];]
found local var members (BL = 1)

line 116: [    float size = vector_size(members);]
found local var size (BL = 1)
found reference to members
currentFunc = mset
ref members is REF_STACK

line 117: [    float I = 0;]
found local var I (BL = 1)

line 118: [    for(I = 0; I < size; I = I+1){]
found reference to I
currentFunc = mset
ref I is REF_STACK

line 119: [        float mname = vector_get(members,0,I);]
found local var mname (BL = 2)
found local var I (BL = 2)

line 120: [        if(strcmp(mname,name) == 0){]
found reference to mname
currentFunc = mset
ref mname is REF_STACK
found reference to name
currentFunc = mset
ref name is REF_STACK

line 121: [            instance[2+I] = val;]
found reference to val
currentFunc = mset
ref val is REF_STACK

line 122: [            return;]

line 123: [        }]

line 124: [    }]

line 125: [    float classname = class[1];]
found local var classname (BL = 1)

line 126: [    printf("%mError: no member [%s] in class [%s]\n",900,name,classname);]
removed string literal ""%mError: no member [%s] in class [%s]\n""
found reference to classname
currentFunc = mset
ref classname is REF_STACK

line 127: [    shell_panic();]

line 128: [}]

line 129: []

line 130: [void class_instance_constructor(float instance, float class){]
found func class_instance_constructor



sig1 = void class_instance_constructor(float instance, float class)
sig2 = (float instance, float class)
found param instance
found param class

line 131: [    instance[0] = typeof_class_instance;]
found reference to instance
currentFunc = class_instance_constructor
ref instance is REF_STACK

line 132: [    instance[1] = class;]
found reference to class
currentFunc = class_instance_constructor
ref class is REF_STACK

line 133: [    mcall(instance, str_constructor);]

line 134: [}]

line 135: []

line 136: [float new(float class){]
found func new



sig1 = float new(float class)
sig2 = (float class)
found param class

line 137: [    float size = class_get_size(class);]
found local var size (BL = 1)
found reference to class_get_size
currentFunc = new
ref class_get_size is REF_EXT
found reference to class
currentFunc = new
ref class is REF_STACK

line 138: [    float instance = malloc(size)]
found local var instance (BL = 1)

line 139: [    class_instance_constructor(instance,class);]
found reference to class_instance_constructor
currentFunc = new
ref class_instance_constructor is REF_EXT
found reference to instance
currentFunc = new
ref instance is REF_STACK

line 140: [    return instance;]

line 141: [}]

line 142: []

line 143: [str_constructor: db "constructor",0;]
removed string literal ""constructor""
found label str_constructor

line 144: []

line 145: []

line 146: []

line 147: []

line 148: []

line 149: []

line 150: []

line 151: []

line 152: []

line 153: []

line 154: []

line 155: []

line 156: []

line 192: [#include <cyclone/libs/loader2.txt>]
found include <cyclone/libs/loader2.txt>
reading file cyclone/libs/loader2.txt

line 1: []

line 2: [/*]

line 3: [    Current executable format:]

line 4: [    0: executable style]

line 5: [        0: flat binary (entry at 0)]

line 6: [        1: alcorPC binary (entry at 1)]

line 7: [        2: with all-func import/export table]

line 8: [        3: with symbol table]

line 9: [        ]

line 10: [    if style == 0:]

line 11: [    1: program size]

line 12: [    2+: program data]

line 13: [    ]

line 14: [    if style == 1:]

line 15: [    1: program size]

line 16: [    2+: program data]

line 17: [    ]

line 18: [    if style == 2:]

line 19: [    1: program size]

line 20: [    2: import table size (can't load if mismatch)]

line 21: [    3: ptr to import table]

line 22: [    4: ptr to program data]

line 23: [    ..: import table]

line 24: [    ..: program data]

line 25: [    ]

line 26: [    if style == 3:]

line 27: [    1: linking style]

line 28: [        0: no linking needed]

line 29: [        1: compile-time (static) requested]

line 30: [        2: load-time (dynamic) requested]

line 31: [    2: has static links?]

line 32: [    3: compile timestamp]

line 33: [    4+: section list ]

line 34: [    ..: sections]

line 35: [       ]

line 36: [   section list:]

line 37: [     section:]

line 38: [     0: type ]

line 39: [        0: data+code]

line 40: [        1: code]

line 41: [        2: data]

line 42: [        3: symbol table]

line 43: [     1: size]

line 44: [     2:+ data]

line 45: []

line 46: [//]

line 47: [//]

line 48: [//]

line 49: [ tl;dr:]

line 50: [ style 3]

line 51: [ 0: exe style = 3]

line 52: [ 1: link style = 2]

line 53: [ 2: has static = 0]

line 54: [ 3: compile timestamp]

line 55: [    section list (null-term arrray)]

line 56: [ 4: 0: section1 = 7]

line 57: [ 5: 1: section2 = 9+x]

line 58: [ 6: 2: end = 0]

line 59: [    section1]

line 60: [ 7: 0: type = 3 (sym table)]

line 61: [ 8: 1: size = x]

line 62: [ 9: 2: sym table data]

line 63: [    section2]

line 64: [9+x:0: type = 0 (data+code)]

line 65: [10+x:1:size = y]

line 66: [11+x:2:program data ]

line 67: [ ]

line 68: []

line 69: []

line 70: []

line 71: [// exe:]

line 72: [// {variant type,]

line 73: [    type 0{]

line 74: [        program.size,]

line 75: [        blob program]

line 76: [    },]

line 77: [    type 1{]

line 78: [        program.size,]

line 79: [        blob progam]

line 80: [    },]

line 81: [    type 2{]

line 82: [        program.size,]

line 83: [        num,]

line 84: [        blob import_table,]

line 85: [        blob program]

line 86: [    },]

line 87: [    type 3{]

line 88: [        num,]

line 89: [        num,]

line 90: [        num,]

line 91: [        v<section> sections,]

line 92: [        sections.data]

line 93: [    }]

line 94: [    }]

line 95: [    ]

line 96: [// section:]

line 97: [// {num, data.size, 8x num, blob data}]

line 98: [    ]

line 99: [    ]

line 100: [// section list:]

line 101: [// {num,blob.'a'.size,blob.'a'.data}]
removed character literal "'a'"
removed character literal "'a'"

line 102: [//]

line 103: []

line 104: [//old:        ]

line 105: [//    1: &main()]

line 106: [//    2: executable style]

line 107: [//        0: flat binary (]

line 108: [//    2: linking style]

line 109: [//        0: no linking]

line 110: [//        1: all func import/export table]

line 111: [//        2: compile-time linking]

line 112: [//        3: symbol rewrite table]

line 113: [//    3: compilation timestamp       ]

line 114: [//    ]

line 115: [//    if style == 1:]

line 116: [//    4: all-func table (export written over import on link)]

line 117: [//    ]

line 118: [//    if style == 3:]

line 119: [//    ]

line 120: [    ]

line 121: [*/]

line 122: []

line 123: []

line 124: [/*]

line 125: [    style 3:]

line 126: [    struct exe]

line 127: [    {]

line 128: [    0   typeof_exe;]

line 129: [    1   float exe_style;]

line 130: [    2   float link_style;]

line 131: [    3   float has_static;]

line 132: [    4   float compile_timestamp;]

line 133: [    5   ptr<nt_array<section>> section_list;     ]

line 134: [    };]

line 135: [    ]

line 136: [    nt_array<x>:]

line 137: [        x,x,x,x,0;]

line 138: [        ]

line 139: [    struct section{]

line 140: [        typeof_section;]

line 141: [        float type;]

line 142: [        float size;]

line 143: [        blob data;]

line 144: [    }]

line 145: [*/]

line 146: [/*]

line 147: [    style 0,1:]

line 148: [    struct exe]

line 149: [    {]

line 150: [    0   typeof_exe;]

line 151: [    1   float exe_style;]

line 152: [    2   float size]

line 153: [    }]

line 154: [    ]

line 155: [    style 2:]

line 156: [    struct exe]

line 157: [    {]

line 158: [    0   typeof_exe;]

line 159: [    1   float exe_style;]

line 160: [    2   float size;]

line 161: [    3   float import_size;]

line 162: [    4   float ptrimport;]

line 163: [    5   float ptrcode]

line 164: [    }]

line 165: [*/]

line 166: []

line 167: [#include <cyclone/progs/loader/linker.txt>]
found include <cyclone/progs/loader/linker.txt>
reading file cyclone/progs/loader/linker.txt

line 1: [//linker]

line 2: [//copies all-func table to ]

line 3: [void linkAllFunc(float header, float loaded){]
found func linkAllFunc



sig1 = void linkAllFunc(float header, float loaded)
sig2 = (float header, float loaded)
found param header
found param loaded

line 4: [    ]

line 5: [    //float exe_style = header[1];]

line 6: [    //float size = header[2];]

line 7: [    float import_size = header[3];]
found local var import_size (BL = 1)
found reference to header
currentFunc = linkAllFunc
ref header is REF_STACK

line 8: [    float ptrimport = header[4];]
found local var ptrimport (BL = 1)

line 9: [    //float ptrcode = header[5];]

line 10: [    float export_size = export_end - export_start;]
found local var export_size (BL = 1)
found reference to export_end
currentFunc = linkAllFunc
ref export_end is REF_EXT
found reference to export_start
currentFunc = linkAllFunc
ref export_start is REF_EXT

line 11: [    if(import_size != export_size){]
found reference to import_size
currentFunc = linkAllFunc
ref import_size is REF_STACK
found reference to export_size
currentFunc = linkAllFunc
ref export_size is REF_STACK

line 12: [        printf("can't link, all-func table mismatch:\n");]
removed string literal ""can't link, all-func table mismatch:\n""

line 13: [        printf("import size: %d\n",import_size);]
removed string literal ""import size: %d\n""

line 14: [        printf("export size: %d\n",export_size);]
removed string literal ""export size: %d\n""

line 15: [        shell_panic();]

line 16: [    }]

line 17: [    float ptr = loaded+ptrimport;]
found local var ptr (BL = 1)
found reference to loaded
currentFunc = linkAllFunc
ref loaded is REF_STACK
found reference to ptrimport
currentFunc = linkAllFunc
ref ptrimport is REF_STACK

line 18: [    memcpy(ptr,export_start,export_size);]
found reference to ptr
currentFunc = linkAllFunc
ref ptr is REF_STACK

line 19: [}]

line 20: []

line 21: [export_start:]
found label export_start

line 22: [#include <cyclone/generated/func_export_table.txt>]
found include <cyclone/generated/func_export_table.txt>
reading file cyclone/generated/func_export_table.txt

line 1: [#ifndef CYCLONE_BUILDER]
#ifndef "CYCLONE_BUILDER" (defined)

line 2: [func_export_table:]

line 3: [db boot;]

line 4: [db nullcall_error;]

line 5: [db init_hardware;]

line 6: [db memcpy;]

line 7: [db memchr;]

line 8: [db memset;]

line 9: [db strcat;]

line 10: [db strncat;]

line 11: [db strchr;]

line 12: [db strrchr;]

line 13: [db strcmp;]

line 14: [db strncmp;]

line 15: [db strcpy;]

line 16: [db strncpy;]

line 17: [db strlen;]

line 18: [db strspn;]

line 19: [db strcspn;]

line 20: [db strpbrk;]

line 21: [db strstr;]

line 22: [db explode;]

line 23: [db str2num;]

line 24: [db getNdigit;]

line 25: [db num2strSet;]

line 26: [db num2str;]

line 27: [db Nlog;]

line 28: [db isPrint;]

line 29: [db isNum;]

line 30: [db isAlpha;]

line 31: [db toLower;]

line 32: [db toUpper;]

line 33: [db Con;]

line 34: [db concat;]

line 35: [db c2str;]

line 36: [db unescapeStr;]

line 37: [db cstr_find_first_of;]

line 38: [db cstr_find_last_of;]

line 39: [db stack_copy;]

line 40: [db cstr_stack_copy;]

line 41: [db isspace;]

line 42: [db stralloc;]

line 43: [db P;]

line 44: [db Pc;]

line 45: [db Pn;]

line 46: [db Pl;]

line 47: [db P2;]

line 48: [db Perr;]

line 49: [db Print;]

line 50: [db printword;]

line 51: [db mcs_putchar;]

line 52: [db cs_putchar;]

line 53: [db ConsoleShiftUp;]

line 54: [db ConsoleShiftDown;]

line 55: [db pow;]

line 56: [db modulo;]

line 57: [db sqrt;]

line 58: [db cbrt;]

line 59: [db root;]

line 60: [db e;]

line 61: [db exp;]

line 62: [db ln;]

line 63: [db log2;]

line 64: [db log10;]

line 65: [db log;]

line 66: [db abs;]

line 67: [db ceil;]

line 68: [db floor;]

line 69: [db round;]

line 70: [db integer;]

line 71: [db frac;]

line 72: [db clamp;]

line 73: [db inrange;]

line 74: [db minimal;]

line 75: [db maximal;]

line 76: [db random;]

line 77: [db random1;]

line 78: [db random2;]

line 79: [db randint1;]

line 80: [db randint2;]

line 81: [db pi;]

line 82: [db toRad;]

line 83: [db toDeg;]

line 84: [db sin;]

line 85: [db cos;]

line 86: [db tan;]

line 87: [db cot;]

line 88: [db sec;]

line 89: [db csc;]

line 90: [db asin;]

line 91: [db acos;]

line 92: [db atan;]

line 93: [db sinh;]

line 94: [db cosh;]

line 95: [db tanh;]

line 96: [db coth;]

line 97: [db sech;]

line 98: [db csch;]

line 99: [db sinr;]

line 100: [db cosr;]

line 101: [db tanr;]

line 102: [db cotr;]

line 103: [db secr;]

line 104: [db cscr;]

line 105: [db asinr;]

line 106: [db acosr;]

line 107: [db atanr;]

line 108: [db ceil2;]

line 109: [db floor2;]

line 110: [db round2;]

line 111: [db printf;]

line 112: [db compileTimeStamp;]

line 113: [db currentTimeStamp;]

line 114: [db decodeTimeStamp;]

line 115: [db monthToString;]

line 116: [db timeStampToString;]

line 117: [db PrintStringXY;]

line 118: [db printCharXY;]

line 119: [db delaysimple;]

line 120: [db screen_set;]

line 121: [db screen_clear;]

line 122: [db screen_cursor_enable;]

line 123: [db screen_cursor_disable;]

line 124: [db screen_set_cursor_pos;]

line 125: [db screen_set_cursor_pos_xy;]

line 126: [db screen_force_refresh;]

line 127: [db screen_set_shift_box_x1;]

line 128: [db screen_set_shift_box_x2;]

line 129: [db screen_set_shift_box_y1;]

line 130: [db screen_set_shift_box_y2;]

line 131: [db screen_set_shift_box;]

line 132: [db screen_set_print_box;]

line 133: [db screen_shift_vertical;]

line 134: [db screen_shift_horizontal;]

line 135: [db screen_set_blink_rate;]

line 136: [db screen_set_cursor_size;]

line 137: [db mcs_screen_clear;]

line 138: [db mcs_screen_force_refresh;]

line 139: [db mcs_init;]

line 140: [db mcs_screen_shift_vertical;]

line 141: [db mcs_screen_set_shift_box;]

line 142: [db mcs_screen_set_cursor_pos_xy;]

line 143: [db mcs_screen_cursor_enable;]

line 144: [db mcs_screen_cursor_disable;]

line 145: [db mcs_set_blink_rate;]

line 146: [db mcs_set_cursor_size;]

line 147: [db memcpy2;]

line 148: [db allocation_constructor;]

line 149: [db allocation_set_size;]

line 150: [db allocation_set_owner;]

line 151: [db allocation_set_prev;]

line 152: [db allocation_set_next;]

line 153: [db allocation_get_size;]

line 154: [db allocation_get_owner;]

line 155: [db allocation_get_prev;]

line 156: [db allocation_get_next;]

line 157: [db malloc_getAllocation;]

line 158: [db malloc_getDataFromIndex;]

line 159: [db malloc_getDataFromAllocation;]

line 160: [db malloc_getIndex;]

line 161: [db malloc_trySplit;]

line 162: [db malloc_join;]

line 163: [db malloc_set_disk;]

line 164: [db malloc_init;]

line 165: [db malloc_test;]

line 166: [db malloc_print_count;]

line 167: [db malloc_count;]

line 168: [db printAllocationSimple;]

line 169: [db printAllocation;]

line 170: [db mallocLast;]

line 171: [db malloc;]

line 172: [db free;]

line 173: [db realloc;]

line 174: [db malloc_memcopy;]

line 175: [db str_alloc;]

line 176: [db error;]

line 177: [db vector_constructor;]

line 178: [db vector_copy_constructor;]

line 179: [db vector_get_array;]

line 180: [db vector_get_size;]

line 181: [db vector_get_capacity;]

line 182: [db vector_get_element_size;]

line 183: [db vector_set_array;]

line 184: [db vector_set_size;]

line 185: [db vector_set_capacity;]

line 186: [db vector_set_element_size;]

line 187: [db vector_destructor;]

line 188: [db vector_clear;]

line 189: [db vector_push;]

line 190: [db vector_pop;]

line 191: [db vector_size;]

line 192: [db vector_disk_size;]

line 193: [db vector_get;]

line 194: [db vector_set;]

line 195: [db vector_insert;]

line 196: [db vector_remove;]

line 197: [db vector_resize;]

line 198: [db vector_array;]

line 199: [db string_constructor;]

line 200: [db string_destructor;]

line 201: [db string_c_str;]

line 202: [db string_clear;]

line 203: [db string_adds;]

line 204: [db string_addc;]

line 205: [db string_addn;]

line 206: [db string_equals;]

line 207: [db string_equals_cs;]

line 208: [db string_length;]

line 209: [db string_addcs;]

line 210: [db string_find_first_of;]

line 211: [db string_find_last_of;]

line 212: [db string_substr;]

line 213: [db list_constructor;]

line 214: [db listnode_constructor;]

line 215: [db listnode_destructor;]

line 216: [db list_size;]

line 217: [db list_size_helper;]

line 218: [db list_empty;]

line 219: [db list_clear;]

line 220: [db list_push;]

line 221: [db list_push_helper;]

line 222: [db list_pop;]

line 223: [db node_selfdestruct;]

line 224: [db list_pop_helper;]

line 225: [db list_get;]

line 226: [db list_get_helper;]

line 227: [db list_set;]

line 228: [db list_set_helper;]

line 229: [db list_insert;]

line 230: [db list_insert_helper;]

line 231: [db list_remove;]

line 232: [db list_remove_helper;]

line 233: [db list_getnode;]

line 234: [db list_splice;]

line 235: [db list_move;]

line 236: [db list_destructor;]

line 237: [db setKeyboard;]

line 238: [db isPrint1;]

line 239: [db readKey;]

line 240: [db hasKey;]

line 241: [db readKB;]

line 242: [db waitKey;]

line 243: [db readKeyTimed;]

line 244: [db readline;]

line 245: [db assert_type;]

line 246: [db curticks;]

line 247: [db curtime;]

line 248: [db assert_arity;]

line 249: [db shell;]

line 250: [db autorun;]

line 251: [db shell_panic;]

line 252: [db cls;]

line 253: [db drawStatusBar;]

line 254: [db drawScrollBar;]

line 255: [db Console;]

line 256: [db ParseStringSilent;]

line 257: [db ParseString;]

line 258: [db Ps;]

line 259: [db redraw_all;]

line 260: [db PrintProgressBar;]

line 261: [db ParseKey;]

line 262: [db checkKB;]

line 263: [db getShellInput;]

line 264: [db getYN;]

line 265: [db help;]

line 266: [db cmdtest;]

line 267: [db cmdtest2;]

line 268: [db cmdtest3;]

line 269: [db cmdtrace;]

line 270: [db cmdyield;]

line 271: [db cmdps;]

line 272: [db printversion;]

line 273: [db cmdecho;]

line 274: [db arg_rest;]

line 275: [db cmdtime;]

line 276: [db cmd_test4;]

line 277: [db cmd_test5;]

line 278: [db heap_status;]

line 279: [db cmd_rpncalc;]

line 280: [db cmd_cd;]

line 281: [db cmd_dir;]

line 282: [db cmd_mkdir;]

line 283: [db cmd_del;]

line 284: [db cmd_rn;]

line 285: [db cmd_write;]

line 286: [db readword;]

line 287: [db cmd_read;]

line 288: [db cmd_info;]

line 289: [db cmd_hdd;]

line 290: [db cmd_mount;]

line 291: [db cmd_format;]

line 292: [db cmd_gpio;]

line 293: [db cmd_exec;]

line 294: [db cmd_dump;]

line 295: [db progtest;]

line 296: [db isString;]

line 297: [db cmd_symbol;]

line 298: [db cmd_load;]

line 299: [db cmd_run;]

line 300: [db package_args;]

line 301: [db cmd_runbg;]

line 302: [db cmd_fileview;]

line 303: [db cmd_memview;]

line 304: [db memtest_hlp;]

line 305: [db memtest;]

line 306: [db check_canary;]

line 307: [db file_handle_constructor;]

line 308: [db file_handle_copy_constructor;]

line 309: [db file_handle_destructor;]

line 310: [db file_handle_get_canary;]

line 311: [db file_handle_get_rw_ptr;]

line 312: [db file_handle_get_imp;]

line 313: [db file_handle_set_canary;]

line 314: [db file_handle_set_rw_ptr;]

line 315: [db file_handle_set_imp;]

line 316: [db translate_fopen_mode;]

line 317: [db filepath_legal;]

line 318: [db filepath_abs;]

line 319: [db filepath_decimate;]

line 320: [db filepath_extension;]

line 321: [db filepath_base;]

line 322: [db filesystem_init;]

line 323: [db find_file;]

line 324: [db find_free;]

line 325: [db fopen;]

line 326: [db fwrite;]

line 327: [db fresize;]

line 328: [db fread;]

line 329: [db frename;]

line 330: [db fgetstring;]

line 331: [db feof;]

line 332: [db fsize;]

line 333: [db fseek;]

line 334: [db ftell;]

line 335: [db flist;]

line 336: [db fdelete;]

line 337: [db vector_get_linear_size;]

line 338: [db vector_move;]

line 339: [db vector_linearize;]

line 340: [db vector_delinearize;]

line 341: [db filesystem_get_size;]

line 342: [db inc_cpy;]

line 343: [db inc_move;]

line 344: [db filesystem_move;]

line 345: [db filesystem_write;]

line 346: [db str_delinearize;]

line 347: [db filesystem_read;]

line 348: [db initPaging;]

line 349: [db setPageTable;]

line 350: [db getPage;]

line 351: [db setPageFlags;]

line 352: [db getPageFlags;]

line 353: [db setPageRunLevel;]

line 354: [db getPageRunlevel;]

line 355: [db setPageMapping;]

line 356: [db getPageMapping;]

line 357: [db reportPage;]

line 358: [db toPage;]

line 359: [db copyPage;]

line 360: [db mapPage;]

line 361: [db setMemoryRunlevel;]

line 362: [db setMemoryMapping;]

line 363: [db pagingEnable;]

line 364: [db pagingDisable;]

line 365: [db sizeof_thread;]

line 366: [db thread_constructor;]

line 367: [db thread_copy_constructor;]

line 368: [db thread_destructor;]

line 369: [db thread_new;]

line 370: [db thread_delete;]

line 371: [db thread_get_canary;]

line 372: [db thread_get_entry;]

line 373: [db thread_get_args;]

line 374: [db thread_get_time;]

line 375: [db thread_get_ip;]

line 376: [db thread_get_stack;]

line 377: [db thread_get_regs;]

line 378: [db thread_set_canary;]

line 379: [db thread_set_entry;]

line 380: [db thread_set_args;]

line 381: [db thread_set_time;]

line 382: [db thread_set_ip;]

line 383: [db thread_set_stack;]

line 384: [db thread_set_regs;]

line 385: [db initThreads;]

line 386: [db regs_set_to_entry;]

line 387: [db thread_run;]

line 388: [db thread_enter;]

line 389: [db multitask_test;]

line 390: [db thread_yield;]

line 391: [db print_threads;]

line 392: [db thread_exit_func;]

line 393: [db thread_create;]

line 394: [db delay;]

line 395: [db initInterrupts;]

line 396: [db addInterruptHandler;]

line 397: [db defaultIntHandler;]

line 398: [db stopIntHandler;]

line 399: [db errIntHandler;]

line 400: [db extendedModeEnable;]

line 401: [db extendedModeDisable;]

line 402: [db interruptsEnable;]

line 403: [db interruptsDisable;]

line 404: [db intnum_to_str;]

line 405: [db getStackTrace;]

line 406: [db printStackTrace;]

line 407: [db findClosestFunc;]

line 408: [db getFuncName;]

line 409: [db getVarName;]

line 410: [db getSymbolName;]

line 411: [db findSymbolByName;]

line 412: [db findFuncByName;]

line 413: [db findVarByName;]

line 414: [db libdynamicstruct_init;]

line 415: [db fgetfloat;]

line 416: [db ds_read_definition;]

line 417: [//db main;]

line 418: [db setupInterrupts;]

line 419: [db memtest2;]

line 420: [func_export_table_end:]

line 421: []

line 422: [var_export_table:]

line 423: [db &size;]

line 424: [db &AdrEB;]

line 425: [db &AdrRAM;]

line 426: [db &AdrKb;]

line 427: [db &AdrHDD;]

line 428: [db &AdrPort;]

line 429: [db &OSversion;]

line 430: [db &num_screens_x;]

line 431: [db &num_screens_y;]

line 432: [db &Nbase;]

line 433: [db &Nprec;]

line 434: [db &printScrX;]

line 435: [db &printScrY;]

line 436: [db &printBuffX;]

line 437: [db &printBuffY;]

line 438: [db &printLineOffset;]

line 439: [db &printSpecials;]

line 440: [db &RedrawPending;]

line 441: [db &screen_print_x_min;]

line 442: [db &screen_print_y_min;]

line 443: [db &screen_print_x_max;]

line 444: [db &screen_print_y_max;]

line 445: [db &AdrScreen;]

line 446: [db &mcs_width;]

line 447: [db &mcs_height;]

line 448: [db &mcs_last_x;]

line 449: [db &mcs_last_y;]

line 450: [db &cs_width;]

line 451: [db &cs_height;]

line 452: [db &cs_last_x;]

line 453: [db &cs_last_y;]

line 454: [db &malloc_debug;]

line 455: [db &malloc_print;]

line 456: [db &malloc_num2str;]

line 457: [db &malloc_disk;]

line 458: [db &malloc_max_disk;]

line 459: [db &malloc_header;]

line 460: [db &malloc_user;]

line 461: [db &lastFreeAllocation;]

line 462: [db &malloc_debug_iters;]

line 463: [db &sizeof_vector;]

line 464: [db &sizeof_listnode;]

line 465: [db &sizeof_list;]

line 466: [db &ptrKB;]

line 467: [db &readKeyTimed_delay_time;]

line 468: [db &readKeyTimed_repeat_time;]

line 469: [db &readKeyTimed_keyState;]

line 470: [db &readKeyTimed_lastSeen;]

line 471: [db &readKeyTimed_lastKey;]

line 472: [db &checksum_prev_first;]

line 473: [db &checksum_previous;]

line 474: [db &crc_prev_first;]

line 475: [db &crc_previous;]

line 476: [db &shell_panic_ebp;]

line 477: [db &shell_panic_esp;]

line 478: [db &R;]

line 479: [db &Echo;]

line 480: [db &Arr;]

line 481: [db &PKSI;]

line 482: [db &listeningToInput;]

line 483: [db &numModules;]

line 484: [db &MinStrI;]

line 485: [db &sizeof_file_handle;]

line 486: [db &current_path;]

line 487: [db &files;]

line 488: [db &filenames;]

line 489: [db &threadpool;]

line 490: [db &cur_thread;]

line 491: [db &thread_stack_size;]

line 492: [db &numInts;]

line 493: [db &v_ds_typeinfos;]

line 494: [var_export_table_end:]

line 495: [#endif]

line 496: []

line 23: [export_end:]
found label export_end

line 24: []

line 25: []

line 26: [//------]

line 27: []

line 28: [float linkSymbolTable(float symtable){]
found func linkSymbolTable



sig1 = float linkSymbolTable(float symtable)
sig2 = (float symtable)
found param symtable

line 29: [    float num = vector_get_size(symtable);]
found local var num (BL = 1)
found reference to symtable
currentFunc = linkSymbolTable
ref symtable is REF_STACK

line 30: [    float I = 0;]
found local var I (BL = 1)

line 31: [    for(I = 0; I < num; I++){]
found reference to I
currentFunc = linkSymbolTable
ref I is REF_STACK
found reference to num
currentFunc = linkSymbolTable
ref num is REF_STACK

line 32: [        float sym = vector_get(symtable,0,I);]
found local var sym (BL = 2)
found local var I (BL = 2)

line 33: [        assert_type(sym,typeof_symbol);]
found reference to sym
currentFunc = linkSymbolTable
ref sym is REF_STACK
found reference to typeof_symbol
currentFunc = linkSymbolTable
ref typeof_symbol is REF_EXT

line 34: [        float name = sym[1];]
found local var name (BL = 2)

line 35: [        float def = sym[2];]
found local var def (BL = 2)

line 36: [        if(def == -1){]
found reference to def
currentFunc = linkSymbolTable
ref def is REF_STACK

line 37: [            def = findSymbolByName(name);]
found reference to findSymbolByName
currentFunc = linkSymbolTable
ref findSymbolByName is REF_EXT
found reference to name
currentFunc = linkSymbolTable
ref name is REF_STACK

line 38: [            if(def == -1){]

line 39: [                printf("can't find symbol [%s]\n",name);]
removed string literal ""can't find symbol [%s]\n""

line 40: [                return 0;]

line 41: [            }]

line 42: [            //printf("linked symbol %s\n",name);]
removed string literal ""linked symbol %s\n""

line 43: [        }]

line 44: [        sym[2] = def;]

line 45: [    }]

line 46: [    return 1;]

line 47: [}]

line 48: []

line 49: []

line 50: [void linkCode(float ptr, float symtable){]
found func linkCode



sig1 = void linkCode(float ptr, float symtable)
sig2 = (float ptr, float symtable)
found param ptr
found param symtable

line 51: [    //printf("ptr = %d\n",ptr);]
removed string literal ""ptr = %d\n""

line 52: [    float num = vector_get_size(symtable);]
found local var num (BL = 1)
found reference to symtable
currentFunc = linkCode
ref symtable is REF_STACK

line 53: [    float I = 0;]
found local var I (BL = 1)

line 54: [    for(I = 0; I < num; I++){]
found reference to I
currentFunc = linkCode
ref I is REF_STACK
found reference to num
currentFunc = linkCode
ref num is REF_STACK

line 55: [        float sym = vector_get(symtable,0,I);]
found local var sym (BL = 2)
found local var I (BL = 2)

line 56: [        assert_type(sym,typeof_symbol);]
found reference to sym
currentFunc = linkCode
ref sym is REF_STACK

line 57: [        float name = sym[1];]
found local var name (BL = 2)

line 58: [        //printf("symbol %s\n",name);]
removed string literal ""symbol %s\n""

line 59: [        float def = sym[2];]
found local var def (BL = 2)

line 60: [        if(def == -1){printf("unresolved symbol %s\n",name); return 0;}]
removed string literal ""unresolved symbol %s\n""
found reference to def
currentFunc = linkCode
ref def is REF_STACK
found reference to name
currentFunc = linkCode
ref name is REF_STACK

line 61: [        float refs = sym[3];]
found local var refs (BL = 2)

line 62: [        if(refs){]
found reference to refs
currentFunc = linkCode
ref refs is REF_STACK

line 63: [            float num2 = vector_get_size(refs);]
found local var num2 (BL = 3)

line 64: [            float J = 0;]
found local var J (BL = 3)

line 65: [            for(J = 0; J < num2; J++){]
found reference to J
currentFunc = linkCode
ref J is REF_STACK
found reference to num2
currentFunc = linkCode
ref num2 is REF_STACK

line 66: [                float r = vector_get(refs,0,J);]
found local var r (BL = 4)
found local var J (BL = 4)

line 67: [                ptr[r] = def;]
found reference to ptr
currentFunc = linkCode
ref ptr is REF_STACK

line 68: [                float newval = ptr[r];]
found local var newval (BL = 4)

line 69: [                //printf(" resolved ref %d to %d at %d\n",r,newval,ptr);]
removed string literal "" resolved ref %d to %d at %d\n""

line 70: [            }]

line 71: [        }]

line 72: [    }]

line 73: [}]

line 74: []

line 75: []

line 76: [//links the program by writing down it's size, entry point,]

line 77: [//and copy-pasting the "standalone" symbol table.]
removed string literal ""standalone""

line 78: [/*]

line 79: [float program_link(float ptr){]

line 80: [    //printf("linking skipped\n");]
removed string literal ""linking skipped\n""

line 81: [    //return 0;]

line 82: [    float _size = *ptr++;]

line 83: [    float _main = *ptr++;]

line 84: [    float _style = *ptr++;]

line 85: [    float _version = *ptr++;]

line 86: [    if(_style == 1){]

line 87: [        float export_size = export_end - export_start;]

line 88: [        memcpy(ptr,export_start,export_size);]

line 89: [    }]

line 90: [    //P("linked %d symbols\n",export_size);]
removed string literal ""linked %d symbols\n""

line 91: [}]

line 92: [*/]

line 93: []

line 94: []

line 95: []

line 96: []

line 168: [#include <cyclone/progs/loader/symbol.txt>]
found include <cyclone/progs/loader/symbol.txt>
reading file cyclone/progs/loader/symbol.txt

line 1: [//symbol]

line 2: []

line 3: [//struct symbol]

line 4: [//0: typeof_symbol]

line 5: [//1: string name]

line 6: [//2: definition address]

line 7: [//3: reference addresses (vector)]

line 8: []

line 9: [//typedef vector<symbol*> symtable;]

line 10: []

line 11: [/*]

line 12: []

line 13: [ds vector<T>{]

line 14: [    float size;]

line 15: [    float capacity;]

line 16: [    ptr [capacity] T array;]

line 17: [};]

line 18: []

line 19: [ds symbol{]

line 20: [    ptr string name;]

line 21: [    address def;]

line 22: [    vector<address> refs;]

line 23: [};]

line 24: [//----------]

line 25: [ds vector{]

line 26: [    float size;]

line 27: [    float capacity;]

line 28: [    ptr [capacity] float array;]

line 29: [};]

line 30: []

line 31: [//----------------------]

line 32: [ds boop{]

line 33: [    float adr;]

line 34: [    string name;]

line 35: [};]

line 36: []

line 37: [ds test{]

line 38: [    ptr string name;]

line 39: [    float [3] vec;]

line 40: [    float size;]

line 41: [    float num = 1;]

line 42: [    float where = &word;]

line 43: [    ptr [size] float arr1;]

line 44: [    [0] boop boops;]

line 45: [    cs vector V;]

line 46: [    float word;]

line 47: [    variant what(num) kerbal;]

line 48: [};]

line 49: []

line 50: [variant what{]

line 51: [  case 1:]

line 52: [        float beep;]

line 53: [        float bap;]

line 54: [        float boop;]

line 55: [  case 2:]

line 56: [        string hi;  ]

line 57: [};]

line 58: []

line 59: [//-------------------]

line 60: [void dsSerialize(ds object, destination);                //construct a serialized copy of an object in the destination]

line 61: [float dsSerializedSize(ds object);                       //calculate the size an object would have when serialized]

line 62: [ds* dsDeserialize(source);                               //construct a live copy of a previously serialized object  ]

line 63: [float dsDeserializedSize(source);                        //calculate the size of an object once deserialized]

line 64: [ds* dsNew(typeInfo);                                     //create a valid ds object]

line 65: [void dsSet(ds object, string param, auto value);         //set a variable in a ds object]

line 66: [ptr dsGet(ds object, string param);                      //get a pointer to a variable in a ds object]

line 67: [typeinfo dsGetType(ds object);                           //get the ds object type]

line 68: [bool dsVerify(ds object);                                //check that a ds object is healthy]

line 69: [bool dsVerifySerialized(source);                         //check that a serialized ds object is healthy]

line 70: [dsPrint(ds object);                                      //do a fancy print of all object properties]

line 71: [----------------------------------------]

line 72: [typeinfo{]

line 73: [    canary/typeof;]

line 74: [    string name;                //structure name]

line 75: [    float size;                 //0 for unknown]

line 76: [    float numExplicitEntries;   //how many entries are actual variables?]

line 77: [    float numTotalEntries;      //how many entries total (incl. type adapters)]

line 78: [    [numTotalEntries] typeentry entries;      //the list of entries.]

line 79: [}]

line 80: []

line 81: [entry{]

line 82: [    enum entryType; // float, string, addr, ptr, array, ds, cs, variant]

line 83: [    float param;    //array size (float), ds or cs typeinfo]

line 84: [    float subentry; //ptr to entry, array of size entry, variant choice]

line 85: [    string name;    //name of this property]

line 86: [}]

line 87: []

line 88: [//----------------------------------]

line 89: []

line 90: [*/]

line 91: []

line 92: []

line 93: [void printSymbol(float sym){]
found func printSymbol



sig1 = void printSymbol(float sym)
sig2 = (float sym)
found param sym

line 94: [    assert_type(sym,typeof_symbol);]
found reference to sym
currentFunc = printSymbol
ref sym is REF_STACK

line 95: [    float name = sym[1];]
found local var name (BL = 1)

line 96: [    float def = sym[2];]
found local var def (BL = 1)

line 97: [    float refs = sym[3];]
found local var refs (BL = 1)

line 98: [    printf("symbol [%s]\n",name);]
removed string literal ""symbol [%s]\n""
found reference to name
currentFunc = printSymbol
ref name is REF_STACK

line 99: [    if(def != -1){printf(" defined: %d\n",def);}]
removed string literal "" defined: %d\n""
found reference to def
currentFunc = printSymbol
ref def is REF_STACK

line 100: [    else{printf(" no def\n");}]
removed string literal "" no def\n""

line 101: [    if(refs){]
found reference to refs
currentFunc = printSymbol
ref refs is REF_STACK

line 102: [        float n = vector_get_size(refs);]
found local var n (BL = 2)

line 103: [        printf(" %d refs:\n",n);]
removed string literal "" %d refs:\n""
found reference to n
currentFunc = printSymbol
ref n is REF_STACK

line 104: [        float J = 0;]
found local var J (BL = 2)

line 105: [        for(J = 0; J < n; J++){]
found reference to J
currentFunc = printSymbol
ref J is REF_STACK

line 106: [            float r = vector_get(refs,0,J);]
found local var r (BL = 3)
found local var J (BL = 3)

line 107: [            printf("  @ %d\n",r);]
removed string literal ""  @ %d\n""

line 108: [        }]

line 109: [    }else{]

line 110: [        printf(" no refs\n");]
removed string literal "" no refs\n""

line 111: [    }]

line 112: [}]

line 113: []

line 114: [void printSymbolTable(float symtable){]
found func printSymbolTable



sig1 = void printSymbolTable(float symtable)
sig2 = (float symtable)
found param symtable

line 115: [    float I = 0;]
found local var I (BL = 1)

line 116: [    float size = vector_get_size(symtable);]
found local var size (BL = 1)
found reference to symtable
currentFunc = printSymbolTable
ref symtable is REF_STACK

line 117: [    for(I = 0; I < size; I++){]
found reference to I
currentFunc = printSymbolTable
ref I is REF_STACK

line 118: [        float sym = vector_get(symtable,0,I);]
found local var sym (BL = 2)
found local var I (BL = 2)

line 119: [        printSymbol(sym);]
found reference to printSymbol
currentFunc = printSymbolTable
ref printSymbol is REF_EXT
found reference to sym
currentFunc = printSymbolTable
ref sym is REF_STACK

line 120: [    }]

line 121: [}]

line 122: []

line 169: [#include <cyclone/progs/loader/executable.txt>]
found include <cyclone/progs/loader/executable.txt>
reading file cyclone/progs/loader/executable.txt

line 1: [//executable properties and info]

line 2: []

line 3: []

line 4: []

line 5: [void printProginfo(float proginfo){]
found func printProginfo



sig1 = void printProginfo(float proginfo)
sig2 = (float proginfo)
found param proginfo

line 6: [    assert_type(proginfo,typeof_proginfo);]
found reference to proginfo
currentFunc = printProginfo
ref proginfo is REF_STACK
found reference to typeof_proginfo
currentFunc = printProginfo
ref typeof_proginfo is REF_EXT

line 7: [    float ptr   = proginfo[1];]
found local var ptr (BL = 1)

line 8: [    float name  = proginfo[2];]
found local var name (BL = 1)

line 9: [    float entry = proginfo[3];]
found local var entry (BL = 1)

line 10: [    printf("program [%s]\n",name);]
removed string literal ""program [%s]\n""
found reference to name
currentFunc = printProginfo
ref name is REF_STACK

line 11: [    printf("code  @ %d\n",ptr);]
removed string literal ""code  @ %d\n""
found reference to ptr
currentFunc = printProginfo
ref ptr is REF_STACK

line 12: [    printf("entry @ %d\n",entry);]
removed string literal ""entry @ %d\n""
found reference to entry
currentFunc = printProginfo
ref entry is REF_STACK

line 13: [}]

line 14: []

line 15: []

line 16: [float make_proginfo(float ptr, float name, float entry){]
found func make_proginfo



sig1 = float make_proginfo(float ptr, float name, float entry)
sig2 = (float ptr, float name, float entry)
found param ptr
found param name
found param entry

line 17: [    printf("make_proginfo(%d, %s, %d)\n",ptr,name,entry);]
removed string literal ""make_proginfo(%d, %s, %d)\n""
found reference to ptr
currentFunc = make_proginfo
ref ptr is REF_STACK
found reference to name
currentFunc = make_proginfo
ref name is REF_STACK
found reference to entry
currentFunc = make_proginfo
ref entry is REF_STACK

line 18: [    float proginfo = malloc(sizeof_proginfo);]
found local var proginfo (BL = 1)
found reference to sizeof_proginfo
currentFunc = make_proginfo
ref sizeof_proginfo is REF_EXT

line 19: [    proginfo[0] = typeof_proginfo;]
found reference to proginfo
currentFunc = make_proginfo
ref proginfo is REF_STACK

line 20: [    proginfo[1] = ptr;]

line 21: [    proginfo[2] = str_alloc(name);]

line 22: [    proginfo[3] = entry;]

line 23: [//    proginfo[4] = getPageTable(); //=vector, and applyPageTable(v) and makePageTable().]

line 24: [    return proginfo;]

line 25: [}]

line 26: []

line 27: []

line 28: [float getTableEntry(float table, float entry, float *val){]
found func getTableEntry



sig1 = float getTableEntry(float table, float entry, float *val)
sig2 = (float table, float entry, float *val)
found param table
found param entry
found param val

line 29: [    float ptr = table;]
found local var ptr (BL = 1)
found reference to table
currentFunc = getTableEntry
ref table is REF_STACK

line 30: [    float found = 0;]
found local var found (BL = 1)

line 31: [    while(*ptr){]
found reference to ptr
currentFunc = getTableEntry
ref ptr is REF_STACK

line 32: [        if(ptr[0] == entry){]
found reference to entry
currentFunc = getTableEntry
ref entry is REF_STACK

line 33: [            *val = ptr[1];]
found reference to val
currentFunc = getTableEntry
ref val is REF_STACK

line 34: [            found = 1;]
found reference to found
currentFunc = getTableEntry
ref found is REF_STACK

line 35: [        }]

line 36: [        ptr+=2;]

line 37: [    }]

line 38: [    return found;]

line 39: [}]

line 40: []

line 41: [//struct tableEntry{]

line 42: [//  EnumProperty name;]

line 43: [//         float val;]

line 44: [//}]

line 45: [//]

line 46: [//typedef propertyTable null_term_array[tableEntry]]

line 47: []

line 48: [//a property table is a null-terminated array of property-value pairs]

line 49: [//where a property is a number between 6M and 7M as defined in <cyclone/defines.txt>]

line 50: [float isPropertyTable(float table){]
found func isPropertyTable



sig1 = float isPropertyTable(float table)
sig2 = (float table)
found param table

line 51: [    float I = 0;]
found local var I (BL = 1)

line 52: [    while(*table){]
found reference to table
currentFunc = isPropertyTable
ref table is REF_STACK

line 53: [        //printf("table %d = %d\n",I,table[0]);]
removed string literal ""table %d = %d\n""

line 54: [        if(table[0] < 6000000){return 0;}]

line 55: [        if(table[0]>= 7000000){return 0;}]

line 56: [        table += 2;]

line 57: [        I += 2;]
found reference to I
currentFunc = isPropertyTable
ref I is REF_STACK

line 58: [    }]

line 59: [    return 1;]

line 60: [}]

line 61: []

line 170: [#include <cyclone/defines.txt>]
found include <cyclone/defines.txt>
reading file cyclone/defines.txt

line 1: [//CycloneOS defines and enums]

line 2: [//number classification:]

line 3: [//7 aaa aaa - dummy addresses (usually for linking)]

line 4: [//6 xxx yyy - type and property names]

line 5: [//5 xxx yyy - enums / special constants]

line 6: [//  xxx - object type]

line 7: [//  yyy - enum number]

line 8: [//0 - 4 MB - normall addresses]

line 9: [//prefixes]

line 10: []

line 11: [//------------------- TYPES --------------------------------------]

line 12: [//vector, prefix V]

line 13: [#define T_VECTOR                    6001000]
#defined "T_VECTOR"

line 14: [//string, prefix S]

line 15: [#define T_STRING                    6002000]
#defined "T_STRING"

line 16: [//executable, prefix EXE]

line 17: [#define T_EXE                       6003000]
#defined "T_EXE"

line 18: [//section, prefix SEC]

line 19: [#define T_SECTION                   6004000]
#defined "T_SECTION"

line 20: [//symbol, prefix SYM]

line 21: [#define T_SYMBOL                    6005000]
#defined "T_SYMBOL"

line 22: [//proginfo, prefix PI]

line 23: [#define T_PROGINFO                  6006000]
#defined "T_PROGINFO"

line 24: [//file (executable), prefix FE]

line 25: [#define T_FILE_EXE                  6007000]
#defined "T_FILE_EXE"

line 26: [//typeinfo, prefix TI]

line 27: [#define T_TYPEINFO                  6008000]
#defined "T_TYPEINFO"

line 28: [//typeinfo_member, prefix TI_M]

line 29: [#define T_TYPEINFO_MEMBER           6009000]
#defined "T_TYPEINFO_MEMBER"

line 30: [//vtable, prefix VT]

line 31: [#define T_VTABLE                    6010000]
#defined "T_VTABLE"

line 32: [//------------------- PROPERTIES ---------------------------------]

line 33: [//size of program in bytes]

line 34: [#define P_FE_PROGRAMSIZE            6007001]
#defined "P_FE_PROGRAMSIZE"

line 35: [//base pointer for program block]

line 36: [#define P_FE_CODEBASE               6007002]
#defined "P_FE_CODEBASE"

line 37: [//base pointer for whole file]

line 38: [#define P_FE_FILEBASE               6007003]
#defined "P_FE_FILEBASE"

line 39: [//type of CycloneOS executable format]

line 40: [#define P_FE_EXE_STYLE              6007004]
#defined "P_FE_EXE_STYLE"

line 41: [//type of linking operation requested]

line 42: [#define P_FE_LINK_STYLE             6007005]
#defined "P_FE_LINK_STYLE"

line 43: [//program code (excluding prologue) starts here]

line 44: [#define P_FE_CODESTART              6007006]
#defined "P_FE_CODESTART"

line 45: [//if reference table is used, it's start and end]

line 46: [#define P_FE_REFTABLE_START         6007007]
#defined "P_FE_REFTABLE_START"

line 47: [#define P_FE_REFTABLE_END           6007008]
#defined "P_FE_REFTABLE_END"

line 48: [//------------------- ENUMS (EXE) --------------------------------]

line 49: [//Flat exe has entry point at 0 and no linking]

line 50: [#define EXE_STYLE_FLAT              5003001]
#defined "EXE_STYLE_FLAT"

line 51: [//AlcorPC exe has programsize at 0 and entry point at 1]

line 52: [#define EXE_STYLE_ALCOR             5003002]
#defined "EXE_STYLE_ALCOR"

line 53: [//All-function import/export table executables link to a specific version of the kernel]

line 54: [//and have an entry point immediately after the table ]

line 55: [#define EXE_STYLE_ALLFUNC           5003003]
#defined "EXE_STYLE_ALLFUNC"

line 56: [//symbol table executable programs have a symbol table for dynamic linking]

line 57: [//their entry points are defined by the symbol table]

line 58: [#define EXE_STYLE_SYMBOL            5003004]
#defined "EXE_STYLE_SYMBOL"

line 59: []

line 60: [//position-dependent code must be run from base address 0, be it physically, through paging, or through segmentation.]

line 61: [#define IS_POSITION_DEPENDENT       5003005]
#defined "IS_POSITION_DEPENDENT"

line 62: [//position-independent code can be relocated to arbitrary addresses and run from there.]

line 63: [#define IS_POSITION_INDEPENDENT     5003006]
#defined "IS_POSITION_INDEPENDENT"

line 64: []

line 65: [//no linking is necessary]

line 66: [#define LINK_STYLE_NONE             5003007]
#defined "LINK_STYLE_NONE"

line 67: [//needs to be static-linked]

line 68: [#define LINK_STATIC_REQUESTED       5003008]
#defined "LINK_STATIC_REQUESTED"

line 69: [//needs to be dynamic-linked]

line 70: [#define LINK_DYNAMIC_REQUESTED      5003009]
#defined "LINK_DYNAMIC_REQUESTED"

line 71: [//needs to have a dyn-table built from reftable]

line 72: [#define LINK_REFTABLE_REQUESTED     5003010]
#defined "LINK_REFTABLE_REQUESTED"

line 73: []

line 74: [//has no static-links applied yet]

line 75: [#define HAS_NO_STATIC_LINKS         5003010]
#defined "HAS_NO_STATIC_LINKS"

line 76: [//has static-links not in symbol table]

line 77: [#define HAS_STATIC_LINKS            5003011]
#defined "HAS_STATIC_LINKS"

line 78: [//-------------------- ENUMS (VTABLE) ----------------------------]

line 79: [#define VT_CONSTRUCTOR              5010001]
#defined "VT_CONSTRUCTOR"

line 80: [#define VT_DESTRUCTOR               5010002]
#defined "VT_DESTRUCTOR"

line 81: [#define VT_SERIALIZE                5010003]
#defined "VT_SERIALIZE"

line 82: [#define VT_DESERIALIZE              5010004]
#defined "VT_DESERIALIZE"

line 83: [#define VT_NEW                      5010005]
#defined "VT_NEW"

line 84: [#define VT_HERE                     5010006]
#defined "VT_HERE"

line 85: [#define VT_GET                      5010007]
#defined "VT_GET"

line 86: [#define VT_SET                      5010008]
#defined "VT_SET"

line 87: [#define VT_PUSH                     5010009]
#defined "VT_PUSH"

line 88: [#define VT_POP                      5010010]
#defined "VT_POP"

line 89: [#define VT_INSERT                   5010011]
#defined "VT_INSERT"

line 90: [#define VT_REMOVE                   5010012]
#defined "VT_REMOVE"

line 91: [#define VT_CLEAR                    5010013]
#defined "VT_CLEAR"

line 92: [#define VT_OPEN                     5010014]
#defined "VT_OPEN"

line 93: [#define VT_CLOSE                    5010015]
#defined "VT_CLOSE"

line 94: [#define VT_SEEK                     5010016]
#defined "VT_SEEK"

line 95: [#define VT_CALL                     5010017]
#defined "VT_CALL"

line 96: [#define VT_RESIZE                   5010018]
#defined "VT_RESIZE"

line 97: []

line 98: []

line 99: []

line 100: []

line 101: []

line 102: []

line 103: []

line 104: []

line 105: []

line 106: []

line 171: [typeof_exe: db "exe", 0;]
removed string literal ""exe""
found label typeof_exe

line 172: [float sizeof_exe = 6;]
found global var sizeof_exe

line 173: []

line 174: [typeof_section: db "section", db 0;]
removed string literal ""section""
found label typeof_section

line 175: [float sizeof_section = 4;]
found global var sizeof_section

line 176: []

line 177: [typeof_symbol: db "symbol", db 0;]
removed string literal ""symbol""
found label typeof_symbol

line 178: [float sizeof_symbol = 4;]
found global var sizeof_symbol

line 179: []

line 180: [float checkProgramHeader(float header){]
found func checkProgramHeader



sig1 = float checkProgramHeader(float header)
sig2 = (float header)
found param header

line 181: [    float debug = 0;]
found local var debug (BL = 1)

line 182: [    if(debug){]
found reference to debug
currentFunc = checkProgramHeader
ref debug is REF_STACK

line 183: [        float I = 0;]
found local var I (BL = 2)

line 184: [        printf("header:\n");]
removed string literal ""header:\n""

line 185: [        for(I = 0; I < 30; I++){]
found reference to I
currentFunc = checkProgramHeader
ref I is REF_STACK

line 186: [            printf("%d: %d\n",I,header[I]);]
removed string literal ""%d: %d\n""
found reference to header
currentFunc = checkProgramHeader
ref header is REF_STACK

line 187: [        }]

line 188: [    }]

line 189: [    //float header[10];]

line 190: [    //fseek(fp,0,0);]

line 191: [    //if(!fread(&header,10,fp)){printf("can't read header\n");return 0;}]
removed string literal ""can't read header\n""

line 192: [    //fseek(fp,0,0);]

line 193: [    ]

line 194: [    float _type = header[0];]
found local var _type (BL = 1)

line 195: [    float _exe_style = header[1];]
found local var _exe_style (BL = 1)

line 196: [    float _link_style = header[2];]
found local var _link_style (BL = 1)

line 197: [    float _has_static = header[3];]
found local var _has_static (BL = 1)

line 198: [    float _compile_timestamp = header[4];]
found local var _compile_timestamp (BL = 1)

line 199: [    float _section_list = header[5];]
found local var _section_list (BL = 1)

line 200: [    ]

line 201: [    //ignore type cause it may have moved]

line 202: [    ]

line 203: [    ]

line 204: [    /*]

line 205: [    float _size = header[0];]

line 206: [    float _main = header[1];]

line 207: [    float _style = header[2];]

line 208: [    float _version = header[3];]

line 209: [    float str;]

line 210: [    float c1 = _main <= 0; //can't have main at 0 cause that's where the header is]

line 211: [    float c2 = _size < 0;]

line 212: [    float c3 = _main > _size;]

line 213: [    float c4 = _size < 0;]

line 214: [    float c5 = _style > 3;]

line 215: [    float c6 = _version < 0;]

line 216: [    if(debug){]

line 217: [        printf("program header:\n");]
removed string literal ""program header:\n""

line 218: [        printf("size: %d\n",_size);]
removed string literal ""size: %d\n""

line 219: [        printf("main: %d\n",_main);]
removed string literal ""main: %d\n""

line 220: [        printf("style: %d\n",_style);]
removed string literal ""style: %d\n""

line 221: [        printf("version: %d\n",_version);]
removed string literal ""version: %d\n""

line 222: [        printf("conditions %d %d %d, %d %d %d \n",c1,c2,c3,c4,c5,c6);]
removed string literal ""conditions %d %d %d, %d %d %d \n""

line 223: [    }]

line 224: [    */]

line 225: [    float c1 = (_type == 0);]
found local var c1 (BL = 1)
found reference to _type
currentFunc = checkProgramHeader
ref _type is REF_STACK

line 226: [    float c2 = (_exe_style < 0);]
found local var c2 (BL = 1)
found reference to _exe_style
currentFunc = checkProgramHeader
ref _exe_style is REF_STACK

line 227: [    float c3 = (_exe_style > 3);]
found local var c3 (BL = 1)

line 228: [    float c4 = (_link_style < 0);]
found local var c4 (BL = 1)
found reference to _link_style
currentFunc = checkProgramHeader
ref _link_style is REF_STACK

line 229: [    float c5 = (_link_style > 3);]
found local var c5 (BL = 1)

line 230: [    float c6 = (_compile_timestamp < 0);]
found local var c6 (BL = 1)
found reference to _compile_timestamp
currentFunc = checkProgramHeader
ref _compile_timestamp is REF_STACK

line 231: [    float c7 = (_compile_timestamp == 0);]
found local var c7 (BL = 1)

line 232: [    float c8 = (_section_list < 0);]
found local var c8 (BL = 1)
found reference to _section_list
currentFunc = checkProgramHeader
ref _section_list is REF_STACK

line 233: [    float c9 = (_section_list == 0);]
found local var c9 (BL = 1)

line 234: [    ]

line 235: [    if(debug){]

line 236: [        printf("program header:\n");]
removed string literal ""program header:\n""

line 237: [        printf("exe style: %d\n",_exe_style);]
removed string literal ""exe style: %d\n""

line 238: [        printf("link style: %d\n",_link_style);]
removed string literal ""link style: %d\n""

line 239: [        printf("compile timestamp: %d\n",_compile_timestamp);]
removed string literal ""compile timestamp: %d\n""

line 240: [        printf("section list: %d\n",_section_list);]
removed string literal ""section list: %d\n""

line 241: [        if(_section_list > 0){]

line 242: [            float offs = header;]
found local var offs (BL = 3)

line 243: [            float sl_len = strlen(offs+_section_list);]
found local var sl_len (BL = 3)
found reference to offs
currentFunc = checkProgramHeader
ref offs is REF_STACK

line 244: [            printf("num sections: %d\n",sl_len);]
removed string literal ""num sections: %d\n""
found reference to sl_len
currentFunc = checkProgramHeader
ref sl_len is REF_STACK

line 245: [        }]

line 246: [        ]

line 247: [    }]

line 248: [    //if((_main <= 0) || (_size < 0) || (_main > _size) || (_size < 0) || (_style > 3) || (_version < 0)){]

line 249: [    if(c1+c2+c3+c4+c5+c6+c7+c8+c9){]
found reference to c1
currentFunc = checkProgramHeader
ref c1 is REF_STACK
found reference to c2
currentFunc = checkProgramHeader
ref c2 is REF_STACK
found reference to c3
currentFunc = checkProgramHeader
ref c3 is REF_STACK
found reference to c4
currentFunc = checkProgramHeader
ref c4 is REF_STACK
found reference to c5
currentFunc = checkProgramHeader
ref c5 is REF_STACK
found reference to c6
currentFunc = checkProgramHeader
ref c6 is REF_STACK
found reference to c7
currentFunc = checkProgramHeader
ref c7 is REF_STACK
found reference to c8
currentFunc = checkProgramHeader
ref c8 is REF_STACK
found reference to c9
currentFunc = checkProgramHeader
ref c9 is REF_STACK

line 250: [        printf("broken or unsupported program header\n");]
removed string literal ""broken or unsupported program header\n""

line 251: [        return 0;]

line 252: [    }]

line 253: [    /*]

line 254: [    if(_version < OSversion){]

line 255: [    ]

line 256: [        //skipped check]

line 257: [        ]

line 258: [        if(0){//if(_style == 1){]

line 259: [            printf("link-style is all-func inport/export table, but program older than kernel:\n");]
removed string literal ""link-style is all-func inport/export table, but program older than kernel:\n""

line 260: [            str = timeStampToString(OSversion);]

line 261: [            printf("kernel timestamp:\n%s\n",str);]
removed string literal ""kernel timestamp:\n%s\n""

line 262: [            str = timeStampToString(_version);]

line 263: [            printf("program timestamp:\n%s\n",str);]
removed string literal ""program timestamp:\n%s\n""

line 264: [            cph_YN_loop:]

line 265: [            printf("continue loading? Y/N\n");]
removed string literal ""continue loading? Y/N\n""

line 266: [            ]

line 267: [            if(!getYN()){return 0;}]

line 268: [        }]

line 269: [        ]

line 270: [        if(_style == 2){]

line 271: [            printf("link-style is compile-time static, but program older than kernel:\n");]
removed string literal ""link-style is compile-time static, but program older than kernel:\n""

line 272: [            str = timeStampToString(OSversion);]

line 273: [            printf("kernel timestamp:\n%s\n",str);]
removed string literal ""kernel timestamp:\n%s\n""

line 274: [            str = timeStampToString(_version);]

line 275: [            printf("program timestamp:\n%s\n",str);]
removed string literal ""program timestamp:\n%s\n""

line 276: [            printf("cannot continue loading.\n");]
removed string literal ""cannot continue loading.\n""

line 277: [            return 0;]

line 278: [        }  ]

line 279: [    }]

line 280: [    */]

line 281: [    return 1;]

line 282: [}]

line 283: []

line 284: [//loads programs]

line 285: [void msize(){return *AdrPort;}]
found func msize



sig1 = void msize()
sig2 = ()

line 286: [void mdump(float dest){]
found func mdump



sig1 = void mdump(float dest)
sig2 = (float dest)
found param dest

line 287: [    float size = msize();]
found local var size (BL = 1)
found reference to msize
currentFunc = mdump
ref msize is REF_EXT

line 288: [    memcpy(dest,AdrPort,size);]
found reference to dest
currentFunc = mdump
ref dest is REF_STACK

line 289: [    //P("dumped %d bytes to %d\n",size,dest);]
removed string literal ""dumped %d bytes to %d\n""

line 290: [}]

line 291: []

line 292: []

line 293: []

line 294: []

line 295: [float progressive_read(float ptr, float size, float fp, float step){]
found func progressive_read



sig1 = float progressive_read(float ptr, float size, float fp, float step)
sig2 = (float ptr, float size, float fp, float step)
found param ptr
found param size
found param fp
found param step

line 296: [    float sizeleft = size;]
found local var sizeleft (BL = 1)

line 297: [    float sizedone = 0;]
found local var sizedone (BL = 1)

line 298: [    float percent = 0;]
found local var percent (BL = 1)

line 299: [    PrintProgressBar(0);]

line 300: [    while(sizeleft){]
found reference to sizeleft
currentFunc = progressive_read
ref sizeleft is REF_STACK

line 301: [        if(step > sizeleft){step = sizeleft;}]
found reference to step
currentFunc = progressive_read
ref step is REF_STACK

line 302: [        if(!fread(ptr,step,fp)){return 0;}]
found reference to ptr
currentFunc = progressive_read
ref ptr is REF_STACK
found reference to fp
currentFunc = progressive_read
ref fp is REF_STACK

line 303: [        ptr = ptr+step;]

line 304: [        sizeleft = sizeleft-step;]

line 305: [        sizedone = sizedone+step;]
found reference to sizedone
currentFunc = progressive_read
ref sizedone is REF_STACK

line 306: [        percent = sizedone*100/size;]
found reference to percent
currentFunc = progressive_read
ref percent is REF_STACK

line 307: [        PrintProgressBar(percent);]

line 308: [    }]

line 309: [    return 1;]

line 310: [}]

line 311: []

line 312: []

line 313: [float mallocPageAligned(float size){]
found func mallocPageAligned



sig1 = float mallocPageAligned(float size)
sig2 = (float size)
found param size

line 314: [    float m = malloc(size+256);]
found local var m (BL = 1)

line 315: [    float page = toPage(m)+1;]
found local var page (BL = 1)
found reference to m
currentFunc = mallocPageAligned
ref m is REF_STACK

line 316: [    float ptr = page*128;]
found local var ptr (BL = 1)
found reference to page
currentFunc = mallocPageAligned
ref page is REF_STACK

line 317: [    return ptr;]
found reference to ptr
currentFunc = mallocPageAligned
ref ptr is REF_STACK

line 318: [}]

line 319: []

line 320: []

line 321: [float remapProgram(float ptr, float programsize){]
found func remapProgram



sig1 = float remapProgram(float ptr, float programsize)
sig2 = (float ptr, float programsize)
found param ptr
found param programsize

line 322: [    float page = ptr/128;]
found local var page (BL = 1)
found reference to ptr
currentFunc = remapProgram
ref ptr is REF_STACK

line 323: [    // round just in case]

line 324: [    mov eax, page;]
found reference to page
currentFunc = remapProgram
ref page is REF_STACK

line 325: [    frnd eax;]

line 326: [    mov page, eax;]

line 327: [    //]

line 328: [    float sizePages = toPage(programsize)+1;]
found local var sizePages (BL = 1)

line 329: [    float I;]
found local var I (BL = 1)

line 330: [    for(I = 0; I < sizePages; I++){]
found reference to I
currentFunc = remapProgram
ref I is REF_STACK
found reference to sizePages
currentFunc = remapProgram
ref sizePages is REF_STACK

line 331: [    //see void mapPage(float PT, float virt, float phys, float flags, float runlevel)]

line 332: [        mapPage(pageTable,I,page+I, page_remapped, 0);]
found reference to pageTable
currentFunc = remapProgram
ref pageTable is REF_EXT

line 333: [        //mapPage(I,page+I+1);        ]

line 334: [        //mapPage(page+I,I);]

line 335: [        printf("mapped virt %d to phys %d\n",I,page+I);]
removed string literal ""mapped virt %d to phys %d\n""

line 336: [    }]

line 337: [    printf("program uses %d k of v.space\n",sizePages*128/1024);]
removed string literal ""program uses %d k of v.space\n""

line 338: [}]

line 339: []

line 340: [float loadCode(float programcode, float programsize, float fp){]
found func loadCode



sig1 = float loadCode(float programcode, float programsize, float fp)
sig2 = (float programcode, float programsize, float fp)
found param programcode
found param programsize
found param fp

line 341: [    printf("loadCode(%d, %d, %d)\n",programcode, programsize, fp);]
removed string literal ""loadCode(%d, %d, %d)\n""
found reference to programcode
currentFunc = loadCode
ref programcode is REF_STACK
found reference to fp
currentFunc = loadCode
ref fp is REF_STACK

line 342: [    fseek(fp,programcode,0);]

line 343: [    ]

line 344: [    float ptr = mallocPageAligned(programsize);]
found local var ptr (BL = 1)
found reference to mallocPageAligned
currentFunc = loadCode
ref mallocPageAligned is REF_EXT

line 345: [        ]

line 346: [    //float prog = malloc(programsize+256);]

line 347: [    //if(!prog){Perr("not enough RAM to load program\n");}]
removed string literal ""not enough RAM to load program\n""

line 348: [    //float page = toPage(prog)+1;]

line 349: [    //float ptr = page*128;]

line 350: [       ]

line 351: [    //printf("ptr = %d\n",ptr);]
removed string literal ""ptr = %d\n""

line 352: [    //copy file contents to ptr+1 because cell[0] is progsize and erased during memdump]

line 353: [    float ticks = curticks();]
found local var ticks (BL = 1)

line 354: [    //if(!progressive_read(ptr+1,size,fp,500)){Perr("can't read file\n");}]
removed string literal ""can't read file\n""

line 355: [    if(!progressive_read(ptr,programsize,fp,4000)){Perr("can't read file\n"); shell_panic();}]
removed string literal ""can't read file\n""
found reference to progressive_read
currentFunc = loadCode
ref progressive_read is REF_EXT
found reference to ptr
currentFunc = loadCode
ref ptr is REF_STACK

line 356: [    P("\n");]
removed string literal ""\n""

line 357: [    ticks = ticks-curticks();]
found reference to ticks
currentFunc = loadCode
ref ticks is REF_STACK

line 358: [        ]

line 359: [    //remapProgram(ptr,programsize);    ]

line 360: [    return ptr;]

line 361: [}]

line 362: []

line 363: [//loads program from file to heap.]

line 364: [//links the program]

line 365: [//remaps the pages loaded to, so that they appear to start at IP 0]

line 366: []

line 367: [float program_load_old(float filename){]
found func program_load_old



sig1 = float program_load_old(float filename)
sig2 = (float filename)
found param filename

line 368: [    out 0,0;]

line 369: [    float fp  = fopen(filename, "r");]
removed string literal ""r""
found local var fp (BL = 1)
found reference to filename
currentFunc = program_load_old
ref filename is REF_STACK

line 370: [    if(!fp){Perr("can't open file\n");}]
removed string literal ""can't open file\n""
found reference to fp
currentFunc = program_load_old
ref fp is REF_STACK

line 371: [    //float size = fsize(fp);]

line 372: [    //P2("loading ",size,"+256 bytes\n");]
removed string literal ""loading ""
removed string literal ""+256 bytes\n""

line 373: [    ]

line 374: [    // ----------------- 1. read executable header to figure out where everything is -------------------]

line 375: [    //                                                  ]

line 376: [    printf("pl: reading exe header\n");]
removed string literal ""pl: reading exe header\n""

line 377: [    float buff[30]; ]
found local var buff (BL = 1)

line 378: [    float headersize = fsize(fp);]
found local var headersize (BL = 1)

line 379: [    if(headersize > 30){headersize = 30;}]
found reference to headersize
currentFunc = program_load_old
ref headersize is REF_STACK

line 380: [    fread(&buff,headersize,fp);]
found reference to buff
currentFunc = program_load_old
ref buff is REF_STACK

line 381: [    //byte 0 is programsize]

line 382: [    float header = buff+1;]
found local var header (BL = 1)

line 383: [    ]

line 384: [    if(!isPropertyTable(header)){Perr("Broken property table\n"); shell_panic();}]
removed string literal ""Broken property table\n""
found reference to isPropertyTable
currentFunc = program_load_old
ref isPropertyTable is REF_EXT
found reference to header
currentFunc = program_load_old
ref header is REF_STACK

line 385: [    ]

line 386: [    //float exe_style = header[1];]

line 387: [    //float programoffset = 0; //program is compiled at this address but moved to 0]

line 388: [    //float programentry = 0;//which virtual address to jump to when running]

line 389: [    float ptr_loaded = 0;  //location to which the program code was loaded]
found local var ptr_loaded (BL = 1)

line 390: [    float res = 0;]
found local var res (BL = 1)

line 391: [    ]

line 392: [    float filebase;    //all pointers within file are offset by this number]
found local var filebase (BL = 1)

line 393: [    float codebase;    //all pointers within code block are offset by this number]
found local var codebase (BL = 1)

line 394: [    float filesize;    //size of the program]
found local var filesize (BL = 1)

line 395: [    float exe_style;   //which executable file format is used]
found local var exe_style (BL = 1)

line 396: [    float link_style;  //type of linking op to perform]
found local var link_style (BL = 1)

line 397: [    float programcode; //pointer within file to program code]
found local var programcode (BL = 1)

line 398: [    float programentry;//address to jump to when running the program]
found local var programentry (BL = 1)

line 399: [    float codesize;    //size of the code block to load]
found local var codesize (BL = 1)

line 400: [    ]

line 401: [    float reftable_start;]
found local var reftable_start (BL = 1)

line 402: [    float reftable_end;]
found local var reftable_end (BL = 1)

line 403: []

line 404: [    ]

line 405: [    if(!getTableEntry(header,P_FE_EXE_STYLE,&exe_style)){Perr("EXE_STYLE not specified\n"); shell_panic();}]
removed string literal ""EXE_STYLE not specified\n""
found reference to getTableEntry
currentFunc = program_load_old
ref getTableEntry is REF_EXT
found reference to exe_style
currentFunc = program_load_old
ref exe_style is REF_STACK

line 406: [    if(!getTableEntry(header,P_FE_LINK_STYLE,&link_style)){Perr("LINK_STYLE not specified\n"); shell_panic();}]
removed string literal ""LINK_STYLE not specified\n""
found reference to link_style
currentFunc = program_load_old
ref link_style is REF_STACK

line 407: []

line 408: [    if(!getTableEntry(header,P_FE_FILEBASE,&filebase)){filebase = 0;}   ]
found reference to filebase
currentFunc = program_load_old
ref filebase is REF_STACK

line 409: [    if(!getTableEntry(header,P_FE_CODEBASE,&codebase)){codebase = filebase;}]
found reference to codebase
currentFunc = program_load_old
ref codebase is REF_STACK

line 410: [    if(!getTableEntry(header,P_FE_PROGRAMSIZE,&filesize)){filesize = fsize(fp);}]
found reference to filesize
currentFunc = program_load_old
ref filesize is REF_STACK

line 411: [    getTableEntry(header,P_FE_REFTABLE_START,&reftable_start);]
found reference to reftable_start
currentFunc = program_load_old
ref reftable_start is REF_STACK

line 412: [    reftable_start -= filebase;]

line 413: [    if(getTableEntry(header,P_FE_REFTABLE_END,&reftable_end)){reftable_end -= filebase; programcode = reftable_end;}]
found reference to reftable_end
currentFunc = program_load_old
ref reftable_end is REF_STACK
found reference to programcode
currentFunc = program_load_old
ref programcode is REF_STACK

line 414: [    ]

line 415: [    ]

line 416: [    if(!getTableEntry(header,P_FE_CODESTART,&programcode)){Perr("CODESTART not specified\n"); shell_panic();}]
removed string literal ""CODESTART not specified\n""

line 417: [    programcode -= filebase;]

line 418: [    programentry = programcode;   ]
found reference to programentry
currentFunc = program_load_old
ref programentry is REF_STACK

line 419: [    ]

line 420: [    codesize = filesize;]
found reference to codesize
currentFunc = program_load_old
ref codesize is REF_STACK

line 421: [    ]

line 422: [    printf("finished reading property table\n");]
removed string literal ""finished reading property table\n""

line 423: [    printf("filebase: %d\n",filebase);]
removed string literal ""filebase: %d\n""

line 424: [    printf("codebase: %d\n",codebase);]
removed string literal ""codebase: %d\n""

line 425: [    printf("filesize: %d\n",filesize);]
removed string literal ""filesize: %d\n""

line 426: [    printf("exe_style: %d\n",exe_style);]
removed string literal ""exe_style: %d\n""

line 427: [    printf("link_style: %d\n",link_style);]
removed string literal ""link_style: %d\n""

line 428: [    printf("programcode: %d\n",programcode);]
removed string literal ""programcode: %d\n""

line 429: [    printf("rfstart: %d\n",reftable_start);]
removed string literal ""rfstart: %d\n""

line 430: [    printf("rfend: %d\n",reftable_end);]
removed string literal ""rfend: %d\n""

line 431: [    printf("ptr_load: %d\n",ptr_loaded);]
removed string literal ""ptr_load: %d\n""
found reference to ptr_loaded
currentFunc = program_load_old
ref ptr_loaded is REF_STACK

line 432: [    printf("res: %d\n",res);]
removed string literal ""res: %d\n""
found reference to res
currentFunc = program_load_old
ref res is REF_STACK

line 433: []

line 434: [    //----------------- 2. different actions based on executable format -------------]

line 435: []

line 436: [    if(exe_style == EXE_STYLE_FLAT){]

line 437: [        //------------- 2.1 simply load for flat binaries ---------------------------]

line 438: [        printf("exe_style = 0\n");]
removed string literal ""exe_style = 0\n""

line 439: [        programentry = programcode;]

line 440: [        //fseek(fp,0,0);]

line 441: [        //fread(&header,3,fp);]

line 442: [        //programcode = 3;]

line 443: [        //programsize = header[2];]

line 444: [        //programentry = 0;]

line 445: [        ptr_loaded = loadCode(programcode,codesize,fp);]
found reference to loadCode
currentFunc = program_load_old
ref loadCode is REF_EXT

line 446: [        ]

line 447: [        res = make_proginfo(ptr_loaded, filename, programentry);]
found reference to make_proginfo
currentFunc = program_load_old
ref make_proginfo is REF_EXT

line 448: [        return res;]

line 449: [    }]

line 450: [    if(exe_style == EXE_STYLE_ALCOR){]

line 451: [        //-------------- 2.2 also simply load for alcorPC binaries]

line 452: [        printf("exe_style = 1\n");]
removed string literal ""exe_style = 1\n""

line 453: [        programentry = programcode+1;]

line 454: [        //fseek(fp,0,0);]

line 455: [        //fread(&header,3,fp);]

line 456: [        //programcode = 3;]

line 457: [        //programsize = header[2];]

line 458: [        //programentry = 1;]

line 459: [        ptr_loaded = loadCode(programcode,codesize,fp);]

line 460: [        ]

line 461: [        res = make_proginfo(ptr_loaded, filename, programentry);]

line 462: [        return res;]

line 463: [    }]

line 464: [    if(exe_style == EXE_STYLE_ALLFUNC){]

line 465: [        //-------------- 2.3 perform all-func-linking against binary for all-func binaries]

line 466: [        printf("exe_style = 2\n");]
removed string literal ""exe_style = 2\n""

line 467: [        programentry = programcode;]

line 468: [        //fseek(fp,0,0);]

line 469: [        //fread(&header,6,fp);]

line 470: [        ]

line 471: [        //programcode = 0;]

line 472: [        //programsize = header[2];]

line 473: [        //programentry = header[5];]

line 474: [        ptr_loaded = loadCode(programcode,codesize,fp);]

line 475: [        ]

line 476: [        linkAllFunc(header,ptr_loaded);]
found reference to linkAllFunc
currentFunc = program_load_old
ref linkAllFunc is REF_EXT

line 477: [        res = make_proginfo(ptr_loaded, filename, programentry);]

line 478: [        return res;]

line 479: [    }]

line 480: [    if(exe_style == EXE_STYLE_SYMBOL){]

line 481: [        //--------------- 2.4 do lots of symbol shit for symbol binaries]

line 482: [        if(link_style == LINK_REFTABLE_REQUESTED){]

line 483: [            //---------------- 2.4.1 the executable needs to have an intial symbol table constructed from a reference table]

line 484: [            printf("loading code for re-linking\n");]
removed string literal ""loading code for re-linking\n""

line 485: [            codesize = filesize-programcode;]

line 486: [            ]

line 487: [            ptr_loaded = loadCode(programcode,codesize,fp);]

line 488: [            ]

line 489: [            printf("loading reftable\n");]
removed string literal ""loading reftable\n""

line 490: [            float reftable_size = reftable_end - reftable_start;]
found local var reftable_size (BL = 3)

line 491: [            float reftable_loadsize = programcode - reftable_start;]
found local var reftable_loadsize (BL = 3)

line 492: [            float reftable = malloc(reftable_loadsize);]
found local var reftable (BL = 3)
found reference to reftable_loadsize
currentFunc = program_load_old
ref reftable_loadsize is REF_STACK

line 493: [            fseek(fp,reftable_start,0);]

line 494: [            if(!fread(reftable,reftable_loadsize,fp)){Perr("can't read reftable\n"); shell_panic();}]
removed string literal ""can't read reftable\n""
found reference to reftable
currentFunc = program_load_old
ref reftable is REF_STACK

line 495: [            printf("retable = %d\n",reftable);]
removed string literal ""retable = %d\n""

line 496: [            //struct symbol]

line 497: [            //0: typeof_symbol]

line 498: [            //1: string name]

line 499: [            //2: definition address]

line 500: [            //3: reference addresses (vector)]

line 501: [            ]

line 502: [            //float reftable2_size = reftable_end-reftable_start;]

line 503: [            float reftable2 = malloc(sizeof_vector);]
found local var reftable2 (BL = 3)

line 504: [            vector_constructor(reftable2,1);]
found reference to reftable2
currentFunc = program_load_old
ref reftable2 is REF_STACK

line 505: [            printf("reftable2 = %d\n",reftable2);]
removed string literal ""reftable2 = %d\n""

line 506: [            ]

line 507: [            float symTable = malloc(sizeof_vector);]
found local var symTable (BL = 3)

line 508: [            vector_constructor(symTable,1);]
found reference to symTable
currentFunc = program_load_old
ref symTable is REF_STACK

line 509: [            printf("symTable = %d\n",symTable);]
removed string literal ""symTable = %d\n""

line 510: [            //printf("reftable2_arr = %d\n",reftable2_arr);]
removed string literal ""reftable2_arr = %d\n""

line 511: [            ]

line 512: [            float sym;            ]
found local var sym (BL = 3)

line 513: [            ]

line 514: [            printf("making a symbol table\n");]
removed string literal ""making a symbol table\n""

line 515: [            float ptr_end = reftable + (reftable_end - reftable_start);]
found local var ptr_end (BL = 3)

line 516: [            float ptr = reftable;]
found local var ptr (BL = 3)

line 517: [            float ref_ptr;]
found local var ref_ptr (BL = 3)

line 518: [            float ref_name;]
found local var ref_name (BL = 3)

line 519: [            float ref_ext;]
found local var ref_ext (BL = 3)

line 520: [            float N = 0;]
found local var N (BL = 3)

line 521: [            PrintProgressBar(0);]

line 522: [            //----------------------------- i believe the reftable is being]

line 523: [            //                              deserialzied, and then has]

line 524: [            //                              it's addresses fixed from file-relative to RAM-absolute        ]

line 525: [            while(ptr < ptr_end){]
found reference to ptr
currentFunc = program_load_old
ref ptr is REF_STACK
found reference to ptr_end
currentFunc = program_load_old
ref ptr_end is REF_STACK

line 526: [                //go through the whole reftable]

line 527: [                //make make symbols, and put them in the second]

line 528: [                //reftable.]

line 529: [                ref_ptr = ptr[0];]
found reference to ref_ptr
currentFunc = program_load_old
ref ref_ptr is REF_STACK

line 530: [                ref_name = ptr[1]-filebase+reftable-reftable_start;]
found reference to ref_name
currentFunc = program_load_old
ref ref_name is REF_STACK

line 531: [                ref_ext = (ref_ptr == 0);//((ref_ptr-filebase+reftable-reftable_start) == 0)//ptr) ]
found reference to ref_ext
currentFunc = program_load_old
ref ref_ext is REF_STACK

line 532: [                ]

line 533: [                //printf("ptr = %d\n",ptr);]
removed string literal ""ptr = %d\n""

line 534: [                //printf("ref_ptr = %d\n",ref_ptr);]
removed string literal ""ref_ptr = %d\n""

line 535: [                //printf("ref \"%s\"\n",ref_name);]
removed string literal ""ref \"%s\"\n""

line 536: [                //printf("ext = %d\n", ref_ext);]
removed string literal ""ext = %d\n""

line 537: [                ]

line 538: [                //if(ref_ext){]

line 539: [                //    printf("ref \"%s\" (ext)\n",ref_name);]
removed string literal ""ref \"%s\" (ext)\n""

line 540: [                //}else{]

line 541: [                //    printf("ref \"%s\"\n",ref_name);]
removed string literal ""ref \"%s\"\n""

line 542: [                //}]

line 543: [                ]

line 544: [                sym = malloc(sizeof_symbol);]
found reference to sym
currentFunc = program_load_old
ref sym is REF_STACK
found reference to sizeof_symbol
currentFunc = program_load_old
ref sizeof_symbol is REF_EXT

line 545: [                sym[0] = typeof_symbol]

line 546: [                sym[1] = str_alloc(ref_name);]

line 547: [                ]

line 548: [                if(ref_ext){]

line 549: [                    sym[2] = 0;//check if external or not]

line 550: [                }else{]

line 551: [                    sym[2] = ptr;]

line 552: [                }]

line 553: [                float refvec = malloc(sizeof_vector);]
found local var refvec (BL = 4)

line 554: [                vector_constructor(refvec,1);]
found reference to refvec
currentFunc = program_load_old
ref refvec is REF_STACK

line 555: [                sym[3] = refvec;]

line 556: [                ]

line 557: [                vector_push(reftable2,ref_ptr);]

line 558: [                vector_push(reftable2,sym);]

line 559: [                vector_push(symTable,sym);]

line 560: [                //tip: read code once,]

line 561: [                //look for pointers to *anywhere* in reftable]

line 562: [                //then figure out specifics]

line 563: [                N++;]
found reference to N
currentFunc = program_load_old
ref N is REF_STACK

line 564: [                if(N > 20){]

line 565: [                    N = 0;]

line 566: [                    PrintProgressBar((ptr-reftable)*100/(ptr_end-reftable));]

line 567: [                }]

line 568: [                //printf("found %d refs\n",N);]
removed string literal ""found %d refs\n""

line 569: [                ptr += 2;]

line 570: [            }]

line 571: [            PrintProgressBar(100);]

line 572: [            printf("\n");]
removed string literal ""\n""

line 573: [            printf("codesize = %d\n",codesize);]
removed string literal ""codesize = %d\n""

line 574: [            printf("filesize = %d\n",filesize);]
removed string literal ""filesize = %d\n""

line 575: [            printf("symbolizing code\n");]
removed string literal ""symbolizing code\n""

line 576: [            ]

line 577: [            //----------------------------------- this next section does code relocation]

line 578: [            float reftable2_arr = vector_get_array(reftable2);]
found local var reftable2_arr (BL = 3)

line 579: [            N = 0;]

line 580: [            float ptr2 = ptr_loaded;]
found local var ptr2 (BL = 3)

line 581: [            float ptr2_end = ptr_loaded+codesize;]
found local var ptr2_end (BL = 3)

line 582: [            PrintProgressBar(0);]

line 583: [            out 0,1;]

line 584: [            float symsparsed = 0;]
found local var symsparsed (BL = 3)

line 585: [            float M = 0;]
found local var M (BL = 3)

line 586: [            while(ptr2 < ptr_end){]
found reference to ptr2
currentFunc = program_load_old
ref ptr2 is REF_STACK

line 587: [                out 0,2;]

line 588: [                ]

line 589: [                //------------------------------ r.1 loop begin]

line 590: [                if(*ptr2 >= filebase){ //aka 7M]

line 591: [                    out 0,3;]

line 592: [                    //printf("ptr2 = %d\n",ptr2);]
removed string literal ""ptr2 = %d\n""

line 593: [                    //printf("*ptr2 = %d\n",*ptr2);]
removed string literal ""*ptr2 = %d\n""

line 594: [                    //printf("filebase = %d\n",filebase);]
removed string literal ""filebase = %d\n""

line 595: [                    //printf("reftable2_arr = %d\n",reftable2_arr);]
removed string literal ""reftable2_arr = %d\n""

line 596: [                    //printf("reftable_start = %d\n",reftable_start);]
removed string literal ""reftable_start = %d\n""

line 597: [                    ]

line 598: [                    //address translation]

line 599: [                    //comment this out]

line 600: [                    //and pass translated address to "symbol search" function]
removed string literal ""symbol search""

line 601: [                    //that first checks it as ext.ref (this ptr = table ptr)]

line 602: [                    //and if not that then then goes through whole table]

line 603: [                    //looking for this ptr.]

line 604: [                    //float symptr = (*ptr2)-filebase+reftable2_arr-reftable_start;]

line 605: [                    ]

line 606: [                    //------------------------------------ check if it's an external reference]

line 607: [                    float symptr = 0;]
found local var symptr (BL = 5)

line 608: [                    float ptr_ref = *ptr2;]
found local var ptr_ref (BL = 5)

line 609: [                    float reftable_index = ptr_ref-filebase-reftable_start;]
found local var reftable_index (BL = 5)
found reference to ptr_ref
currentFunc = program_load_old
ref ptr_ref is REF_STACK

line 610: [                    float cond = 0;]
found local var cond (BL = 5)

line 611: [                    float ptrcode = ptr2-ptr_loaded+programcode;]
found local var ptrcode (BL = 5)

line 612: [                    out 0,4;]

line 613: [                    if(reftable_index < reftable_size){]
found reference to reftable_index
currentFunc = program_load_old
ref reftable_index is REF_STACK
found reference to reftable_size
currentFunc = program_load_old
ref reftable_size is REF_STACK

line 614: [                        out 0,5;]

line 615: [                        cond = 1;]
found reference to cond
currentFunc = program_load_old
ref cond is REF_STACK

line 616: [                        symptr = ptr_ref - filebase + reftable2_arr - reftable_start;]
found reference to symptr
currentFunc = program_load_old
ref symptr is REF_STACK
found reference to reftable2_arr
currentFunc = program_load_old
ref reftable2_arr is REF_STACK

line 617: [                        //--------------------------------------------------------------- ref is in the table, so it's external, so we grab a symbol in the table and continue.]

line 618: [                    }else{]

line 619: [                        out 0,6;]

line 620: [                        //continue;]

line 621: [                        goto symbolize_continue;]
found reference to symbolize_continue
currentFunc = program_load_old
ref symbolize_continue is REF_EXT

line 622: [                        ]

line 623: [                        //--------------------------------------------------------------- otherwise, ref is internal, and this code was supposed to search the table for it.]

line 624: [                        //                                                                the table-search loop was scrapped due to below problems.]

line 625: [                        //                                                                ]

line 626: [                    /*]

line 627: [                                                                                /------ problem ---------------------------------------------------\]

line 628: [                                                                                |  code is generated with labels like __temp that have             |]

line 629: [                                                                                |  program-internal address (between 70k and 70k+progsize).        |]

line 630: [                                                                                |  that means it is impossible to provide a symbol for every       |]

line 631: [                                                                                |  internal address at compile-time.                               |]

line 632: [                                                                                |  therefore, not every internal reference will have a symbol.     |]

line 633: [                                                                                +------ solution --------------------------------------------------+]

line 634: [                                                                                |  - internal addresses can be relocated without a symbol          |]

line 635: [                                                                                |  - anonymous symbols can be created during symtable generation   |]

line 636: [                                                                                \------------------------------------------------------------------/]

line 637: [                    ]

line 638: [                    ]

line 639: [                        apparrently we can't do internal variables because of]

line 640: [                        autogenerated labels like __6]

line 641: [                        fuuuuuuuuuuuuuuuuck]

line 642: [                                                                                /------ problem ---------------------------------------------------\]

line 643: [                        also there is the constexpr (Arr+1) problem but         |  you have a label "Arr";                                         |]
removed string literal ""Arr""

line 644: [                        making them floats instead of labels fixes that.        |  you want to calculate an offset from Arr, "Arr+1"               |]
removed string literal ""Arr+1""

line 645: [                                                                                |  the expression "Arr+1" is optimized away as a constexpr         |]
removed string literal ""Arr+1""

line 646: [                                                                                |  and the label value disappears from assembly.                   |]

line 647: [                                                                                |  therefore, the label is impossible to refer to by symbol.       |]

line 648: [                                                                                |  a reftable entry in the form of a label would sometimes fail.   |]

line 649: [                                                                                +------ solution --------------------------------------------------+]

line 650: [                                                                                |  reftable entries can all be made into variables,                |]

line 651: [                                                                                |  however this would cause every function call to be indirect,    |]

line 652: [                                                                                |  causing a performance hit.                                      |]

line 653: [                                                                                \------------------------------------------------------------------/]

line 654: [                        NOTE: for calls and jumps, also change RM value when relocating.]

line 655: [                        ]

line 656: [                        cond = 2;]

line 657: [                        //we search the table]

line 658: [                        //printf("searching table\n");]
removed string literal ""searching table\n""

line 659: [                        float I = 0;]

line 660: [                        while(I < reftable2_size){]

line 661: [                            //printf("I = %d, ptr = %d\n",I,reftable2_arr[I]);]
removed string literal ""I = %d, ptr = %d\n""

line 662: [                            if(reftable2_arr[I] == ptr_ref){]

line 663: [                                symptr = reftable2_arr+I;]

line 664: [                                sym = symptr[1];]

line 665: [                                //printf("found sym: %s\n",sym[1]);]
removed string literal ""found sym: %s\n""

line 666: [                                cond = 3;]

line 667: [                                break;]

line 668: [                            }else{]

line 669: [                                //printf("not ptr_ref %d\n",ptr_ref);]
removed string literal ""not ptr_ref %d\n""

line 670: [                            }]

line 671: [                            I += 2;]

line 672: [                        }]

line 673: [                        if(!symptr){]

line 674: [                            cond = 4;]

line 675: [                            printf("ref %d:\n",ptr_ref);]
removed string literal ""ref %d:\n""

line 676: [                            printf("not found, making new sym\n");]
removed string literal ""not found, making new sym\n""

line 677: [                            //printf("symbol not found\n"); shell_panic();]
removed string literal ""symbol not found\n""

line 678: [                            //so... sometimes HCOMP makes new labels]

line 679: [                            //that we don't have in source code. usually]

line 680: [                            //for things like "if", "for" and "while".]
removed string literal ""if""
removed string literal ""for""
removed string literal ""while""

line 681: [                            //so... we make a new symbol.]

line 682: [                            sym = malloc(sizeof_symbol);]

line 683: [                            sym[0] = typeof_symbol;]

line 684: [                            sym[1] = 0; //oh no nameless symbol, waaa]

line 685: [                            sym[2] = ptr_ref;]

line 686: [                            refvec = malloc(sizeof_vector);]

line 687: [                            vector_constructor(refvec,1);]

line 688: [                            sym[3] = refvec;]

line 689: [                            vector_push(symTable,sym);]

line 690: [                            ]

line 691: [                            vector_push(reftable2,ptr_ref);]

line 692: [                            vector_push(reftable2,sym);]

line 693: [                            reftable2_size = vector_get_size(reftable2); //hope I didn't]

line 694: [                            reftable2_arr = vector_get_array(reftable2); //forget anything]

line 695: [                            ]

line 696: [                            symptr = reftable2_arr+reftable2_size-2;]

line 697: [                        }]

line 698: [                        */]

line 699: [                    }]

line 700: [                    ]

line 701: [                    ]

line 702: [                    //printf("symptr = %d\n",symptr);]
removed string literal ""symptr = %d\n""

line 703: [                    //printf("symptr[0] = %d\n",symptr[0]);]
removed string literal ""symptr[0] = %d\n""

line 704: [                    //printf("symptr[1] = %d\n",symptr[1]);]
removed string literal ""symptr[1] = %d\n""

line 705: [                    //float c1 = (symptr[0] != *ptr2);]

line 706: [                    //float c2 = (symptr[0] < filebase);]

line 707: [                    //if(strcmp(sym[0],typeof_symbol) != 0)]

line 708: [                    out 0,7;]

line 709: [                    ]

line 710: [                    if((symptr%2) != (reftable2_arr %2)){]

line 711: [                        printf("reftable misalignment\n");]
removed string literal ""reftable misalignment\n""

line 712: [                        goto brokentables;]
found reference to brokentables
currentFunc = program_load_old
ref brokentables is REF_EXT

line 713: [                    }]

line 714: [                    ]

line 715: [                    //this is a temporary hack to find one very specific iteration ]

line 716: [                    // / pointer arithmetic bug.]

line 717: [                    if(symptr == 7000609)//if(ptr_ref == 7000609)]

line 718: [                    {]

line 719: [                        brokentables:]
found label brokentables

line 720: [                        printf("\ntables broke\n"); ]
removed string literal ""\ntables broke\n""

line 721: [                        printf("cond = %d\n",cond);]
removed string literal ""cond = %d\n""

line 722: [                        printf("symptr = %d\n",symptr);]
removed string literal ""symptr = %d\n""

line 723: [                        printf("symptr[0] = %d\n",symptr[0]);]
removed string literal ""symptr[0] = %d\n""

line 724: [                        printf("symptr[1] = %d\n",symptr[1]);]
removed string literal ""symptr[1] = %d\n""

line 725: [                        printf("*ptr2 = %d\n",*ptr2);]
removed string literal ""*ptr2 = %d\n""

line 726: [                        printf("ptr2 = %d\n",ptr2);]
removed string literal ""ptr2 = %d\n""

line 727: [                        float reftable2_size;]
found local var reftable2_size (BL = 6)

line 728: [                        reftable2_size = vector_get_size(reftable2);]
found reference to reftable2_size
currentFunc = program_load_old
ref reftable2_size is REF_STACK

line 729: [                        printf("ref2size = %d\n",reftable2_size);]
removed string literal ""ref2size = %d\n""

line 730: [                        printf("ref2arr = %d\n",reftable2_arr);]
removed string literal ""ref2arr = %d\n""

line 731: [                        printf("ptrcode = %d\n",ptrcode);]
removed string literal ""ptrcode = %d\n""
found reference to ptrcode
currentFunc = program_load_old
ref ptrcode is REF_STACK

line 732: [                        printf("symsparsed = %d\n",symsparsed);]
removed string literal ""symsparsed = %d\n""
found reference to symsparsed
currentFunc = program_load_old
ref symsparsed is REF_STACK

line 733: [                        printf("M = %d\n",M);]
removed string literal ""M = %d\n""
found reference to M
currentFunc = program_load_old
ref M is REF_STACK

line 734: [                        printf("filesize = %d\n",filesize);]
removed string literal ""filesize = %d\n""

line 735: [                        printf("codesize = %d\n",codesize);]
removed string literal ""codesize = %d\n""

line 736: [                        printf("programcode = %d\n",programcode);]
removed string literal ""programcode = %d\n""

line 737: [                        shell_panic();]

line 738: [                    }]

line 739: [                    out 0,8;]

line 740: [                    sym = symptr[1];]

line 741: [                    if(sym == 7000609){goto brokentables;}]

line 742: [                    ]

line 743: [                    out 0,9;]

line 744: [                    //printf("sym = %d\n",sym);]
removed string literal ""sym = %d\n""

line 745: [                    assert_type(sym,typeof_symbol);]

line 746: [                    out 0,10;]

line 747: [                    if((sym+3) == 7000609){goto brokentables;}]

line 748: [                    float refs = sym[3];]
found local var refs (BL = 5)

line 749: [                    out 0,11;]

line 750: [                    if(refs == 7000609){goto brokentables;}]
found reference to refs
currentFunc = program_load_old
ref refs is REF_STACK

line 751: [                    ]

line 752: [                    //printf("refs = %d\n",refs);]
removed string literal ""refs = %d\n""

line 753: [                    ref_ptr = ptr2-ptr_loaded;]

line 754: [                    out 0,12;]

line 755: [                    //printf("ref_ptr = %d\n",ref_ptr);]
removed string literal ""ref_ptr = %d\n""

line 756: [                    vector_push(refs,ref_ptr);]

line 757: [                    symsparsed++;]

line 758: [                    out 0,13;]

line 759: [                }]

line 760: [                //----------- if it's not a byte > 70k then it's not a code address]

line 761: [                symbolize_continue:]
found label symbolize_continue

line 762: [                out 0,14;]

line 763: [                N++;]

line 764: [                if(N > 500){                    ]

line 765: [                    out 0,15;]

line 766: [                    float percent = (ptr2-ptr_loaded)*100/codesize;]
found local var percent (BL = 5)

line 767: [                    PrintProgressBar(percent);]
found reference to percent
currentFunc = program_load_old
ref percent is REF_STACK

line 768: [                    N = 0;]

line 769: [                }]

line 770: [                //if(*ptr2 == ref_ptr){]

line 771: [                //    N++;]

line 772: [                //    *ptr2 = 0; //actually no we should add this position to symbol table]

line 773: [                   //that we should be making]

line 774: [                //}]

line 775: [                ptr2++;   ]

line 776: [                M++;       ]

line 777: [                out 0,16;]

line 778: [                //-------------- check the next byte in code.]

line 779: [            }]

line 780: [            out 0,17;]

line 781: [            PrintProgressBar(100);]

line 782: [            printf("\n");]
removed string literal ""\n""

line 783: [            printf("code symbolized\n")]
removed string literal ""code symbolized\n""

line 784: [            printf("printing symbol table\n");]
removed string literal ""printing symbol table\n""

line 785: [            printSymbolTable(symTable);            ]
found reference to printSymbolTable
currentFunc = program_load_old
ref printSymbolTable is REF_EXT

line 786: [        }]

line 787: [        ]

line 788: [        //ok we dont wanna break the rest of this stuff cause it's super fragile]

line 789: [        ]

line 790: [        printf("exe_style = 3\n");]
removed string literal ""exe_style = 3\n""

line 791: [        //fseek(fp,0,0);]

line 792: [        //fread(&header,sizeof_exe,fp);]

line 793: [        //if(!fread(&header,30,fp)){printf("can't read header\n");return 0;}]
removed string literal ""can't read header\n""

line 794: [        //if(!checkProgramHeader(header)){return 0;}]

line 795: [        ]

line 796: [        float ptrSectionList = header[5];]
found local var ptrSectionList (BL = 2)

line 797: [        float sectionList[2];]
found local var sectionList (BL = 2)

line 798: [        fseek(fp,ptrSectionList,0);]
found reference to ptrSectionList
currentFunc = program_load_old
ref ptrSectionList is REF_STACK

line 799: [        fread(sectionList,2,fp);]
found reference to sectionList
currentFunc = program_load_old
ref sectionList is REF_STACK

line 800: [        ]

line 801: [        //float sectionList = header+header[5];]

line 802: [        float sectionSymlist = sectionList[0];]
found local var sectionSymlist (BL = 2)

line 803: [        float sectionCode = sectionList[1];]
found local var sectionCode (BL = 2)

line 804: [        ]

line 805: [        float sectionSymHeader[4];]
found local var sectionSymHeader (BL = 2)

line 806: [        printf("pl: reading s.t. header\n");]
removed string literal ""pl: reading s.t. header\n""

line 807: [        fseek(fp,sectionSymlist,0);]
found reference to sectionSymlist
currentFunc = program_load_old
ref sectionSymlist is REF_STACK

line 808: [        if(!fread(sectionSymHeader,4,fp)){printf("can't read s.t. section header\n"); return 0;}]
removed string literal ""can't read s.t. section header\n""
found reference to sectionSymHeader
currentFunc = program_load_old
ref sectionSymHeader is REF_STACK

line 809: [        sectionSymHeader[0] = typeof_section;]
found reference to typeof_section
currentFunc = program_load_old
ref typeof_section is REF_EXT

line 810: [        //--assert_type(sectionSymHeader,typeof_section);]

line 811: [        ]

line 812: [        float sizeSymTable = sectionSymHeader[2];]
found local var sizeSymTable (BL = 2)

line 813: [        //--float numSyms = sizeSymTable/sizeof_symbol;]

line 814: [        float sectionSymTableData = sectionSymHeader[3];]
found local var sectionSymTableData (BL = 2)

line 815: [        printf("malloc(%d)\n",sizeSymTable);]
removed string literal ""malloc(%d)\n""
found reference to sizeSymTable
currentFunc = program_load_old
ref sizeSymTable is REF_STACK

line 816: [        float symTableData = malloc(sizeSymTable);]
found local var symTableData (BL = 2)

line 817: [        fseek(fp,sectionSymTableData,0);]
found reference to sectionSymTableData
currentFunc = program_load_old
ref sectionSymTableData is REF_STACK

line 818: [        if(!fread(symTableData,sizeSymTable,fp)){printf("can't read symtable data\n"); return 0;}]
removed string literal ""can't read symtable data\n""
found reference to symTableData
currentFunc = program_load_old
ref symTableData is REF_STACK

line 819: [        ]

line 820: [        float numSyms = symTableData[2];]
found local var numSyms (BL = 2)

line 821: [        //--printf("num symbols: %d\n",numSyms);]
removed string literal ""num symbols: %d\n""

line 822: [        ]

line 823: [        symTable = malloc(sizeof_vector);]

line 824: [        vector_constructor(symTable,1);]

line 825: [        float varray = symTableData+symTableData[1];]
found local var varray (BL = 2)

line 826: [        float I = 0;]
found local var I (BL = 2)

line 827: [        for(I = 0; I < numSyms; I++){]
found reference to I
currentFunc = program_load_old
ref I is REF_STACK
found reference to numSyms
currentFunc = program_load_old
ref numSyms is REF_STACK

line 828: [            ptr = varray+I;]
found reference to varray
currentFunc = program_load_old
ref varray is REF_STACK

line 829: [            //printf("symbol %d at %d\n",I,*ptr);]
removed string literal ""symbol %d at %d\n""

line 830: [            sym = *ptr+symTableData;]

line 831: [            sym[0] = typeof_symbol;   //typeofs get broken between compiles]

line 832: [                                      //so we need to restore them]

line 833: [            sym[1] += symTableData;   //name at offset]

line 834: [            if(sym[3]){]

line 835: [                sym[3] += symTableData;]

line 836: [                refs = sym[3];]

line 837: [                refs[0] = typeof_vector;]

line 838: [                refs[1] += symTableData;]

line 839: [            }]

line 840: [            vector_push(symTable,sym);]

line 841: [        }]

line 842: [        //printf("symbol table:\n");]
removed string literal ""symbol table:\n""

line 843: [        //printSymbolTable(symTable);]

line 844: [        printf("linking...\n");]
removed string literal ""linking...\n""

line 845: [        if(!linkSymbolTable(symTable)){return 0;}]
found reference to linkSymbolTable
currentFunc = program_load_old
ref linkSymbolTable is REF_EXT

line 846: [        ]

line 847: [        float sectionHeader[4];]
found local var sectionHeader (BL = 2)

line 848: [        printf("pl: reading c.s. header\n");]
removed string literal ""pl: reading c.s. header\n""

line 849: [        //printf("sectionCode = %d\n",sectionCode);]
removed string literal ""sectionCode = %d\n""

line 850: [        fseek(fp,sectionCode,0);]
found reference to sectionCode
currentFunc = program_load_old
ref sectionCode is REF_STACK

line 851: [        if(!fread(sectionHeader,4,fp)){printf("can't read c.s. section header\n"); return 0;}]
removed string literal ""can't read c.s. section header\n""
found reference to sectionHeader
currentFunc = program_load_old
ref sectionHeader is REF_STACK

line 852: [        sectionheader[0] = typeof_section;]

line 853: [        //assert_type(sectionheader,typeof_section);]

line 854: [        ]

line 855: [        float size = sectionHeader[2];]
found local var size (BL = 2)

line 856: [        float sectionData = sectionHeader[3];]
found local var sectionData (BL = 2)

line 857: [        printf("pl: reading program code\n");]
removed string literal ""pl: reading program code\n""

line 858: [        //printf("size = %d\n",size);]
removed string literal ""size = %d\n""

line 859: [        //printf("sectionData = %d\n",sectionData);]
removed string literal ""sectionData = %d\n""

line 860: [        ]

line 861: [        programcode = sectionData;]
found reference to sectionData
currentFunc = program_load_old
ref sectionData is REF_STACK

line 862: [        programsize = size;]

line 863: [        programentry = 0;]

line 864: [        ptr_loaded = loadCode(programcode, codesize, fp);]

line 865: [        ]

line 866: [        //P2("Load took ",ticks," ticks\n");]
removed string literal ""Load took ""
removed string literal "" ticks\n""

line 867: [        //program_link(ptr);]

line 868: [        printf("linking code\n");]
removed string literal ""linking code\n""

line 869: [        linkCode(ptr_loaded,symTable);]
found reference to linkCode
currentFunc = program_load_old
ref linkCode is REF_EXT

line 870: [        //printf("printing code listing\n");]
removed string literal ""printing code listing\n""

line 871: [        //printCodeListing(ptr,size);]

line 872: [        ]

line 873: [        //printf("ptr = %d\n",ptr);]
removed string literal ""ptr = %d\n""

line 874: [        ]

line 875: [        //delaysimple(5);]

line 876: [        //printf("halt");]
removed string literal ""halt""

line 877: [        //int 1;]

line 878: [        res = make_proginfo(ptr_loaded, filename, programentry);]

line 879: [        return res;]

line 880: [    }]

line 881: [    printf("usupported exe_style (%d)\n",exe_style);]
removed string literal ""usupported exe_style (%d)\n""

line 882: [    return 0;]

line 883: [}]

line 884: []

line 885: []

line 886: []

line 887: [void program_run_background(float args){]
found func program_run_background



sig1 = void program_run_background(float args)
sig2 = (float args)
found param args

line 888: [    float ptr = args[0];]
found local var ptr (BL = 1)
found reference to args
currentFunc = program_run_background
ref args is REF_STACK

line 889: [    float argv = args+1;]
found local var argv (BL = 1)

line 890: [    float argc = strlen(argv);]
found local var argc (BL = 1)
found reference to argv
currentFunc = program_run_background
ref argv is REF_STACK

line 891: [    program_run(ptr,argc,argv);]
found reference to ptr
currentFunc = program_run_background
ref ptr is REF_STACK
found reference to argc
currentFunc = program_run_background
ref argc is REF_STACK

line 892: [}]

line 893: []

line 894: [//runs the program by enabling paging and then jumping to it.]

line 895: [void program_run(float proginfo,float argc, float argv){]
found func program_run



sig1 = void program_run(float proginfo,float argc, float argv)
sig2 = (float proginfo,float argc, float argv)
found param proginfo
found param argc
found param argv

line 896: [    //P2("running program ",ptr, "\n");]
removed string literal ""running program ""
removed string literal ""\n""

line 897: [    float entry = proginfo[3];//ptr;//ptr[1];]
found local var entry (BL = 1)
found reference to proginfo
currentFunc = program_run
ref proginfo is REF_STACK

line 898: [    //P2("entry at ",entry,"\n");]
removed string literal ""entry at ""
removed string literal ""\n""

line 899: [    //P("derp?\n");]
removed string literal ""derp?\n""

line 900: [    //float import = ptr+2;]

line 901: [    //import[0] = testfunc;]

line 902: [    //printf("running\n");]
removed string literal ""running\n""

line 903: [    //out 0,1;]

line 904: [    pagingEnable();]
found reference to pagingEnable
currentFunc = program_run
ref pagingEnable is REF_EXT

line 905: [    //out 0,2;]

line 906: [    //call entry;]

line 907: [    entry(argc, argv);]
found reference to entry
currentFunc = program_run
ref entry is REF_STACK
found reference to argc
currentFunc = program_run
ref argc is REF_STACK
found reference to argv
currentFunc = program_run
ref argv is REF_STACK

line 908: [    //out 0,3;]

line 909: [    pagingDisable(); //libpaging.txt must be mapped to runlevel 0 because CLM is priviliged; else error 13.012.]
found reference to pagingDisable
currentFunc = program_run
ref pagingDisable is REF_EXT

line 910: [    //out 0,4;]

line 911: [    //P("program done\n");]
removed string literal ""program done\n""

line 912: [    //out 0,0;]

line 913: [}]

line 914: []

line 915: []

line 916: []

line 917: [//todo: make a process info structure, containing:]

line 918: [//filename of the loaded program]

line 919: [//acquired resources (prog allocation)]

line 920: [//page table (alloc and init new pagetables when loading)]

line 921: [//status (loaded, running, paused, finished)]

line 922: []

line 923: [float loadedProgs = 0;]
found global var loadedProgs

line 924: []

line 925: [float sizeof_proginfo = 4;]
found global var sizeof_proginfo

line 926: [typeof_proginfo: db "proginfo", db 0;]
removed string literal ""proginfo""
found label typeof_proginfo

line 927: []

line 928: [//proginfo]

line 929: [// 0: typeof]

line 930: [// 1: ptr]

line 931: [// 2: name]

line 932: [// 3: entry]

line 933: []

line 934: [float initLoader(){]
found func initLoader



sig1 = float initLoader()
sig2 = ()

line 935: [    initLoaderTypes();]
found reference to initLoaderTypes
currentFunc = initLoader
ref initLoaderTypes is REF_EXT

line 936: [    loadedProgs = malloc(sizeof_vector);]
found reference to loadedProgs
currentFunc = initLoader
ref loadedProgs is REF_EXT

line 937: [    vector_constructor(loadedProgs,1);]

line 938: [}]

line 939: []

line 940: [float addToLoadedPrograms(float ptr){]
found func addToLoadedPrograms



sig1 = float addToLoadedPrograms(float ptr)
sig2 = (float ptr)
found param ptr

line 941: [    if(!ptr){printf("program not loaded (nullptr)\n");return 0;}]
removed string literal ""program not loaded (nullptr)\n""
found reference to ptr
currentFunc = addToLoadedPrograms
ref ptr is REF_STACK

line 942: [    float name = ptr[2];]
found local var name (BL = 1)

line 943: [    float ptr2 = getLoadedProgram(name);]
found local var ptr2 (BL = 1)
found reference to name
currentFunc = addToLoadedPrograms
ref name is REF_STACK

line 944: [    if(ptr2){deleteLoadedProgram(name);}]
found reference to ptr2
currentFunc = addToLoadedPrograms
ref ptr2 is REF_STACK
found reference to deleteLoadedProgram
currentFunc = addToLoadedPrograms
ref deleteLoadedProgram is REF_EXT

line 945: [    //float ptr2 = getLoadedProgram(name);]

line 946: [    //if(ptr2){printf("[%s] already loaded\n",name); return ptr2;}]
removed string literal ""[%s] already loaded\n""

line 947: [    float proginfo = ptr;]
found local var proginfo (BL = 1)

line 948: [    //float proginfo = malloc(3);]

line 949: [    //proginfo[0] = typeof_proginfo;]

line 950: [    //proginfo[1] = ptr;]

line 951: [    //proginfo[2] = str_alloc(name);]

line 952: [    vector_push(loadedProgs,proginfo);]
found reference to proginfo
currentFunc = addToLoadedPrograms
ref proginfo is REF_STACK

line 953: [}]

line 954: []

line 955: [float deleteLoadedProgram(float name){]
found func deleteLoadedProgram



sig1 = float deleteLoadedProgram(float name)
sig2 = (float name)
found param name

line 956: [    float I = 0;]
found local var I (BL = 1)

line 957: [    float num = vector_get_size(loadedProgs);]
found local var num (BL = 1)

line 958: [    for(I = 0; I < num; I++){]
found reference to I
currentFunc = deleteLoadedProgram
ref I is REF_STACK
found reference to num
currentFunc = deleteLoadedProgram
ref num is REF_STACK

line 959: [        float proginfo = vector_get(loadedProgs,0,I);]
found local var proginfo (BL = 2)
found local var I (BL = 2)

line 960: [        assert_type(proginfo, typeof_proginfo);]
found reference to proginfo
currentFunc = deleteLoadedProgram
ref proginfo is REF_STACK

line 961: [        float name2 = proginfo[2];]
found local var name2 (BL = 2)

line 962: [        if(strcmp(name,name2) == 0){]
found reference to name
currentFunc = deleteLoadedProgram
ref name is REF_STACK
found reference to name2
currentFunc = deleteLoadedProgram
ref name2 is REF_STACK

line 963: [            //float ptr = proginfo[1];]

line 964: [            //free(ptr); actually ptr is page-aligned and the outside malloc is not.]

line 965: [            vector_remove(loadedProgs,0,I);]
found reference to vector_remove
currentFunc = deleteLoadedProgram
ref vector_remove is REF_EXT

line 966: [            I--; num--;]

line 967: [        }]

line 968: [    }]

line 969: [}]

line 970: []

line 971: [float getLoadedProgram(float name){]
found func getLoadedProgram



sig1 = float getLoadedProgram(float name)
sig2 = (float name)
found param name

line 972: [    printf("getLoadedProgram...\n");]
removed string literal ""getLoadedProgram...\n""

line 973: [    float I = 0;]
found local var I (BL = 1)

line 974: [    float num = vector_get_size(loadedProgs);]
found local var num (BL = 1)

line 975: [    for(I = 0; I < num; I++){]
found reference to I
currentFunc = getLoadedProgram
ref I is REF_STACK
found reference to num
currentFunc = getLoadedProgram
ref num is REF_STACK

line 976: [        float proginfo = vector_get(loadedProgs,0,I);]
found local var proginfo (BL = 2)
found local var I (BL = 2)

line 977: [        assert_type(proginfo, typeof_proginfo);]
found reference to proginfo
currentFunc = getLoadedProgram
ref proginfo is REF_STACK

line 978: [        float name2 = proginfo[2];]
found local var name2 (BL = 2)

line 979: [        if(strcmp(name,name2) == 0){]
found reference to name
currentFunc = getLoadedProgram
ref name is REF_STACK
found reference to name2
currentFunc = getLoadedProgram
ref name2 is REF_STACK

line 980: [            //float ptr = proginfo[1];]

line 981: [            return proginfo;//ptr;]

line 982: [        }]

line 983: [    }]

line 984: [    return 0;]

line 985: [}]

line 986: []

line 987: [float proginfoKind;]
found global var proginfoKind

line 988: [float codestoreKind;]
found global var codestoreKind

line 989: []

line 990: [float initLoaderTypes(){]
found func initLoaderTypes



sig1 = float initLoaderTypes()
sig2 = ()

line 991: [    proginfoKind = class_new("proginfo");]
removed string literal ""proginfo""
found reference to proginfoKind
currentFunc = initLoaderTypes
ref proginfoKind is REF_EXT

line 992: [    class_add_member(proginfoKind, "codestore");]
removed string literal ""codestore""

line 993: [    class_add_method(proginfoKind, "constructor", proginfoKind_constructor);]
removed string literal ""constructor""
found reference to proginfoKind_constructor
currentFunc = initLoaderTypes
ref proginfoKind_constructor is REF_EXT

line 994: []

line 995: [    codestoreKind = class_new("codestoreKind");]
removed string literal ""codestoreKind""
found reference to codestoreKind
currentFunc = initLoaderTypes
ref codestoreKind is REF_EXT

line 996: [    class_add_member(codestoreKind, "codeptr");]
removed string literal ""codeptr""

line 997: [    class_add_member(codestoreKind, "writeoffset");]
removed string literal ""writeoffset""

line 998: [    class_add_method(codestoreKind, "constructor", codestoreKind_constructor);]
removed string literal ""constructor""
found reference to codestoreKind_constructor
currentFunc = initLoaderTypes
ref codestoreKind_constructor is REF_EXT

line 999: [    class_add_method(codestoreKind, "readAddr", codestoreKind_readAddr);]
removed string literal ""readAddr""
found reference to codestoreKind_readAddr
currentFunc = initLoaderTypes
ref codestoreKind_readAddr is REF_EXT

line 1000: [    class_add_method(codestoreKind, "getAddr", codestoreKind_getAddr);]
removed string literal ""getAddr""
found reference to codestoreKind_getAddr
currentFunc = initLoaderTypes
ref codestoreKind_getAddr is REF_EXT

line 1001: [    class_add_method(codestoreKind, "setCode", codestoreKind_setCode);]
removed string literal ""setCode""
found reference to codestoreKind_setCode
currentFunc = initLoaderTypes
ref codestoreKind_setCode is REF_EXT

line 1002: [}]

line 1003: []

line 1004: [float proginfoKind_constructor(float this){]
found func proginfoKind_constructor



sig1 = float proginfoKind_constructor(float this)
sig2 = (float this)
found param this

line 1005: [    assert_arity(ecx,1);]

line 1006: [    mset(this,"codestore",0);]
removed string literal ""codestore""
found reference to this
currentFunc = proginfoKind_constructor
ref this is REF_STACK

line 1007: [    return 0;]

line 1008: [}]

line 1009: []

line 1010: [float codestoreKind_constructor(float this){]
found func codestoreKind_constructor



sig1 = float codestoreKind_constructor(float this)
sig2 = (float this)
found param this

line 1011: [    assert_arity(ecx,1);]

line 1012: [    mset(this,"codeptr",0);]
removed string literal ""codeptr""
found reference to this
currentFunc = codestoreKind_constructor
ref this is REF_STACK

line 1013: [    mset(this,"writeoffset",0);]
removed string literal ""writeoffset""

line 1014: [    return 0;]

line 1015: [}]

line 1016: []

line 1017: [//returns a byte of data written to the given write-pointer <addr>.]

line 1018: [float codestoreKind_readAddr(float this, float addr){]
found func codestoreKind_readAddr



sig1 = float codestoreKind_readAddr(float this, float addr)
sig2 = (float this, float addr)
found param this
found param addr

line 1019: [    assert_arity(ecx,2);]

line 1020: [    float offs = mget(this,"writeoffset");]
removed string literal ""writeoffset""
found local var offs (BL = 1)
found reference to this
currentFunc = codestoreKind_readAddr
ref this is REF_STACK

line 1021: [    float addr_true = addr-offs;]
found local var addr_true (BL = 1)
found reference to addr
currentFunc = codestoreKind_readAddr
ref addr is REF_STACK
found reference to offs
currentFunc = codestoreKind_readAddr
ref offs is REF_STACK

line 1022: [    float codeptr = mget(this,"codeptr");]
removed string literal ""codeptr""
found local var codeptr (BL = 1)

line 1023: [    float size = vector_size(codeptr);]
found local var size (BL = 1)
found reference to codeptr
currentFunc = codestoreKind_readAddr
ref codeptr is REF_STACK

line 1024: [    if((addr_true < 0) || (addr_true > size)){]
found reference to addr_true
currentFunc = codestoreKind_readAddr
ref addr_true is REF_STACK

line 1025: [        printf("%merror: address out of bounds\n",900);]
removed string literal ""%merror: address out of bounds\n""

line 1026: [        shell_panic();]

line 1027: [    }]

line 1028: [    float val = vector_get(codeptr,0,addr_true);]
found local var val (BL = 1)
found local var addr_true (BL = 1)

line 1029: [    return val;]
found reference to val
currentFunc = codestoreKind_readAddr
ref val is REF_STACK

line 1030: [}]

line 1031: []

line 1032: [//returns the write-pointer associated with the naked pointer <ptr>]

line 1033: [float codestoreKind_getAddr(float this, float ptr){]
found func codestoreKind_getAddr



sig1 = float codestoreKind_getAddr(float this, float ptr)
sig2 = (float this, float ptr)
found param this
found param ptr

line 1034: [    assert_arity(ecx,2);]

line 1035: [    float codeptr = mget(this,"codeptr");]
removed string literal ""codeptr""
found local var codeptr (BL = 1)
found reference to this
currentFunc = codestoreKind_getAddr
ref this is REF_STACK

line 1036: [    float offs = vector_get_array(codeptr);]
found local var offs (BL = 1)
found reference to codeptr
currentFunc = codestoreKind_getAddr
ref codeptr is REF_STACK

line 1037: [    float addr_true = ptr-offs;]
found local var addr_true (BL = 1)
found reference to ptr
currentFunc = codestoreKind_getAddr
ref ptr is REF_STACK
found reference to offs
currentFunc = codestoreKind_getAddr
ref offs is REF_STACK

line 1038: [    float size = vector_size(codeptr);]
found local var size (BL = 1)

line 1039: [    if((addr_true < 0) || (addr_true > size)){]
found reference to addr_true
currentFunc = codestoreKind_getAddr
ref addr_true is REF_STACK

line 1040: [        printf("%merror: pointer out of bounds\n",900);]
removed string literal ""%merror: pointer out of bounds\n""

line 1041: [        shell_panic();    ]

line 1042: [    }]

line 1043: [    float offs2 = mget(this,"writeoffset");]
removed string literal ""writeoffset""
found local var offs2 (BL = 1)

line 1044: [    float addr = addr_true+offs2;]
found local var addr (BL = 1)
found reference to offs2
currentFunc = codestoreKind_getAddr
ref offs2 is REF_STACK

line 1045: [    return addr;]
found reference to addr
currentFunc = codestoreKind_getAddr
ref addr is REF_STACK

line 1046: [}]

line 1047: []

line 1048: [float codestoreKind_setCode(float this, float newcodeptr){]
found func codestoreKind_setCode



sig1 = float codestoreKind_setCode(float this, float newcodeptr)
sig2 = (float this, float newcodeptr)
found param this
found param newcodeptr

line 1049: [    assert_arity(ecx,2);]

line 1050: [    assert_type(newcodeptr,typeof_vector);]
found reference to newcodeptr
currentFunc = codestoreKind_setCode
ref newcodeptr is REF_STACK

line 1051: [    mset(this,"codeptr",newcodeptr);]
removed string literal ""codeptr""
found reference to this
currentFunc = codestoreKind_setCode
ref this is REF_STACK

line 1052: [    return 0;]

line 1053: [}]

line 1054: []

line 1055: [float program_load(float filename){]
found func program_load



sig1 = float program_load(float filename)
sig2 = (float filename)
found param filename

line 1056: [    printf("load %s\n",filename);]
removed string literal ""load %s\n""
found reference to filename
currentFunc = program_load
ref filename is REF_STACK

line 1057: [    ]

line 1058: [    float fp  = fopen(filename, "r");]
removed string literal ""r""
found local var fp (BL = 1)

line 1059: [    if(!fp){Perr("can't open file\n");}]
removed string literal ""can't open file\n""
found reference to fp
currentFunc = program_load
ref fp is REF_STACK

line 1060: [    ]

line 1061: [    printf("reading file...\n");]
removed string literal ""reading file...\n""

line 1062: [    float filesize = fsize(fp);]
found local var filesize (BL = 1)

line 1063: [    float ptr_loaded;]
found local var ptr_loaded (BL = 1)

line 1064: [    ptr_loaded = loadCode(0,filesize,fp);]
found reference to ptr_loaded
currentFunc = program_load
ref ptr_loaded is REF_STACK
found reference to filesize
currentFunc = program_load
ref filesize is REF_STACK

line 1065: [    ]

line 1066: [    printf("organizing...\n");]
removed string literal ""organizing...\n""

line 1067: [    float codeptr = vector_new();]
found local var codeptr (BL = 1)

line 1068: [    vector_set_array(codeptr, ptr_loaded);]
found reference to codeptr
currentFunc = program_load
ref codeptr is REF_STACK

line 1069: [    vector_set_size(codeptr, filesize);]

line 1070: [    vector_set_capacity(codeptr, filesize);]

line 1071: [    ]

line 1072: [    float proginfo = new(proginfoKind);]
found local var proginfo (BL = 1)

line 1073: [    float codestore = new(codestoreKind);]
found local var codestore (BL = 1)

line 1074: [    mcall(codestore,"setCode",codeptr);]
removed string literal ""setCode""
found reference to codestore
currentFunc = program_load
ref codestore is REF_STACK

line 1075: [    ]

line 1076: [    float stable = ptr_loaded+1;]
found local var stable (BL = 1)

line 1077: [    printf("ptr_loaded = %d\n",ptr_loaded);]
removed string literal ""ptr_loaded = %d\n""

line 1078: [    ]

line 1079: [    float write_offset = stringtable_get_by_idx(stable,0); //implementation detail: write offset should be the first entry,]
found local var write_offset (BL = 1)
found reference to stringtable_get_by_idx
currentFunc = program_load
ref stringtable_get_by_idx is REF_EXT
found reference to stable
currentFunc = program_load
ref stable is REF_STACK

line 1080: [                                                           //else we can't access the strings in the stringtable.]

line 1081: [    ]

line 1082: [    mset(codestore,"writeoffset",write_offset);]
removed string literal ""writeoffset""
found reference to write_offset
currentFunc = program_load
ref write_offset is REF_STACK

line 1083: [    ]

line 1084: [    float addrmain;]
found local var addrmain (BL = 1)

line 1085: [    if(!stringtable_get(stable,"main",&addrmain,write_offset)){]
removed string literal ""main""
found reference to stringtable_get
currentFunc = program_load
ref stringtable_get is REF_EXT
found reference to addrmain
currentFunc = program_load
ref addrmain is REF_STACK

line 1086: [        printf("%merror: no main func specified\n");]
removed string literal ""%merror: no main func specified\n""

line 1087: [        shell_panic();]

line 1088: [    }]

line 1089: [    printf("addrmain = %d\n",addrmain);]
removed string literal ""addrmain = %d\n""

line 1090: [    float ptrmain = mcall(codestore,"getPtr",addrmain); ]
removed string literal ""getPtr""
found local var ptrmain (BL = 1)
found local var addrmain (BL = 1)

line 1091: [    printf("ptrmain = %d\n",ptrmain);]
removed string literal ""ptrmain = %d\n""
found reference to ptrmain
currentFunc = program_load
ref ptrmain is REF_STACK

line 1092: [    ]

line 1093: [    float byteAddrMain = mcall(codestore,"readAddr",addrmain);]
removed string literal ""readAddr""
found local var byteAddrMain (BL = 1)
found local var addrmain (BL = 1)

line 1094: [    printf("byteAddrMain = %d\n",byteAddrMain);]
removed string literal ""byteAddrMain = %d\n""
found reference to byteAddrMain
currentFunc = program_load
ref byteAddrMain is REF_STACK

line 1095: [    ]

line 1096: [    float bytePtrMain = *ptrmain;]
found local var bytePtrMain (BL = 1)

line 1097: [    printf("bytePtrMain = %d\n",bytePtrMain);]
removed string literal ""bytePtrMain = %d\n""
found reference to bytePtrMain
currentFunc = program_load
ref bytePtrMain is REF_STACK

line 1098: [    ]

line 1099: [    ]

line 1100: [    return 0;]

line 1101: [}]

line 1102: []

line 1103: [float stringtable_get_by_idx(float stable, float idx){]
found func stringtable_get_by_idx



sig1 = float stringtable_get_by_idx(float stable, float idx)
sig2 = (float stable, float idx)
found param stable
found param idx

line 1104: [    assert_arity(ecx,2);]

line 1105: [    float adr = idx*2;]
found local var adr (BL = 1)
found reference to idx
currentFunc = stringtable_get_by_idx
ref idx is REF_STACK

line 1106: [    adr = adr+1;]
found reference to adr
currentFunc = stringtable_get_by_idx
ref adr is REF_STACK

line 1107: [    return stable[adr];]
found reference to stable
currentFunc = stringtable_get_by_idx
ref stable is REF_STACK

line 1108: [}]

line 1109: []

line 1110: [float stringtable_get(float stable, float name, float *res, float write_offset){]
found func stringtable_get



sig1 = float stringtable_get(float stable, float name, float *res, float write_offset)
sig2 = (float stable, float name, float *res, float write_offset)
found param stable
found param name
found param res
found param write_offset

line 1111: [    assert_arity(ecx,4);]

line 1112: [    float I;]
found local var I (BL = 1)

line 1113: [    float S = stable[0];]
found local var S (BL = 1)
found reference to stable
currentFunc = stringtable_get
ref stable is REF_STACK

line 1114: [    S = S - write_offset;]
found reference to S
currentFunc = stringtable_get
ref S is REF_STACK
found reference to write_offset
currentFunc = stringtable_get
ref write_offset is REF_STACK

line 1115: [    float V = stable[1];]
found local var V (BL = 1)

line 1116: [    while(S){]

line 1117: [        if(strcmp(S,name) == 0){]
found reference to name
currentFunc = stringtable_get
ref name is REF_STACK

line 1118: [            *res = V;]
found reference to res
currentFunc = stringtable_get
ref res is REF_STACK
found reference to V
currentFunc = stringtable_get
ref V is REF_STACK

line 1119: [            return 1;]

line 1120: [        }]

line 1121: [        I = I+2;]
found reference to I
currentFunc = stringtable_get
ref I is REF_STACK

line 1122: [        S = stable[I];]

line 1123: [        S = S - write_offset;]

line 1124: [        V = stable[I+1];]

line 1125: [    }]

line 1126: [    return 0;]

line 1127: [}]

line 1128: []

line 1129: []

line 1130: []

line 1131: []

line 1132: []

line 1133: []

line 1134: []

line 1135: []

line 1136: []

line 1137: []

line 1138: []

line 1139: []

line 1140: []

line 1141: []

line 1142: []

line 193: [//program_load: //dummy]

line 194: [//addToLoadedPrograms://dummy]

line 195: [//printProgInfo: //dummy]

line 196: [//getLoadedProgram: //dummy]

line 197: [//program_run: //dummy]

line 198: [//program_run_background://dummy]

line 199: [Perr(str_thissuppressed);]
found reference to str_thissuppressed
no currentFunc
ref str_thissuppressed is REF_EXT

line 200: [shell_panic();]

line 201: [str_thissuppressed: db "This function is suppressed\n"; db 0;]
removed string literal ""This function is suppressed\n""
found label str_thissuppressed

line 202: [//#include <cyclone/progs/compiler.txt>]

line 203: [#include <cyclone/libs/libtrace.txt>]
found include <cyclone/libs/libtrace.txt>
reading file cyclone/libs/libtrace.txt

line 1: [//trace]

line 2: []

line 3: [//stack:]

line 4: [//]

line 5: [//]

line 6: [//]

line 7: [//]

line 8: [//]

line 9: []

line 10: [void getStackTrace(float buff){]
found func getStackTrace



sig1 = void getStackTrace(float buff)
sig2 = (float buff)
found param buff

line 11: [    float ptrBase;// = &buff+1;]
found local var ptrBase (BL = 1)

line 12: [    mov ptrBase, ebp;]
found reference to ptrBase
currentFunc = getStackTrace
ref ptrBase is REF_STACK

line 13: [    float ptrPrevIP = ptrBase+1;]
found local var ptrPrevIP (BL = 1)

line 14: [    float I = 0;]
found local var I (BL = 1)

line 15: [    while(I < 80){]
found reference to I
currentFunc = getStackTrace
ref I is REF_STACK

line 16: [        float prevIP = *ptrPrevIP;]
found local var prevIP (BL = 2)
found reference to ptrPrevIP
currentFunc = getStackTrace
ref ptrPrevIP is REF_STACK

line 17: [        //printf("I = %d, prevIP = %d\n",I,prevIP);]
removed string literal ""I = %d, prevIP = %d\n""

line 18: [        float prevBase = *ptrBase;]
found local var prevBase (BL = 2)

line 19: [        buff[I] = prevIP;]
found reference to buff
currentFunc = getStackTrace
ref buff is REF_STACK

line 20: [        I++;]

line 21: [        if(prevBase == 0){break;}]
found reference to prevBase
currentFunc = getStackTrace
ref prevBase is REF_STACK

line 22: [        ptrBase = prevBase;]

line 23: [        ptrPrevIP = ptrBase+1;]

line 24: [    }]

line 25: [    buff[I] = 0;]

line 26: [}]

line 27: []

line 28: [void printStackTrace(float buff){]
found func printStackTrace



sig1 = void printStackTrace(float buff)
sig2 = (float buff)
found param buff

line 29: [    /*]

line 30: [    printf("printing IPs\n");]
removed string literal ""printing IPs\n""

line 31: [    float I = 0;]

line 32: [    float fIP;]

line 33: [    while(buff[I] != 0){]

line 34: [        fIP = buff[I];]

line 35: [        printf("%d: %d\n",I,fIP);]
removed string literal ""%d: %d\n""

line 36: [        I++;]

line 37: [    }]

line 38: [    */]

line 39: [    //printf("printing funcs\n");]
removed string literal ""printing funcs\n""

line 40: [    printf("call trace:\n");]
removed string literal ""call trace:\n""

line 41: [    float I = 0;]
found local var I (BL = 1)

line 42: [    float fIP;]
found local var fIP (BL = 1)

line 43: [    while(buff[I] != 0){]
found reference to buff
currentFunc = printStackTrace
ref buff is REF_STACK
found reference to I
currentFunc = printStackTrace
ref I is REF_STACK

line 44: [        fIP = buff[I];]
found reference to fIP
currentFunc = printStackTrace
ref fIP is REF_STACK

line 45: [        float funcIP = findClosestFunc(fIP);]
found local var funcIP (BL = 2)
found reference to findClosestFunc
currentFunc = printStackTrace
ref findClosestFunc is REF_EXT

line 46: [        float funcName = getFuncName(funcIP);]
found local var funcName (BL = 2)
found reference to getFuncName
currentFunc = printStackTrace
ref getFuncName is REF_EXT
found reference to funcIP
currentFunc = printStackTrace
ref funcIP is REF_STACK

line 47: [        float IPdiff = fIP-funcIP;]
found local var IPdiff (BL = 2)

line 48: [        printf("%d: %s +%d\n",I,funcName,IPdiff);]
removed string literal ""%d: %s +%d\n""
found reference to funcName
currentFunc = printStackTrace
ref funcName is REF_STACK
found reference to IPdiff
currentFunc = printStackTrace
ref IPdiff is REF_STACK

line 49: [        I++;   ]

line 50: [    }]

line 51: [}]

line 52: []

line 53: [float findClosestFunc(float fIP){]
found func findClosestFunc



sig1 = float findClosestFunc(float fIP)
sig2 = (float fIP)
found param fIP

line 54: [    if(!fIP){return 0;}]
found reference to fIP
currentFunc = findClosestFunc
ref fIP is REF_STACK

line 55: [    float bestf = 0;]
found local var bestf (BL = 1)

line 56: [    float bestdiff = 9999999;]
found local var bestdiff (BL = 1)

line 57: [    float ptr = func_table;]
found local var ptr (BL = 1)
found reference to func_table
currentFunc = findClosestFunc
ref func_table is REF_EXT

line 58: [    while(ptr < func_table_end){]
found reference to ptr
currentFunc = findClosestFunc
ref ptr is REF_STACK
found reference to func_table_end
currentFunc = findClosestFunc
ref func_table_end is REF_EXT

line 59: [        //if(ptr[0] < fIP){f2 = ptr[0];}]

line 60: [        float f2 = ptr[0];]
found local var f2 (BL = 2)

line 61: [        if(f2 < fIP){]
found reference to f2
currentFunc = findClosestFunc
ref f2 is REF_STACK

line 62: [            float diff = fIP-f2;]
found local var diff (BL = 3)

line 63: [            if(diff < bestdiff){]
found reference to diff
currentFunc = findClosestFunc
ref diff is REF_STACK
found reference to bestdiff
currentFunc = findClosestFunc
ref bestdiff is REF_STACK

line 64: [                bestdiff = diff;]

line 65: [                bestf = f2;]
found reference to bestf
currentFunc = findClosestFunc
ref bestf is REF_STACK

line 66: [            }]

line 67: [        }]

line 68: [        ptr += 2;]

line 69: [    }]

line 70: [    return bestf;]

line 71: [}]

line 72: []

line 73: [float getFuncName(float fIP){]
found func getFuncName



sig1 = float getFuncName(float fIP)
sig2 = (float fIP)
found param fIP

line 74: [    if(!fIP){return 0;}]
found reference to fIP
currentFunc = getFuncName
ref fIP is REF_STACK

line 75: [    float ptr = func_table;]
found local var ptr (BL = 1)

line 76: [    while(ptr < func_table_end){]
found reference to ptr
currentFunc = getFuncName
ref ptr is REF_STACK

line 77: [        if(ptr[0] == fIP){return ptr[1];}]

line 78: [        ptr += 2;]

line 79: [    }]

line 80: [    return 0;]

line 81: [}]

line 82: []

line 83: [float getVarName(float vIP){]
found func getVarName



sig1 = float getVarName(float vIP)
sig2 = (float vIP)
found param vIP

line 84: [    if(!vIP){return 0;}]
found reference to vIP
currentFunc = getVarName
ref vIP is REF_STACK

line 85: [    float ptr = var_table;]
found local var ptr (BL = 1)
found reference to var_table
currentFunc = getVarName
ref var_table is REF_EXT

line 86: [    while(ptr < var_table_end){]
found reference to ptr
currentFunc = getVarName
ref ptr is REF_STACK
found reference to var_table_end
currentFunc = getVarName
ref var_table_end is REF_EXT

line 87: [        if(ptr[0] == vIP){return ptr[1];}]

line 88: [        ptr += 2;]

line 89: [    }]

line 90: [    return 0;]

line 91: [}]

line 92: []

line 93: [float getSymbolName(float sIP){]
found func getSymbolName



sig1 = float getSymbolName(float sIP)
sig2 = (float sIP)
found param sIP

line 94: [    float name = getFuncName(sIP);]
found local var name (BL = 1)
found reference to sIP
currentFunc = getSymbolName
ref sIP is REF_STACK

line 95: [    if(!name){name = getVarName(sIP);}]
found reference to name
currentFunc = getSymbolName
ref name is REF_STACK
found reference to getVarName
currentFunc = getSymbolName
ref getVarName is REF_EXT

line 96: [    return name;]

line 97: [}]

line 98: []

line 99: [float findSymbolByName(float name){]
found func findSymbolByName



sig1 = float findSymbolByName(float name)
sig2 = (float name)
found param name

line 100: [    float def = findFuncByName(name);]
found local var def (BL = 1)
found reference to name
currentFunc = findSymbolByName
ref name is REF_STACK

line 101: [    if(def == -1){def = findVarByName(name);}]
found reference to def
currentFunc = findSymbolByName
ref def is REF_STACK

line 102: [    return def;]

line 103: [}]

line 104: []

line 105: [float findFuncByName(float name){]
found func findFuncByName



sig1 = float findFuncByName(float name)
sig2 = (float name)
found param name

line 106: [    float ptr = func_table;]
found local var ptr (BL = 1)

line 107: [    while(ptr < func_table_end){]
found reference to ptr
currentFunc = findFuncByName
ref ptr is REF_STACK

line 108: [        float name2 = ptr[1];]
found local var name2 (BL = 2)

line 109: [        if(strcmp(name2,name) == 0){]
found reference to name2
currentFunc = findFuncByName
ref name2 is REF_STACK
found reference to name
currentFunc = findFuncByName
ref name is REF_STACK

line 110: [            return ptr[0];]

line 111: [        }]

line 112: [        ptr += 2;]

line 113: [    }]

line 114: [    return -1;]

line 115: [}]

line 116: []

line 117: [float findVarByName(float name){]
found func findVarByName



sig1 = float findVarByName(float name)
sig2 = (float name)
found param name

line 118: [    float ptr = var_table;]
found local var ptr (BL = 1)

line 119: [    while(ptr < var_table_end){]
found reference to ptr
currentFunc = findVarByName
ref ptr is REF_STACK

line 120: [        float name2 = ptr[1];]
found local var name2 (BL = 2)

line 121: [        if(strcmp(name2,name) == 0){]
found reference to name2
currentFunc = findVarByName
ref name2 is REF_STACK
found reference to name
currentFunc = findVarByName
ref name is REF_STACK

line 122: [            return ptr[0];]

line 123: [        }]

line 124: [        ptr += 2;]

line 125: [    }]

line 126: [    return -1;]

line 127: [}]

line 128: []

line 129: []

line 130: []

line 131: []

line 132: []

line 133: []

line 134: []

line 135: []

line 204: [#include <cyclone/generated/func_table.txt>]
found include <cyclone/generated/func_table.txt>
reading file cyclone/generated/func_table.txt

line 1: [#ifndef CYCLONE_BUILDER]
#ifndef "CYCLONE_BUILDER" (defined)

line 2: [func_table:]

line 3: [db boot, db str_boot;]

line 4: [db nullcall_error, db str_nullcall_error;]

line 5: [db init_hardware, db str_init_hardware;]

line 6: [db memcpy, db str_memcpy;]

line 7: [db memchr, db str_memchr;]

line 8: [db memset, db str_memset;]

line 9: [db strcat, db str_strcat;]

line 10: [db strncat, db str_strncat;]

line 11: [db strchr, db str_strchr;]

line 12: [db strrchr, db str_strrchr;]

line 13: [db strcmp, db str_strcmp;]

line 14: [db strncmp, db str_strncmp;]

line 15: [db strcpy, db str_strcpy;]

line 16: [db strncpy, db str_strncpy;]

line 17: [db strlen, db str_strlen;]

line 18: [db strspn, db str_strspn;]

line 19: [db strcspn, db str_strcspn;]

line 20: [db strpbrk, db str_strpbrk;]

line 21: [db strstr, db str_strstr;]

line 22: [db explode, db str_explode;]

line 23: [db str2num, db str_str2num;]

line 24: [db getNdigit, db str_getNdigit;]

line 25: [db num2strSet, db str_num2strSet;]

line 26: [db num2str, db str_num2str;]

line 27: [db Nlog, db str_Nlog;]

line 28: [db isPrint, db str_isPrint;]

line 29: [db isNum, db str_isNum;]

line 30: [db isAlpha, db str_isAlpha;]

line 31: [db toLower, db str_toLower;]

line 32: [db toUpper, db str_toUpper;]

line 33: [db Con, db str_Con;]

line 34: [db concat, db str_concat;]

line 35: [db c2str, db str_c2str;]

line 36: [db unescapeStr, db str_unescapeStr;]

line 37: [db cstr_find_first_of, db str_cstr_find_first_of;]

line 38: [db cstr_find_last_of, db str_cstr_find_last_of;]

line 39: [db stack_copy, db str_stack_copy;]

line 40: [db cstr_stack_copy, db str_cstr_stack_copy;]

line 41: [db isspace, db str_isspace;]

line 42: [db stralloc, db str_stralloc;]

line 43: [db P, db str_P;]

line 44: [db Pc, db str_Pc;]

line 45: [db Pn, db str_Pn;]

line 46: [db Pl, db str_Pl;]

line 47: [db P2, db str_P2;]

line 48: [db Perr, db str_Perr;]

line 49: [db Print, db str_Print;]

line 50: [db printword, db str_printword;]

line 51: [db mcs_putchar, db str_mcs_putchar;]

line 52: [db cs_putchar, db str_cs_putchar;]

line 53: [db ConsoleShiftUp, db str_ConsoleShiftUp;]

line 54: [db ConsoleShiftDown, db str_ConsoleShiftDown;]

line 55: [db pow, db str_pow;]

line 56: [db modulo, db str_modulo;]

line 57: [db sqrt, db str_sqrt;]

line 58: [db cbrt, db str_cbrt;]

line 59: [db root, db str_root;]

line 60: [db e, db str_e;]

line 61: [db exp, db str_exp;]

line 62: [db ln, db str_ln;]

line 63: [db log2, db str_log2;]

line 64: [db log10, db str_log10;]

line 65: [db log, db str_log;]

line 66: [db abs, db str_abs;]

line 67: [db ceil, db str_ceil;]

line 68: [db floor, db str_floor;]

line 69: [db round, db str_round;]

line 70: [db integer, db str_integer;]

line 71: [db frac, db str_frac;]

line 72: [db clamp, db str_clamp;]

line 73: [db inrange, db str_inrange;]

line 74: [db minimal, db str_minimal;]

line 75: [db maximal, db str_maximal;]

line 76: [db random, db str_random;]

line 77: [db random1, db str_random1;]

line 78: [db random2, db str_random2;]

line 79: [db randint1, db str_randint1;]

line 80: [db randint2, db str_randint2;]

line 81: [db pi, db str_pi;]

line 82: [db toRad, db str_toRad;]

line 83: [db toDeg, db str_toDeg;]

line 84: [db sin, db str_sin;]

line 85: [db cos, db str_cos;]

line 86: [db tan, db str_tan;]

line 87: [db cot, db str_cot;]

line 88: [db sec, db str_sec;]

line 89: [db csc, db str_csc;]

line 90: [db asin, db str_asin;]

line 91: [db acos, db str_acos;]

line 92: [db atan, db str_atan;]

line 93: [db sinh, db str_sinh;]

line 94: [db cosh, db str_cosh;]

line 95: [db tanh, db str_tanh;]

line 96: [db coth, db str_coth;]

line 97: [db sech, db str_sech;]

line 98: [db csch, db str_csch;]

line 99: [db sinr, db str_sinr;]

line 100: [db cosr, db str_cosr;]

line 101: [db tanr, db str_tanr;]

line 102: [db cotr, db str_cotr;]

line 103: [db secr, db str_secr;]

line 104: [db cscr, db str_cscr;]

line 105: [db asinr, db str_asinr;]

line 106: [db acosr, db str_acosr;]

line 107: [db atanr, db str_atanr;]

line 108: [db ceil2, db str_ceil2;]

line 109: [db floor2, db str_floor2;]

line 110: [db round2, db str_round2;]

line 111: [db printf, db str_printf;]

line 112: [db compileTimeStamp, db str_compileTimeStamp;]

line 113: [db currentTimeStamp, db str_currentTimeStamp;]

line 114: [db decodeTimeStamp, db str_decodeTimeStamp;]

line 115: [db monthToString, db str_monthToString;]

line 116: [db timeStampToString, db str_timeStampToString;]

line 117: [db PrintStringXY, db str_PrintStringXY;]

line 118: [db printCharXY, db str_printCharXY;]

line 119: [db delaysimple, db str_delaysimple;]

line 120: [db screen_set, db str_screen_set;]

line 121: [db screen_clear, db str_screen_clear;]

line 122: [db screen_cursor_enable, db str_screen_cursor_enable;]

line 123: [db screen_cursor_disable, db str_screen_cursor_disable;]

line 124: [db screen_set_cursor_pos, db str_screen_set_cursor_pos;]

line 125: [db screen_set_cursor_pos_xy, db str_screen_set_cursor_pos_xy;]

line 126: [db screen_force_refresh, db str_screen_force_refresh;]

line 127: [db screen_set_shift_box_x1, db str_screen_set_shift_box_x1;]

line 128: [db screen_set_shift_box_x2, db str_screen_set_shift_box_x2;]

line 129: [db screen_set_shift_box_y1, db str_screen_set_shift_box_y1;]

line 130: [db screen_set_shift_box_y2, db str_screen_set_shift_box_y2;]

line 131: [db screen_set_shift_box, db str_screen_set_shift_box;]

line 132: [db screen_set_print_box, db str_screen_set_print_box;]

line 133: [db screen_shift_vertical, db str_screen_shift_vertical;]

line 134: [db screen_shift_horizontal, db str_screen_shift_horizontal;]

line 135: [db screen_set_blink_rate, db str_screen_set_blink_rate;]

line 136: [db screen_set_cursor_size, db str_screen_set_cursor_size;]

line 137: [db mcs_screen_clear, db str_mcs_screen_clear;]

line 138: [db mcs_screen_force_refresh, db str_mcs_screen_force_refresh;]

line 139: [db mcs_init, db str_mcs_init;]

line 140: [db mcs_screen_shift_vertical, db str_mcs_screen_shift_vertical;]

line 141: [db mcs_screen_set_shift_box, db str_mcs_screen_set_shift_box;]

line 142: [db mcs_screen_set_cursor_pos_xy, db str_mcs_screen_set_cursor_pos_xy;]

line 143: [db mcs_screen_cursor_enable, db str_mcs_screen_cursor_enable;]

line 144: [db mcs_screen_cursor_disable, db str_mcs_screen_cursor_disable;]

line 145: [db mcs_set_blink_rate, db str_mcs_set_blink_rate;]

line 146: [db mcs_set_cursor_size, db str_mcs_set_cursor_size;]

line 147: [db memcpy2, db str_memcpy2;]

line 148: [db allocation_constructor, db str_allocation_constructor;]

line 149: [db allocation_set_size, db str_allocation_set_size;]

line 150: [db allocation_set_owner, db str_allocation_set_owner;]

line 151: [db allocation_set_prev, db str_allocation_set_prev;]

line 152: [db allocation_set_next, db str_allocation_set_next;]

line 153: [db allocation_get_size, db str_allocation_get_size;]

line 154: [db allocation_get_owner, db str_allocation_get_owner;]

line 155: [db allocation_get_prev, db str_allocation_get_prev;]

line 156: [db allocation_get_next, db str_allocation_get_next;]

line 157: [db malloc_getAllocation, db str_malloc_getAllocation;]

line 158: [db malloc_getDataFromIndex, db str_malloc_getDataFromIndex;]

line 159: [db malloc_getDataFromAllocation, db str_malloc_getDataFromAllocation;]

line 160: [db malloc_getIndex, db str_malloc_getIndex;]

line 161: [db malloc_trySplit, db str_malloc_trySplit;]

line 162: [db malloc_join, db str_malloc_join;]

line 163: [db malloc_set_disk, db str_malloc_set_disk;]

line 164: [db malloc_init, db str_malloc_init;]

line 165: [db malloc_test, db str_malloc_test;]

line 166: [db malloc_print_count, db str_malloc_print_count;]

line 167: [db malloc_count, db str_malloc_count;]

line 168: [db printAllocationSimple, db str_printAllocationSimple;]

line 169: [db printAllocation, db str_printAllocation;]

line 170: [db mallocLast, db str_mallocLast;]

line 171: [db malloc, db str_malloc;]

line 172: [db free, db str_free;]

line 173: [db realloc, db str_realloc;]

line 174: [db malloc_memcopy, db str_malloc_memcopy;]

line 175: [db str_alloc, db str_str_alloc;]

line 176: [db error, db str_error;]

line 177: [db vector_constructor, db str_vector_constructor;]

line 178: [db vector_copy_constructor, db str_vector_copy_constructor;]

line 179: [db vector_get_array, db str_vector_get_array;]

line 180: [db vector_get_size, db str_vector_get_size;]

line 181: [db vector_get_capacity, db str_vector_get_capacity;]

line 182: [db vector_get_element_size, db str_vector_get_element_size;]

line 183: [db vector_set_array, db str_vector_set_array;]

line 184: [db vector_set_size, db str_vector_set_size;]

line 185: [db vector_set_capacity, db str_vector_set_capacity;]

line 186: [db vector_set_element_size, db str_vector_set_element_size;]

line 187: [db vector_destructor, db str_vector_destructor;]

line 188: [db vector_clear, db str_vector_clear;]

line 189: [db vector_push, db str_vector_push;]

line 190: [db vector_pop, db str_vector_pop;]

line 191: [db vector_size, db str_vector_size;]

line 192: [db vector_disk_size, db str_vector_disk_size;]

line 193: [db vector_get, db str_vector_get;]

line 194: [db vector_set, db str_vector_set;]

line 195: [db vector_insert, db str_vector_insert;]

line 196: [db vector_remove, db str_vector_remove;]

line 197: [db vector_resize, db str_vector_resize;]

line 198: [db vector_array, db str_vector_array;]

line 199: [db string_constructor, db str_string_constructor;]

line 200: [db string_destructor, db str_string_destructor;]

line 201: [db string_c_str, db str_string_c_str;]

line 202: [db string_clear, db str_string_clear;]

line 203: [db string_adds, db str_string_adds;]

line 204: [db string_addc, db str_string_addc;]

line 205: [db string_addn, db str_string_addn;]

line 206: [db string_equals, db str_string_equals;]

line 207: [db string_equals_cs, db str_string_equals_cs;]

line 208: [db string_length, db str_string_length;]

line 209: [db string_addcs, db str_string_addcs;]

line 210: [db string_find_first_of, db str_string_find_first_of;]

line 211: [db string_find_last_of, db str_string_find_last_of;]

line 212: [db string_substr, db str_string_substr;]

line 213: [db list_constructor, db str_list_constructor;]

line 214: [db listnode_constructor, db str_listnode_constructor;]

line 215: [db listnode_destructor, db str_listnode_destructor;]

line 216: [db list_size, db str_list_size;]

line 217: [db list_size_helper, db str_list_size_helper;]

line 218: [db list_empty, db str_list_empty;]

line 219: [db list_clear, db str_list_clear;]

line 220: [db list_push, db str_list_push;]

line 221: [db list_push_helper, db str_list_push_helper;]

line 222: [db list_pop, db str_list_pop;]

line 223: [db node_selfdestruct, db str_node_selfdestruct;]

line 224: [db list_pop_helper, db str_list_pop_helper;]

line 225: [db list_get, db str_list_get;]

line 226: [db list_get_helper, db str_list_get_helper;]

line 227: [db list_set, db str_list_set;]

line 228: [db list_set_helper, db str_list_set_helper;]

line 229: [db list_insert, db str_list_insert;]

line 230: [db list_insert_helper, db str_list_insert_helper;]

line 231: [db list_remove, db str_list_remove;]

line 232: [db list_remove_helper, db str_list_remove_helper;]

line 233: [db list_getnode, db str_list_getnode;]

line 234: [db list_splice, db str_list_splice;]

line 235: [db list_move, db str_list_move;]

line 236: [db list_destructor, db str_list_destructor;]

line 237: [db setKeyboard, db str_setKeyboard;]

line 238: [db isPrint1, db str_isPrint1;]

line 239: [db readKey, db str_readKey;]

line 240: [db hasKey, db str_hasKey;]

line 241: [db readKB, db str_readKB;]

line 242: [db waitKey, db str_waitKey;]

line 243: [db readKeyTimed, db str_readKeyTimed;]

line 244: [db readline, db str_readline;]

line 245: [db assert_type, db str_assert_type;]

line 246: [db curticks, db str_curticks;]

line 247: [db curtime, db str_curtime;]

line 248: [db assert_arity, db str_assert_arity;]

line 249: [db shell, db str_shell;]

line 250: [db autorun, db str_autorun;]

line 251: [db shell_panic, db str_shell_panic;]

line 252: [db cls, db str_cls;]

line 253: [db drawStatusBar, db str_drawStatusBar;]

line 254: [db drawScrollBar, db str_drawScrollBar;]

line 255: [db Console, db str_Console;]

line 256: [db ParseStringSilent, db str_ParseStringSilent;]

line 257: [db ParseString, db str_ParseString;]

line 258: [db Ps, db str_Ps;]

line 259: [db redraw_all, db str_redraw_all;]

line 260: [db PrintProgressBar, db str_PrintProgressBar;]

line 261: [db ParseKey, db str_ParseKey;]

line 262: [db checkKB, db str_checkKB;]

line 263: [db getShellInput, db str_getShellInput;]

line 264: [db getYN, db str_getYN;]

line 265: [db help, db str_help;]

line 266: [db cmdtest, db str_cmdtest;]

line 267: [db cmdtest2, db str_cmdtest2;]

line 268: [db cmdtest3, db str_cmdtest3;]

line 269: [db cmdtrace, db str_cmdtrace;]

line 270: [db cmdyield, db str_cmdyield;]

line 271: [db cmdps, db str_cmdps;]

line 272: [db printversion, db str_printversion;]

line 273: [db cmdecho, db str_cmdecho;]

line 274: [db arg_rest, db str_arg_rest;]

line 275: [db cmdtime, db str_cmdtime;]

line 276: [db cmd_test4, db str_cmd_test4;]

line 277: [db cmd_test5, db str_cmd_test5;]

line 278: [db heap_status, db str_heap_status;]

line 279: [db cmd_rpncalc, db str_cmd_rpncalc;]

line 280: [db cmd_cd, db str_cmd_cd;]

line 281: [db cmd_dir, db str_cmd_dir;]

line 282: [db cmd_mkdir, db str_cmd_mkdir;]

line 283: [db cmd_del, db str_cmd_del;]

line 284: [db cmd_rn, db str_cmd_rn;]

line 285: [db cmd_write, db str_cmd_write;]

line 286: [db readword, db str_readword;]

line 287: [db cmd_read, db str_cmd_read;]

line 288: [db cmd_info, db str_cmd_info;]

line 289: [db cmd_hdd, db str_cmd_hdd;]

line 290: [db cmd_mount, db str_cmd_mount;]

line 291: [db cmd_format, db str_cmd_format;]

line 292: [db cmd_gpio, db str_cmd_gpio;]

line 293: [db cmd_exec, db str_cmd_exec;]

line 294: [db cmd_dump, db str_cmd_dump;]

line 295: [db progtest, db str_progtest;]

line 296: [db isString, db str_isString;]

line 297: [db cmd_symbol, db str_cmd_symbol;]

line 298: [db cmd_load, db str_cmd_load;]

line 299: [db cmd_run, db str_cmd_run;]

line 300: [db package_args, db str_package_args;]

line 301: [db cmd_runbg, db str_cmd_runbg;]

line 302: [db cmd_fileview, db str_cmd_fileview;]

line 303: [db cmd_memview, db str_cmd_memview;]

line 304: [db memtest_hlp, db str_memtest_hlp;]

line 305: [db memtest, db str_memtest;]

line 306: [db check_canary, db str_check_canary;]

line 307: [db file_handle_constructor, db str_file_handle_constructor;]

line 308: [db file_handle_copy_constructor, db str_file_handle_copy_constructor;]

line 309: [db file_handle_destructor, db str_file_handle_destructor;]

line 310: [db file_handle_get_canary, db str_file_handle_get_canary;]

line 311: [db file_handle_get_rw_ptr, db str_file_handle_get_rw_ptr;]

line 312: [db file_handle_get_imp, db str_file_handle_get_imp;]

line 313: [db file_handle_set_canary, db str_file_handle_set_canary;]

line 314: [db file_handle_set_rw_ptr, db str_file_handle_set_rw_ptr;]

line 315: [db file_handle_set_imp, db str_file_handle_set_imp;]

line 316: [db translate_fopen_mode, db str_translate_fopen_mode;]

line 317: [db filepath_legal, db str_filepath_legal;]

line 318: [db filepath_abs, db str_filepath_abs;]

line 319: [db filepath_decimate, db str_filepath_decimate;]

line 320: [db filepath_extension, db str_filepath_extension;]

line 321: [db filepath_base, db str_filepath_base;]

line 322: [db filesystem_init, db str_filesystem_init;]

line 323: [db find_file, db str_find_file;]

line 324: [db find_free, db str_find_free;]

line 325: [db fopen, db str_fopen;]

line 326: [db fwrite, db str_fwrite;]

line 327: [db fresize, db str_fresize;]

line 328: [db fread, db str_fread;]

line 329: [db frename, db str_frename;]

line 330: [db fgetstring, db str_fgetstring;]

line 331: [db feof, db str_feof;]

line 332: [db fsize, db str_fsize;]

line 333: [db fseek, db str_fseek;]

line 334: [db ftell, db str_ftell;]

line 335: [db flist, db str_flist;]

line 336: [db fdelete, db str_fdelete;]

line 337: [db vector_get_linear_size, db str_vector_get_linear_size;]

line 338: [db vector_move, db str_vector_move;]

line 339: [db vector_linearize, db str_vector_linearize;]

line 340: [db vector_delinearize, db str_vector_delinearize;]

line 341: [db filesystem_get_size, db str_filesystem_get_size;]

line 342: [db inc_cpy, db str_inc_cpy;]

line 343: [db inc_move, db str_inc_move;]

line 344: [db filesystem_move, db str_filesystem_move;]

line 345: [db filesystem_write, db str_filesystem_write;]

line 346: [db str_delinearize, db str_str_delinearize;]

line 347: [db filesystem_read, db str_filesystem_read;]

line 348: [db initPaging, db str_initPaging;]

line 349: [db setPageTable, db str_setPageTable;]

line 350: [db getPage, db str_getPage;]

line 351: [db setPageFlags, db str_setPageFlags;]

line 352: [db getPageFlags, db str_getPageFlags;]

line 353: [db setPageRunLevel, db str_setPageRunLevel;]

line 354: [db getPageRunlevel, db str_getPageRunlevel;]

line 355: [db setPageMapping, db str_setPageMapping;]

line 356: [db getPageMapping, db str_getPageMapping;]

line 357: [db reportPage, db str_reportPage;]

line 358: [db toPage, db str_toPage;]

line 359: [db copyPage, db str_copyPage;]

line 360: [db mapPage, db str_mapPage;]

line 361: [db setMemoryRunlevel, db str_setMemoryRunlevel;]

line 362: [db setMemoryMapping, db str_setMemoryMapping;]

line 363: [db pagingEnable, db str_pagingEnable;]

line 364: [db pagingDisable, db str_pagingDisable;]

line 365: [db sizeof_thread, db str_sizeof_thread;]

line 366: [db thread_constructor, db str_thread_constructor;]

line 367: [db thread_copy_constructor, db str_thread_copy_constructor;]

line 368: [db thread_destructor, db str_thread_destructor;]

line 369: [db thread_new, db str_thread_new;]

line 370: [db thread_delete, db str_thread_delete;]

line 371: [db thread_get_canary, db str_thread_get_canary;]

line 372: [db thread_get_entry, db str_thread_get_entry;]

line 373: [db thread_get_args, db str_thread_get_args;]

line 374: [db thread_get_time, db str_thread_get_time;]

line 375: [db thread_get_ip, db str_thread_get_ip;]

line 376: [db thread_get_stack, db str_thread_get_stack;]

line 377: [db thread_get_regs, db str_thread_get_regs;]

line 378: [db thread_set_canary, db str_thread_set_canary;]

line 379: [db thread_set_entry, db str_thread_set_entry;]

line 380: [db thread_set_args, db str_thread_set_args;]

line 381: [db thread_set_time, db str_thread_set_time;]

line 382: [db thread_set_ip, db str_thread_set_ip;]

line 383: [db thread_set_stack, db str_thread_set_stack;]

line 384: [db thread_set_regs, db str_thread_set_regs;]

line 385: [db initThreads, db str_initThreads;]

line 386: [db regs_set_to_entry, db str_regs_set_to_entry;]

line 387: [db thread_run, db str_thread_run;]

line 388: [db thread_enter, db str_thread_enter;]

line 389: [db multitask_test, db str_multitask_test;]

line 390: [db thread_yield, db str_thread_yield;]

line 391: [db print_threads, db str_print_threads;]

line 392: [db thread_exit_func, db str_thread_exit_func;]

line 393: [db thread_create, db str_thread_create;]

line 394: [db delay, db str_delay;]

line 395: [db initInterrupts, db str_initInterrupts;]

line 396: [db addInterruptHandler, db str_addInterruptHandler;]

line 397: [db defaultIntHandler, db str_defaultIntHandler;]

line 398: [db stopIntHandler, db str_stopIntHandler;]

line 399: [db errIntHandler, db str_errIntHandler;]

line 400: [db extendedModeEnable, db str_extendedModeEnable;]

line 401: [db extendedModeDisable, db str_extendedModeDisable;]

line 402: [db interruptsEnable, db str_interruptsEnable;]

line 403: [db interruptsDisable, db str_interruptsDisable;]

line 404: [db intnum_to_str, db str_intnum_to_str;]

line 405: [db getStackTrace, db str_getStackTrace;]

line 406: [db printStackTrace, db str_printStackTrace;]

line 407: [db findClosestFunc, db str_findClosestFunc;]

line 408: [db getFuncName, db str_getFuncName;]

line 409: [db getVarName, db str_getVarName;]

line 410: [db getSymbolName, db str_getSymbolName;]

line 411: [db findSymbolByName, db str_findSymbolByName;]

line 412: [db findFuncByName, db str_findFuncByName;]

line 413: [db findVarByName, db str_findVarByName;]

line 414: [db libdynamicstruct_init, db str_libdynamicstruct_init;]

line 415: [db fgetfloat, db str_fgetfloat;]

line 416: [db ds_read_definition, db str_ds_read_definition;]

line 417: [db main, db str_main;]

line 418: [db setupInterrupts, db str_setupInterrupts;]

line 419: [db memtest2, db str_memtest2;]

line 420: [func_table_end:]

line 421: []

line 422: [var_table:]

line 423: [db &size, db str_size;]

line 424: [db &AdrEB, db str_AdrEB;]

line 425: [db &AdrRAM, db str_AdrRAM;]

line 426: [db &AdrKb, db str_AdrKb;]

line 427: [db &AdrHDD, db str_AdrHDD;]

line 428: [db &AdrPort, db str_AdrPort;]

line 429: [db &OSversion, db str_OSversion;]

line 430: [db &num_screens_x, db str_num_screens_x;]

line 431: [db &num_screens_y, db str_num_screens_y;]

line 432: [db &Nbase, db str_Nbase;]

line 433: [db &Nprec, db str_Nprec;]

line 434: [db &printScrX, db str_printScrX;]

line 435: [db &printScrY, db str_printScrY;]

line 436: [db &printBuffX, db str_printBuffX;]

line 437: [db &printBuffY, db str_printBuffY;]

line 438: [db &printLineOffset, db str_printLineOffset;]

line 439: [db &printSpecials, db str_printSpecials;]

line 440: [db &RedrawPending, db str_RedrawPending;]

line 441: [db &screen_print_x_min, db str_screen_print_x_min;]

line 442: [db &screen_print_y_min, db str_screen_print_y_min;]

line 443: [db &screen_print_x_max, db str_screen_print_x_max;]

line 444: [db &screen_print_y_max, db str_screen_print_y_max;]

line 445: [db &AdrScreen, db str_AdrScreen;]

line 446: [db &mcs_width, db str_mcs_width;]

line 447: [db &mcs_height, db str_mcs_height;]

line 448: [db &mcs_last_x, db str_mcs_last_x;]

line 449: [db &mcs_last_y, db str_mcs_last_y;]

line 450: [db &cs_width, db str_cs_width;]

line 451: [db &cs_height, db str_cs_height;]

line 452: [db &cs_last_x, db str_cs_last_x;]

line 453: [db &cs_last_y, db str_cs_last_y;]

line 454: [db &malloc_debug, db str_malloc_debug;]

line 455: [db &malloc_print, db str_malloc_print;]

line 456: [db &malloc_num2str, db str_malloc_num2str;]

line 457: [db &malloc_disk, db str_malloc_disk;]

line 458: [db &malloc_max_disk, db str_malloc_max_disk;]

line 459: [db &malloc_header, db str_malloc_header;]

line 460: [db &malloc_user, db str_malloc_user;]

line 461: [db &lastFreeAllocation, db str_lastFreeAllocation;]

line 462: [db &malloc_debug_iters, db str_malloc_debug_iters;]

line 463: [db &sizeof_vector, db str_sizeof_vector;]

line 464: [db &sizeof_listnode, db str_sizeof_listnode;]

line 465: [db &sizeof_list, db str_sizeof_list;]

line 466: [db &ptrKB, db str_ptrKB;]

line 467: [db &readKeyTimed_delay_time, db str_readKeyTimed_delay_time;]

line 468: [db &readKeyTimed_repeat_time, db str_readKeyTimed_repeat_time;]

line 469: [db &readKeyTimed_keyState, db str_readKeyTimed_keyState;]

line 470: [db &readKeyTimed_lastSeen, db str_readKeyTimed_lastSeen;]

line 471: [db &readKeyTimed_lastKey, db str_readKeyTimed_lastKey;]

line 472: [db &checksum_prev_first, db str_checksum_prev_first;]

line 473: [db &checksum_previous, db str_checksum_previous;]

line 474: [db &crc_prev_first, db str_crc_prev_first;]

line 475: [db &crc_previous, db str_crc_previous;]

line 476: [db &shell_panic_ebp, db str_shell_panic_ebp;]

line 477: [db &shell_panic_esp, db str_shell_panic_esp;]

line 478: [db &R, db str_R;]

line 479: [db &Echo, db str_Echo;]

line 480: [db &Arr, db str_Arr;]

line 481: [db &PKSI, db str_PKSI;]

line 482: [db &listeningToInput, db str_listeningToInput;]

line 483: [db &numModules, db str_numModules;]

line 484: [db &MinStrI, db str_MinStrI;]

line 485: [db &sizeof_file_handle, db str_sizeof_file_handle;]

line 486: [db &current_path, db str_current_path;]

line 487: [db &files, db str_files;]

line 488: [db &filenames, db str_filenames;]

line 489: [db &threadpool, db str_threadpool;]

line 490: [db &cur_thread, db str_cur_thread;]

line 491: [db &thread_stack_size, db str_thread_stack_size;]

line 492: [db &numInts, db str_numInts;]

line 493: [db &v_ds_typeinfos, db str_v_ds_typeinfos;]

line 494: [var_table_end:]

line 495: []

line 496: [func_name_table:]

line 497: [str_boot: db "boot", db 0;]
removed string literal ""boot""

line 498: [str_nullcall_error: db "nullcall_error", db 0;]
removed string literal ""nullcall_error""

line 499: [str_init_hardware: db "init_hardware", db 0;]
removed string literal ""init_hardware""

line 500: [str_memcpy: db "memcpy", db 0;]
removed string literal ""memcpy""

line 501: [str_memchr: db "memchr", db 0;]
removed string literal ""memchr""

line 502: [str_memset: db "memset", db 0;]
removed string literal ""memset""

line 503: [str_strcat: db "strcat", db 0;]
removed string literal ""strcat""

line 504: [str_strncat: db "strncat", db 0;]
removed string literal ""strncat""

line 505: [str_strchr: db "strchr", db 0;]
removed string literal ""strchr""

line 506: [str_strrchr: db "strrchr", db 0;]
removed string literal ""strrchr""

line 507: [str_strcmp: db "strcmp", db 0;]
removed string literal ""strcmp""

line 508: [str_strncmp: db "strncmp", db 0;]
removed string literal ""strncmp""

line 509: [str_strcpy: db "strcpy", db 0;]
removed string literal ""strcpy""

line 510: [str_strncpy: db "strncpy", db 0;]
removed string literal ""strncpy""

line 511: [str_strlen: db "strlen", db 0;]
removed string literal ""strlen""

line 512: [str_strspn: db "strspn", db 0;]
removed string literal ""strspn""

line 513: [str_strcspn: db "strcspn", db 0;]
removed string literal ""strcspn""

line 514: [str_strpbrk: db "strpbrk", db 0;]
removed string literal ""strpbrk""

line 515: [str_strstr: db "strstr", db 0;]
removed string literal ""strstr""

line 516: [str_explode: db "explode", db 0;]
removed string literal ""explode""

line 517: [str_str2num: db "str2num", db 0;]
removed string literal ""str2num""

line 518: [str_getNdigit: db "getNdigit", db 0;]
removed string literal ""getNdigit""

line 519: [str_num2strSet: db "num2strSet", db 0;]
removed string literal ""num2strSet""

line 520: [str_num2str: db "num2str", db 0;]
removed string literal ""num2str""

line 521: [str_Nlog: db "Nlog", db 0;]
removed string literal ""Nlog""

line 522: [str_isPrint: db "isPrint", db 0;]
removed string literal ""isPrint""

line 523: [str_isNum: db "isNum", db 0;]
removed string literal ""isNum""

line 524: [str_isAlpha: db "isAlpha", db 0;]
removed string literal ""isAlpha""

line 525: [str_toLower: db "toLower", db 0;]
removed string literal ""toLower""

line 526: [str_toUpper: db "toUpper", db 0;]
removed string literal ""toUpper""

line 527: [str_Con: db "Con", db 0;]
removed string literal ""Con""

line 528: [str_concat: db "concat", db 0;]
removed string literal ""concat""

line 529: [str_c2str: db "c2str", db 0;]
removed string literal ""c2str""

line 530: [str_unescapeStr: db "unescapeStr", db 0;]
removed string literal ""unescapeStr""

line 531: [str_cstr_find_first_of: db "cstr_find_first_of", db 0;]
removed string literal ""cstr_find_first_of""

line 532: [str_cstr_find_last_of: db "cstr_find_last_of", db 0;]
removed string literal ""cstr_find_last_of""

line 533: [str_stack_copy: db "stack_copy", db 0;]
removed string literal ""stack_copy""

line 534: [str_cstr_stack_copy: db "cstr_stack_copy", db 0;]
removed string literal ""cstr_stack_copy""

line 535: [str_isspace: db "isspace", db 0;]
removed string literal ""isspace""

line 536: [str_stralloc: db "stralloc", db 0;]
removed string literal ""stralloc""

line 537: [str_P: db "P", db 0;]
removed string literal ""P""

line 538: [str_Pc: db "Pc", db 0;]
removed string literal ""Pc""

line 539: [str_Pn: db "Pn", db 0;]
removed string literal ""Pn""

line 540: [str_Pl: db "Pl", db 0;]
removed string literal ""Pl""

line 541: [str_P2: db "P2", db 0;]
removed string literal ""P2""

line 542: [str_Perr: db "Perr", db 0;]
removed string literal ""Perr""

line 543: [str_Print: db "Print", db 0;]
removed string literal ""Print""

line 544: [str_printword: db "printword", db 0;]
removed string literal ""printword""

line 545: [str_mcs_putchar: db "mcs_putchar", db 0;]
removed string literal ""mcs_putchar""

line 546: [str_cs_putchar: db "cs_putchar", db 0;]
removed string literal ""cs_putchar""

line 547: [str_ConsoleShiftUp: db "ConsoleShiftUp", db 0;]
removed string literal ""ConsoleShiftUp""

line 548: [str_ConsoleShiftDown: db "ConsoleShiftDown", db 0;]
removed string literal ""ConsoleShiftDown""

line 549: [str_pow: db "pow", db 0;]
removed string literal ""pow""

line 550: [str_modulo: db "modulo", db 0;]
removed string literal ""modulo""

line 551: [str_sqrt: db "sqrt", db 0;]
removed string literal ""sqrt""

line 552: [str_cbrt: db "cbrt", db 0;]
removed string literal ""cbrt""

line 553: [str_root: db "root", db 0;]
removed string literal ""root""

line 554: [str_e: db "e", db 0;]
removed string literal ""e""

line 555: [str_exp: db "exp", db 0;]
removed string literal ""exp""

line 556: [str_ln: db "ln", db 0;]
removed string literal ""ln""

line 557: [str_log2: db "log2", db 0;]
removed string literal ""log2""

line 558: [str_log10: db "log10", db 0;]
removed string literal ""log10""

line 559: [str_log: db "log", db 0;]
removed string literal ""log""

line 560: [str_abs: db "abs", db 0;]
removed string literal ""abs""

line 561: [str_ceil: db "ceil", db 0;]
removed string literal ""ceil""

line 562: [str_floor: db "floor", db 0;]
removed string literal ""floor""

line 563: [str_round: db "round", db 0;]
removed string literal ""round""

line 564: [str_integer: db "integer", db 0;]
removed string literal ""integer""

line 565: [str_frac: db "frac", db 0;]
removed string literal ""frac""

line 566: [str_clamp: db "clamp", db 0;]
removed string literal ""clamp""

line 567: [str_inrange: db "inrange", db 0;]
removed string literal ""inrange""

line 568: [str_minimal: db "minimal", db 0;]
removed string literal ""minimal""

line 569: [str_maximal: db "maximal", db 0;]
removed string literal ""maximal""

line 570: [str_random: db "random", db 0;]
removed string literal ""random""

line 571: [str_random1: db "random1", db 0;]
removed string literal ""random1""

line 572: [str_random2: db "random2", db 0;]
removed string literal ""random2""

line 573: [str_randint1: db "randint1", db 0;]
removed string literal ""randint1""

line 574: [str_randint2: db "randint2", db 0;]
removed string literal ""randint2""

line 575: [str_pi: db "pi", db 0;]
removed string literal ""pi""

line 576: [str_toRad: db "toRad", db 0;]
removed string literal ""toRad""

line 577: [str_toDeg: db "toDeg", db 0;]
removed string literal ""toDeg""

line 578: [str_sin: db "sin", db 0;]
removed string literal ""sin""

line 579: [str_cos: db "cos", db 0;]
removed string literal ""cos""

line 580: [str_tan: db "tan", db 0;]
removed string literal ""tan""

line 581: [str_cot: db "cot", db 0;]
removed string literal ""cot""

line 582: [str_sec: db "sec", db 0;]
removed string literal ""sec""

line 583: [str_csc: db "csc", db 0;]
removed string literal ""csc""

line 584: [str_asin: db "asin", db 0;]
removed string literal ""asin""

line 585: [str_acos: db "acos", db 0;]
removed string literal ""acos""

line 586: [str_atan: db "atan", db 0;]
removed string literal ""atan""

line 587: [str_sinh: db "sinh", db 0;]
removed string literal ""sinh""

line 588: [str_cosh: db "cosh", db 0;]
removed string literal ""cosh""

line 589: [str_tanh: db "tanh", db 0;]
removed string literal ""tanh""

line 590: [str_coth: db "coth", db 0;]
removed string literal ""coth""

line 591: [str_sech: db "sech", db 0;]
removed string literal ""sech""

line 592: [str_csch: db "csch", db 0;]
removed string literal ""csch""

line 593: [str_sinr: db "sinr", db 0;]
removed string literal ""sinr""

line 594: [str_cosr: db "cosr", db 0;]
removed string literal ""cosr""

line 595: [str_tanr: db "tanr", db 0;]
removed string literal ""tanr""

line 596: [str_cotr: db "cotr", db 0;]
removed string literal ""cotr""

line 597: [str_secr: db "secr", db 0;]
removed string literal ""secr""

line 598: [str_cscr: db "cscr", db 0;]
removed string literal ""cscr""

line 599: [str_asinr: db "asinr", db 0;]
removed string literal ""asinr""

line 600: [str_acosr: db "acosr", db 0;]
removed string literal ""acosr""

line 601: [str_atanr: db "atanr", db 0;]
removed string literal ""atanr""

line 602: [str_ceil2: db "ceil2", db 0;]
removed string literal ""ceil2""

line 603: [str_floor2: db "floor2", db 0;]
removed string literal ""floor2""

line 604: [str_round2: db "round2", db 0;]
removed string literal ""round2""

line 605: [str_printf: db "printf", db 0;]
removed string literal ""printf""

line 606: [str_compileTimeStamp: db "compileTimeStamp", db 0;]
removed string literal ""compileTimeStamp""

line 607: [str_currentTimeStamp: db "currentTimeStamp", db 0;]
removed string literal ""currentTimeStamp""

line 608: [str_decodeTimeStamp: db "decodeTimeStamp", db 0;]
removed string literal ""decodeTimeStamp""

line 609: [str_monthToString: db "monthToString", db 0;]
removed string literal ""monthToString""

line 610: [str_timeStampToString: db "timeStampToString", db 0;]
removed string literal ""timeStampToString""

line 611: [str_PrintStringXY: db "PrintStringXY", db 0;]
removed string literal ""PrintStringXY""

line 612: [str_printCharXY: db "printCharXY", db 0;]
removed string literal ""printCharXY""

line 613: [str_delaysimple: db "delaysimple", db 0;]
removed string literal ""delaysimple""

line 614: [str_screen_set: db "screen_set", db 0;]
removed string literal ""screen_set""

line 615: [str_screen_clear: db "screen_clear", db 0;]
removed string literal ""screen_clear""

line 616: [str_screen_cursor_enable: db "screen_cursor_enable", db 0;]
removed string literal ""screen_cursor_enable""

line 617: [str_screen_cursor_disable: db "screen_cursor_disable", db 0;]
removed string literal ""screen_cursor_disable""

line 618: [str_screen_set_cursor_pos: db "screen_set_cursor_pos", db 0;]
removed string literal ""screen_set_cursor_pos""

line 619: [str_screen_set_cursor_pos_xy: db "screen_set_cursor_pos_xy", db 0;]
removed string literal ""screen_set_cursor_pos_xy""

line 620: [str_screen_force_refresh: db "screen_force_refresh", db 0;]
removed string literal ""screen_force_refresh""

line 621: [str_screen_set_shift_box_x1: db "screen_set_shift_box_x1", db 0;]
removed string literal ""screen_set_shift_box_x1""

line 622: [str_screen_set_shift_box_x2: db "screen_set_shift_box_x2", db 0;]
removed string literal ""screen_set_shift_box_x2""

line 623: [str_screen_set_shift_box_y1: db "screen_set_shift_box_y1", db 0;]
removed string literal ""screen_set_shift_box_y1""

line 624: [str_screen_set_shift_box_y2: db "screen_set_shift_box_y2", db 0;]
removed string literal ""screen_set_shift_box_y2""

line 625: [str_screen_set_shift_box: db "screen_set_shift_box", db 0;]
removed string literal ""screen_set_shift_box""

line 626: [str_screen_set_print_box: db "screen_set_print_box", db 0;]
removed string literal ""screen_set_print_box""

line 627: [str_screen_shift_vertical: db "screen_shift_vertical", db 0;]
removed string literal ""screen_shift_vertical""

line 628: [str_screen_shift_horizontal: db "screen_shift_horizontal", db 0;]
removed string literal ""screen_shift_horizontal""

line 629: [str_screen_set_blink_rate: db "screen_set_blink_rate", db 0;]
removed string literal ""screen_set_blink_rate""

line 630: [str_screen_set_cursor_size: db "screen_set_cursor_size", db 0;]
removed string literal ""screen_set_cursor_size""

line 631: [str_mcs_screen_clear: db "mcs_screen_clear", db 0;]
removed string literal ""mcs_screen_clear""

line 632: [str_mcs_screen_force_refresh: db "mcs_screen_force_refresh", db 0;]
removed string literal ""mcs_screen_force_refresh""

line 633: [str_mcs_init: db "mcs_init", db 0;]
removed string literal ""mcs_init""

line 634: [str_mcs_screen_shift_vertical: db "mcs_screen_shift_vertical", db 0;]
removed string literal ""mcs_screen_shift_vertical""

line 635: [str_mcs_screen_set_shift_box: db "mcs_screen_set_shift_box", db 0;]
removed string literal ""mcs_screen_set_shift_box""

line 636: [str_mcs_screen_set_cursor_pos_xy: db "mcs_screen_set_cursor_pos_xy", db 0;]
removed string literal ""mcs_screen_set_cursor_pos_xy""

line 637: [str_mcs_screen_cursor_enable: db "mcs_screen_cursor_enable", db 0;]
removed string literal ""mcs_screen_cursor_enable""

line 638: [str_mcs_screen_cursor_disable: db "mcs_screen_cursor_disable", db 0;]
removed string literal ""mcs_screen_cursor_disable""

line 639: [str_mcs_set_blink_rate: db "mcs_set_blink_rate", db 0;]
removed string literal ""mcs_set_blink_rate""

line 640: [str_mcs_set_cursor_size: db "mcs_set_cursor_size", db 0;]
removed string literal ""mcs_set_cursor_size""

line 641: [str_memcpy2: db "memcpy2", db 0;]
removed string literal ""memcpy2""

line 642: [str_allocation_constructor: db "allocation_constructor", db 0;]
removed string literal ""allocation_constructor""

line 643: [str_allocation_set_size: db "allocation_set_size", db 0;]
removed string literal ""allocation_set_size""

line 644: [str_allocation_set_owner: db "allocation_set_owner", db 0;]
removed string literal ""allocation_set_owner""

line 645: [str_allocation_set_prev: db "allocation_set_prev", db 0;]
removed string literal ""allocation_set_prev""

line 646: [str_allocation_set_next: db "allocation_set_next", db 0;]
removed string literal ""allocation_set_next""

line 647: [str_allocation_get_size: db "allocation_get_size", db 0;]
removed string literal ""allocation_get_size""

line 648: [str_allocation_get_owner: db "allocation_get_owner", db 0;]
removed string literal ""allocation_get_owner""

line 649: [str_allocation_get_prev: db "allocation_get_prev", db 0;]
removed string literal ""allocation_get_prev""

line 650: [str_allocation_get_next: db "allocation_get_next", db 0;]
removed string literal ""allocation_get_next""

line 651: [str_malloc_getAllocation: db "malloc_getAllocation", db 0;]
removed string literal ""malloc_getAllocation""

line 652: [str_malloc_getDataFromIndex: db "malloc_getDataFromIndex", db 0;]
removed string literal ""malloc_getDataFromIndex""

line 653: [str_malloc_getDataFromAllocation: db "malloc_getDataFromAllocation", db 0;]
removed string literal ""malloc_getDataFromAllocation""

line 654: [str_malloc_getIndex: db "malloc_getIndex", db 0;]
removed string literal ""malloc_getIndex""

line 655: [str_malloc_trySplit: db "malloc_trySplit", db 0;]
removed string literal ""malloc_trySplit""

line 656: [str_malloc_join: db "malloc_join", db 0;]
removed string literal ""malloc_join""

line 657: [str_malloc_set_disk: db "malloc_set_disk", db 0;]
removed string literal ""malloc_set_disk""

line 658: [str_malloc_init: db "malloc_init", db 0;]
removed string literal ""malloc_init""

line 659: [str_malloc_test: db "malloc_test", db 0;]
removed string literal ""malloc_test""

line 660: [str_malloc_print_count: db "malloc_print_count", db 0;]
removed string literal ""malloc_print_count""

line 661: [str_malloc_count: db "malloc_count", db 0;]
removed string literal ""malloc_count""

line 662: [str_printAllocationSimple: db "printAllocationSimple", db 0;]
removed string literal ""printAllocationSimple""

line 663: [str_printAllocation: db "printAllocation", db 0;]
removed string literal ""printAllocation""

line 664: [str_mallocLast: db "mallocLast", db 0;]
removed string literal ""mallocLast""

line 665: [str_malloc: db "malloc", db 0;]
removed string literal ""malloc""

line 666: [str_free: db "free", db 0;]
removed string literal ""free""

line 667: [str_realloc: db "realloc", db 0;]
removed string literal ""realloc""

line 668: [str_malloc_memcopy: db "malloc_memcopy", db 0;]
removed string literal ""malloc_memcopy""

line 669: [str_str_alloc: db "str_alloc", db 0;]
removed string literal ""str_alloc""

line 670: [str_error: db "error", db 0;]
removed string literal ""error""

line 671: [str_vector_constructor: db "vector_constructor", db 0;]
removed string literal ""vector_constructor""

line 672: [str_vector_copy_constructor: db "vector_copy_constructor", db 0;]
removed string literal ""vector_copy_constructor""

line 673: [str_vector_get_array: db "vector_get_array", db 0;]
removed string literal ""vector_get_array""

line 674: [str_vector_get_size: db "vector_get_size", db 0;]
removed string literal ""vector_get_size""

line 675: [str_vector_get_capacity: db "vector_get_capacity", db 0;]
removed string literal ""vector_get_capacity""

line 676: [str_vector_get_element_size: db "vector_get_element_size", db 0;]
removed string literal ""vector_get_element_size""

line 677: [str_vector_set_array: db "vector_set_array", db 0;]
removed string literal ""vector_set_array""

line 678: [str_vector_set_size: db "vector_set_size", db 0;]
removed string literal ""vector_set_size""

line 679: [str_vector_set_capacity: db "vector_set_capacity", db 0;]
removed string literal ""vector_set_capacity""

line 680: [str_vector_set_element_size: db "vector_set_element_size", db 0;]
removed string literal ""vector_set_element_size""

line 681: [str_vector_destructor: db "vector_destructor", db 0;]
removed string literal ""vector_destructor""

line 682: [str_vector_clear: db "vector_clear", db 0;]
removed string literal ""vector_clear""

line 683: [str_vector_push: db "vector_push", db 0;]
removed string literal ""vector_push""

line 684: [str_vector_pop: db "vector_pop", db 0;]
removed string literal ""vector_pop""

line 685: [str_vector_size: db "vector_size", db 0;]
removed string literal ""vector_size""

line 686: [str_vector_disk_size: db "vector_disk_size", db 0;]
removed string literal ""vector_disk_size""

line 687: [str_vector_get: db "vector_get", db 0;]
removed string literal ""vector_get""

line 688: [str_vector_set: db "vector_set", db 0;]
removed string literal ""vector_set""

line 689: [str_vector_insert: db "vector_insert", db 0;]
removed string literal ""vector_insert""

line 690: [str_vector_remove: db "vector_remove", db 0;]
removed string literal ""vector_remove""

line 691: [str_vector_resize: db "vector_resize", db 0;]
removed string literal ""vector_resize""

line 692: [str_vector_array: db "vector_array", db 0;]
removed string literal ""vector_array""

line 693: [str_string_constructor: db "string_constructor", db 0;]
removed string literal ""string_constructor""

line 694: [str_string_destructor: db "string_destructor", db 0;]
removed string literal ""string_destructor""

line 695: [str_string_c_str: db "string_c_str", db 0;]
removed string literal ""string_c_str""

line 696: [str_string_clear: db "string_clear", db 0;]
removed string literal ""string_clear""

line 697: [str_string_adds: db "string_adds", db 0;]
removed string literal ""string_adds""

line 698: [str_string_addc: db "string_addc", db 0;]
removed string literal ""string_addc""

line 699: [str_string_addn: db "string_addn", db 0;]
removed string literal ""string_addn""

line 700: [str_string_equals: db "string_equals", db 0;]
removed string literal ""string_equals""

line 701: [str_string_equals_cs: db "string_equals_cs", db 0;]
removed string literal ""string_equals_cs""

line 702: [str_string_length: db "string_length", db 0;]
removed string literal ""string_length""

line 703: [str_string_addcs: db "string_addcs", db 0;]
removed string literal ""string_addcs""

line 704: [str_string_find_first_of: db "string_find_first_of", db 0;]
removed string literal ""string_find_first_of""

line 705: [str_string_find_last_of: db "string_find_last_of", db 0;]
removed string literal ""string_find_last_of""

line 706: [str_string_substr: db "string_substr", db 0;]
removed string literal ""string_substr""

line 707: [str_list_constructor: db "list_constructor", db 0;]
removed string literal ""list_constructor""

line 708: [str_listnode_constructor: db "listnode_constructor", db 0;]
removed string literal ""listnode_constructor""

line 709: [str_listnode_destructor: db "listnode_destructor", db 0;]
removed string literal ""listnode_destructor""

line 710: [str_list_size: db "list_size", db 0;]
removed string literal ""list_size""

line 711: [str_list_size_helper: db "list_size_helper", db 0;]
removed string literal ""list_size_helper""

line 712: [str_list_empty: db "list_empty", db 0;]
removed string literal ""list_empty""

line 713: [str_list_clear: db "list_clear", db 0;]
removed string literal ""list_clear""

line 714: [str_list_push: db "list_push", db 0;]
removed string literal ""list_push""

line 715: [str_list_push_helper: db "list_push_helper", db 0;]
removed string literal ""list_push_helper""

line 716: [str_list_pop: db "list_pop", db 0;]
removed string literal ""list_pop""

line 717: [str_node_selfdestruct: db "node_selfdestruct", db 0;]
removed string literal ""node_selfdestruct""

line 718: [str_list_pop_helper: db "list_pop_helper", db 0;]
removed string literal ""list_pop_helper""

line 719: [str_list_get: db "list_get", db 0;]
removed string literal ""list_get""

line 720: [str_list_get_helper: db "list_get_helper", db 0;]
removed string literal ""list_get_helper""

line 721: [str_list_set: db "list_set", db 0;]
removed string literal ""list_set""

line 722: [str_list_set_helper: db "list_set_helper", db 0;]
removed string literal ""list_set_helper""

line 723: [str_list_insert: db "list_insert", db 0;]
removed string literal ""list_insert""

line 724: [str_list_insert_helper: db "list_insert_helper", db 0;]
removed string literal ""list_insert_helper""

line 725: [str_list_remove: db "list_remove", db 0;]
removed string literal ""list_remove""

line 726: [str_list_remove_helper: db "list_remove_helper", db 0;]
removed string literal ""list_remove_helper""

line 727: [str_list_getnode: db "list_getnode", db 0;]
removed string literal ""list_getnode""

line 728: [str_list_splice: db "list_splice", db 0;]
removed string literal ""list_splice""

line 729: [str_list_move: db "list_move", db 0;]
removed string literal ""list_move""

line 730: [str_list_destructor: db "list_destructor", db 0;]
removed string literal ""list_destructor""

line 731: [str_setKeyboard: db "setKeyboard", db 0;]
removed string literal ""setKeyboard""

line 732: [str_isPrint1: db "isPrint1", db 0;]
removed string literal ""isPrint1""

line 733: [str_readKey: db "readKey", db 0;]
removed string literal ""readKey""

line 734: [str_hasKey: db "hasKey", db 0;]
removed string literal ""hasKey""

line 735: [str_readKB: db "readKB", db 0;]
removed string literal ""readKB""

line 736: [str_waitKey: db "waitKey", db 0;]
removed string literal ""waitKey""

line 737: [str_readKeyTimed: db "readKeyTimed", db 0;]
removed string literal ""readKeyTimed""

line 738: [str_readline: db "readline", db 0;]
removed string literal ""readline""

line 739: [str_assert_type: db "assert_type", db 0;]
removed string literal ""assert_type""

line 740: [str_curticks: db "curticks", db 0;]
removed string literal ""curticks""

line 741: [str_curtime: db "curtime", db 0;]
removed string literal ""curtime""

line 742: [str_assert_arity: db "assert_arity", db 0;]
removed string literal ""assert_arity""

line 743: [str_shell: db "shell", db 0;]
removed string literal ""shell""

line 744: [str_autorun: db "autorun", db 0;]
removed string literal ""autorun""

line 745: [str_shell_panic: db "shell_panic", db 0;]
removed string literal ""shell_panic""

line 746: [str_cls: db "cls", db 0;]
removed string literal ""cls""

line 747: [str_drawStatusBar: db "drawStatusBar", db 0;]
removed string literal ""drawStatusBar""

line 748: [str_drawScrollBar: db "drawScrollBar", db 0;]
removed string literal ""drawScrollBar""

line 749: [str_Console: db "Console", db 0;]
removed string literal ""Console""

line 750: [str_ParseStringSilent: db "ParseStringSilent", db 0;]
removed string literal ""ParseStringSilent""

line 751: [str_ParseString: db "ParseString", db 0;]
removed string literal ""ParseString""

line 752: [str_Ps: db "Ps", db 0;]
removed string literal ""Ps""

line 753: [str_redraw_all: db "redraw_all", db 0;]
removed string literal ""redraw_all""

line 754: [str_PrintProgressBar: db "PrintProgressBar", db 0;]
removed string literal ""PrintProgressBar""

line 755: [str_ParseKey: db "ParseKey", db 0;]
removed string literal ""ParseKey""

line 756: [str_checkKB: db "checkKB", db 0;]
removed string literal ""checkKB""

line 757: [str_getShellInput: db "getShellInput", db 0;]
removed string literal ""getShellInput""

line 758: [str_getYN: db "getYN", db 0;]
removed string literal ""getYN""

line 759: [str_help: db "help", db 0;]
removed string literal ""help""

line 760: [str_cmdtest: db "cmdtest", db 0;]
removed string literal ""cmdtest""

line 761: [str_cmdtest2: db "cmdtest2", db 0;]
removed string literal ""cmdtest2""

line 762: [str_cmdtest3: db "cmdtest3", db 0;]
removed string literal ""cmdtest3""

line 763: [str_cmdtrace: db "cmdtrace", db 0;]
removed string literal ""cmdtrace""

line 764: [str_cmdyield: db "cmdyield", db 0;]
removed string literal ""cmdyield""

line 765: [str_cmdps: db "cmdps", db 0;]
removed string literal ""cmdps""

line 766: [str_printversion: db "printversion", db 0;]
removed string literal ""printversion""

line 767: [str_cmdecho: db "cmdecho", db 0;]
removed string literal ""cmdecho""

line 768: [str_arg_rest: db "arg_rest", db 0;]
removed string literal ""arg_rest""

line 769: [str_cmdtime: db "cmdtime", db 0;]
removed string literal ""cmdtime""

line 770: [str_cmd_test4: db "cmd_test4", db 0;]
removed string literal ""cmd_test4""

line 771: [str_cmd_test5: db "cmd_test5", db 0;]
removed string literal ""cmd_test5""

line 772: [str_heap_status: db "heap_status", db 0;]
removed string literal ""heap_status""

line 773: [str_cmd_rpncalc: db "cmd_rpncalc", db 0;]
removed string literal ""cmd_rpncalc""

line 774: [str_cmd_cd: db "cmd_cd", db 0;]
removed string literal ""cmd_cd""

line 775: [str_cmd_dir: db "cmd_dir", db 0;]
removed string literal ""cmd_dir""

line 776: [str_cmd_mkdir: db "cmd_mkdir", db 0;]
removed string literal ""cmd_mkdir""

line 777: [str_cmd_del: db "cmd_del", db 0;]
removed string literal ""cmd_del""

line 778: [str_cmd_rn: db "cmd_rn", db 0;]
removed string literal ""cmd_rn""

line 779: [str_cmd_write: db "cmd_write", db 0;]
removed string literal ""cmd_write""

line 780: [str_readword: db "readword", db 0;]
removed string literal ""readword""

line 781: [str_cmd_read: db "cmd_read", db 0;]
removed string literal ""cmd_read""

line 782: [str_cmd_info: db "cmd_info", db 0;]
removed string literal ""cmd_info""

line 783: [str_cmd_hdd: db "cmd_hdd", db 0;]
removed string literal ""cmd_hdd""

line 784: [str_cmd_mount: db "cmd_mount", db 0;]
removed string literal ""cmd_mount""

line 785: [str_cmd_format: db "cmd_format", db 0;]
removed string literal ""cmd_format""

line 786: [str_cmd_gpio: db "cmd_gpio", db 0;]
removed string literal ""cmd_gpio""

line 787: [str_cmd_exec: db "cmd_exec", db 0;]
removed string literal ""cmd_exec""

line 788: [str_cmd_dump: db "cmd_dump", db 0;]
removed string literal ""cmd_dump""

line 789: [str_progtest: db "progtest", db 0;]
removed string literal ""progtest""

line 790: [str_isString: db "isString", db 0;]
removed string literal ""isString""

line 791: [str_cmd_symbol: db "cmd_symbol", db 0;]
removed string literal ""cmd_symbol""

line 792: [str_cmd_load: db "cmd_load", db 0;]
removed string literal ""cmd_load""

line 793: [str_cmd_run: db "cmd_run", db 0;]
removed string literal ""cmd_run""

line 794: [str_package_args: db "package_args", db 0;]
removed string literal ""package_args""

line 795: [str_cmd_runbg: db "cmd_runbg", db 0;]
removed string literal ""cmd_runbg""

line 796: [str_cmd_fileview: db "cmd_fileview", db 0;]
removed string literal ""cmd_fileview""

line 797: [str_cmd_memview: db "cmd_memview", db 0;]
removed string literal ""cmd_memview""

line 798: [str_memtest_hlp: db "memtest_hlp", db 0;]
removed string literal ""memtest_hlp""

line 799: [str_memtest: db "memtest", db 0;]
removed string literal ""memtest""

line 800: [str_check_canary: db "check_canary", db 0;]
removed string literal ""check_canary""

line 801: [str_file_handle_constructor: db "file_handle_constructor", db 0;]
removed string literal ""file_handle_constructor""

line 802: [str_file_handle_copy_constructor: db "file_handle_copy_constructor", db 0;]
removed string literal ""file_handle_copy_constructor""

line 803: [str_file_handle_destructor: db "file_handle_destructor", db 0;]
removed string literal ""file_handle_destructor""

line 804: [str_file_handle_get_canary: db "file_handle_get_canary", db 0;]
removed string literal ""file_handle_get_canary""

line 805: [str_file_handle_get_rw_ptr: db "file_handle_get_rw_ptr", db 0;]
removed string literal ""file_handle_get_rw_ptr""

line 806: [str_file_handle_get_imp: db "file_handle_get_imp", db 0;]
removed string literal ""file_handle_get_imp""

line 807: [str_file_handle_set_canary: db "file_handle_set_canary", db 0;]
removed string literal ""file_handle_set_canary""

line 808: [str_file_handle_set_rw_ptr: db "file_handle_set_rw_ptr", db 0;]
removed string literal ""file_handle_set_rw_ptr""

line 809: [str_file_handle_set_imp: db "file_handle_set_imp", db 0;]
removed string literal ""file_handle_set_imp""

line 810: [str_translate_fopen_mode: db "translate_fopen_mode", db 0;]
removed string literal ""translate_fopen_mode""

line 811: [str_filepath_legal: db "filepath_legal", db 0;]
removed string literal ""filepath_legal""

line 812: [str_filepath_abs: db "filepath_abs", db 0;]
removed string literal ""filepath_abs""

line 813: [str_filepath_decimate: db "filepath_decimate", db 0;]
removed string literal ""filepath_decimate""

line 814: [str_filepath_extension: db "filepath_extension", db 0;]
removed string literal ""filepath_extension""

line 815: [str_filepath_base: db "filepath_base", db 0;]
removed string literal ""filepath_base""

line 816: [str_filesystem_init: db "filesystem_init", db 0;]
removed string literal ""filesystem_init""

line 817: [str_find_file: db "find_file", db 0;]
removed string literal ""find_file""

line 818: [str_find_free: db "find_free", db 0;]
removed string literal ""find_free""

line 819: [str_fopen: db "fopen", db 0;]
removed string literal ""fopen""

line 820: [str_fwrite: db "fwrite", db 0;]
removed string literal ""fwrite""

line 821: [str_fresize: db "fresize", db 0;]
removed string literal ""fresize""

line 822: [str_fread: db "fread", db 0;]
removed string literal ""fread""

line 823: [str_frename: db "frename", db 0;]
removed string literal ""frename""

line 824: [str_fgetstring: db "fgetstring", db 0;]
removed string literal ""fgetstring""

line 825: [str_feof: db "feof", db 0;]
removed string literal ""feof""

line 826: [str_fsize: db "fsize", db 0;]
removed string literal ""fsize""

line 827: [str_fseek: db "fseek", db 0;]
removed string literal ""fseek""

line 828: [str_ftell: db "ftell", db 0;]
removed string literal ""ftell""

line 829: [str_flist: db "flist", db 0;]
removed string literal ""flist""

line 830: [str_fdelete: db "fdelete", db 0;]
removed string literal ""fdelete""

line 831: [str_vector_get_linear_size: db "vector_get_linear_size", db 0;]
removed string literal ""vector_get_linear_size""

line 832: [str_vector_move: db "vector_move", db 0;]
removed string literal ""vector_move""

line 833: [str_vector_linearize: db "vector_linearize", db 0;]
removed string literal ""vector_linearize""

line 834: [str_vector_delinearize: db "vector_delinearize", db 0;]
removed string literal ""vector_delinearize""

line 835: [str_filesystem_get_size: db "filesystem_get_size", db 0;]
removed string literal ""filesystem_get_size""

line 836: [str_inc_cpy: db "inc_cpy", db 0;]
removed string literal ""inc_cpy""

line 837: [str_inc_move: db "inc_move", db 0;]
removed string literal ""inc_move""

line 838: [str_filesystem_move: db "filesystem_move", db 0;]
removed string literal ""filesystem_move""

line 839: [str_filesystem_write: db "filesystem_write", db 0;]
removed string literal ""filesystem_write""

line 840: [str_str_delinearize: db "str_delinearize", db 0;]
removed string literal ""str_delinearize""

line 841: [str_filesystem_read: db "filesystem_read", db 0;]
removed string literal ""filesystem_read""

line 842: [str_initPaging: db "initPaging", db 0;]
removed string literal ""initPaging""

line 843: [str_setPageTable: db "setPageTable", db 0;]
removed string literal ""setPageTable""

line 844: [str_getPage: db "getPage", db 0;]
removed string literal ""getPage""

line 845: [str_setPageFlags: db "setPageFlags", db 0;]
removed string literal ""setPageFlags""

line 846: [str_getPageFlags: db "getPageFlags", db 0;]
removed string literal ""getPageFlags""

line 847: [str_setPageRunLevel: db "setPageRunLevel", db 0;]
removed string literal ""setPageRunLevel""

line 848: [str_getPageRunlevel: db "getPageRunlevel", db 0;]
removed string literal ""getPageRunlevel""

line 849: [str_setPageMapping: db "setPageMapping", db 0;]
removed string literal ""setPageMapping""

line 850: [str_getPageMapping: db "getPageMapping", db 0;]
removed string literal ""getPageMapping""

line 851: [str_reportPage: db "reportPage", db 0;]
removed string literal ""reportPage""

line 852: [str_toPage: db "toPage", db 0;]
removed string literal ""toPage""

line 853: [str_copyPage: db "copyPage", db 0;]
removed string literal ""copyPage""

line 854: [str_mapPage: db "mapPage", db 0;]
removed string literal ""mapPage""

line 855: [str_setMemoryRunlevel: db "setMemoryRunlevel", db 0;]
removed string literal ""setMemoryRunlevel""

line 856: [str_setMemoryMapping: db "setMemoryMapping", db 0;]
removed string literal ""setMemoryMapping""

line 857: [str_pagingEnable: db "pagingEnable", db 0;]
removed string literal ""pagingEnable""

line 858: [str_pagingDisable: db "pagingDisable", db 0;]
removed string literal ""pagingDisable""

line 859: [str_sizeof_thread: db "sizeof_thread", db 0;]
removed string literal ""sizeof_thread""

line 860: [str_thread_constructor: db "thread_constructor", db 0;]
removed string literal ""thread_constructor""

line 861: [str_thread_copy_constructor: db "thread_copy_constructor", db 0;]
removed string literal ""thread_copy_constructor""

line 862: [str_thread_destructor: db "thread_destructor", db 0;]
removed string literal ""thread_destructor""

line 863: [str_thread_new: db "thread_new", db 0;]
removed string literal ""thread_new""

line 864: [str_thread_delete: db "thread_delete", db 0;]
removed string literal ""thread_delete""

line 865: [str_thread_get_canary: db "thread_get_canary", db 0;]
removed string literal ""thread_get_canary""

line 866: [str_thread_get_entry: db "thread_get_entry", db 0;]
removed string literal ""thread_get_entry""

line 867: [str_thread_get_args: db "thread_get_args", db 0;]
removed string literal ""thread_get_args""

line 868: [str_thread_get_time: db "thread_get_time", db 0;]
removed string literal ""thread_get_time""

line 869: [str_thread_get_ip: db "thread_get_ip", db 0;]
removed string literal ""thread_get_ip""

line 870: [str_thread_get_stack: db "thread_get_stack", db 0;]
removed string literal ""thread_get_stack""

line 871: [str_thread_get_regs: db "thread_get_regs", db 0;]
removed string literal ""thread_get_regs""

line 872: [str_thread_set_canary: db "thread_set_canary", db 0;]
removed string literal ""thread_set_canary""

line 873: [str_thread_set_entry: db "thread_set_entry", db 0;]
removed string literal ""thread_set_entry""

line 874: [str_thread_set_args: db "thread_set_args", db 0;]
removed string literal ""thread_set_args""

line 875: [str_thread_set_time: db "thread_set_time", db 0;]
removed string literal ""thread_set_time""

line 876: [str_thread_set_ip: db "thread_set_ip", db 0;]
removed string literal ""thread_set_ip""

line 877: [str_thread_set_stack: db "thread_set_stack", db 0;]
removed string literal ""thread_set_stack""

line 878: [str_thread_set_regs: db "thread_set_regs", db 0;]
removed string literal ""thread_set_regs""

line 879: [str_initThreads: db "initThreads", db 0;]
removed string literal ""initThreads""

line 880: [str_regs_set_to_entry: db "regs_set_to_entry", db 0;]
removed string literal ""regs_set_to_entry""

line 881: [str_thread_run: db "thread_run", db 0;]
removed string literal ""thread_run""

line 882: [str_thread_enter: db "thread_enter", db 0;]
removed string literal ""thread_enter""

line 883: [str_multitask_test: db "multitask_test", db 0;]
removed string literal ""multitask_test""

line 884: [str_thread_yield: db "thread_yield", db 0;]
removed string literal ""thread_yield""

line 885: [str_print_threads: db "print_threads", db 0;]
removed string literal ""print_threads""

line 886: [str_thread_exit_func: db "thread_exit_func", db 0;]
removed string literal ""thread_exit_func""

line 887: [str_thread_create: db "thread_create", db 0;]
removed string literal ""thread_create""

line 888: [str_delay: db "delay", db 0;]
removed string literal ""delay""

line 889: [str_initInterrupts: db "initInterrupts", db 0;]
removed string literal ""initInterrupts""

line 890: [str_addInterruptHandler: db "addInterruptHandler", db 0;]
removed string literal ""addInterruptHandler""

line 891: [str_defaultIntHandler: db "defaultIntHandler", db 0;]
removed string literal ""defaultIntHandler""

line 892: [str_stopIntHandler: db "stopIntHandler", db 0;]
removed string literal ""stopIntHandler""

line 893: [str_errIntHandler: db "errIntHandler", db 0;]
removed string literal ""errIntHandler""

line 894: [str_extendedModeEnable: db "extendedModeEnable", db 0;]
removed string literal ""extendedModeEnable""

line 895: [str_extendedModeDisable: db "extendedModeDisable", db 0;]
removed string literal ""extendedModeDisable""

line 896: [str_interruptsEnable: db "interruptsEnable", db 0;]
removed string literal ""interruptsEnable""

line 897: [str_interruptsDisable: db "interruptsDisable", db 0;]
removed string literal ""interruptsDisable""

line 898: [str_intnum_to_str: db "intnum_to_str", db 0;]
removed string literal ""intnum_to_str""

line 899: [str_getStackTrace: db "getStackTrace", db 0;]
removed string literal ""getStackTrace""

line 900: [str_printStackTrace: db "printStackTrace", db 0;]
removed string literal ""printStackTrace""

line 901: [str_findClosestFunc: db "findClosestFunc", db 0;]
removed string literal ""findClosestFunc""

line 902: [str_getFuncName: db "getFuncName", db 0;]
removed string literal ""getFuncName""

line 903: [str_getVarName: db "getVarName", db 0;]
removed string literal ""getVarName""

line 904: [str_getSymbolName: db "getSymbolName", db 0;]
removed string literal ""getSymbolName""

line 905: [str_findSymbolByName: db "findSymbolByName", db 0;]
removed string literal ""findSymbolByName""

line 906: [str_findFuncByName: db "findFuncByName", db 0;]
removed string literal ""findFuncByName""

line 907: [str_findVarByName: db "findVarByName", db 0;]
removed string literal ""findVarByName""

line 908: [str_libdynamicstruct_init: db "libdynamicstruct_init", db 0;]
removed string literal ""libdynamicstruct_init""

line 909: [str_fgetfloat: db "fgetfloat", db 0;]
removed string literal ""fgetfloat""

line 910: [str_ds_read_definition: db "ds_read_definition", db 0;]
removed string literal ""ds_read_definition""

line 911: [str_main: db "main", db 0;]
removed string literal ""main""

line 912: [str_setupInterrupts: db "setupInterrupts", db 0;]
removed string literal ""setupInterrupts""

line 913: [str_memtest2: db "memtest2", db 0;]
removed string literal ""memtest2""

line 914: [func_name_table_end:]

line 915: []

line 916: [var_name_table:]

line 917: [str_size: db "size", db 0;]
removed string literal ""size""

line 918: [str_AdrEB: db "AdrEB", db 0;]
removed string literal ""AdrEB""

line 919: [str_AdrRAM: db "AdrRAM", db 0;]
removed string literal ""AdrRAM""

line 920: [str_AdrKb: db "AdrKb", db 0;]
removed string literal ""AdrKb""

line 921: [str_AdrHDD: db "AdrHDD", db 0;]
removed string literal ""AdrHDD""

line 922: [str_AdrPort: db "AdrPort", db 0;]
removed string literal ""AdrPort""

line 923: [str_OSversion: db "OSversion", db 0;]
removed string literal ""OSversion""

line 924: [str_num_screens_x: db "num_screens_x", db 0;]
removed string literal ""num_screens_x""

line 925: [str_num_screens_y: db "num_screens_y", db 0;]
removed string literal ""num_screens_y""

line 926: [str_Nbase: db "Nbase", db 0;]
removed string literal ""Nbase""

line 927: [str_Nprec: db "Nprec", db 0;]
removed string literal ""Nprec""

line 928: [str_printScrX: db "printScrX", db 0;]
removed string literal ""printScrX""

line 929: [str_printScrY: db "printScrY", db 0;]
removed string literal ""printScrY""

line 930: [str_printBuffX: db "printBuffX", db 0;]
removed string literal ""printBuffX""

line 931: [str_printBuffY: db "printBuffY", db 0;]
removed string literal ""printBuffY""

line 932: [str_printLineOffset: db "printLineOffset", db 0;]
removed string literal ""printLineOffset""

line 933: [str_printSpecials: db "printSpecials", db 0;]
removed string literal ""printSpecials""

line 934: [str_RedrawPending: db "RedrawPending", db 0;]
removed string literal ""RedrawPending""

line 935: [str_screen_print_x_min: db "screen_print_x_min", db 0;]
removed string literal ""screen_print_x_min""

line 936: [str_screen_print_y_min: db "screen_print_y_min", db 0;]
removed string literal ""screen_print_y_min""

line 937: [str_screen_print_x_max: db "screen_print_x_max", db 0;]
removed string literal ""screen_print_x_max""

line 938: [str_screen_print_y_max: db "screen_print_y_max", db 0;]
removed string literal ""screen_print_y_max""

line 939: [str_AdrScreen: db "AdrScreen", db 0;]
removed string literal ""AdrScreen""

line 940: [str_mcs_width: db "mcs_width", db 0;]
removed string literal ""mcs_width""

line 941: [str_mcs_height: db "mcs_height", db 0;]
removed string literal ""mcs_height""

line 942: [str_mcs_last_x: db "mcs_last_x", db 0;]
removed string literal ""mcs_last_x""

line 943: [str_mcs_last_y: db "mcs_last_y", db 0;]
removed string literal ""mcs_last_y""

line 944: [str_cs_width: db "cs_width", db 0;]
removed string literal ""cs_width""

line 945: [str_cs_height: db "cs_height", db 0;]
removed string literal ""cs_height""

line 946: [str_cs_last_x: db "cs_last_x", db 0;]
removed string literal ""cs_last_x""

line 947: [str_cs_last_y: db "cs_last_y", db 0;]
removed string literal ""cs_last_y""

line 948: [str_malloc_debug: db "malloc_debug", db 0;]
removed string literal ""malloc_debug""

line 949: [str_malloc_print: db "malloc_print", db 0;]
removed string literal ""malloc_print""

line 950: [str_malloc_num2str: db "malloc_num2str", db 0;]
removed string literal ""malloc_num2str""

line 951: [str_malloc_disk: db "malloc_disk", db 0;]
removed string literal ""malloc_disk""

line 952: [str_malloc_max_disk: db "malloc_max_disk", db 0;]
removed string literal ""malloc_max_disk""

line 953: [str_malloc_header: db "malloc_header", db 0;]
removed string literal ""malloc_header""

line 954: [str_malloc_user: db "malloc_user", db 0;]
removed string literal ""malloc_user""

line 955: [str_lastFreeAllocation: db "lastFreeAllocation", db 0;]
removed string literal ""lastFreeAllocation""

line 956: [str_malloc_debug_iters: db "malloc_debug_iters", db 0;]
removed string literal ""malloc_debug_iters""

line 957: [str_sizeof_vector: db "sizeof_vector", db 0;]
removed string literal ""sizeof_vector""

line 958: [str_sizeof_listnode: db "sizeof_listnode", db 0;]
removed string literal ""sizeof_listnode""

line 959: [str_sizeof_list: db "sizeof_list", db 0;]
removed string literal ""sizeof_list""

line 960: [str_ptrKB: db "ptrKB", db 0;]
removed string literal ""ptrKB""

line 961: [str_readKeyTimed_delay_time: db "readKeyTimed_delay_time", db 0;]
removed string literal ""readKeyTimed_delay_time""

line 962: [str_readKeyTimed_repeat_time: db "readKeyTimed_repeat_time", db 0;]
removed string literal ""readKeyTimed_repeat_time""

line 963: [str_readKeyTimed_keyState: db "readKeyTimed_keyState", db 0;]
removed string literal ""readKeyTimed_keyState""

line 964: [str_readKeyTimed_lastSeen: db "readKeyTimed_lastSeen", db 0;]
removed string literal ""readKeyTimed_lastSeen""

line 965: [str_readKeyTimed_lastKey: db "readKeyTimed_lastKey", db 0;]
removed string literal ""readKeyTimed_lastKey""

line 966: [str_checksum_prev_first: db "checksum_prev_first", db 0;]
removed string literal ""checksum_prev_first""

line 967: [str_checksum_previous: db "checksum_previous", db 0;]
removed string literal ""checksum_previous""

line 968: [str_crc_prev_first: db "crc_prev_first", db 0;]
removed string literal ""crc_prev_first""

line 969: [str_crc_previous: db "crc_previous", db 0;]
removed string literal ""crc_previous""

line 970: [str_shell_panic_ebp: db "shell_panic_ebp", db 0;]
removed string literal ""shell_panic_ebp""

line 971: [str_shell_panic_esp: db "shell_panic_esp", db 0;]
removed string literal ""shell_panic_esp""

line 972: [str_R: db "R", db 0;]
removed string literal ""R""

line 973: [str_Echo: db "Echo", db 0;]
removed string literal ""Echo""

line 974: [str_Arr: db "Arr", db 0;]
removed string literal ""Arr""

line 975: [str_PKSI: db "PKSI", db 0;]
removed string literal ""PKSI""

line 976: [str_listeningToInput: db "listeningToInput", db 0;]
removed string literal ""listeningToInput""

line 977: [str_numModules: db "numModules", db 0;]
removed string literal ""numModules""

line 978: [str_MinStrI: db "MinStrI", db 0;]
removed string literal ""MinStrI""

line 979: [str_sizeof_file_handle: db "sizeof_file_handle", db 0;]
removed string literal ""sizeof_file_handle""

line 980: [str_current_path: db "current_path", db 0;]
removed string literal ""current_path""

line 981: [str_files: db "files", db 0;]
removed string literal ""files""

line 982: [str_filenames: db "filenames", db 0;]
removed string literal ""filenames""

line 983: [str_threadpool: db "threadpool", db 0;]
removed string literal ""threadpool""

line 984: [str_cur_thread: db "cur_thread", db 0;]
removed string literal ""cur_thread""

line 985: [str_thread_stack_size: db "thread_stack_size", db 0;]
removed string literal ""thread_stack_size""

line 986: [str_numInts: db "numInts", db 0;]
removed string literal ""numInts""

line 987: [str_v_ds_typeinfos: db "v_ds_typeinfos", db 0;]
removed string literal ""v_ds_typeinfos""

line 988: [var_name_table_end:]

line 989: [#endif]

line 990: []

line 205: [//#include <cyclone/libs/typesystem.txt>]

line 206: [#include <cyclone/libs/libdynamicstruct.txt>]
found include <cyclone/libs/libdynamicstruct.txt>
reading file cyclone/libs/libdynamicstruct.txt

line 1: [//libdynamicstruct]

line 2: [//]

line 3: [// dynamic, reflective structures]

line 4: [//]

line 5: [#include <cyclone/libs/ds/type_entry.txt>]
found include <cyclone/libs/ds/type_entry.txt>
reading file cyclone/libs/ds/type_entry.txt

line 1: [#ifndef type_entry_GUARD]
#ifndef "type_entry_GUARD" (undefined)

line 2: [#define type_entry_GUARD]
#defined "type_entry_GUARD"

line 3: []

line 4: [//generated using:]

line 5: [//skeleton.exe type_entry name type isexplicit param1 param2 param3 subentry ]

line 6: []

line 7: [//struct type_entry]

line 8: [//    0: name]

line 9: [//    1: type]

line 10: [//    2: isexplicit]

line 11: [//    3: param1]

line 12: [//    4: param2]

line 13: [//    5: param3]

line 14: [//    6: subentry]

line 15: [//]

line 16: []

line 17: [float sizeof_type_entry = 7;]
found global var sizeof_type_entry

line 18: []

line 19: [//default constructor]

line 20: [void type_entry_constructor(float this){]
found func type_entry_constructor



sig1 = void type_entry_constructor(float this)
sig2 = (float this)
found param this

line 21: [    this[0] = 0;]
found reference to this
currentFunc = type_entry_constructor
ref this is REF_STACK

line 22: [    this[1] = 0;]

line 23: [    this[2] = 0;]

line 24: [    this[3] = 0;]

line 25: [    this[4] = 0;]

line 26: [    this[5] = 0;]

line 27: [    this[6] = 0;]

line 28: [}]

line 29: []

line 30: [//copy constructor]

line 31: [void type_entry_copy_constructor(float this, float that){]
found func type_entry_copy_constructor



sig1 = void type_entry_copy_constructor(float this, float that)
sig2 = (float this, float that)
found param this
found param that

line 32: [    this[0] = that[0];]
found reference to this
currentFunc = type_entry_copy_constructor
ref this is REF_STACK
found reference to that
currentFunc = type_entry_copy_constructor
ref that is REF_STACK

line 33: [    this[1] = that[1];]

line 34: [    this[2] = that[2];]

line 35: [    this[3] = that[3];]

line 36: [    this[4] = that[4];]

line 37: [    this[5] = that[5];]

line 38: [    this[6] = that[6];]

line 39: [}]

line 40: []

line 41: [//default destructor]

line 42: [void type_entry_destructor(float this){]
found func type_entry_destructor



sig1 = void type_entry_destructor(float this)
sig2 = (float this)
found param this

line 43: [    //add your code here]

line 44: [}]

line 45: []

line 46: [//equivalent to "new type_entry"]
removed string literal ""new type_entry""

line 47: [float type_entry_new(){]
found func type_entry_new



sig1 = float type_entry_new()
sig2 = ()

line 48: [    float size = sizeof_type_entry;]
found local var size (BL = 1)
found reference to sizeof_type_entry
currentFunc = type_entry_new
ref sizeof_type_entry is REF_EXT

line 49: [    float p = malloc(size);]
found local var p (BL = 1)

line 50: [    type_entry_constructor(p);]
found reference to type_entry_constructor
currentFunc = type_entry_new
ref type_entry_constructor is REF_EXT

line 51: [    return p;]

line 52: [}]

line 53: []

line 54: [//equivalent to "delete type_entry"]
removed string literal ""delete type_entry""

line 55: [void type_entry_delete(float this){]
found func type_entry_delete



sig1 = void type_entry_delete(float this)
sig2 = (float this)
found param this

line 56: [    type_entry_destructor(this);]
found reference to type_entry_destructor
currentFunc = type_entry_delete
ref type_entry_destructor is REF_EXT
found reference to this
currentFunc = type_entry_delete
ref this is REF_STACK

line 57: [    free(this);]

line 58: [}]

line 59: []

line 60: [//getters]

line 61: [float type_entry_get_name(float this){return this[0];}]
found func type_entry_get_name



sig1 = float type_entry_get_name(float this)
sig2 = (float this)
found param this
found reference to this
currentFunc = type_entry_get_name
ref this is REF_STACK

line 62: [float type_entry_get_type(float this){return this[1];}]
found func type_entry_get_type



sig1 = float type_entry_get_type(float this)
sig2 = (float this)
found param this
found reference to this
currentFunc = type_entry_get_type
ref this is REF_STACK

line 63: [float type_entry_get_isexplicit(float this){return this[2];}]
found func type_entry_get_isexplicit



sig1 = float type_entry_get_isexplicit(float this)
sig2 = (float this)
found param this
found reference to this
currentFunc = type_entry_get_isexplicit
ref this is REF_STACK

line 64: [float type_entry_get_param1(float this){return this[3];}]
found func type_entry_get_param1



sig1 = float type_entry_get_param1(float this)
sig2 = (float this)
found param this
found reference to this
currentFunc = type_entry_get_param1
ref this is REF_STACK

line 65: [float type_entry_get_param2(float this){return this[4];}]
found func type_entry_get_param2



sig1 = float type_entry_get_param2(float this)
sig2 = (float this)
found param this
found reference to this
currentFunc = type_entry_get_param2
ref this is REF_STACK

line 66: [float type_entry_get_param3(float this){return this[5];}]
found func type_entry_get_param3



sig1 = float type_entry_get_param3(float this)
sig2 = (float this)
found param this
found reference to this
currentFunc = type_entry_get_param3
ref this is REF_STACK

line 67: [float type_entry_get_subentry(float this){return this[6];}]
found func type_entry_get_subentry



sig1 = float type_entry_get_subentry(float this)
sig2 = (float this)
found param this
found reference to this
currentFunc = type_entry_get_subentry
ref this is REF_STACK

line 68: []

line 69: [//setters]

line 70: [void type_entry_set_name(float this, float N){this[0] = N;}]
found func type_entry_set_name



sig1 = void type_entry_set_name(float this, float N)
sig2 = (float this, float N)
found param this
found param N
found reference to this
currentFunc = type_entry_set_name
ref this is REF_STACK
found reference to N
currentFunc = type_entry_set_name
ref N is REF_STACK

line 71: [void type_entry_set_type(float this, float N){this[1] = N;}]
found func type_entry_set_type



sig1 = void type_entry_set_type(float this, float N)
sig2 = (float this, float N)
found param this
found param N
found reference to this
currentFunc = type_entry_set_type
ref this is REF_STACK
found reference to N
currentFunc = type_entry_set_type
ref N is REF_STACK

line 72: [void type_entry_set_isexplicit(float this, float N){this[2] = N;}]
found func type_entry_set_isexplicit



sig1 = void type_entry_set_isexplicit(float this, float N)
sig2 = (float this, float N)
found param this
found param N
found reference to this
currentFunc = type_entry_set_isexplicit
ref this is REF_STACK
found reference to N
currentFunc = type_entry_set_isexplicit
ref N is REF_STACK

line 73: [void type_entry_set_param1(float this, float N){this[3] = N;}]
found func type_entry_set_param1



sig1 = void type_entry_set_param1(float this, float N)
sig2 = (float this, float N)
found param this
found param N
found reference to this
currentFunc = type_entry_set_param1
ref this is REF_STACK
found reference to N
currentFunc = type_entry_set_param1
ref N is REF_STACK

line 74: [void type_entry_set_param2(float this, float N){this[4] = N;}]
found func type_entry_set_param2



sig1 = void type_entry_set_param2(float this, float N)
sig2 = (float this, float N)
found param this
found param N
found reference to this
currentFunc = type_entry_set_param2
ref this is REF_STACK
found reference to N
currentFunc = type_entry_set_param2
ref N is REF_STACK

line 75: [void type_entry_set_param3(float this, float N){this[5] = N;}]
found func type_entry_set_param3



sig1 = void type_entry_set_param3(float this, float N)
sig2 = (float this, float N)
found param this
found param N
found reference to this
currentFunc = type_entry_set_param3
ref this is REF_STACK
found reference to N
currentFunc = type_entry_set_param3
ref N is REF_STACK

line 76: [void type_entry_set_subentry(float this, float N){this[6] = N;}]
found func type_entry_set_subentry



sig1 = void type_entry_set_subentry(float this, float N)
sig2 = (float this, float N)
found param this
found param N
found reference to this
currentFunc = type_entry_set_subentry
ref this is REF_STACK
found reference to N
currentFunc = type_entry_set_subentry
ref N is REF_STACK

line 77: []

line 78: [#endif]

line 79: []

line 6: [#include <cyclone/libs/ds/type_info.txt>]
found include <cyclone/libs/ds/type_info.txt>
reading file cyclone/libs/ds/type_info.txt

line 1: [#ifndef type_info_GUARD]
#ifndef "type_info_GUARD" (undefined)

line 2: [#define type_info_GUARD]
#defined "type_info_GUARD"

line 3: []

line 4: [//generated using:]

line 5: [//skeleton type_info name type entries -canary ]

line 6: []

line 7: [//struct type_info]

line 8: [//    0: canary]

line 9: [//    1: name]

line 10: [//    2: type]

line 11: [//    3: entries]

line 12: [//]

line 13: []

line 14: [str_type_info: db "type_info",0;]
removed string literal ""type_info""
found label str_type_info

line 15: []

line 16: [#ifndef CANARY_GUARD]
#ifndef "CANARY_GUARD" (defined)

line 17: [#define CANARY_GUARD]

line 18: [void error(){int 1;}]

line 19: [void check_canary(float this, float canary){]

line 20: [   if(this[0] != canary){]

line 21: [        error();]

line 22: [   }]

line 23: [}]

line 24: [#endif]

line 25: []

line 26: [float sizeof_type_info(){return 4};]
found func sizeof_type_info



sig1 = float sizeof_type_info()
sig2 = ()

line 27: []

line 28: [//default constructor]

line 29: [void type_info_constructor(float this){]
found func type_info_constructor



sig1 = void type_info_constructor(float this)
sig2 = (float this)
found param this

line 30: [    this[0] = str_type_info;]
found reference to this
currentFunc = type_info_constructor
ref this is REF_STACK
found reference to str_type_info
currentFunc = type_info_constructor
ref str_type_info is REF_EXT

line 31: [    this[1] = 0;]

line 32: [    this[2] = 0;]

line 33: [    this[3] = 0;]

line 34: [}]

line 35: []

line 36: [//copy constructor]

line 37: [void type_info_copy_constructor(float this, float that){]
found func type_info_copy_constructor



sig1 = void type_info_copy_constructor(float this, float that)
sig2 = (float this, float that)
found param this
found param that

line 38: [    this[0] = that[0];]
found reference to this
currentFunc = type_info_copy_constructor
ref this is REF_STACK
found reference to that
currentFunc = type_info_copy_constructor
ref that is REF_STACK

line 39: [    this[1] = that[1];]

line 40: [    this[2] = that[2];]

line 41: [    this[3] = that[3];]

line 42: [    check_canary(this,str_type_info);]

line 43: [}]

line 44: []

line 45: [//default destructor]

line 46: [void type_info_destructor(float this){check_canary(this,str_type_info);]
found func type_info_destructor



sig1 = void type_info_destructor(float this)
sig2 = (float this)
found param this
found reference to this
currentFunc = type_info_destructor
ref this is REF_STACK

line 47: [    check_canary(this,str_type_info);]

line 48: [    //add your code here]

line 49: [}]

line 50: []

line 51: [//equivalent to "new type_info"]
removed string literal ""new type_info""

line 52: [float type_info_new(){]
found func type_info_new



sig1 = float type_info_new()
sig2 = ()

line 53: [    float size = sizeof_type_info();]
found local var size (BL = 1)
found reference to sizeof_type_info
currentFunc = type_info_new
ref sizeof_type_info is REF_EXT

line 54: [    float p = malloc(size);]
found local var p (BL = 1)

line 55: [    type_info_constructor(p);]
found reference to type_info_constructor
currentFunc = type_info_new
ref type_info_constructor is REF_EXT

line 56: [    return p;]

line 57: [}]

line 58: []

line 59: [//equivalent to "delete type_info"]
removed string literal ""delete type_info""

line 60: [void type_info_delete(float this){]
found func type_info_delete



sig1 = void type_info_delete(float this)
sig2 = (float this)
found param this

line 61: [    type_info_destructor(this);]
found reference to type_info_destructor
currentFunc = type_info_delete
ref type_info_destructor is REF_EXT
found reference to this
currentFunc = type_info_delete
ref this is REF_STACK

line 62: [    free(this);]

line 63: [}]

line 64: []

line 65: [//getters]

line 66: [float type_info_get_canary(float this){check_canary(this,str_type_info);return this[0];}]
found func type_info_get_canary



sig1 = float type_info_get_canary(float this)
sig2 = (float this)
found param this
found reference to this
currentFunc = type_info_get_canary
ref this is REF_STACK

line 67: [float type_info_get_name(float this){check_canary(this,str_type_info);return this[1];}]
found func type_info_get_name



sig1 = float type_info_get_name(float this)
sig2 = (float this)
found param this
found reference to this
currentFunc = type_info_get_name
ref this is REF_STACK

line 68: [float type_info_get_type(float this){check_canary(this,str_type_info);return this[2];}]
found func type_info_get_type



sig1 = float type_info_get_type(float this)
sig2 = (float this)
found param this
found reference to this
currentFunc = type_info_get_type
ref this is REF_STACK

line 69: [float type_info_get_entries(float this){check_canary(this,str_type_info);return this[3];}]
found func type_info_get_entries



sig1 = float type_info_get_entries(float this)
sig2 = (float this)
found param this
found reference to this
currentFunc = type_info_get_entries
ref this is REF_STACK

line 70: []

line 71: [//setters]

line 72: [void type_info_set_canary(float this, float N){check_canary(this,str_type_info);this[0] = N;}]
found func type_info_set_canary



sig1 = void type_info_set_canary(float this, float N)
sig2 = (float this, float N)
found param this
found param N
found reference to this
currentFunc = type_info_set_canary
ref this is REF_STACK
found reference to N
currentFunc = type_info_set_canary
ref N is REF_STACK

line 73: [void type_info_set_name(float this, float N){check_canary(this,str_type_info);this[1] = N;}]
found func type_info_set_name



sig1 = void type_info_set_name(float this, float N)
sig2 = (float this, float N)
found param this
found param N
found reference to this
currentFunc = type_info_set_name
ref this is REF_STACK
found reference to N
currentFunc = type_info_set_name
ref N is REF_STACK

line 74: [void type_info_set_type(float this, float N){check_canary(this,str_type_info);this[2] = N;}]
found func type_info_set_type



sig1 = void type_info_set_type(float this, float N)
sig2 = (float this, float N)
found param this
found param N
found reference to this
currentFunc = type_info_set_type
ref this is REF_STACK
found reference to N
currentFunc = type_info_set_type
ref N is REF_STACK

line 75: [void type_info_set_entries(float this, float N){check_canary(this,str_type_info);this[3] = N;}]
found func type_info_set_entries



sig1 = void type_info_set_entries(float this, float N)
sig2 = (float this, float N)
found param this
found param N
found reference to this
currentFunc = type_info_set_entries
ref this is REF_STACK
found reference to N
currentFunc = type_info_set_entries
ref N is REF_STACK

line 76: []

line 77: [#endif]

line 7: []

line 8: [float v_ds_typeinfos;]
found global var v_ds_typeinfos

line 9: []

line 10: [//------------------------]

line 11: [//name, type, isexplicit, param1, param2, param3, subentry]

line 12: [// struct type_entry]

line 13: [// 0. canary/typeof]

line 14: [// 1. string name]

line 15: [// 2. int type]

line 16: [// 3. bool isexplicit]

line 17: [// 4. float param1]

line 18: [// 5. float param2]

line 19: [// 6. float param3]

line 20: [// 7. float subentry]

line 21: []

line 22: []

line 23: [//------------------------]

line 24: []

line 25: [float libdynamicstruct_init(){]
found func libdynamicstruct_init



sig1 = float libdynamicstruct_init()
sig2 = ()

line 26: [    printf("init lib dynamic struct\n");]
removed string literal ""init lib dynamic struct\n""

line 27: [    ]

line 28: [    v_ds_typeinfos = malloc(sizeof_vector);]
found reference to v_ds_typeinfos
currentFunc = libdynamicstruct_init
ref v_ds_typeinfos is REF_EXT

line 29: [    vector_constructor(v_ds_typeinfos,1);]

line 30: [    ]

line 31: [}]

line 32: []

line 33: [float libdynamicstruct_initCommands(){]
found func libdynamicstruct_initCommands



sig1 = float libdynamicstruct_initCommands()
sig2 = ()

line 34: [    addShellCmd("libds_test", libds_test, libds_test_help); ]
removed string literal ""libds_test""
found reference to libds_test
currentFunc = libdynamicstruct_initCommands
ref libds_test is REF_EXT
found reference to libds_test_help
currentFunc = libdynamicstruct_initCommands
ref libds_test_help is REF_EXT

line 35: [}]

line 36: []

line 37: [float libds_test(float argc, float argv){]
found func libds_test



sig1 = float libds_test(float argc, float argv)
sig2 = (float argc, float argv)
found param argc
found param argv

line 38: [    printf("libds_test\n");]
removed string literal ""libds_test\n""

line 39: [    printf("argc = %d\n",argc);]
removed string literal ""argc = %d\n""
found reference to argc
currentFunc = libds_test
ref argc is REF_STACK

line 40: [    float I;]
found local var I (BL = 1)

line 41: [    for(I = 0; I < argc; I++){]
found reference to I
currentFunc = libds_test
ref I is REF_STACK

line 42: [        printf("argv[%d] = [%s]\n",I,argv[I]);]
removed string literal ""argv[%d] = [%s]\n""
found reference to argv
currentFunc = libds_test
ref argv is REF_STACK

line 43: [    }]

line 44: [    ]

line 45: [    float filename = argv[0];]
found local var filename (BL = 1)

line 46: [    float f = fopen(filename,"r");]
removed string literal ""r""
found local var f (BL = 1)
found reference to filename
currentFunc = libds_test
ref filename is REF_STACK

line 47: [    if(!f){]
found reference to f
currentFunc = libds_test
ref f is REF_STACK

line 48: [        printf("can't open %s\n",filename);]
removed string literal ""can't open %s\n""

line 49: [    }else{]

line 50: [        printf("opened ok\n");]
removed string literal ""opened ok\n""

line 51: [    }]

line 52: [    ]

line 53: [    //1: read the ds structs from file]

line 54: [    ds_read_definition(f);]

line 55: [    //2: try creating some of the structs]

line 56: [    //3: and editing them]

line 57: [    //4: save and load]

line 58: [    //5: print]

line 59: [    ]

line 60: [    ]

line 61: [    //---------------------]

line 62: [    //1: create a simple struct]

line 63: [        //1.1: create a typeinfo]

line 64: [        ]

line 65: [    ]

line 66: [    ]

line 67: [    //2: create a struct with another struct in it]

line 68: [    //3: create a struct with a c-list of things]

line 69: [    //4: create a struct with a len-list of things]

line 70: [    //5: create a struct with everything]

line 71: [    ]

line 72: [    ]

line 73: [    printf("done\n");]
removed string literal ""done\n""

line 74: [}]

line 75: [libds_test_help:db "run a unit test of the dynamic struct library\n", db 0;]
removed string literal ""run a unit test of the dynamic struct library\n""
found label libds_test_help

line 76: []

line 77: []

line 78: [float fgetfloat(float f){float byte = 0; fread(&byte,1,f); return byte;}]
found func fgetfloat



sig1 = float fgetfloat(float f)
sig2 = (float f)
found param f
found reference to byte
currentFunc = fgetfloat
ref byte is REF_EXT
found reference to f
currentFunc = fgetfloat
ref f is REF_STACK

line 79: []

line 80: [float asslen(float f, float len){]
found func asslen



sig1 = float asslen(float f, float len)
sig2 = (float f, float len)
found param f
found param len

line 81: [    float len2 = fsize(f);]
found local var len2 (BL = 1)
found reference to f
currentFunc = asslen
ref f is REF_STACK

line 82: [    if(len2 != len){]
found reference to len2
currentFunc = asslen
ref len2 is REF_STACK
found reference to len
currentFunc = asslen
ref len is REF_STACK

line 83: [        printf("file length error! length %d instead of %d\n",len2, len);]
removed string literal ""file length error! length %d instead of %d\n""

line 84: [        shell_panic();]

line 85: [    }]

line 86: [}]

line 87: []

line 88: [//fileHandle file]

line 89: [float ds_read_definition(float fileHandle){]
found func ds_read_definition



sig1 = float ds_read_definition(float fileHandle)
sig2 = (float fileHandle)
found param fileHandle

line 90: [    //float flen = fsize(fileHandle);]

line 91: [    //printf("flen = %d\n",flen);]
removed string literal ""flen = %d\n""

line 92: [    printf("reading header...\n");]
removed string literal ""reading header...\n""

line 93: [    float f = fileHandle;]
found local var f (BL = 1)
found reference to fileHandle
currentFunc = ds_read_definition
ref fileHandle is REF_STACK

line 94: [    //asslen(f,flen);]

line 95: [    fseek(f,1,0);]
found reference to f
currentFunc = ds_read_definition
ref f is REF_STACK

line 96: [    ]

line 97: [    //asslen(f,flen);]

line 98: [    float ti_table = fgetfloat(f);    //position of the list of typeinfos in the file]
found local var ti_table (BL = 1)
found reference to fgetfloat
currentFunc = ds_read_definition
ref fgetfloat is REF_EXT

line 99: [    //asslen(f,flen);]

line 100: [    printf("ti_table @ %d\n", ti_table);]
removed string literal ""ti_table @ %d\n""
found reference to ti_table
currentFunc = ds_read_definition
ref ti_table is REF_STACK

line 101: [    float ti_strings = fgetfloat(f);  //position of the stringstore in the file]
found local var ti_strings (BL = 1)

line 102: [    //asslen(f,flen);]

line 103: [    printf("ti_strings @ %d\n", ti_strings);]
removed string literal ""ti_strings @ %d\n""
found reference to ti_strings
currentFunc = ds_read_definition
ref ti_strings is REF_STACK

line 104: [    printf("reading ti table...\n");    ]
removed string literal ""reading ti table...\n""

line 105: [    fseek(f,ti_table,0);  ]

line 106: [    float v_ti_table = malloc(sizeof_vector); //vector for typeinfo positions in the file]
found local var v_ti_table (BL = 1)

line 107: [    vector_constructor(v_ti_table,1);]
found reference to v_ti_table
currentFunc = ds_read_definition
ref v_ti_table is REF_STACK

line 108: [    ]

line 109: [    float stop = 0;]
found local var stop (BL = 1)

line 110: [    while(!stop){]
found reference to stop
currentFunc = ds_read_definition
ref stop is REF_STACK

line 111: [        float ti = fgetfloat(f);    //typeinfo positions]
found local var ti (BL = 2)

line 112: [        if(ti == 0){stop = 1;}]
found reference to ti
currentFunc = ds_read_definition
ref ti is REF_STACK

line 113: [        else{]

line 114: [            vector_push(v_ti_table,ti);]

line 115: [        }]

line 116: [    }]

line 117: [    ]

line 118: [    //asslen(f,flen);]

line 119: [    printf("reading string table...\n");]
removed string literal ""reading string table...\n""

line 120: [    fseek(f,ti_strings,0);    ]

line 121: [    float v_ti_strings = malloc(sizeof_vector); //vector for string positions in the file]
found local var v_ti_strings (BL = 1)

line 122: [    vector_constructor(v_ti_strings,1);]
found reference to v_ti_strings
currentFunc = ds_read_definition
ref v_ti_strings is REF_STACK

line 123: [    ]

line 124: [    stop = 0;]

line 125: [    while(!stop){]

line 126: [        float s = fgetfloat(f);   //reading string position]
found local var s (BL = 2)

line 127: [        if(s == 0){stop = 1;}]
found reference to s
currentFunc = ds_read_definition
ref s is REF_STACK

line 128: [        else{]

line 129: [            vector_push(v_ti_strings,s);]

line 130: [        } ]

line 131: [    }]

line 132: []

line 133: [    printf("reading stringstore...\n");   ]
removed string literal ""reading stringstore...\n""

line 134: [    float v_ti_strings_actual = malloc(sizeof_vector); //vector for actual strings]
found local var v_ti_strings_actual (BL = 1)

line 135: [    vector_constructor(v_ti_strings_actual,1);]
found reference to v_ti_strings_actual
currentFunc = ds_read_definition
ref v_ti_strings_actual is REF_STACK

line 136: [    ]

line 137: [    float size = vector_get_size(v_ti_strings); ]
found local var size (BL = 1)

line 138: [    ]

line 139: [    float buff[80];]
found local var buff (BL = 1)

line 140: [    float I;]
found local var I (BL = 1)

line 141: [    float pos;]
found local var pos (BL = 1)

line 142: [    for(I = 0; I < size; I++){]
found reference to I
currentFunc = ds_read_definition
ref I is REF_STACK

line 143: [        pos = vector_get(v_ti_strings,0,I); ]
found reference to pos
currentFunc = ds_read_definition
ref pos is REF_STACK

line 144: [        fseek(f,pos,0);]

line 145: [        fread(buff,80,f);]
found reference to buff
currentFunc = ds_read_definition
ref buff is REF_STACK

line 146: [        ]

line 147: [        //float len = strlen(buff)+1;]

line 148: [        //float s2 = malloc(len);]

line 149: [        //memcpy(s2,buff,len);]

line 150: [        float s2 = stralloc(buff);]
found local var s2 (BL = 2)

line 151: [        vector_push(v_ti_strings_actual,s2);]
found reference to s2
currentFunc = ds_read_definition
ref s2 is REF_STACK

line 152: [    }]

line 153: [    ]

line 154: [    ]

line 155: [    //printf("Stringstore:\n");]
removed string literal ""Stringstore:\n""

line 156: [    //size = vector_get_size(v_ti_strings_actual);]

line 157: [    //for(I = 0; I < size; I++){]

line 158: [    //    float s3 = vector_get(v_ti_strings_actual,0,I);]

line 159: [    //    printf("%s\n",s3);]
removed string literal ""%s\n""

line 160: [   // }]

line 161: [    printf("reading typeinfos...\n");]
removed string literal ""reading typeinfos...\n""

line 162: [    printf("-------------------------\n");]
removed string literal ""-------------------------\n""

line 163: [    size = vector_get_size(v_ti_table);]

line 164: [    for(I = 0; I < size; I++){]

line 165: [        pos = vector_get(v_ti_table,0,I);]

line 166: [        fseek(f,pos,0);]

line 167: [        //]

line 168: [        // typeinfo (disk):]

line 169: [        // 0 - name]

line 170: [        // 1 - type]

line 171: [        // 2 - num entries]

line 172: [        //]

line 173: [        // typeinfo (RAM):]

line 174: [        // 0 - name]

line 175: [        // 1 - type]

line 176: [        // 2 - vector(entries)]

line 177: [        ]

line 178: [        fread(buff,3,f);]

line 179: []

line 180: [        float name = buff[0];]
found local var name (BL = 2)

line 181: [        float type = buff[1];]
found local var type (BL = 2)

line 182: [        float num_entries = buff[2];]
found local var num_entries (BL = 2)

line 183: [        ]

line 184: [        float typeinfo = type_info_new();]
found local var typeinfo (BL = 2)
found reference to type_info_new
currentFunc = ds_read_definition
ref type_info_new is REF_EXT

line 185: []

line 186: [        float typeinfo_name = vector_get(v_ti_strings_actual,0,name); //translate stringtable index to actual string-in-RAM pointer]
found local var typeinfo_name (BL = 2)
found local var name (BL = 2)

line 187: [        ]

line 188: [        printf("typeinfo [%s]:\n",typeinfo_name);]
removed string literal ""typeinfo [%s]:\n""
found reference to typeinfo_name
currentFunc = ds_read_definition
ref typeinfo_name is REF_STACK

line 189: [        float typeinfo_entries = malloc(sizeof_vector);]
found local var typeinfo_entries (BL = 2)

line 190: [        ]

line 191: [        vector_constructor(typeinfo_entries,1);]
found reference to typeinfo_entries
currentFunc = ds_read_definition
ref typeinfo_entries is REF_STACK

line 192: [        ]

line 193: [        type_info_set_name(typeinfo, typeinfo_name);]
found reference to type_info_set_name
currentFunc = ds_read_definition
ref type_info_set_name is REF_EXT
found reference to typeinfo
currentFunc = ds_read_definition
ref typeinfo is REF_STACK

line 194: [        type_info_set_type(typeinfo, buff[1]);]
found reference to type_info_set_type
currentFunc = ds_read_definition
ref type_info_set_type is REF_EXT

line 195: [        type_info_set_entries(typeinfo, typeinfo_entries);]
found reference to type_info_set_entries
currentFunc = ds_read_definition
ref type_info_set_entries is REF_EXT

line 196: [        ]

line 197: [        float J;]
found local var J (BL = 2)

line 198: [        for(J = 0; J < num_entries; J++){]
found reference to J
currentFunc = ds_read_definition
ref J is REF_STACK
found reference to num_entries
currentFunc = ds_read_definition
ref num_entries is REF_STACK

line 199: [             fread(buff,sizeof_type_entry,f);]

line 200: [            //struct type_entry]

line 201: [            //    0: name]

line 202: [            //    1: type]

line 203: [            //    2: isexplicit]

line 204: [            //    3: param1]

line 205: [            //    4: param2]

line 206: [            //    5: param3]

line 207: [            //    6: subentry]

line 208: [            float entry = malloc(sizeof_type_entry);]
found local var entry (BL = 3)

line 209: [            type_entry_copy_constructor(entry, buff);]
found reference to type_entry_copy_constructor
currentFunc = ds_read_definition
ref type_entry_copy_constructor is REF_EXT
found reference to entry
currentFunc = ds_read_definition
ref entry is REF_STACK

line 210: [            float e_name = buff[0];]
found local var e_name (BL = 3)

line 211: [            if(e_name == -1){]
found reference to e_name
currentFunc = ds_read_definition
ref e_name is REF_STACK

line 212: [                e_name = 0;]

line 213: [                printf(" entry []\n");]
removed string literal "" entry []\n""

line 214: [            }else{]

line 215: [                e_name = vector_get(v_ti_strings_actual,0,e_name);]

line 216: [                printf(" entry [%s]\n");]
removed string literal "" entry [%s]\n""

line 217: [            }]

line 218: [            type_entry_set_name(entry,e_name);]
found reference to type_entry_set_name
currentFunc = ds_read_definition
ref type_entry_set_name is REF_EXT

line 219: [            ]

line 220: [            vector_push(typeinfo_entries, entry);]

line 221: [        }]

line 222: [        printf("end typeinfo\n\n");]
removed string literal ""end typeinfo\n\n""

line 223: [        vector_push(v_ds_typeinfos, typeinfo);]

line 224: [    }]

line 225: [    printf("-------------------------\n");]
removed string literal ""-------------------------\n""

line 226: [    ]

line 227: [}]

line 228: []

line 229: []

line 230: [// ds_get_typeinfo("test");]
removed string literal ""test""

line 231: [// ds_new(type);]

line 232: [// ds_set(ds, "*name", stralloc("MyAwesomeTest"));]
removed string literal ""*name""
removed string literal ""MyAwesomeTest""

line 233: [// ds_set(ds, "vec[0]", 5);]
removed string literal ""vec[0]""

line 234: [// ds_set(ds, "happy.apple", stralloc("horse"));]
removed string literal ""happy.apple""
removed string literal ""horse""

line 235: [// ds_get(dyn, "where");]
removed string literal ""where""

line 236: [// ds_get_ref(ds, "*arr1");]
removed string literal ""*arr1""

line 237: [// ds_set_index(arr, 1, 3);]

line 238: [// ds_push(dyn, "boops", boop);]
removed string literal ""boops""

line 239: [// ds_print(ds);]

line 240: [//]

line 241: []

line 242: [float ds_get_typeinfo(float name){]
found func ds_get_typeinfo



sig1 = float ds_get_typeinfo(float name)
sig2 = (float name)
found param name

line 243: [    float size = vector_get_size(v_ds_typeinfos);]
found local var size (BL = 1)

line 244: [    float I;]
found local var I (BL = 1)

line 245: [    for(I = 0; I < size; I++){]
found reference to I
currentFunc = ds_get_typeinfo
ref I is REF_STACK

line 246: [        float ti = vector_get(v_ds_typeinfos,0,I);]
found local var ti (BL = 2)
found local var I (BL = 2)

line 247: [        float name2 = type_info_get_name(ti);]
found local var name2 (BL = 2)
found reference to type_info_get_name
currentFunc = ds_get_typeinfo
ref type_info_get_name is REF_EXT
found reference to ti
currentFunc = ds_get_typeinfo
ref ti is REF_STACK

line 248: [        if(strcmp(name,name2) == 0){]
found reference to name
currentFunc = ds_get_typeinfo
ref name is REF_STACK
found reference to name2
currentFunc = ds_get_typeinfo
ref name2 is REF_STACK

line 249: [            return ti;]

line 250: [        }]

line 251: [    }]

line 252: [    return 0;]

line 253: [}]

line 254: []

line 255: [//]

line 256: [// dynamic struct:]

line 257: [// 0. typeof dynamic_struct]

line 258: [// 1. ds name]

line 259: [// 2. data]

line 260: [//]

line 261: [//]

line 262: [//]

line 263: []

line 264: [#define TE_ERROR 0]
#defined "TE_ERROR"

line 265: [#define TE_FLOAT 1]
#defined "TE_FLOAT"

line 266: [#define TE_STRING 2]
#defined "TE_STRING"

line 267: [#define TE_CHAR 3]
#defined "TE_CHAR"

line 268: [#define TE_CS 4]
#defined "TE_CS"

line 269: [#define TE_DS 5]
#defined "TE_DS"

line 270: [#define TE_ARRAY 6]
#defined "TE_ARRAY"

line 271: [#define TE_PTR 7]
#defined "TE_PTR"

line 272: [#define TE_ADDR 8]
#defined "TE_ADDR"

line 273: [#define TE_VARIANT 9]
#defined "TE_VARIANT"

line 274: [#define TE_SUBVARIANT 10]
#defined "TE_SUBVARIANT"

line 275: [#define TE_UNION 11]
#defined "TE_UNION"

line 276: [#define TE_RECORD 12]
#defined "TE_RECORD"

line 277: []

line 278: [typeof_dynamic_struct:]
found label typeof_dynamic_struct

line 279: [db "dynamic_struct", 0;]
removed string literal ""dynamic_struct""

line 280: []

line 281: [float ds_new(float type){]
found func ds_new



sig1 = float ds_new(float type)
sig2 = (float type)
found param type

line 282: [    float ti_entries = type_info_get_entries(type);]
found local var ti_entries (BL = 1)
found reference to type_info_get_entries
currentFunc = ds_new
ref type_info_get_entries is REF_EXT
found reference to type
currentFunc = ds_new
ref type is REF_STACK

line 283: [    float numEntries = vector_get_size(ti_entries);]
found local var numEntries (BL = 1)
found reference to ti_entries
currentFunc = ds_new
ref ti_entries is REF_STACK

line 284: [    float curSize = 4+numEntries;]
found local var curSize (BL = 1)
found reference to numEntries
currentFunc = ds_new
ref numEntries is REF_STACK

line 285: [    float dyn = malloc(curSize);]
found local var dyn (BL = 1)
found reference to curSize
currentFunc = ds_new
ref curSize is REF_STACK

line 286: [        ]

line 287: [    dyn[0] = typeof_dynamic_struct;]
found reference to dyn
currentFunc = ds_new
ref dyn is REF_STACK
found reference to typeof_dynamic_struct
currentFunc = ds_new
ref typeof_dynamic_struct is REF_EXT

line 288: [    dyn[1] = type_info_get_name(type);    ]

line 289: [    float dynI = 2;]
found local var dynI (BL = 1)

line 290: [    ]

line 291: [    float I;]
found local var I (BL = 1)

line 292: [    for(I = 0; I < numEntries; I++){]
found reference to I
currentFunc = ds_new
ref I is REF_STACK

line 293: [        float entry = vector_get(ti_entries,0,I);]
found local var entry (BL = 2)
found local var I (BL = 2)

line 294: [        //name, type, isexplicit, param1, param2, param3, subentry]

line 295: [        float e_name = type_entry_get_name(entry);]
found local var e_name (BL = 2)
found reference to type_entry_get_name
currentFunc = ds_new
ref type_entry_get_name is REF_EXT
found reference to entry
currentFunc = ds_new
ref entry is REF_STACK

line 296: [        float e_type = type_entry_get_type(entry);]
found local var e_type (BL = 2)
found reference to type_entry_get_type
currentFunc = ds_new
ref type_entry_get_type is REF_EXT

line 297: [        float e_isexplicit = type_entry_get_isexplicit(entry);]
found local var e_isexplicit (BL = 2)
found reference to type_entry_get_isexplicit
currentFunc = ds_new
ref type_entry_get_isexplicit is REF_EXT

line 298: [        float e_param1 = type_entry_get_param1(entry);]
found local var e_param1 (BL = 2)
found reference to type_entry_get_param1
currentFunc = ds_new
ref type_entry_get_param1 is REF_EXT

line 299: [        float e_param2 = type_entry_get_param2(entry);]
found local var e_param2 (BL = 2)
found reference to type_entry_get_param2
currentFunc = ds_new
ref type_entry_get_param2 is REF_EXT

line 300: [        float e_param3 = type_entry_get_param3(entry);]
found local var e_param3 (BL = 2)
found reference to type_entry_get_param3
currentFunc = ds_new
ref type_entry_get_param3 is REF_EXT

line 301: [        float e_subentry = type_entry_get_subentry(entry);]
found local var e_subentry (BL = 2)
found reference to type_entry_get_subentry
currentFunc = ds_new
ref type_entry_get_subentry is REF_EXT

line 302: [        ]

line 303: [        if(e_isexplicit){]
found reference to e_isexplicit
currentFunc = ds_new
ref e_isexplicit is REF_STACK

line 304: [            if(e_type == TE_ERROR){]
found reference to e_type
currentFunc = ds_new
ref e_type is REF_STACK

line 305: [                Perr("entry ");]
removed string literal ""entry ""

line 306: [                if(e_name){Perr(e_name);}]
found reference to e_name
currentFunc = ds_new
ref e_name is REF_STACK

line 307: [                PErr(" is broken.\n");]
removed string literal "" is broken.\n""

line 308: [                shell_panic();]

line 309: [            }]

line 310: [            if(e_type == TE_FLOAT){]

line 311: [                Perr("new TE_FLOAT unimplemented\n");]
removed string literal ""new TE_FLOAT unimplemented\n""

line 312: [            }]

line 313: [            if(e_type == TE_STRING){]

line 314: [                Perr("new TE_STRING unimplemented\n");]
removed string literal ""new TE_STRING unimplemented\n""

line 315: [            }]

line 316: [            if(e_type == TE_CHAR){]

line 317: [                Perr("new TE_CHAR unimplemented\n");]
removed string literal ""new TE_CHAR unimplemented\n""

line 318: [            }]

line 319: [            if(e_type == TE_CS){]

line 320: [                Perr("new TE_CS unimplemented\n");]
removed string literal ""new TE_CS unimplemented\n""

line 321: [            }]

line 322: [            if(e_type == TE_DS){]

line 323: [                Perr("new TE_DS unimplemented\n");]
removed string literal ""new TE_DS unimplemented\n""

line 324: [            }]

line 325: [            if(e_type == TE_ARRAY){]

line 326: [                Perr("new TE_ARRAY unimplemented\n");]
removed string literal ""new TE_ARRAY unimplemented\n""

line 327: [            }]

line 328: [            if(e_type == TE_PTR){]

line 329: [                Perr("new TE_PTR unimplemented\n");]
removed string literal ""new TE_PTR unimplemented\n""

line 330: [                //also implement owning/non-owning pointers?]

line 331: [            }]

line 332: [            if(e_type == TE_ADDR){]

line 333: [                Perr("new TE_ADDR unimplemented\n");]
removed string literal ""new TE_ADDR unimplemented\n""

line 334: [                //addresses should be translateable]

line 335: [            }]

line 336: [            if(e_type == TE_VARIANT){]

line 337: [                Perr("new TE_VARIANT unimplemented\n");]
removed string literal ""new TE_VARIANT unimplemented\n""

line 338: [            }]

line 339: [            if(e_type == TE_SUBVARIANT){]

line 340: [                Perr("new TE_SUBVARIANT unimplemented\n");]
removed string literal ""new TE_SUBVARIANT unimplemented\n""

line 341: [            }]

line 342: [            if(e_type == TE_UNION){]

line 343: [                Perr("new TE_UNION unimplemented\n");]
removed string literal ""new TE_UNION unimplemented\n""

line 344: [            }]

line 345: [            if(e_type == TE_RECORD){]

line 346: [                Perr("new TE_RECORD unimplemented\n");]
removed string literal ""new TE_RECORD unimplemented\n""

line 347: [            }]

line 348: [        }]

line 349: [        ]

line 350: [    }]

line 351: [    ]

line 352: [    return 0;]

line 353: [}]

line 354: []

line 355: [float ds_set(float dyn, float member, float value){]
found func ds_set



sig1 = float ds_set(float dyn, float member, float value)
sig2 = (float dyn, float member, float value)
found param dyn
found param member
found param value

line 356: [    Perr("ds_set unimplemented\n");]
removed string literal ""ds_set unimplemented\n""

line 357: [}]

line 358: []

line 359: [float ds_get(float dyn, float member){]
found func ds_get



sig1 = float ds_get(float dyn, float member)
sig2 = (float dyn, float member)
found param dyn
found param member

line 360: [    Perr("ds_get unimplemented\n");]
removed string literal ""ds_get unimplemented\n""

line 361: [}]

line 362: []

line 363: [float ds_get_ref(float dyn, float member){]
found func ds_get_ref



sig1 = float ds_get_ref(float dyn, float member)
sig2 = (float dyn, float member)
found param dyn
found param member

line 364: [    Perr("ds_get_ref unimplemented\n");]
removed string literal ""ds_get_ref unimplemented\n""

line 365: [    return 0;]

line 366: [}]

line 367: []

line 368: [float ds_set_index(float dyn, float index, float value){]
found func ds_set_index



sig1 = float ds_set_index(float dyn, float index, float value)
sig2 = (float dyn, float index, float value)
found param dyn
found param index
found param value

line 369: [    Perr("ds_set_index unimplemented\n");]
removed string literal ""ds_set_index unimplemented\n""

line 370: [}]

line 371: []

line 372: [float ds_push(float dyn, float member, float value){]
found func ds_push



sig1 = float ds_push(float dyn, float member, float value)
sig2 = (float dyn, float member, float value)
found param dyn
found param member
found param value

line 373: [    Perr("ds_push unimplemented\n");]
removed string literal ""ds_push unimplemented\n""

line 374: [}]

line 375: []

line 376: [float ds_print(float dyn){]
found func ds_print



sig1 = float ds_print(float dyn)
sig2 = (float dyn)
found param dyn

line 377: [    Perr("ds_print unimplemented\n");]
removed string literal ""ds_print unimplemented\n""

line 378: [}]

line 379: []

line 207: []

line 208: [//#include <cyclone/libs/libwsi.txt>]

line 209: [//#pragma no_export]

line 210: []

line 211: []

line 212: []

line 213: [float main()]
found func main



sig1 = float main()
sig2 = ()

line 214: [{]

line 215: [    out 0,0;]

line 216: [    out 1,0;]

line 217: [    out 2,0;]

line 218: [    out 3,0;]

line 219: [    out 4,0;]

line 220: [    out 5,0;]

line 221: [    out 6,0;]

line 222: [    out 7,0;]

line 223: [    ]

line 224: [    mov EBP:#1,0; //end of stack (for tracing)]
found label EBP

line 225: [    mov EBP:#2,0;]
found label EBP

line 226: [    //OSversion = curTimeStamp();//__DATE_DAY__*1000000+__DATE_MONTH__*10000+__DATE_YEAR__*1+__DATE_HOUR__*0.01+__DATE_MINUTE__*0.0001;]

line 227: [    ]

line 228: [    setKeyboard(AdrKb);]
found reference to setKeyboard
currentFunc = main
ref setKeyboard is REF_EXT

line 229: [    ]

line 230: [    ]

line 231: [    ]

line 232: [    ]

line 233: [    ]

line 234: [    ]

line 235: [    //float day,month,year,hour,minute,second;]

line 236: [    //decodeTimeStamp(time,&day,&month,&year,&hour,&minute,&second);]

line 237: [    //printf("decoded timestamp:\n");]
removed string literal ""decoded timestamp:\n""

line 238: [    //printf("day %d\n",day);]
removed string literal ""day %d\n""

line 239: [    //printf("month %d\n",month);]
removed string literal ""month %d\n""

line 240: [    //printf("year %d\n",year);]
removed string literal ""year %d\n""

line 241: [    //printf("hour %d\n",hour);]
removed string literal ""hour %d\n""

line 242: [    //printf("minute %d\n",minute);]
removed string literal ""minute %d\n""

line 243: [    //printf("second %d\n",second);]
removed string literal ""second %d\n""

line 244: [    ]

line 245: [    ]

line 246: [    //PrintStringXY(0,0,"Loading Cyclone OS...",999);]
removed string literal ""Loading Cyclone OS...""

line 247: [    //P("Loading Cyclone OS...\n");]
removed string literal ""Loading Cyclone OS...\n""

line 248: [    //MaxMem = 65536;]

line 249: [    //print_init();]

line 250: [    //malloc_set_disk(Heap, MaxMem-Heap); - use this for default Laptop4 setup]

line 251: [    malloc_set_disk(AdrRAM, _128kb);]
found reference to malloc_set_disk
currentFunc = main
ref malloc_set_disk is REF_EXT

line 252: [    malloc_init();]

line 253: [    malloc_print = P;]

line 254: [    malloc_num2str = num2str;]

line 255: [    malloc_debug = 0;]

line 256: [    ]

line 257: [    setalloc_init();]
found reference to setalloc_init
currentFunc = main
ref setalloc_init is REF_EXT

line 258: [    ]

line 259: [    filesystem_init();]
found reference to filesystem_init
currentFunc = main
ref filesystem_init is REF_EXT

line 260: [    float a; in a,0;]
found local var a (BL = 1)
found reference to a
currentFunc = main
ref a is REF_STACK

line 261: [    float b; in b,1;]
found local var b (BL = 1)
found reference to b
currentFunc = main
ref b is REF_STACK

line 262: [    float c; in c,2;]
found local var c (BL = 1)
found reference to c
currentFunc = main
ref c is REF_STACK

line 263: [    float d; in d,3;]
found local var d (BL = 1)
found reference to d
currentFunc = main
ref d is REF_STACK

line 264: [    printf("Switch 1: Mount disk: %d\n",a);]
removed string literal ""Switch 1: Mount disk: %d\n""

line 265: [    printf("Switch 2: Autorun: %d\n",b);]
removed string literal ""Switch 2: Autorun: %d\n""

line 266: [    //if(a){PrintStringXY(0,1,"Switch 1: Mount disk: ON\n",999);}]
removed string literal ""Switch 1: Mount disk: ON\n""

line 267: [    //else {PrintStringXY(0,1,"Switch 1: Mount disk: OFF\n",999);}]
removed string literal ""Switch 1: Mount disk: OFF\n""

line 268: [    //if(b){PrintStringXY(0,2,"Switch 2: Autorun: ON\n",999);}]
removed string literal ""Switch 2: Autorun: ON\n""

line 269: [    //else {PrintStringXY(0,2,"Switch 2: Autorun: OFF\n",999);}]
removed string literal ""Switch 2: Autorun: OFF\n""

line 270: [    //if(c){PrintStringXY(0,3,"Switch 3: Unassigned: ON\n",999);}]
removed string literal ""Switch 3: Unassigned: ON\n""

line 271: [    //else {PrintStringXY(0,3,"Switch 3: Unassigned: OFF\n",999);}]
removed string literal ""Switch 3: Unassigned: OFF\n""

line 272: [    //if(d){PrintStringXY(0,4,"Switch 4: Unassigned: ON\n",999);}]
removed string literal ""Switch 4: Unassigned: ON\n""

line 273: [    //else {PrintStringXY(0,4,"Switch 4: Unassigned: OFF\n",999);}]
removed string literal ""Switch 4: Unassigned: OFF\n""

line 274: [//    P("Switch 1: Mount disk: "); if(a){P("ON\n");}else{P("OFF\n");}]
removed string literal ""Switch 1: Mount disk: ""
removed string literal ""ON\n""
removed string literal ""OFF\n""

line 275: [//    P("Switch 2: Autorun "); if(b){P("ON\n");}else{P("OFF\n");}]
removed string literal ""Switch 2: Autorun ""
removed string literal ""ON\n""
removed string literal ""OFF\n""

line 276: [//    P("Switch 3: Unassigned "); if(c){P("ON\n");}else{P("OFF\n");}]
removed string literal ""Switch 3: Unassigned ""
removed string literal ""ON\n""
removed string literal ""OFF\n""

line 277: [//    P("Switch 4: Unassigned "); if(d){P("ON\n");}else{P("OFF\n");}]
removed string literal ""Switch 4: Unassigned ""
removed string literal ""ON\n""
removed string literal ""OFF\n""

line 278: [    ]

line 279: [    if(a){]

line 280: [        //PrintStringXY(0,5,"Mounting disk...",999);]
removed string literal ""Mounting disk...""

line 281: [        printf("Mounting disk...");]
removed string literal ""Mounting disk...""

line 282: [        //P("Mounting disk...");]
removed string literal ""Mounting disk...""

line 283: [        filesystem_read(AdrHDD);]

line 284: [        //PrintStringXY(16,5,"OK",999);]
removed string literal ""OK""

line 285: [        printf("OK\n");]
removed string literal ""OK\n""

line 286: [        //P("OK");]
removed string literal ""OK""

line 287: [    }]

line 288: [    initPaging(pageTable,512,0,0);]
found reference to initPaging
currentFunc = main
ref initPaging is REF_EXT

line 289: [    setupInterrupts();]
found reference to setupInterrupts
currentFunc = main
ref setupInterrupts is REF_EXT

line 290: [    //printPtrX = 0;]

line 291: [    //printPtrY = 0;]

line 292: [    ]

line 293: [    //printScrX = 0;]

line 294: [    //printBuffX = 0;]

line 295: [    //printScrY = 0;]

line 296: [    //printBuffY = 0;]

line 297: [    //printLineOffset = 0;]

line 298: [    ]

line 299: [    //screen_clear();]

line 300: [    initThreads();]
found reference to initThreads
currentFunc = main
ref initThreads is REF_EXT

line 301: [    initLoader();]
found reference to initLoader
currentFunc = main
ref initLoader is REF_EXT

line 302: [    //init_type_system();]

line 303: [    libdynamicstruct_init();]
found reference to libdynamicstruct_init
currentFunc = main
ref libdynamicstruct_init is REF_EXT

line 304: [    ]

line 305: [    shell();]

line 306: [    //float main_thread = thread_create(shell,0);]

line 307: [    //thread_enter(main_thread);]

line 308: [    printf("End of main()\n");]
removed string literal ""End of main()\n""

line 309: [    while(1){NOP;}]

line 310: [}]

line 311: []

line 312: [pageTable:]
found label pageTable

line 313: [alloc 513*2;]

line 314: []

line 315: [intTable:]
found label intTable

line 316: [alloc 256*4;]

line 317: []

line 318: []

line 319: []

line 320: [void setupInterrupts(){]
found func setupInterrupts



sig1 = void setupInterrupts()
sig2 = ()

line 321: [    float flags = int_enabled;]
found local var flags (BL = 1)

line 322: [    initInterrupts(intTable,0,256,errIntHandler,flags);]
found reference to initInterrupts
currentFunc = setupInterrupts
ref initInterrupts is REF_EXT
found reference to intTable
currentFunc = setupInterrupts
ref intTable is REF_EXT
found reference to errIntHandler
currentFunc = setupInterrupts
ref errIntHandler is REF_EXT
found reference to flags
currentFunc = setupInterrupts
ref flags is REF_STACK

line 323: [    extendedModeEnable();]

line 324: [    interruptsEnable();]

line 325: [    printf("Interrupts initialized\n");]
removed string literal ""Interrupts initialized\n""

line 326: [}]

line 327: []

line 328: []

line 329: [//this will caclulate the available memory]

line 330: [//and then probably break the CPU...]

line 331: [//outputs:]

line 332: [//port 0 - memory detected in bytes]

line 333: [//port 1 - memory detected in kilobytes]

line 334: [void memtest2(){]
found func memtest2



sig1 = void memtest2()
sig2 = ()

line 335: [    float I = End;]
found local var I (BL = 1)

line 336: [    while(1){]

line 337: [        *I = 1;]
found reference to I
currentFunc = memtest2
ref I is REF_STACK

line 338: [        if(*I != 1){int 1;}]

line 339: [        *I = 0;]

line 340: [        if(*I != 0){int 1;}]

line 341: [        out 0, I;]

line 342: [        out 1, I/1024;]

line 343: [        I = (I+1)*1.0005;]

line 344: [        fint I;]

line 345: [    }]

line 346: [}]

line 347: []

line 348: [MAIN_CONSTANTS:]
found label MAIN_CONSTANTS

line 349: [OSname: db "test 23"; db 0;]
removed string literal ""test 23""
found label OSname

line 350: [MAIN_VARS:]
found label MAIN_VARS

line 351: [End:]
found label End

line 352: []

line 353: []
file cyclone\test23.txt: 6 funcs
boot		(void boot())
nullcall_error		(void nullcall_error())
init_hardware		(void init_hardware())
main		(float main())
setupInterrupts		(void setupInterrupts())
memtest2		(void memtest2())

included from cyclone\test23.txt:
file cyclone/defines.txt: 0 funcs

included from cyclone\test23.txt:
file cyclone/libs/libstring.txt: 21 funcs
explode		(float explode(char *str, char *del))
str2num		(float str2num(char* str))
getNdigit		(float getNdigit(float num, float digit, float Base))
num2strSet		(void num2strSet(float base, float precision))
num2str		(char num2str(float num))
Nlog		(float Nlog(float A, float B))
isPrint		(float isPrint(char C))
isNum		(float isNum(char C))
isAlpha		(float isAlpha(char C))
toLower		(float toLower(char C))
toUpper		(float toUpper(char C))
Con		(float Con(char* str1, char* str2, char* str3, char* str4, char* str5))
concat		(float concat())
c2str		(float c2str(char C))
unescapeStr		(float unescapeStr(float str))
cstr_find_first_of		(float cstr_find_first_of(char *S, char C))
cstr_find_last_of		(float cstr_find_last_of(char *S, char C))
stack_copy		(float stack_copy(float ptr, float size))
cstr_stack_copy		(char *cstr_stack_copy(char *str))
isspace		(float isspace(float C))
stralloc		(float stralloc(float S))

included from cyclone/libs/libstring.txt:
file cyclone/libs/zcrt/string.txt: 16 funcs
memcpy		(void *memcpy(void *dest, void *src, float n))
memchr		(void* memchr(void *s, float c, float n))
memset		(void* memset(void *ptr, float c, float n))
strcat		(char* strcat(char *src, *dest))
strncat		(char* strncat(char *src, *dest, float n))
strchr		(char* strchr(char *str, c))
strrchr		(char* strrchr(char *str, c))
strcmp		(float strcmp(char *src, *dest))
strncmp		(float strncmp(char *src, *dest, float n))
strcpy		(char* strcpy(char *dest, *src))
strncpy		(char* strncpy(char *dest, *src, float n))
strlen		(float strlen(char* str))
strspn		(float strspn(char *str, *accept))
strcspn		(float strcspn(char *str, char *reject))
strpbrk		(char* strpbrk(char *str, char *accept))
strstr		(char *strstr(char *haystack, char *needle))

included from cyclone/libs/libstring.txt:
file cyclone/libs/variadic.txt: 0 funcs

included from cyclone\test23.txt:
file cyclone/libs/boot.txt: 12 funcs
P		(void P(char *str))
Pc		(void Pc(char c))
Pn		(void Pn(float N))
Pl		(void Pl(char *str))
P2		(void P2(char *str1, float N, char *str2))
Perr		(void Perr(char *str))
Print		(void Print(char str, float col))
printword		(void printword(float str))
mcs_putchar		(void mcs_putchar(float C, float col, float X, float Y))
cs_putchar		(float cs_putchar(float scr, float C, float col, float X, float Y))
ConsoleShiftUp		(void ConsoleShiftUp())
ConsoleShiftDown		(void ConsoleShiftDown())

included from cyclone\test23.txt:
file cyclone/libs/libnumber.txt: 56 funcs
pow		(float pow(float A, float B))
modulo		(float modulo(float A, float B))
sqrt		(float sqrt(float A))
cbrt		(float cbrt(float A))
root		(float root(float A, float B))
e		(float e())
exp		(float exp(float A))
ln		(float ln(float A))
log2		(float log2(float A))
log10		(float log10(float A))
log		(float log(float A, float B))
abs		(float abs(float A))
ceil		(float ceil(float A))
floor		(float floor(float A))
round		(float round(float A))
integer		(float integer(float A))
frac		(float frac(float A))
clamp		(float clamp(float A, float MinA, float MaxA))
inrange		(float inrange(float A, float MinA, float MaxA))
minimal		(float minimal(float A, float B))
maximal		(float maximal(float A, float B))
random		(float random())
random1		(float random1(float A))
random2		(float random2(float A,B))
randint1		(float randint1(float A))
randint2		(float randint2(float A,B))
pi		(float pi())
toRad		(float toRad(float N))
toDeg		(float toDeg(float N))
sin		(float sin(float N))
cos		(float cos(float N))
tan		(float tan(float N))
cot		(float cot(float N))
sec		(float sec(float N))
csc		(float csc(float N))
asin		(float asin(float N))
acos		(float acos(float N))
atan		(float atan(float N))
sinh		(float sinh(float N))
cosh		(float cosh(float N))
tanh		(float tanh(float N))
coth		(float coth(float N))
sech		(float sech(float N))
csch		(float csch(float N))
sinr		(float sinr(float N))
cosr		(float cosr(float N))
tanr		(float tanr(float N))
cotr		(float cotr(float N))
secr		(float secr(float N))
cscr		(float cscr(float N))
asinr		(float asinr(float N))
acosr		(float acosr(float N))
atanr		(float atanr(float N))
ceil2		(float ceil2(float A, float B))
floor2		(float floor2(float A, float B))
round2		(float round2(float A, float B))

included from cyclone\test23.txt:
file cyclone/libs/printf.txt: 1 funcs
printf		(float printf(char* format))

included from cyclone/libs/printf.txt:
file cyclone/libs/variadic.txt: 0 funcs

included from cyclone\test23.txt:
file cyclone/libs/timestamp.txt: 5 funcs
compileTimeStamp		(float compileTimeStamp())
currentTimeStamp		(float currentTimeStamp())
decodeTimeStamp		(void decodeTimeStamp(float time, float *day, float *month, float *year, float *hour, float *minute, float *second))
monthToString		(float monthToString(float month))
timeStampToString		(float timeStampToString(float time))

included from cyclone\test23.txt:
file cyclone/libs/libconsolescreen.txt: 20 funcs
PrintStringXY		(void PrintStringXY(float x, float y, char str, float col))
printCharXY		(void printCharXY(float X, float Y, char C, float col))
delaysimple		(void delaysimple(float time))
screen_set		(void screen_set(float scr))
screen_clear		(void screen_clear())
screen_cursor_enable		(void screen_cursor_enable())
screen_cursor_disable		(void screen_cursor_disable())
screen_set_cursor_pos		(void screen_set_cursor_pos(float I))
screen_set_cursor_pos_xy		(void screen_set_cursor_pos_xy(float x, float y))
screen_force_refresh		(void screen_force_refresh())
screen_set_shift_box_x1		(void screen_set_shift_box_x1(float n))
screen_set_shift_box_x2		(void screen_set_shift_box_x2(float n))
screen_set_shift_box_y1		(void screen_set_shift_box_y1(float n))
screen_set_shift_box_y2		(void screen_set_shift_box_y2(float n))
screen_set_shift_box		(void screen_set_shift_box(float x1, float x2, float y1, float y2))
screen_set_print_box		(void screen_set_print_box(float x1, float y1, float x2, float y2))
screen_shift_vertical		(void screen_shift_vertical(float n))
screen_shift_horizontal		(void screen_shift_horizontal(float n))
screen_set_blink_rate		(void screen_set_blink_rate(float rate))
screen_set_cursor_size		(void screen_set_cursor_size(float size))

included from cyclone\test23.txt:
file cyclone/libs/libmulticonsolescreen.txt: 10 funcs
mcs_screen_clear		(void mcs_screen_clear())
mcs_screen_force_refresh		(void mcs_screen_force_refresh())
mcs_init		(void mcs_init(float numx, float numy))
mcs_screen_shift_vertical		(void mcs_screen_shift_vertical(float n))
mcs_screen_set_shift_box		(void mcs_screen_set_shift_box(float x1, float x2, float y1, float y2))
mcs_screen_set_cursor_pos_xy		(void mcs_screen_set_cursor_pos_xy(float x, float y))
mcs_screen_cursor_enable		(void mcs_screen_cursor_enable())
mcs_screen_cursor_disable		(void mcs_screen_cursor_disable())
mcs_set_blink_rate		(void mcs_set_blink_rate(float rate))
mcs_set_cursor_size		(void mcs_set_cursor_size(float size))

included from cyclone\test23.txt:
file cyclone/libs/stackalloc.txt: 1 funcs
memcpy2		(void *memcpy2(void *dest, void *src, float n))

included from cyclone\test23.txt:
file cyclone/libs/zmalloc.txt: 28 funcs
allocation_constructor		(void allocation_constructor(float *A))
allocation_set_size		(void allocation_set_size(float *A, float n))
allocation_set_owner		(void allocation_set_owner(float *A, float n))
allocation_set_prev		(void allocation_set_prev(float *A, float n))
allocation_set_next		(void allocation_set_next(float *A, float n))
allocation_get_size		(float allocation_get_size(float *A))
allocation_get_owner		(float allocation_get_owner(float *A))
allocation_get_prev		(float allocation_get_prev(float *A))
allocation_get_next		(float allocation_get_next(float *A))
malloc_getAllocation		(float *malloc_getAllocation(float I))
malloc_getDataFromIndex		(float *malloc_getDataFromIndex(float I))
malloc_getDataFromAllocation		(float *malloc_getDataFromAllocation(float *A))
malloc_getIndex		(float malloc_getIndex(float *ptr))
malloc_trySplit		(float malloc_trySplit(float *A, float **returnB, float n))
malloc_join		(void malloc_join(float *A, float *B))
malloc_set_disk		(void malloc_set_disk(float *disk, float disk_size))
malloc_init		(void malloc_init())
malloc_test		(float malloc_test())
malloc_print_count		(void malloc_print_count())
malloc_count		(void malloc_count(float *freesize, float *usedsize, float *freecount, float *usedcount))
printAllocationSimple		(void printAllocationSimple(float *A))
printAllocation		(void printAllocation(float *A))
mallocLast		(float mallocLast(float n))
zmalloc		(float *zmalloc(float n))
zfree		(void zfree(float *ptr))
zrealloc		(float *zrealloc(float *ptr, float n))
malloc_memcopy		(void malloc_memcopy(float *from, float *to, float n))
str_alloc		(float str_alloc(float str))

included from cyclone\test23.txt:
file cyclone/libs/libsetalloc.txt: 11 funcs
setalloc_init		(void setalloc_init())
setallocator		(void setallocator(float all))
malloc		(float malloc(float n))
realloc		(float realloc(float p, float n))
free		(float free(float p))
allocator_new		(float allocator_new())
allocator_constructor		(float allocator_constructor(float all))
allocator_set_impl		(float allocator_set_impl(float all, float impl))
allocator_set_malloc		(float allocator_set_malloc(float all, float mal))
allocator_set_realloc		(float allocator_set_realloc(float all, float rel))
allocator_set_free		(float allocator_set_free(float all, float fre))

included from cyclone\test23.txt:
file cyclone/libs/zvector.txt: 24 funcs
error		(float error(float errno))
vector_new		(float vector_new())
vector_constructor		(void vector_constructor(void *self, float element_size))
vector_copy_constructor		(void vector_copy_constructor(void *self, void *other))
vector_get_array		(float vector_get_array(void *self))
vector_get_size		(float vector_get_size(void *self))
vector_get_capacity		(float vector_get_capacity(void *self))
vector_get_element_size		(float vector_get_element_size(void *self))
vector_set_array		(void vector_set_array(void *self, float n))
vector_set_size		(void vector_set_size(void *self, float n))
vector_set_capacity		(void vector_set_capacity(void *self, float n))
vector_set_element_size		(void vector_set_element_size(void *self, float n))
vector_destructor		(void vector_destructor(void *self))
vector_clear		(void vector_clear(void *self))
vector_push		(void vector_push(void *self, void *element))
vector_pop		(float vector_pop(void *self, void *element))
vector_size		(float vector_size(void *self))
vector_disk_size		(float vector_disk_size(void *self))
vector_get		(float vector_get(void *self, void *element, float pos))
vector_set		(void vector_set(void *self, void *element, float pos))
vector_insert		(void vector_insert(void *self, void *element, float pos))
vector_remove		(void vector_remove(void *self, float pos))
vector_resize		(float vector_resize(void *self, float newcap))
vector_array		(float vector_array(void *self))

included from cyclone\test23.txt:
file cyclone/libs/zstring.txt: 14 funcs
string_constructor		(void string_constructor(void *self, char *str))
string_destructor		(void string_destructor(void *self))
string_c_str		(float string_c_str(void *self))
string_clear		(void string_clear(void *self))
string_adds		(void string_adds(void *self, void *str))
string_addc		(void string_addc(void *self, char C))
string_addn		(void string_addn(void *self, float N))
string_equals		(void string_equals(void *self, void *str))
string_equals_cs		(void string_equals_cs(void *self, char *str))
string_length		(void string_length(void *self))
string_addcs		(void string_addcs(void *self, char *c_str))
string_find_first_of		(float string_find_first_of(void *self, char C))
string_find_last_of		(float string_find_last_of(void *self, char C))
string_substr		(float string_substr(void *self, float start1, float count))

included from cyclone/libs/zstring.txt:
file cyclone/libs/zvector.txt: 0 funcs

included from cyclone\test23.txt:
file cyclone/libs/zlist.txt: 24 funcs
list_constructor		(void list_constructor(void *list, float new_element_size))
listnode_constructor		(void listnode_constructor(void *node))
listnode_destructor		(void listnode_destructor(void *node))
list_size		(float list_size(void *list))
list_size_helper		(float list_size_helper(void *node))
list_empty		(float list_empty(void *list))
list_clear		(void list_clear(void *list))
list_push		(void list_push(void *list, float *element))
list_push_helper		(void list_push_helper(void *list, void *node, float *element))
list_pop		(float list_pop(void *list, float *element))
node_selfdestruct		(float node_selfdestruct(void *node))
list_pop_helper		(float list_pop_helper(void *list, void *node, float *element))
list_get		(float list_get(void *list, float *element, float pos))
list_get_helper		(float list_get_helper(void *list, void *node, void *element, float pos))
list_set		(void list_set(float *list, float *element, float pos))
list_set_helper		(void list_set_helper(void *list, void *node, float *element, float pos))
list_insert		(void list_insert(void *list, float *element, float pos))
list_insert_helper		(void list_insert_helper(void *list, void *node, float *element, float pos))
list_remove		(void list_remove(void *list, float *element, float pos))
list_remove_helper		(void list_remove_helper(void *list, void* node, float *element, float pos))
list_getnode		(float list_getnode(void *list, float pos))
list_splice		(void list_splice(void *listfrom, void *listto, float posfrom, float posto))
list_move		(void list_move(void *list, float pos, float *newnode, float *newdatas))
list_destructor		(void list_destructor(void *list))

included from cyclone\test23.txt:
file cyclone/libs/libkeyboard.txt: 8 funcs
setKeyboard		(void setKeyboard(float ptr))
isPrint1		(float isPrint1(char c))
readKey		(char readKey())
hasKey		(float hasKey())
readKB		(void readKB(void *func))
waitKey		(char waitKey())
readKeyTimed		(char readKeyTimed())
readline		(char* readline())

included from cyclone\test23.txt:
file cyclone/progs/shell.txt: 70 funcs
shell		(void shell())
initShellCmds		(void initShellCmds())
initLibraries		(void initLibraries())
addShellCmd		(void addShellCmd(float name, float func, float help))
autorun		(void autorun())
shell_panic		(void shell_panic())
cls		(void cls())
drawStatusBar		(void drawStatusBar())
drawScrollBar		(void drawScrollBar())
Console		(void Console(char str))
ParseStringSilent		(void ParseStringSilent(char str))
ParseString		(void ParseString(char str))
Ps		(void Ps(void *str))
redraw_all		(void redraw_all())
PrintProgressBar		(void PrintProgressBar(float percent))
ParseKey		(void ParseKey(char key))
checkKB		(void checkKB())
getShellInput		(float getShellInput())
getYN		(float getYN())
help		(void help())
cmdtest		(void cmdtest())
cmdtest2		(void cmdtest2())
cmdtest3		(void cmdtest3())
cmdtrace		(void cmdtrace())
cmdyield		(void cmdyield())
cmdps		(void cmdps())
printversion		(void printversion())
cmdecho		(void cmdecho())
arg_rest		(float arg_rest(float buff, float n))
cmdtime		(void cmdtime())
cmd_test4		(void cmd_test4())
cmd_test5		(void cmd_test5())
test6_reset		(void test6_reset(float buff))
test6_print		(void test6_print(float buff, float record))
test6_myalloc		(float test6_myalloc(float n, float buff))
test6_myrealloc		(float test6_myrealloc(float p, float n, float buff))
test6_myfree		(float test6_myfree(float p, float buff))
cmd_test6		(void cmd_test6())
derpKind_constructor		(void derpKind_constructor(float this))
derpKind_moo		(void derpKind_moo(float this))
derpKind_bar		(float derpKind_bar(float this, float a, float b))
cmd_test7		(void cmd_test7())
heap_status		(void heap_status())
cmd_rpncalc		(void cmd_rpncalc())
cmd_cd		(void cmd_cd())
cmd_dir		(void cmd_dir())
cmd_mkdir		(void cmd_mkdir())
cmd_del		(void cmd_del())
cmd_rn		(void cmd_rn())
cmd_write		(void cmd_write())
readword		(float readword(float ptr, float buff, float len))
cmd_read		(void cmd_read())
cmd_info		(void cmd_info())
cmd_hdd		(void cmd_hdd())
cmd_mount		(void cmd_mount())
cmd_format		(void cmd_format())
cmd_gpio		(void cmd_gpio())
cmd_exec		(void cmd_exec())
cmd_dump		(void cmd_dump())
progtest		(void progtest())
isString		(float isString(float ptr))
cmd_symbol		(void cmd_symbol())
cmd_load		(void cmd_load())
cmd_run		(void cmd_run())
package_args		(float package_args(float pad, float argc, float argv))
cmd_runbg		(void cmd_runbg())
cmd_fileview		(void cmd_fileview())
cmd_memview		(void cmd_memview())
memtest_hlp		(float memtest_hlp(float adr))
memtest		(void memtest())

included from cyclone/progs/shell.txt:
file cyclone/libs/libutil.txt: 5 funcs
assert		(void assert(float n, float str))
assert_type		(void assert_type(float self, float t))
curticks		(float curticks())
curtime		(float curtime())
assert_arity		(float assert_arity(float ecx_here, float num_args))

included from cyclone\test23.txt:
file cyclone/libs/fs_support.txt: 16 funcs
check_canary		(void check_canary(float this, float canary))
file_handle_constructor		(void file_handle_constructor(float this))
file_handle_copy_constructor		(void file_handle_copy_constructor(float this, float that))
file_handle_destructor		(void file_handle_destructor(float this))
file_handle_get_canary		(float file_handle_get_canary(float this))
file_handle_get_rw_ptr		(float file_handle_get_rw_ptr(float this))
file_handle_get_imp		(float file_handle_get_imp(float this))
file_handle_set_canary		(void file_handle_set_canary(float this, float N))
file_handle_set_rw_ptr		(void file_handle_set_rw_ptr(float this, float N))
file_handle_set_imp		(void file_handle_set_imp(float this, float N))
translate_fopen_mode		(void translate_fopen_mode(char *mode, float *read, float *write, float *keepdata, float *from, float *newfile))
filepath_legal		(float filepath_legal(char *filename))
filepath_abs		(char *filepath_abs(char *filename))
filepath_decimate		(void filepath_decimate(char *filename, float *folders, char *name, float *is_abs))
filepath_extension		(char *filepath_extension(char *filename))
filepath_base		(char *filepath_base(char *filename))

included from cyclone\test23.txt:
file cyclone/libs/lightfs2.txt: 26 funcs
filesystem_init		(void filesystem_init())
find_file		(float find_file(char *filename))
find_free		(float find_free())
fopen		(float fopen(char *filename, char *mode))
fwrite		(float fwrite(float *from, float size, float *fp))
fresize		(float fresize(float size, float *fp))
fread		(float fread(float *to, float size, float *fp))
frename		(void frename(float name1, float name2))
fgetstring		(float fgetstring(float *fp, float *str, float num))
feof		(float feof(float fp))
fsize		(float fsize(float fp))
fseek		(void fseek(float fp, float offs, float origin))
ftell		(float ftell(float fp))
flist		(float flist(char *filepath))
fdelete		(void fdelete(char *filepath))
vector_get_linear_size		(float vector_get_linear_size(float V))
vector_move		(float vector_move(float *V, float *newpos))
vector_linearize		(float vector_linearize(float V))
vector_delinearize		(float vector_delinearize(float V))
filesystem_get_size		(float filesystem_get_size())
inc_cpy		(float inc_cpy(float *ptr, float from, float size))
inc_move		(float inc_move(float *ptr, float *from, float size))
filesystem_move		(float filesystem_move(float newpos))
filesystem_write		(void filesystem_write(float disk))
str_delinearize		(float str_delinearize(float str))
filesystem_read		(void filesystem_read(float disk))

included from cyclone\test23.txt:
file cyclone/libs/libpaging.txt: 17 funcs
initPaging		(void initPaging(float PT,float size,float flags, float runlevel))
setPageTable		(void setPageTable(float PT,float size))
getPage		(void getPage(float PT, float page))
setPageFlags		(void setPageFlags(float page, float flags))
getPageFlags		(float getPageFlags(float page))
setPageRunLevel		(void setPageRunLevel(float page, float level))
getPageRunlevel		(float getPageRunlevel(float page))
setPageMapping		(void setPageMapping(float page, float phys))
getPageMapping		(float getPageMapping(float page))
reportPage		(void reportPage(float pageTable, float pageID))
toPage		(float toPage(float addr))
copyPage		(void copyPage(float pageto, float pagefrom))
mapPage		(void mapPage(float PT, float virt, float phys, float flags, float runlevel))
setMemoryRunlevel		(void setMemoryRunlevel(float PT, float from, float to, float level))
setMemoryMapping		(void setMemoryMapping(float PT, float from, float to, float target))
pagingEnable		(void pagingEnable())
pagingDisable		(void pagingDisable())

included from cyclone\test23.txt:
file cyclone/libs/libthread.txt: 10 funcs
initThreads		(float initThreads())
regs_set_to_entry		(void regs_set_to_entry(float regs, float stack, float entry, float args))
thread_run		(float thread_run(float thread))
thread_enter		(float thread_enter(float thread))
multitask_test		(void multitask_test(float argc, float argv))
thread_yield		(float thread_yield())
print_threads		(void print_threads())
thread_exit_func		(float thread_exit_func())
thread_create		(float thread_create(float entry, float args))
delay		(void delay(float time))

included from cyclone/libs/libthread.txt:
file cyclone/libs/zthread.txt: 20 funcs
sizeof_thread		(float sizeof_thread())
thread_constructor		(void thread_constructor(float this))
thread_copy_constructor		(void thread_copy_constructor(float this, float that))
thread_destructor		(void thread_destructor(float this))
thread_new		(float thread_new())
thread_delete		(void thread_delete(float this))
thread_get_canary		(float thread_get_canary(float this))
thread_get_entry		(float thread_get_entry(float this))
thread_get_args		(float thread_get_args(float this))
thread_get_time		(float thread_get_time(float this))
thread_get_ip		(float thread_get_ip(float this))
thread_get_stack		(float thread_get_stack(float this))
thread_get_regs		(float thread_get_regs(float this))
thread_set_canary		(void thread_set_canary(float this, float N))
thread_set_entry		(void thread_set_entry(float this, float N))
thread_set_args		(void thread_set_args(float this, float N))
thread_set_time		(void thread_set_time(float this, float N))
thread_set_ip		(void thread_set_ip(float this, float N))
thread_set_stack		(void thread_set_stack(float this, float N))
thread_set_regs		(void thread_set_regs(float this, float N))

included from cyclone\test23.txt:
file cyclone/libs/libinterrupt.txt: 10 funcs
initInterrupts		(void initInterrupts(float IT, float first, float size, float handler, float flags))
addInterruptHandler		(void addInterruptHandler(float IT, float num, float func,float flags))
defaultIntHandler		(void defaultIntHandler())
stopIntHandler		(void stopIntHandler())
errIntHandler		(void errIntHandler())
extendedModeEnable		(void extendedModeEnable())
extendedModeDisable		(void extendedModeDisable())
interruptsEnable		(void interruptsEnable())
interruptsDisable		(void interruptsDisable())
intnum_to_str		(float intnum_to_str(float num))

included from cyclone\test23.txt:
file cyclone/libs/librecord.txt: 17 funcs
record_new		(float record_new())
record_constructor		(void record_constructor(float record, float size))
record_destructor		(void record_destructor(float record))
record_shrink		(float record_shrink(float record))
record_push		(float record_push(float record, float byte))
record_push_array		(float record_push_array(float record, float bytes, float num))
record_pop		(float record_pop(float record))
record_pop_array		(float record_pop_array(float record, float num))
record_get_array		(void record_get_array(float record, float index, float dest, float num))
record_get		(float record_get(float record, float index))
record_set		(void record_set(float record, float index, float val))
record_set_array		(void record_set_array(float record, float index, float vals, float num))
record_insert		(float record_insert(float record, float index, float val))
record_insert_array		(float record_insert_array(float record, float index, float vals, float num))
record_remove		(float record_remove(float record, float index))
record_remove_array		(float record_remove_array(float record, float index, float num))
record_length		(float record_length(float record))

included from cyclone\test23.txt:
file cyclone/libs/libclass.txt: 10 funcs
class_new		(float class_new(float name))
class_constructor		(float class_constructor(float this, float name))
class_add_member		(void class_add_member(float this, float name))
class_add_method		(void class_add_method(float this, float name, float func))
class_get_size		(float class_get_size(float class))
mcall		(float mcall(float instance, float name))
mget		(float mget(float instance, float name))
mset		(void mset(float instance, float name, float val))
class_instance_constructor		(void class_instance_constructor(float instance, float class))
new		(float new(float class))

included from cyclone\test23.txt:
file cyclone/libs/loader2.txt: 23 funcs
checkProgramHeader		(float checkProgramHeader(float header))
msize		(void msize())
mdump		(void mdump(float dest))
progressive_read		(float progressive_read(float ptr, float size, float fp, float step))
mallocPageAligned		(float mallocPageAligned(float size))
remapProgram		(float remapProgram(float ptr, float programsize))
loadCode		(float loadCode(float programcode, float programsize, float fp))
program_load_old		(float program_load_old(float filename))
program_run_background		(void program_run_background(float args))
program_run		(void program_run(float proginfo,float argc, float argv))
initLoader		(float initLoader())
addToLoadedPrograms		(float addToLoadedPrograms(float ptr))
deleteLoadedProgram		(float deleteLoadedProgram(float name))
getLoadedProgram		(float getLoadedProgram(float name))
initLoaderTypes		(float initLoaderTypes())
proginfoKind_constructor		(float proginfoKind_constructor(float this))
codestoreKind_constructor		(float codestoreKind_constructor(float this))
codestoreKind_readAddr		(float codestoreKind_readAddr(float this, float addr))
codestoreKind_getAddr		(float codestoreKind_getAddr(float this, float ptr))
codestoreKind_setCode		(float codestoreKind_setCode(float this, float newcodeptr))
program_load		(float program_load(float filename))
stringtable_get_by_idx		(float stringtable_get_by_idx(float stable, float idx))
stringtable_get		(float stringtable_get(float stable, float name, float *res, float write_offset))

included from cyclone/libs/loader2.txt:
file cyclone/progs/loader/linker.txt: 3 funcs
linkAllFunc		(void linkAllFunc(float header, float loaded))
linkSymbolTable		(float linkSymbolTable(float symtable))
linkCode		(void linkCode(float ptr, float symtable))

included from cyclone/progs/loader/linker.txt:
file cyclone/generated/func_export_table.txt: 0 funcs

included from cyclone/libs/loader2.txt:
file cyclone/progs/loader/symbol.txt: 2 funcs
printSymbol		(void printSymbol(float sym))
printSymbolTable		(void printSymbolTable(float symtable))

included from cyclone/libs/loader2.txt:
file cyclone/progs/loader/executable.txt: 4 funcs
printProginfo		(void printProginfo(float proginfo))
make_proginfo		(float make_proginfo(float ptr, float name, float entry))
getTableEntry		(float getTableEntry(float table, float entry, float *val))
isPropertyTable		(float isPropertyTable(float table))

included from cyclone/libs/loader2.txt:
file cyclone/defines.txt: 0 funcs

included from cyclone\test23.txt:
file cyclone/libs/libtrace.txt: 9 funcs
getStackTrace		(void getStackTrace(float buff))
printStackTrace		(void printStackTrace(float buff))
findClosestFunc		(float findClosestFunc(float fIP))
getFuncName		(float getFuncName(float fIP))
getVarName		(float getVarName(float vIP))
getSymbolName		(float getSymbolName(float sIP))
findSymbolByName		(float findSymbolByName(float name))
findFuncByName		(float findFuncByName(float name))
findVarByName		(float findVarByName(float name))

included from cyclone\test23.txt:
file cyclone/generated/func_table.txt: 0 funcs

included from cyclone\test23.txt:
file cyclone/libs/libdynamicstruct.txt: 14 funcs
libdynamicstruct_init		(float libdynamicstruct_init())
libdynamicstruct_initCommands		(float libdynamicstruct_initCommands())
libds_test		(float libds_test(float argc, float argv))
fgetfloat		(float fgetfloat(float f))
asslen		(float asslen(float f, float len))
ds_read_definition		(float ds_read_definition(float fileHandle))
ds_get_typeinfo		(float ds_get_typeinfo(float name))
ds_new		(float ds_new(float type))
ds_set		(float ds_set(float dyn, float member, float value))
ds_get		(float ds_get(float dyn, float member))
ds_get_ref		(float ds_get_ref(float dyn, float member))
ds_set_index		(float ds_set_index(float dyn, float index, float value))
ds_push		(float ds_push(float dyn, float member, float value))
ds_print		(float ds_print(float dyn))

included from cyclone/libs/libdynamicstruct.txt:
file cyclone/libs/ds/type_entry.txt: 19 funcs
type_entry_constructor		(void type_entry_constructor(float this))
type_entry_copy_constructor		(void type_entry_copy_constructor(float this, float that))
type_entry_destructor		(void type_entry_destructor(float this))
type_entry_new		(float type_entry_new())
type_entry_delete		(void type_entry_delete(float this))
type_entry_get_name		(float type_entry_get_name(float this))
type_entry_get_type		(float type_entry_get_type(float this))
type_entry_get_isexplicit		(float type_entry_get_isexplicit(float this))
type_entry_get_param1		(float type_entry_get_param1(float this))
type_entry_get_param2		(float type_entry_get_param2(float this))
type_entry_get_param3		(float type_entry_get_param3(float this))
type_entry_get_subentry		(float type_entry_get_subentry(float this))
type_entry_set_name		(void type_entry_set_name(float this, float N))
type_entry_set_type		(void type_entry_set_type(float this, float N))
type_entry_set_isexplicit		(void type_entry_set_isexplicit(float this, float N))
type_entry_set_param1		(void type_entry_set_param1(float this, float N))
type_entry_set_param2		(void type_entry_set_param2(float this, float N))
type_entry_set_param3		(void type_entry_set_param3(float this, float N))
type_entry_set_subentry		(void type_entry_set_subentry(float this, float N))

included from cyclone/libs/libdynamicstruct.txt:
file cyclone/libs/ds/type_info.txt: 14 funcs
sizeof_type_info		(float sizeof_type_info())
type_info_constructor		(void type_info_constructor(float this))
type_info_copy_constructor		(void type_info_copy_constructor(float this, float that))
type_info_destructor		(void type_info_destructor(float this))
type_info_new		(float type_info_new())
type_info_delete		(void type_info_delete(float this))
type_info_get_canary		(float type_info_get_canary(float this))
type_info_get_name		(float type_info_get_name(float this))
type_info_get_type		(float type_info_get_type(float this))
type_info_get_entries		(float type_info_get_entries(float this))
type_info_set_canary		(void type_info_set_canary(float this, float N))
type_info_set_name		(void type_info_set_name(float this, float N))
type_info_set_type		(void type_info_set_type(float this, float N))
type_info_set_entries		(void type_info_set_entries(float this, float N))


546 functions found
boot
nullcall_error
init_hardware
memcpy
memchr
memset
strcat
strncat
strchr
strrchr
strcmp
strncmp
strcpy
strncpy
strlen
strspn
strcspn
strpbrk
strstr
explode
str2num
getNdigit
num2strSet
num2str
Nlog
isPrint
isNum
isAlpha
toLower
toUpper
Con
concat
c2str
unescapeStr
cstr_find_first_of
cstr_find_last_of
stack_copy
cstr_stack_copy
isspace
stralloc
P
Pc
Pn
Pl
P2
Perr
Print
printword
mcs_putchar
cs_putchar
ConsoleShiftUp
ConsoleShiftDown
pow
modulo
sqrt
cbrt
root
e
exp
ln
log2
log10
log
abs
ceil
floor
round
integer
frac
clamp
inrange
minimal
maximal
random
random1
random2
randint1
randint2
pi
toRad
toDeg
sin
cos
tan
cot
sec
csc
asin
acos
atan
sinh
cosh
tanh
coth
sech
csch
sinr
cosr
tanr
cotr
secr
cscr
asinr
acosr
atanr
ceil2
floor2
round2
printf
compileTimeStamp
currentTimeStamp
decodeTimeStamp
monthToString
timeStampToString
PrintStringXY
printCharXY
delaysimple
screen_set
screen_clear
screen_cursor_enable
screen_cursor_disable
screen_set_cursor_pos
screen_set_cursor_pos_xy
screen_force_refresh
screen_set_shift_box_x1
screen_set_shift_box_x2
screen_set_shift_box_y1
screen_set_shift_box_y2
screen_set_shift_box
screen_set_print_box
screen_shift_vertical
screen_shift_horizontal
screen_set_blink_rate
screen_set_cursor_size
mcs_screen_clear
mcs_screen_force_refresh
mcs_init
mcs_screen_shift_vertical
mcs_screen_set_shift_box
mcs_screen_set_cursor_pos_xy
mcs_screen_cursor_enable
mcs_screen_cursor_disable
mcs_set_blink_rate
mcs_set_cursor_size
memcpy2
allocation_constructor
allocation_set_size
allocation_set_owner
allocation_set_prev
allocation_set_next
allocation_get_size
allocation_get_owner
allocation_get_prev
allocation_get_next
malloc_getAllocation
malloc_getDataFromIndex
malloc_getDataFromAllocation
malloc_getIndex
malloc_trySplit
malloc_join
malloc_set_disk
malloc_init
malloc_test
malloc_print_count
malloc_count
printAllocationSimple
printAllocation
mallocLast
zmalloc
zfree
zrealloc
malloc_memcopy
str_alloc
setalloc_init
setallocator
malloc
realloc
free
allocator_new
allocator_constructor
allocator_set_impl
allocator_set_malloc
allocator_set_realloc
allocator_set_free
error
vector_new
vector_constructor
vector_copy_constructor
vector_get_array
vector_get_size
vector_get_capacity
vector_get_element_size
vector_set_array
vector_set_size
vector_set_capacity
vector_set_element_size
vector_destructor
vector_clear
vector_push
vector_pop
vector_size
vector_disk_size
vector_get
vector_set
vector_insert
vector_remove
vector_resize
vector_array
string_constructor
string_destructor
string_c_str
string_clear
string_adds
string_addc
string_addn
string_equals
string_equals_cs
string_length
string_addcs
string_find_first_of
string_find_last_of
string_substr
list_constructor
listnode_constructor
listnode_destructor
list_size
list_size_helper
list_empty
list_clear
list_push
list_push_helper
list_pop
node_selfdestruct
list_pop_helper
list_get
list_get_helper
list_set
list_set_helper
list_insert
list_insert_helper
list_remove
list_remove_helper
list_getnode
list_splice
list_move
list_destructor
setKeyboard
isPrint1
readKey
hasKey
readKB
waitKey
readKeyTimed
readline
assert
assert_type
curticks
curtime
assert_arity
shell
initShellCmds
initLibraries
addShellCmd
autorun
shell_panic
cls
drawStatusBar
drawScrollBar
Console
ParseStringSilent
ParseString
Ps
redraw_all
PrintProgressBar
ParseKey
checkKB
getShellInput
getYN
help
cmdtest
cmdtest2
cmdtest3
cmdtrace
cmdyield
cmdps
printversion
cmdecho
arg_rest
cmdtime
cmd_test4
cmd_test5
test6_reset
test6_print
test6_myalloc
test6_myrealloc
test6_myfree
cmd_test6
derpKind_constructor
derpKind_moo
derpKind_bar
cmd_test7
heap_status
cmd_rpncalc
cmd_cd
cmd_dir
cmd_mkdir
cmd_del
cmd_rn
cmd_write
readword
cmd_read
cmd_info
cmd_hdd
cmd_mount
cmd_format
cmd_gpio
cmd_exec
cmd_dump
progtest
isString
cmd_symbol
cmd_load
cmd_run
package_args
cmd_runbg
cmd_fileview
cmd_memview
memtest_hlp
memtest
check_canary
file_handle_constructor
file_handle_copy_constructor
file_handle_destructor
file_handle_get_canary
file_handle_get_rw_ptr
file_handle_get_imp
file_handle_set_canary
file_handle_set_rw_ptr
file_handle_set_imp
translate_fopen_mode
filepath_legal
filepath_abs
filepath_decimate
filepath_extension
filepath_base
filesystem_init
find_file
find_free
fopen
fwrite
fresize
fread
frename
fgetstring
feof
fsize
fseek
ftell
flist
fdelete
vector_get_linear_size
vector_move
vector_linearize
vector_delinearize
filesystem_get_size
inc_cpy
inc_move
filesystem_move
filesystem_write
str_delinearize
filesystem_read
initPaging
setPageTable
getPage
setPageFlags
getPageFlags
setPageRunLevel
getPageRunlevel
setPageMapping
getPageMapping
reportPage
toPage
copyPage
mapPage
setMemoryRunlevel
setMemoryMapping
pagingEnable
pagingDisable
sizeof_thread
thread_constructor
thread_copy_constructor
thread_destructor
thread_new
thread_delete
thread_get_canary
thread_get_entry
thread_get_args
thread_get_time
thread_get_ip
thread_get_stack
thread_get_regs
thread_set_canary
thread_set_entry
thread_set_args
thread_set_time
thread_set_ip
thread_set_stack
thread_set_regs
initThreads
regs_set_to_entry
thread_run
thread_enter
multitask_test
thread_yield
print_threads
thread_exit_func
thread_create
delay
initInterrupts
addInterruptHandler
defaultIntHandler
stopIntHandler
errIntHandler
extendedModeEnable
extendedModeDisable
interruptsEnable
interruptsDisable
intnum_to_str
record_new
record_constructor
record_destructor
record_shrink
record_push
record_push_array
record_pop
record_pop_array
record_get_array
record_get
record_set
record_set_array
record_insert
record_insert_array
record_remove
record_remove_array
record_length
class_new
class_constructor
class_add_member
class_add_method
class_get_size
mcall
mget
mset
class_instance_constructor
new
linkAllFunc
linkSymbolTable
linkCode
printSymbol
printSymbolTable
printProginfo
make_proginfo
getTableEntry
isPropertyTable
checkProgramHeader
msize
mdump
progressive_read
mallocPageAligned
remapProgram
loadCode
program_load_old
program_run_background
program_run
initLoader
addToLoadedPrograms
deleteLoadedProgram
getLoadedProgram
initLoaderTypes
proginfoKind_constructor
codestoreKind_constructor
codestoreKind_readAddr
codestoreKind_getAddr
codestoreKind_setCode
program_load
stringtable_get_by_idx
stringtable_get
getStackTrace
printStackTrace
findClosestFunc
getFuncName
getVarName
getSymbolName
findSymbolByName
findFuncByName
findVarByName
type_entry_constructor
type_entry_copy_constructor
type_entry_destructor
type_entry_new
type_entry_delete
type_entry_get_name
type_entry_get_type
type_entry_get_isexplicit
type_entry_get_param1
type_entry_get_param2
type_entry_get_param3
type_entry_get_subentry
type_entry_set_name
type_entry_set_type
type_entry_set_isexplicit
type_entry_set_param1
type_entry_set_param2
type_entry_set_param3
type_entry_set_subentry
sizeof_type_info
type_info_constructor
type_info_copy_constructor
type_info_destructor
type_info_new
type_info_delete
type_info_get_canary
type_info_get_name
type_info_get_type
type_info_get_entries
type_info_set_canary
type_info_set_name
type_info_set_type
type_info_set_entries
libdynamicstruct_init
libdynamicstruct_initCommands
libds_test
fgetfloat
asslen
ds_read_definition
ds_get_typeinfo
ds_new
ds_set
ds_get
ds_get_ref
ds_set_index
ds_push
ds_print
main
setupInterrupts
memtest2



85 vars found:
size
AdrEB
AdrRAM
AdrKb
AdrHDD
AdrPort
OSversion
num_screens_x
num_screens_y
Nbase
Nprec
printScrX
printScrY
printBuffX
printBuffY
printLineOffset
printSpecials
RedrawPending
screen_print_x_min
screen_print_y_min
screen_print_x_max
screen_print_y_max
AdrScreen
mcs_width
mcs_height
mcs_last_x
mcs_last_y
cs_width
cs_height
cs_last_x
cs_last_y
malloc_debug
malloc_print
malloc_num2str
malloc_disk
malloc_max_disk
malloc_header
malloc_user
lastFreeAllocation
malloc_debug_iters
curAllocator
defaultAllocator
sizeof_allocator
sizeof_vector
sizeof_listnode
sizeof_list
ptrKB
readKeyTimed_delay_time
readKeyTimed_repeat_time
readKeyTimed_keyState
readKeyTimed_lastSeen
readKeyTimed_lastKey
sizeof_shellCmd
CommandList
checksum_prev_first
checksum_previous
crc_prev_first
crc_previous
shell_panic_ebp
shell_panic_esp
R
Echo
Arr
PKSI
listeningToInput
numModules
MinStrI
sizeof_file_handle
current_path
files
filenames
threadpool
cur_thread
thread_stack_size
numInts
sizeof_class
sizeof_exe
sizeof_section
sizeof_symbol
loadedProgs
sizeof_proginfo
proginfoKind
codestoreKind
sizeof_type_entry
v_ds_typeinfos


176 defined symbols:
CYCLONE_BUILDER
_65kb
_128kb
size_EB
size_keyboard
size_console
size_RAM
size_HDD
size_port
programslot_size
T_VECTOR
T_STRING
T_EXE
T_SECTION
T_SYMBOL
T_PROGINFO
T_FILE_EXE
T_TYPEINFO
T_TYPEINFO_MEMBER
T_VTABLE
P_FE_PROGRAMSIZE
P_FE_CODEBASE
P_FE_FILEBASE
P_FE_EXE_STYLE
P_FE_LINK_STYLE
P_FE_CODESTART
P_FE_REFTABLE_START
P_FE_REFTABLE_END
EXE_STYLE_FLAT
EXE_STYLE_ALCOR
EXE_STYLE_ALLFUNC
EXE_STYLE_SYMBOL
IS_POSITION_DEPENDENT
IS_POSITION_INDEPENDENT
LINK_STYLE_NONE
LINK_STATIC_REQUESTED
LINK_DYNAMIC_REQUESTED
LINK_REFTABLE_REQUESTED
HAS_NO_STATIC_LINKS
HAS_STATIC_LINKS
VT_CONSTRUCTOR
VT_DESTRUCTOR
VT_SERIALIZE
VT_DESERIALIZE
VT_NEW
VT_HERE
VT_GET
VT_SET
VT_PUSH
VT_POP
VT_INSERT
VT_REMOVE
VT_CLEAR
VT_OPEN
VT_CLOSE
VT_SEEK
VT_CALL
VT_RESIZE
LIBSTRING_GUARD
ZCRT_STRING
NULL
memmove
memcmp
VARIADIC_GUARD
CONSOLE_BUFFER_SIZE
LIBNUMBER_GUARD
PRINTF_GUARD
TIMESTAMP_GUARD
LIBCONSOLESCREEN_GUARD
STACKALLOC_GUARD
ZMALLOC_GUARD
ZVECTOR_GUARD
ZSTRING_GUARD
ZLIST_GUARD
STRINGTRACKER_TEST
LIBKEYBOARD_GUARD
KEY_TAB
KEY_ENTER
KEY_UP
KEY_DOWN
KEY_LEFT
KEY_RIGHT
KEY_BACKSPACE
KEY_INSERT
KEY_DELETE
KEY_HOME
KEY_END
KEY_PAGE_UP
KEY_PAGE_DOWN
KEY_SHIFT
KEY_CTRL
SHELL_GUARD
LIBUTIL_GUARD
file_handle_GUARD
CANARY_GUARD
page_disabled
page_remapped
page_trap
page_override
page_reserved
page_no_read
page_no_write
page_no_exec
LIBTHREAD_GUARD
thread_GUARD
int_set_cmpr
int_dont_set_cs
int_enabled
int_external
int_NewPTE
int_NewPTE2
int_extra_regs
LIB_RECORD_GUARD
T_VECTOR
T_STRING
T_EXE
T_SECTION
T_SYMBOL
T_PROGINFO
T_FILE_EXE
T_TYPEINFO
T_TYPEINFO_MEMBER
T_VTABLE
P_FE_PROGRAMSIZE
P_FE_CODEBASE
P_FE_FILEBASE
P_FE_EXE_STYLE
P_FE_LINK_STYLE
P_FE_CODESTART
P_FE_REFTABLE_START
P_FE_REFTABLE_END
EXE_STYLE_FLAT
EXE_STYLE_ALCOR
EXE_STYLE_ALLFUNC
EXE_STYLE_SYMBOL
IS_POSITION_DEPENDENT
IS_POSITION_INDEPENDENT
LINK_STYLE_NONE
LINK_STATIC_REQUESTED
LINK_DYNAMIC_REQUESTED
LINK_REFTABLE_REQUESTED
HAS_NO_STATIC_LINKS
HAS_STATIC_LINKS
VT_CONSTRUCTOR
VT_DESTRUCTOR
VT_SERIALIZE
VT_DESERIALIZE
VT_NEW
VT_HERE
VT_GET
VT_SET
VT_PUSH
VT_POP
VT_INSERT
VT_REMOVE
VT_CLEAR
VT_OPEN
VT_CLOSE
VT_SEEK
VT_CALL
VT_RESIZE
type_entry_GUARD
type_info_GUARD
TE_ERROR
TE_FLOAT
TE_STRING
TE_CHAR
TE_CS
TE_DS
TE_ARRAY
TE_PTR
TE_ADDR
TE_VARIANT
TE_SUBVARIANT
TE_UNION
TE_RECORD
func_table written
func_export_table written
func_import_table written
reference_table written
execution took 0 min 10 s.
done
