//#define ptrScreen 65536 or similar in master program
#ifndef LIBCONSOLESCREEN_GUARD
#define LIBCONSOLESCREEN_GUARD

float cs_last_x = 29;
float cs_last_y = 17;

float printScrX = 0;
float printScrY = 0;
void setPrintCursor(float x, float y){printScrX = x; printScrY = y;}

void Print(char str, float col0)
{
    float nargs = ecx;
    float col = 999;
    if(nargs == 2){col = col0;}

    float C = str[0];
    float I = 1;
    //float xspan = 60*num_screens_x;
    float buffAddr = 0;
    float ch = 0;
    while(C!=0)
    {
        //if((printPtrY*xspan+printPtrX*2)>CONSOLE_BUFFER_SIZE-1){
        //if((printPtrY*xspan+printPtrX*2)>CONSOLE_BUFFER_SIZE-1){
        //if((printPtrY*xspan+printPtrX*2)>CONSOLE_BUFFER_SIZE-1){
        //    memcpy(ConsoleStrBuff, ConsoleStrBuff+xspan, CONSOLE_BUFFER_SIZE-60);
        //    memset(ConsoleStrBuff+CONSOLE_BUFFER_SIZE-xspan,0,60);
        //    PrintPtrY--;
        //}
        //if(printScrY == (19*num_screens_y-2)){ConsoleShiftUp();}
        if(printScrY > cs_last_y){ConsoleShiftUp();}
        if((C=='\n')) // \n means newline
        {
            //if(printSpecials){
            //    ConsoleStrBuff[printPtrY*xspan+printPtrX*2] = C;
            //    ConsoleStrBuff[printPtrY*xspan+printPtrX*2+1] = col;
            //    mcs_putchar(C,col,printPtrX,printScrY);
            //}
            goto print_nextline;
        }
        else if((C=='\r')) // \r means carriage return (go to beginning of current line)
        {
            //printPtrX = 0; 
            printScrX = 0;
            //printBuffX = 0;
        }
        else if((C=='\b')) // \b means line return (go to beginning of previous line)
        {
            //printPtrY--;
            //printScrY--;
            //printPtrX = 0;
            printScrY--;
            //printBuffY--;
            printScrX = 0;
            //printBuffX = 0;
        }
        else if((C=='\f')) // \f means fill (print spaces for the rest of the line)
        {
            //while(printPtrX < (30*num_screens_x-2)){
            //    ConsoleStrBuff[printPtrY*xspan+printPtrX*2] = ' ';
           //     ConsoleStrBuff[printPtrY*xspan+printPtrX*2+1] = col;
           //     mcs_putchar(C,col,printPtrX,printScrY);
           //     printPtrX++
           // }
            while(printScrX <= cs_last_x){
                //buffAddr = printBuffY*mcs_width+printBuffX;
                ch = ' ';
                //ConsoleStrBuff[2*buffAddr] = ch;
                //ConsoleStrBuff[2*buffAddr+1]=col;
                //mcs_putchar(ch,col,printScrX,printScrY);
                PrintCharXY(printScrX,printScrY,ch,col);
                printScrX++;
                //printBuffX++;
            }
        }
        else
        {
            //buffAddr = printBuffY*mcs_width+printBuffX;
            //ConsoleStrBuff[printPtrY*xspan+printPtrX*2] = C;
            //ConsoleStrBuff[printPtrY*xspan+printPtrX*2+1] = col;
           // ConsoleStrBuff[2*buffAddr] = C;
            //ConsoleStrBuff[2*buffAddr+1] = col;
            //mcs_putchar(C,col,printScrX,printScrY);
            PrintCharXY(PrintScrX, PrintScrY,C,col);
            printScrX++
          //  printBuffX++;
        }
       
        //if(printPtrX>(30*num_screens_x-2))
        //{
        //    print_nextline:
        //    printPtrX = 0;
        //    printPtrY++;
        //    printScrY++;
        //}
        
        if(printScrX > cs_last_x){//(mcs_last_x-1)){
            print_nextline:
            printScrX = 0;
            //printBuffX = 0;
            printScrY++;
            //printBuffY++;
            
            //if((printBuffY+1) > CONSOLE_BUFFER_SIZE/(2*mcs_width)){
            //    printBuffY--;
            //    printLineOffset--;
                //float dest = ConsoleStrBuff;
                //float src = ConsoleStrBuff+2*mcs_width;
                //float size = CONSOLE_BUFFER_SIZE-2*mcs_width;
                //memmove(dest,src,size);
                //dest += size;
                //memset(dest,0,2*mcs_width);
            //}
        }
        C= str[I++];
    }
}



void PrintChar(float C, float col){
    //testBoot(); //1th
    printCharXY(printScrX, printScrY, c, col);
    //testBoot(); //2th
    printScrX++; //somehow this gets compiled to (*5)++;
    //testBoot(); //9th
    if(printScrX > cs_last_x){
        printScrX = 0;
        printScrY++;
        if(printScrY >= cs_last_y){
            //PrintCursorY = 0;
            ConsoleShiftUp();
        }
    }
}

void PrintStringXY(float x, float y, char str, float col)
{
    float P = (y*30+x)*2;
    float I = 0;
    float C = str[I++];
    while(C)
    {
        AdrScreen[P++] = C;
        AdrScreen[P++] = col;
        C = str[I++];
    }
}
// prints single character to screen coords.
void printCharXY(float X, float Y, char C, float col){
    float P = AdrScreen+2*(X+Y*30);
    *P++ = C;
    *P = col;
}



float AdrScreen;
void screen_set(float scr){AdrScreen = scr;}
void screen_clear(){AdrScreen[2041] = 1;}
void screen_cursor_enable(){AdrScreen[2046] = 1;}
void screen_cursor_disable(){AdrScreen[2046] = 0;}
void screen_set_cursor_pos(float I){AdrScreen[2045] = 2*I;}
void screen_set_cursor_pos_xy(float x, float y){AdrScreen[2045] = 2*(30*y+x);}
void screen_force_refresh(){AdrScreen[2020]=1;delay(1);} //AdrScreen[2020]=1;
void screen_set_shift_box_x1(float n){AdrScreen[2031]=n;} //AdrScreen[2031]=0;
void screen_set_shift_box_x2(float n){AdrScreen[2032]=n;} //AdrScreen[2032]=28;
void screen_set_shift_box_y1(float n){AdrScreen[2033]=n;} //AdrScreen[2033]=0;
void screen_set_shift_box_y2(float n){AdrScreen[2034]=n;} //AdrScreen[2034]=16;
void screen_set_shift_box(float x1, float x2, float y1, float y2){
    AdrScreen[2031] = x1;
    AdrScreen[2032] = x2;
    AdrScreen[2033] = y1;
    AdrScreen[2034] = y2;
}
float screen_print_x_min = 0;
float screen_print_y_min = 0;
float screen_print_x_max = 0;
float screen_print_y_max = 0;
void screen_set_print_box(float x1, float y1, float x2, float y2){
    screen_print_x_min = x1;
    screen_print_y_min = y1;
    screen_print_x_max = x2;
    screen_print_y_max = y2;
}
void screen_shift_vertical(float n){AdrScreen[2038]=n;}
void screen_shift_horizontal(float n){AdrScreen[2037]=n;}


void ConsoleShiftUp()
{
    //you press down key, text goes up
    if(printScrY >= cs_last_y){
        screen_shift_vertical(1);
        printScrY--;
    }
}

float UserScrX = 0;
float UserScrY = 0;
float UserScrScroll = 1;
float UserScrCol = 999;
float UserSetCursorXY(float X, float Y){UserScrX = X; UserScrY = Y;}
float UserPrintChar(float C){
    if(C == '\n'){
        
    }else{
        UserPrintCharXY(UserScrX, UserScrY, C, UserScrCol);
        UserScrX++;
    }
    if((C == '\n') || (UserScrX > cs_last_x)){
        UserScrX = 0;
        UserScrY++;
        if(UserScrY > cs_last_y){
            if(UserScrScroll){
                screen_set(EB_Addr_User_screen);
                screen_shift_vertical(1);
                screen_set(ADDR_SCR);
                UserScrY--;
            }else{
                UserScrY = 0;
            }
        }
    }    
}

float UserPrintStr(float S){
    while(*S){
        UserPrintChar(*S++);
    }
}

float UserPrintCharXY(float X, float Y, float C, float col){
    screen_set(EB_Addr_User_screen);
    PrintCharXY(X,Y,C,col);
    screen_set(ADDR_SCR);
}

float UserScreenClear(){
    screen_set(EB_Addr_User_screen);
    screen_clear();
    screen_set(ADDR_SCR);
}





#endif
